
CommandCenter_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e0  08003ce8  08003ce8  00013ce8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c8  080046c8  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d0  080046d0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080046d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c94  20000008  080046e0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c9c  080046e0  00020c9c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e83  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003942  00000000  00000000  00032eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008f11  00000000  00000000  000367f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c50  00000000  00000000  0003f708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000f88  00000000  00000000  00040358  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001483d  00000000  00000000  000412e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000e3ad  00000000  00000000  00055b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00075e8f  00000000  00000000  00063eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d9d59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002304  00000000  00000000  000d9dd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003cd0 	.word	0x08003cd0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08003cd0 	.word	0x08003cd0

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__udivmoddi4>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	464f      	mov	r7, r9
 8000278:	4646      	mov	r6, r8
 800027a:	46d6      	mov	lr, sl
 800027c:	b5c0      	push	{r6, r7, lr}
 800027e:	0004      	movs	r4, r0
 8000280:	b082      	sub	sp, #8
 8000282:	000d      	movs	r5, r1
 8000284:	4691      	mov	r9, r2
 8000286:	4698      	mov	r8, r3
 8000288:	428b      	cmp	r3, r1
 800028a:	d82f      	bhi.n	80002ec <__udivmoddi4+0x78>
 800028c:	d02c      	beq.n	80002e8 <__udivmoddi4+0x74>
 800028e:	4641      	mov	r1, r8
 8000290:	4648      	mov	r0, r9
 8000292:	f000 f8b1 	bl	80003f8 <__clzdi2>
 8000296:	0029      	movs	r1, r5
 8000298:	0006      	movs	r6, r0
 800029a:	0020      	movs	r0, r4
 800029c:	f000 f8ac 	bl	80003f8 <__clzdi2>
 80002a0:	1a33      	subs	r3, r6, r0
 80002a2:	469c      	mov	ip, r3
 80002a4:	3b20      	subs	r3, #32
 80002a6:	469a      	mov	sl, r3
 80002a8:	d500      	bpl.n	80002ac <__udivmoddi4+0x38>
 80002aa:	e076      	b.n	800039a <__udivmoddi4+0x126>
 80002ac:	464b      	mov	r3, r9
 80002ae:	4652      	mov	r2, sl
 80002b0:	4093      	lsls	r3, r2
 80002b2:	001f      	movs	r7, r3
 80002b4:	464b      	mov	r3, r9
 80002b6:	4662      	mov	r2, ip
 80002b8:	4093      	lsls	r3, r2
 80002ba:	001e      	movs	r6, r3
 80002bc:	42af      	cmp	r7, r5
 80002be:	d828      	bhi.n	8000312 <__udivmoddi4+0x9e>
 80002c0:	d025      	beq.n	800030e <__udivmoddi4+0x9a>
 80002c2:	4653      	mov	r3, sl
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5a>
 80002cc:	e07b      	b.n	80003c6 <__udivmoddi4+0x152>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	4652      	mov	r2, sl
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4662      	mov	r2, ip
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e018      	b.n	800031a <__udivmoddi4+0xa6>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9d0      	bls.n	800028e <__udivmoddi4+0x1a>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8a>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b002      	add	sp, #8
 8000304:	bc1c      	pop	{r2, r3, r4}
 8000306:	4690      	mov	r8, r2
 8000308:	4699      	mov	r9, r3
 800030a:	46a2      	mov	sl, r4
 800030c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800030e:	42a3      	cmp	r3, r4
 8000310:	d9d7      	bls.n	80002c2 <__udivmoddi4+0x4e>
 8000312:	2200      	movs	r2, #0
 8000314:	2300      	movs	r3, #0
 8000316:	9200      	str	r2, [sp, #0]
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	4663      	mov	r3, ip
 800031c:	2b00      	cmp	r3, #0
 800031e:	d0e9      	beq.n	80002f4 <__udivmoddi4+0x80>
 8000320:	07fb      	lsls	r3, r7, #31
 8000322:	4698      	mov	r8, r3
 8000324:	4641      	mov	r1, r8
 8000326:	0872      	lsrs	r2, r6, #1
 8000328:	430a      	orrs	r2, r1
 800032a:	087b      	lsrs	r3, r7, #1
 800032c:	4666      	mov	r6, ip
 800032e:	e00e      	b.n	800034e <__udivmoddi4+0xda>
 8000330:	42ab      	cmp	r3, r5
 8000332:	d101      	bne.n	8000338 <__udivmoddi4+0xc4>
 8000334:	42a2      	cmp	r2, r4
 8000336:	d80c      	bhi.n	8000352 <__udivmoddi4+0xde>
 8000338:	1aa4      	subs	r4, r4, r2
 800033a:	419d      	sbcs	r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	1924      	adds	r4, r4, r4
 8000340:	416d      	adcs	r5, r5
 8000342:	2100      	movs	r1, #0
 8000344:	3e01      	subs	r6, #1
 8000346:	1824      	adds	r4, r4, r0
 8000348:	414d      	adcs	r5, r1
 800034a:	2e00      	cmp	r6, #0
 800034c:	d006      	beq.n	800035c <__udivmoddi4+0xe8>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d9ee      	bls.n	8000330 <__udivmoddi4+0xbc>
 8000352:	3e01      	subs	r6, #1
 8000354:	1924      	adds	r4, r4, r4
 8000356:	416d      	adcs	r5, r5
 8000358:	2e00      	cmp	r6, #0
 800035a:	d1f8      	bne.n	800034e <__udivmoddi4+0xda>
 800035c:	9800      	ldr	r0, [sp, #0]
 800035e:	9901      	ldr	r1, [sp, #4]
 8000360:	4653      	mov	r3, sl
 8000362:	1900      	adds	r0, r0, r4
 8000364:	4169      	adcs	r1, r5
 8000366:	2b00      	cmp	r3, #0
 8000368:	db23      	blt.n	80003b2 <__udivmoddi4+0x13e>
 800036a:	002b      	movs	r3, r5
 800036c:	4652      	mov	r2, sl
 800036e:	40d3      	lsrs	r3, r2
 8000370:	002a      	movs	r2, r5
 8000372:	4664      	mov	r4, ip
 8000374:	40e2      	lsrs	r2, r4
 8000376:	001c      	movs	r4, r3
 8000378:	4653      	mov	r3, sl
 800037a:	0015      	movs	r5, r2
 800037c:	2b00      	cmp	r3, #0
 800037e:	db2d      	blt.n	80003dc <__udivmoddi4+0x168>
 8000380:	0026      	movs	r6, r4
 8000382:	4657      	mov	r7, sl
 8000384:	40be      	lsls	r6, r7
 8000386:	0033      	movs	r3, r6
 8000388:	0026      	movs	r6, r4
 800038a:	4667      	mov	r7, ip
 800038c:	40be      	lsls	r6, r7
 800038e:	0032      	movs	r2, r6
 8000390:	1a80      	subs	r0, r0, r2
 8000392:	4199      	sbcs	r1, r3
 8000394:	9000      	str	r0, [sp, #0]
 8000396:	9101      	str	r1, [sp, #4]
 8000398:	e7ac      	b.n	80002f4 <__udivmoddi4+0x80>
 800039a:	4662      	mov	r2, ip
 800039c:	2320      	movs	r3, #32
 800039e:	1a9b      	subs	r3, r3, r2
 80003a0:	464a      	mov	r2, r9
 80003a2:	40da      	lsrs	r2, r3
 80003a4:	4661      	mov	r1, ip
 80003a6:	0013      	movs	r3, r2
 80003a8:	4642      	mov	r2, r8
 80003aa:	408a      	lsls	r2, r1
 80003ac:	0017      	movs	r7, r2
 80003ae:	431f      	orrs	r7, r3
 80003b0:	e780      	b.n	80002b4 <__udivmoddi4+0x40>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	1a9b      	subs	r3, r3, r2
 80003b8:	002a      	movs	r2, r5
 80003ba:	4666      	mov	r6, ip
 80003bc:	409a      	lsls	r2, r3
 80003be:	0023      	movs	r3, r4
 80003c0:	40f3      	lsrs	r3, r6
 80003c2:	4313      	orrs	r3, r2
 80003c4:	e7d4      	b.n	8000370 <__udivmoddi4+0xfc>
 80003c6:	4662      	mov	r2, ip
 80003c8:	2320      	movs	r3, #32
 80003ca:	2100      	movs	r1, #0
 80003cc:	1a9b      	subs	r3, r3, r2
 80003ce:	2200      	movs	r2, #0
 80003d0:	9100      	str	r1, [sp, #0]
 80003d2:	9201      	str	r2, [sp, #4]
 80003d4:	2201      	movs	r2, #1
 80003d6:	40da      	lsrs	r2, r3
 80003d8:	9201      	str	r2, [sp, #4]
 80003da:	e780      	b.n	80002de <__udivmoddi4+0x6a>
 80003dc:	2320      	movs	r3, #32
 80003de:	4662      	mov	r2, ip
 80003e0:	0026      	movs	r6, r4
 80003e2:	1a9b      	subs	r3, r3, r2
 80003e4:	40de      	lsrs	r6, r3
 80003e6:	002f      	movs	r7, r5
 80003e8:	46b0      	mov	r8, r6
 80003ea:	4666      	mov	r6, ip
 80003ec:	40b7      	lsls	r7, r6
 80003ee:	4646      	mov	r6, r8
 80003f0:	003b      	movs	r3, r7
 80003f2:	4333      	orrs	r3, r6
 80003f4:	e7c8      	b.n	8000388 <__udivmoddi4+0x114>
 80003f6:	46c0      	nop			; (mov r8, r8)

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	1c08      	adds	r0, r1, #0
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	; (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800044c:	21fa      	movs	r1, #250	; 0xfa
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <HAL_InitTick+0x2c>)
{
 8000450:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000452:	0089      	lsls	r1, r1, #2
{
 8000454:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000456:	6818      	ldr	r0, [r3, #0]
 8000458:	f7ff fe60 	bl	800011c <__udivsi3>
 800045c:	f000 f874 	bl	8000548 <HAL_SYSTICK_Config>
 8000460:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000462:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000464:	2c00      	cmp	r4, #0
 8000466:	d105      	bne.n	8000474 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000468:	3802      	subs	r0, #2
 800046a:	0022      	movs	r2, r4
 800046c:	0029      	movs	r1, r5
 800046e:	f000 f837 	bl	80004e0 <HAL_NVIC_SetPriority>
 8000472:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	20000004 	.word	0x20000004

0800047c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800047c:	2340      	movs	r3, #64	; 0x40
 800047e:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <HAL_Init+0x24>)
{
 8000480:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000482:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000484:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000486:	430b      	orrs	r3, r1
 8000488:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800048a:	f7ff ffdf 	bl	800044c <HAL_InitTick>
 800048e:	1e04      	subs	r4, r0, #0
 8000490:	d103      	bne.n	800049a <HAL_Init+0x1e>
    HAL_MspInit();
 8000492:	f003 fa71 	bl	8003978 <HAL_MspInit>
}
 8000496:	0020      	movs	r0, r4
 8000498:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800049a:	2401      	movs	r4, #1
 800049c:	e7fb      	b.n	8000496 <HAL_Init+0x1a>
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	40022000 	.word	0x40022000

080004a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004a4:	4a02      	ldr	r2, [pc, #8]	; (80004b0 <HAL_IncTick+0xc>)
 80004a6:	6813      	ldr	r3, [r2, #0]
 80004a8:	3301      	adds	r3, #1
 80004aa:	6013      	str	r3, [r2, #0]
}
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	20000230 	.word	0x20000230

080004b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004b4:	4b01      	ldr	r3, [pc, #4]	; (80004bc <HAL_GetTick+0x8>)
 80004b6:	6818      	ldr	r0, [r3, #0]
}
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	20000230 	.word	0x20000230

080004c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004c4:	f7ff fff6 	bl	80004b4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 80004c8:	1c63      	adds	r3, r4, #1
 80004ca:	1e5a      	subs	r2, r3, #1
 80004cc:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 80004ce:	0005      	movs	r5, r0
    wait++;
 80004d0:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80004d2:	f7ff ffef 	bl	80004b4 <HAL_GetTick>
 80004d6:	1b40      	subs	r0, r0, r5
 80004d8:	42a0      	cmp	r0, r4
 80004da:	d3fa      	bcc.n	80004d2 <HAL_Delay+0x12>
  {
  }
}
 80004dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080004e0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	25ff      	movs	r5, #255	; 0xff
 80004e4:	2403      	movs	r4, #3
 80004e6:	002a      	movs	r2, r5
 80004e8:	b2c3      	uxtb	r3, r0
 80004ea:	401c      	ands	r4, r3
 80004ec:	00e4      	lsls	r4, r4, #3
 80004ee:	40a2      	lsls	r2, r4
 80004f0:	0189      	lsls	r1, r1, #6
 80004f2:	4029      	ands	r1, r5
 80004f4:	43d2      	mvns	r2, r2
 80004f6:	40a1      	lsls	r1, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004f8:	2800      	cmp	r0, #0
 80004fa:	da0b      	bge.n	8000514 <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004fc:	200f      	movs	r0, #15
 80004fe:	4003      	ands	r3, r0
 8000500:	3b08      	subs	r3, #8
 8000502:	480a      	ldr	r0, [pc, #40]	; (800052c <HAL_NVIC_SetPriority+0x4c>)
 8000504:	089b      	lsrs	r3, r3, #2
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	181b      	adds	r3, r3, r0
 800050a:	69d8      	ldr	r0, [r3, #28]
 800050c:	4002      	ands	r2, r0
 800050e:	4311      	orrs	r1, r2
 8000510:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <HAL_NVIC_SetPriority+0x50>)
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000516:	0880      	lsrs	r0, r0, #2
 8000518:	0080      	lsls	r0, r0, #2
 800051a:	18c0      	adds	r0, r0, r3
 800051c:	23c0      	movs	r3, #192	; 0xc0
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	58c4      	ldr	r4, [r0, r3]
 8000522:	4022      	ands	r2, r4
 8000524:	4311      	orrs	r1, r2
 8000526:	50c1      	str	r1, [r0, r3]
 8000528:	e7f3      	b.n	8000512 <HAL_NVIC_SetPriority+0x32>
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	e000ed00 	.word	0xe000ed00
 8000530:	e000e100 	.word	0xe000e100

08000534 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000534:	231f      	movs	r3, #31
 8000536:	4018      	ands	r0, r3
 8000538:	3b1e      	subs	r3, #30
 800053a:	4083      	lsls	r3, r0
 800053c:	4a01      	ldr	r2, [pc, #4]	; (8000544 <HAL_NVIC_EnableIRQ+0x10>)
 800053e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000540:	4770      	bx	lr
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	e000e100 	.word	0xe000e100

08000548 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000548:	4a09      	ldr	r2, [pc, #36]	; (8000570 <HAL_SYSTICK_Config+0x28>)
 800054a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800054c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800054e:	4293      	cmp	r3, r2
 8000550:	d80d      	bhi.n	800056e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000552:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000554:	4a07      	ldr	r2, [pc, #28]	; (8000574 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000556:	4808      	ldr	r0, [pc, #32]	; (8000578 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000558:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800055a:	6a03      	ldr	r3, [r0, #32]
 800055c:	0609      	lsls	r1, r1, #24
 800055e:	021b      	lsls	r3, r3, #8
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	430b      	orrs	r3, r1
 8000564:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000566:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000568:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800056a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800056c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800056e:	4770      	bx	lr
 8000570:	00ffffff 	.word	0x00ffffff
 8000574:	e000e010 	.word	0xe000e010
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800057e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000580:	2804      	cmp	r0, #4
 8000582:	d102      	bne.n	800058a <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000584:	4310      	orrs	r0, r2
 8000586:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000588:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800058a:	2104      	movs	r1, #4
 800058c:	438a      	bics	r2, r1
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	e7fa      	b.n	8000588 <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	e000e010 	.word	0xe000e010

08000598 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000598:	4770      	bx	lr

0800059a <HAL_SYSTICK_IRQHandler>:
{
 800059a:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800059c:	f7ff fffc 	bl	8000598 <HAL_SYSTICK_Callback>
}
 80005a0:	bd10      	pop	{r4, pc}
	...

080005a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a6:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80005a8:	2001      	movs	r0, #1
  if(hdma == NULL)
 80005aa:	2c00      	cmp	r4, #0
 80005ac:	d035      	beq.n	800061a <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80005ae:	6825      	ldr	r5, [r4, #0]
 80005b0:	4b1a      	ldr	r3, [pc, #104]	; (800061c <HAL_DMA_Init+0x78>)
 80005b2:	2114      	movs	r1, #20
 80005b4:	18e8      	adds	r0, r5, r3
 80005b6:	f7ff fdb1 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80005bc:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 80005be:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80005c0:	2302      	movs	r3, #2
 80005c2:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80005c4:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 80005c6:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80005c8:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80005cc:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80005ce:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 80005d0:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80005d2:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 80005d4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80005d6:	433b      	orrs	r3, r7
 80005d8:	6967      	ldr	r7, [r4, #20]
 80005da:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80005dc:	69a7      	ldr	r7, [r4, #24]
 80005de:	433b      	orrs	r3, r7
 80005e0:	69e7      	ldr	r7, [r4, #28]
 80005e2:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80005e4:	6a27      	ldr	r7, [r4, #32]
 80005e6:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80005e8:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80005ea:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	01db      	lsls	r3, r3, #7
 80005f0:	4299      	cmp	r1, r3
 80005f2:	d00c      	beq.n	800060e <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80005f4:	251c      	movs	r5, #28
 80005f6:	4028      	ands	r0, r5
 80005f8:	3d0d      	subs	r5, #13
 80005fa:	4085      	lsls	r5, r0
 80005fc:	490a      	ldr	r1, [pc, #40]	; (8000628 <HAL_DMA_Init+0x84>)
 80005fe:	680b      	ldr	r3, [r1, #0]
 8000600:	43ab      	bics	r3, r5
 8000602:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000604:	6863      	ldr	r3, [r4, #4]
 8000606:	680d      	ldr	r5, [r1, #0]
 8000608:	4083      	lsls	r3, r0
 800060a:	432b      	orrs	r3, r5
 800060c:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800060e:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000610:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000612:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000614:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8000616:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8000618:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800061a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800061c:	bffdfff8 	.word	0xbffdfff8
 8000620:	40020000 	.word	0x40020000
 8000624:	ffff800f 	.word	0xffff800f
 8000628:	400200a8 	.word	0x400200a8

0800062c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800062c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800062e:	1d44      	adds	r4, r0, #5
 8000630:	7fe6      	ldrb	r6, [r4, #31]
{
 8000632:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 8000634:	2002      	movs	r0, #2
 8000636:	2e01      	cmp	r6, #1
 8000638:	d02b      	beq.n	8000692 <HAL_DMA_Start_IT+0x66>
 800063a:	3801      	subs	r0, #1
 800063c:	77e0      	strb	r0, [r4, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 800063e:	1da8      	adds	r0, r5, #6
 8000640:	7fc6      	ldrb	r6, [r0, #31]
 8000642:	4684      	mov	ip, r0
 8000644:	b2f6      	uxtb	r6, r6
 8000646:	2002      	movs	r0, #2
 8000648:	2700      	movs	r7, #0
 800064a:	2e01      	cmp	r6, #1
 800064c:	d12c      	bne.n	80006a8 <HAL_DMA_Start_IT+0x7c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800064e:	4664      	mov	r4, ip
 8000650:	77e0      	strb	r0, [r4, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000652:	682c      	ldr	r4, [r5, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000654:	63ef      	str	r7, [r5, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000656:	6820      	ldr	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000658:	371c      	adds	r7, #28
    __HAL_DMA_DISABLE(hdma);
 800065a:	43b0      	bics	r0, r6
 800065c:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800065e:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8000660:	9001      	str	r0, [sp, #4]
 8000662:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8000664:	4007      	ands	r7, r0
 8000666:	40be      	lsls	r6, r7
 8000668:	9801      	ldr	r0, [sp, #4]
 800066a:	6046      	str	r6, [r0, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800066c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800066e:	68ab      	ldr	r3, [r5, #8]
 8000670:	6828      	ldr	r0, [r5, #0]
 8000672:	2b10      	cmp	r3, #16
 8000674:	d10e      	bne.n	8000694 <HAL_DMA_Start_IT+0x68>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000676:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000678:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800067a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00c      	beq.n	800069a <HAL_DMA_Start_IT+0x6e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000680:	230e      	movs	r3, #14
 8000682:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000684:	4313      	orrs	r3, r2
 8000686:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000688:	2301      	movs	r3, #1
 800068a:	6802      	ldr	r2, [r0, #0]
 800068c:	4313      	orrs	r3, r2
 800068e:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000690:	2000      	movs	r0, #0
}
 8000692:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000694:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000696:	60e2      	str	r2, [r4, #12]
 8000698:	e7ef      	b.n	800067a <HAL_DMA_Start_IT+0x4e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800069a:	2204      	movs	r2, #4
 800069c:	6823      	ldr	r3, [r4, #0]
 800069e:	4393      	bics	r3, r2
 80006a0:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80006a2:	6822      	ldr	r2, [r4, #0]
 80006a4:	230a      	movs	r3, #10
 80006a6:	e7ed      	b.n	8000684 <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 80006a8:	77e7      	strb	r7, [r4, #31]
 80006aa:	e7f2      	b.n	8000692 <HAL_DMA_Start_IT+0x66>

080006ac <HAL_DMA_Abort_IT>:
{
 80006ac:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80006ae:	1d84      	adds	r4, r0, #6
 80006b0:	7fe3      	ldrb	r3, [r4, #31]
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d004      	beq.n	80006c0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006b6:	2304      	movs	r3, #4
 80006b8:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80006ba:	3b03      	subs	r3, #3
}
 80006bc:	0018      	movs	r0, r3
 80006be:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006c0:	210e      	movs	r1, #14
 80006c2:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80006c4:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	438a      	bics	r2, r1
 80006ca:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80006cc:	2201      	movs	r2, #1
 80006ce:	6819      	ldr	r1, [r3, #0]
 80006d0:	4391      	bics	r1, r2
 80006d2:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80006d4:	231c      	movs	r3, #28
 80006d6:	402b      	ands	r3, r5
 80006d8:	0015      	movs	r5, r2
 80006da:	409d      	lsls	r5, r3
 80006dc:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 80006de:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80006e0:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80006e2:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80006e4:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 80006e6:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80006e8:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 80006ea:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d0e5      	beq.n	80006bc <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80006f0:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80006f2:	0023      	movs	r3, r4
 80006f4:	e7e2      	b.n	80006bc <HAL_DMA_Abort_IT+0x10>

080006f6 <HAL_DMA_IRQHandler>:
{
 80006f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80006f8:	221c      	movs	r2, #28
 80006fa:	2704      	movs	r7, #4
 80006fc:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80006fe:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000700:	4032      	ands	r2, r6
 8000702:	003e      	movs	r6, r7
 8000704:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000706:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000708:	6803      	ldr	r3, [r0, #0]
 800070a:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800070c:	4235      	tst	r5, r6
 800070e:	d00d      	beq.n	800072c <HAL_DMA_IRQHandler+0x36>
 8000710:	423c      	tst	r4, r7
 8000712:	d00b      	beq.n	800072c <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	0692      	lsls	r2, r2, #26
 8000718:	d402      	bmi.n	8000720 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	43ba      	bics	r2, r7
 800071e:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8000720:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000722:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8000724:	2b00      	cmp	r3, #0
 8000726:	d019      	beq.n	800075c <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8000728:	4798      	blx	r3
  return;
 800072a:	e017      	b.n	800075c <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800072c:	2702      	movs	r7, #2
 800072e:	003e      	movs	r6, r7
 8000730:	4096      	lsls	r6, r2
 8000732:	4235      	tst	r5, r6
 8000734:	d013      	beq.n	800075e <HAL_DMA_IRQHandler+0x68>
 8000736:	423c      	tst	r4, r7
 8000738:	d011      	beq.n	800075e <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	0692      	lsls	r2, r2, #26
 800073e:	d406      	bmi.n	800074e <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000740:	240a      	movs	r4, #10
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	43a2      	bics	r2, r4
 8000746:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000748:	2201      	movs	r2, #1
 800074a:	1d83      	adds	r3, r0, #6
 800074c:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800074e:	2200      	movs	r2, #0
 8000750:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000752:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000754:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8000756:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000758:	4293      	cmp	r3, r2
 800075a:	d1e5      	bne.n	8000728 <HAL_DMA_IRQHandler+0x32>
}
 800075c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800075e:	2608      	movs	r6, #8
 8000760:	0037      	movs	r7, r6
 8000762:	4097      	lsls	r7, r2
 8000764:	423d      	tst	r5, r7
 8000766:	d0f9      	beq.n	800075c <HAL_DMA_IRQHandler+0x66>
 8000768:	4234      	tst	r4, r6
 800076a:	d0f7      	beq.n	800075c <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800076c:	250e      	movs	r5, #14
 800076e:	681c      	ldr	r4, [r3, #0]
 8000770:	43ac      	bics	r4, r5
 8000772:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000774:	2301      	movs	r3, #1
 8000776:	001c      	movs	r4, r3
 8000778:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800077a:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800077c:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800077e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000780:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8000782:	2200      	movs	r2, #0
 8000784:	1d43      	adds	r3, r0, #5
 8000786:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8000788:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800078a:	e7e5      	b.n	8000758 <HAL_DMA_IRQHandler+0x62>

0800078c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800078c:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800078e:	4a53      	ldr	r2, [pc, #332]	; (80008dc <HAL_GPIO_Init+0x150>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000790:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000792:	1882      	adds	r2, r0, r2
 8000794:	1e54      	subs	r4, r2, #1
 8000796:	41a2      	sbcs	r2, r4
{
 8000798:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 800079a:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 800079c:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800079e:	3205      	adds	r2, #5
 80007a0:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80007a2:	9a03      	ldr	r2, [sp, #12]
 80007a4:	40da      	lsrs	r2, r3
 80007a6:	d101      	bne.n	80007ac <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80007a8:	b007      	add	sp, #28
 80007aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80007ac:	2501      	movs	r5, #1
 80007ae:	409d      	lsls	r5, r3
 80007b0:	9a03      	ldr	r2, [sp, #12]
 80007b2:	402a      	ands	r2, r5
 80007b4:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 80007b6:	d100      	bne.n	80007ba <HAL_GPIO_Init+0x2e>
 80007b8:	e08e      	b.n	80008d8 <HAL_GPIO_Init+0x14c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80007ba:	684a      	ldr	r2, [r1, #4]
 80007bc:	9201      	str	r2, [sp, #4]
 80007be:	2210      	movs	r2, #16
 80007c0:	9e01      	ldr	r6, [sp, #4]
 80007c2:	4396      	bics	r6, r2
 80007c4:	2e02      	cmp	r6, #2
 80007c6:	d10f      	bne.n	80007e8 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 80007c8:	08da      	lsrs	r2, r3, #3
 80007ca:	0092      	lsls	r2, r2, #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80007cc:	2407      	movs	r4, #7
 80007ce:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 80007d0:	6a17      	ldr	r7, [r2, #32]
 80007d2:	9204      	str	r2, [sp, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80007d4:	220f      	movs	r2, #15
 80007d6:	401c      	ands	r4, r3
 80007d8:	00a4      	lsls	r4, r4, #2
 80007da:	40a2      	lsls	r2, r4
 80007dc:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80007de:	690a      	ldr	r2, [r1, #16]
 80007e0:	40a2      	lsls	r2, r4
 80007e2:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 80007e4:	9a04      	ldr	r2, [sp, #16]
 80007e6:	6217      	str	r7, [r2, #32]
 80007e8:	2203      	movs	r2, #3
 80007ea:	005c      	lsls	r4, r3, #1
 80007ec:	40a2      	lsls	r2, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ee:	3e01      	subs	r6, #1
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	2e01      	cmp	r6, #1
 80007f4:	d80d      	bhi.n	8000812 <HAL_GPIO_Init+0x86>
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007f6:	68ce      	ldr	r6, [r1, #12]
        temp = GPIOx->OSPEEDR;
 80007f8:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007fa:	40a6      	lsls	r6, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80007fc:	4017      	ands	r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007fe:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000800:	6086      	str	r6, [r0, #8]
        temp= GPIOx->OTYPER;
 8000802:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000804:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000806:	9d01      	ldr	r5, [sp, #4]
 8000808:	06ed      	lsls	r5, r5, #27
 800080a:	0fed      	lsrs	r5, r5, #31
 800080c:	409d      	lsls	r5, r3
 800080e:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000810:	6045      	str	r5, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000812:	2603      	movs	r6, #3
 8000814:	9d01      	ldr	r5, [sp, #4]
      temp = GPIOx->MODER;
 8000816:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000818:	4035      	ands	r5, r6
 800081a:	40a5      	lsls	r5, r4
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800081c:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800081e:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8000820:	6005      	str	r5, [r0, #0]
      temp = GPIOx->PUPDR;
 8000822:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000824:	402a      	ands	r2, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000826:	688d      	ldr	r5, [r1, #8]
 8000828:	40a5      	lsls	r5, r4
 800082a:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 800082c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800082e:	9a01      	ldr	r2, [sp, #4]
 8000830:	00d2      	lsls	r2, r2, #3
 8000832:	d551      	bpl.n	80008d8 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000834:	2501      	movs	r5, #1
 8000836:	4c2a      	ldr	r4, [pc, #168]	; (80008e0 <HAL_GPIO_Init+0x154>)
 8000838:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800083a:	432a      	orrs	r2, r5
 800083c:	6362      	str	r2, [r4, #52]	; 0x34
 800083e:	4a29      	ldr	r2, [pc, #164]	; (80008e4 <HAL_GPIO_Init+0x158>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000840:	089c      	lsrs	r4, r3, #2
 8000842:	00a4      	lsls	r4, r4, #2
 8000844:	18a4      	adds	r4, r4, r2
 8000846:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000848:	001d      	movs	r5, r3
        temp = SYSCFG->EXTICR[position >> 2U];
 800084a:	4694      	mov	ip, r2
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800084c:	220f      	movs	r2, #15
 800084e:	4035      	ands	r5, r6
 8000850:	00ad      	lsls	r5, r5, #2
 8000852:	40aa      	lsls	r2, r5
 8000854:	4667      	mov	r7, ip
 8000856:	4397      	bics	r7, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000858:	22a0      	movs	r2, #160	; 0xa0
 800085a:	05d2      	lsls	r2, r2, #23
 800085c:	4694      	mov	ip, r2
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800085e:	9704      	str	r7, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000860:	2200      	movs	r2, #0
 8000862:	4560      	cmp	r0, ip
 8000864:	d00d      	beq.n	8000882 <HAL_GPIO_Init+0xf6>
 8000866:	4a20      	ldr	r2, [pc, #128]	; (80008e8 <HAL_GPIO_Init+0x15c>)
 8000868:	4694      	mov	ip, r2
 800086a:	2201      	movs	r2, #1
 800086c:	4560      	cmp	r0, ip
 800086e:	d008      	beq.n	8000882 <HAL_GPIO_Init+0xf6>
 8000870:	4f1e      	ldr	r7, [pc, #120]	; (80008ec <HAL_GPIO_Init+0x160>)
 8000872:	1892      	adds	r2, r2, r2
 8000874:	42b8      	cmp	r0, r7
 8000876:	d004      	beq.n	8000882 <HAL_GPIO_Init+0xf6>
 8000878:	4f1d      	ldr	r7, [pc, #116]	; (80008f0 <HAL_GPIO_Init+0x164>)
 800087a:	0032      	movs	r2, r6
 800087c:	42b8      	cmp	r0, r7
 800087e:	d000      	beq.n	8000882 <HAL_GPIO_Init+0xf6>
 8000880:	9a05      	ldr	r2, [sp, #20]
 8000882:	40aa      	lsls	r2, r5
 8000884:	9d04      	ldr	r5, [sp, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000886:	9f01      	ldr	r7, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000888:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800088a:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800088c:	4a19      	ldr	r2, [pc, #100]	; (80008f4 <HAL_GPIO_Init+0x168>)
        temp &= ~((uint32_t)iocurrent);
 800088e:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8000890:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000892:	9d02      	ldr	r5, [sp, #8]
        temp &= ~((uint32_t)iocurrent);
 8000894:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000896:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000898:	03ff      	lsls	r7, r7, #15
 800089a:	d401      	bmi.n	80008a0 <HAL_GPIO_Init+0x114>
        temp &= ~((uint32_t)iocurrent);
 800089c:	0035      	movs	r5, r6
 800089e:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80008a0:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80008a2:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80008a4:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008a6:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80008a8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008aa:	03bf      	lsls	r7, r7, #14
 80008ac:	d401      	bmi.n	80008b2 <HAL_GPIO_Init+0x126>
        temp &= ~((uint32_t)iocurrent);
 80008ae:	0035      	movs	r5, r6
 80008b0:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80008b2:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80008b4:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80008b6:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008b8:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80008ba:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008bc:	02ff      	lsls	r7, r7, #11
 80008be:	d401      	bmi.n	80008c4 <HAL_GPIO_Init+0x138>
        temp &= ~((uint32_t)iocurrent);
 80008c0:	0035      	movs	r5, r6
 80008c2:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80008c4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80008c6:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80008c8:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008ca:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80008cc:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008ce:	02bf      	lsls	r7, r7, #10
 80008d0:	d401      	bmi.n	80008d6 <HAL_GPIO_Init+0x14a>
        temp &= ~((uint32_t)iocurrent);
 80008d2:	4025      	ands	r5, r4
 80008d4:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80008d6:	60d6      	str	r6, [r2, #12]
    position++;
 80008d8:	3301      	adds	r3, #1
 80008da:	e762      	b.n	80007a2 <HAL_GPIO_Init+0x16>
 80008dc:	afffe400 	.word	0xafffe400
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40010000 	.word	0x40010000
 80008e8:	50000400 	.word	0x50000400
 80008ec:	50000800 	.word	0x50000800
 80008f0:	50000c00 	.word	0x50000c00
 80008f4:	40010400 	.word	0x40010400

080008f8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008f8:	6900      	ldr	r0, [r0, #16]
 80008fa:	4008      	ands	r0, r1
 80008fc:	1e41      	subs	r1, r0, #1
 80008fe:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000900:	b2c0      	uxtb	r0, r0
}
 8000902:	4770      	bx	lr

08000904 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000904:	2a00      	cmp	r2, #0
 8000906:	d001      	beq.n	800090c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000908:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800090a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800090c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800090e:	e7fc      	b.n	800090a <HAL_GPIO_WritePin+0x6>

08000910 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000910:	6943      	ldr	r3, [r0, #20]
 8000912:	4059      	eors	r1, r3
 8000914:	6141      	str	r1, [r0, #20]
}
 8000916:	4770      	bx	lr

08000918 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000918:	4770      	bx	lr
	...

0800091c <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800091e:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000920:	695a      	ldr	r2, [r3, #20]
 8000922:	4210      	tst	r0, r2
 8000924:	d002      	beq.n	800092c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000926:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000928:	f7ff fff6 	bl	8000918 <HAL_GPIO_EXTI_Callback>
}
 800092c:	bd10      	pop	{r4, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	40010400 	.word	0x40010400

08000934 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8000934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000936:	0004      	movs	r4, r0
  uint32_t tmp = 0U, i2sclk = 0U;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
  {
    return HAL_ERROR;
 8000938:	2001      	movs	r0, #1
  if (hi2s == NULL)
 800093a:	2c00      	cmp	r4, #0
 800093c:	d046      	beq.n	80009cc <HAL_I2S_Init+0x98>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800093e:	0026      	movs	r6, r4
 8000940:	3635      	adds	r6, #53	; 0x35
 8000942:	7833      	ldrb	r3, [r6, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d105      	bne.n	8000956 <HAL_I2S_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800094a:	0022      	movs	r2, r4
 800094c:	3234      	adds	r2, #52	; 0x34
 800094e:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8000950:	0020      	movs	r0, r4
 8000952:	f002 fe13 	bl	800357c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000956:	2002      	movs	r0, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000958:	6823      	ldr	r3, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 800095a:	7030      	strb	r0, [r6, #0]
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800095c:	69da      	ldr	r2, [r3, #28]
 800095e:	492c      	ldr	r1, [pc, #176]	; (8000a10 <HAL_I2S_Init+0xdc>)
 8000960:	400a      	ands	r2, r1
 8000962:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8000964:	6218      	str	r0, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000966:	6963      	ldr	r3, [r4, #20]
 8000968:	9101      	str	r1, [sp, #4]
 800096a:	4283      	cmp	r3, r0
 800096c:	d036      	beq.n	80009dc <HAL_I2S_Init+0xa8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800096e:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8000970:	2520      	movs	r5, #32
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8000972:	2b00      	cmp	r3, #0
 8000974:	d100      	bne.n	8000978 <HAL_I2S_Init+0x44>
      packetlength = 16U;
 8000976:	3d10      	subs	r5, #16
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000978:	68a3      	ldr	r3, [r4, #8]
 800097a:	2b20      	cmp	r3, #32
 800097c:	d800      	bhi.n	8000980 <HAL_I2S_Init+0x4c>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800097e:	006d      	lsls	r5, r5, #1
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8000980:	f000 f930 	bl	8000be4 <HAL_RCC_GetSysClockFreq>

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	6922      	ldr	r2, [r4, #16]
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	429a      	cmp	r2, r3
 800098c:	d11f      	bne.n	80009ce <HAL_I2S_Init+0x9a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800098e:	68e3      	ldr	r3, [r4, #12]
 8000990:	6967      	ldr	r7, [r4, #20]
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8000992:	00a9      	lsls	r1, r5, #2
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000994:	2b00      	cmp	r3, #0
 8000996:	d100      	bne.n	800099a <HAL_I2S_Init+0x66>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8000998:	00e9      	lsls	r1, r5, #3
 800099a:	f7ff fbbf 	bl	800011c <__udivsi3>
 800099e:	230a      	movs	r3, #10
 80009a0:	0039      	movs	r1, r7
 80009a2:	4358      	muls	r0, r3
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10) / hi2s->Init.AudioFreq)) + 5);
 80009a4:	f7ff fbba 	bl	800011c <__udivsi3>
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80009a8:	210a      	movs	r1, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10) / hi2s->Init.AudioFreq)) + 5);
 80009aa:	3005      	adds	r0, #5
    tmp = tmp / 10U;
 80009ac:	f7ff fbb6 	bl	800011c <__udivsi3>

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80009b0:	2201      	movs	r2, #1
 80009b2:	0001      	movs	r1, r0
 80009b4:	4011      	ands	r1, r2

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80009b6:	1a43      	subs	r3, r0, r1
 80009b8:	40d3      	lsrs	r3, r2
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80009ba:	1e98      	subs	r0, r3, #2
    i2sodd = (uint32_t)(i2sodd << 8U);
 80009bc:	0209      	lsls	r1, r1, #8
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80009be:	28fd      	cmp	r0, #253	; 0xfd
 80009c0:	d90d      	bls.n	80009de <HAL_I2S_Init+0xaa>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80009c2:	2310      	movs	r3, #16
    return  HAL_ERROR;
 80009c4:	0010      	movs	r0, r2
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80009c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80009c8:	430b      	orrs	r3, r1
 80009ca:	63a3      	str	r3, [r4, #56]	; 0x38

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 80009cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10) / hi2s->Init.AudioFreq)) + 5);
 80009ce:	0029      	movs	r1, r5
 80009d0:	f7ff fba4 	bl	800011c <__udivsi3>
 80009d4:	230a      	movs	r3, #10
 80009d6:	6961      	ldr	r1, [r4, #20]
 80009d8:	4358      	muls	r0, r3
 80009da:	e7e3      	b.n	80009a4 <HAL_I2S_Init+0x70>
    i2sodd = 0U;
 80009dc:	2100      	movs	r1, #0
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80009de:	430b      	orrs	r3, r1
 80009e0:	6921      	ldr	r1, [r4, #16]
 80009e2:	6822      	ldr	r2, [r4, #0]
 80009e4:	430b      	orrs	r3, r1
 80009e6:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80009e8:	6860      	ldr	r0, [r4, #4]
 80009ea:	68a3      	ldr	r3, [r4, #8]
 80009ec:	69d1      	ldr	r1, [r2, #28]
 80009ee:	4318      	orrs	r0, r3
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	011b      	lsls	r3, r3, #4
 80009f4:	4303      	orrs	r3, r0
 80009f6:	68e0      	ldr	r0, [r4, #12]
 80009f8:	4303      	orrs	r3, r0
 80009fa:	69a0      	ldr	r0, [r4, #24]
 80009fc:	4303      	orrs	r3, r0
 80009fe:	9801      	ldr	r0, [sp, #4]
 8000a00:	4001      	ands	r1, r0
 8000a02:	430b      	orrs	r3, r1
 8000a04:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000a06:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8000a08:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000a0a:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8000a0c:	7033      	strb	r3, [r6, #0]
  return HAL_OK;
 8000a0e:	e7dd      	b.n	80009cc <HAL_I2S_Init+0x98>
 8000a10:	fffff040 	.word	0xfffff040

08000a14 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8000a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpreg_cfgr = 0U;
  HAL_StatusTypeDef errorcode = HAL_OK;

  if (hi2s->State != HAL_I2S_STATE_READY)
 8000a16:	0005      	movs	r5, r0
 8000a18:	3535      	adds	r5, #53	; 0x35
 8000a1a:	782b      	ldrb	r3, [r5, #0]
{
 8000a1c:	0004      	movs	r4, r0
  if (hi2s->State != HAL_I2S_STATE_READY)
 8000a1e:	b2db      	uxtb	r3, r3
  {
    errorcode = HAL_BUSY;
 8000a20:	2002      	movs	r0, #2
  if (hi2s->State != HAL_I2S_STATE_READY)
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d13a      	bne.n	8000a9c <HAL_I2S_Transmit_DMA+0x88>
    goto error;
  }

  if ((pData == NULL) || (Size == 0U))
  {
    return  HAL_ERROR;
 8000a26:	0018      	movs	r0, r3
  if ((pData == NULL) || (Size == 0U))
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	d03a      	beq.n	8000aa2 <HAL_I2S_Transmit_DMA+0x8e>
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d038      	beq.n	8000aa2 <HAL_I2S_Transmit_DMA+0x8e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8000a30:	0026      	movs	r6, r4
 8000a32:	3634      	adds	r6, #52	; 0x34
 8000a34:	7837      	ldrb	r7, [r6, #0]
 8000a36:	3001      	adds	r0, #1
 8000a38:	2f01      	cmp	r7, #1
 8000a3a:	d032      	beq.n	8000aa2 <HAL_I2S_Transmit_DMA+0x8e>
 8000a3c:	7033      	strb	r3, [r6, #0]

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8000a3e:	3302      	adds	r3, #2
 8000a40:	702b      	strb	r3, [r5, #0]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000a42:	2300      	movs	r3, #0
  hi2s->pTxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8000a44:	6825      	ldr	r5, [r4, #0]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000a46:	63a3      	str	r3, [r4, #56]	; 0x38
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8000a48:	69eb      	ldr	r3, [r5, #28]
 8000a4a:	3005      	adds	r0, #5
 8000a4c:	4003      	ands	r3, r0

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8000a4e:	3b03      	subs	r3, #3
 8000a50:	3805      	subs	r0, #5
  hi2s->pTxBuffPtr = pData;
 8000a52:	61e1      	str	r1, [r4, #28]
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8000a54:	4383      	bics	r3, r0
 8000a56:	d101      	bne.n	8000a5c <HAL_I2S_Transmit_DMA+0x48>
  {
    hi2s->TxXferSize = (Size << 1U);
 8000a58:	0052      	lsls	r2, r2, #1
 8000a5a:	b292      	uxth	r2, r2
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 8000a5c:	8422      	strh	r2, [r4, #32]
    hi2s->TxXferCount = Size;
 8000a5e:	8462      	strh	r2, [r4, #34]	; 0x22

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;

  /* Enable the Tx DMA Stream/Channel */
  HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8000a60:	002a      	movs	r2, r5
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8000a62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_I2S_Transmit_DMA+0x90>)
  HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8000a66:	320c      	adds	r2, #12
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8000a68:	6303      	str	r3, [r0, #48]	; 0x30
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_I2S_Transmit_DMA+0x94>)
 8000a6c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_I2S_Transmit_DMA+0x98>)
 8000a70:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8000a72:	8c23      	ldrh	r3, [r4, #32]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	f7ff fdd9 	bl	800062c <HAL_DMA_Start_IT>

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8000a7a:	2280      	movs	r2, #128	; 0x80
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	00d2      	lsls	r2, r2, #3
 8000a80:	69d9      	ldr	r1, [r3, #28]
 8000a82:	4211      	tst	r1, r2
 8000a84:	d102      	bne.n	8000a8c <HAL_I2S_Transmit_DMA+0x78>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8000a86:	69d9      	ldr	r1, [r3, #28]
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8000a90:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8000a92:	4211      	tst	r1, r2
 8000a94:	d102      	bne.n	8000a9c <HAL_I2S_Transmit_DMA+0x88>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8000a96:	6859      	ldr	r1, [r3, #4]
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	605a      	str	r2, [r3, #4]
  }

error :
  __HAL_UNLOCK(hi2s);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	3434      	adds	r4, #52	; 0x34
 8000aa0:	7023      	strb	r3, [r4, #0]
  return errorcode;
}
 8000aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aa4:	08000ab3 	.word	0x08000ab3
 8000aa8:	08000abd 	.word	0x08000abd
 8000aac:	08000ae5 	.word	0x08000ae5

08000ab0 <HAL_I2S_TxHalfCpltCallback>:
 8000ab0:	4770      	bx	lr

08000ab2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8000ab2:	b510      	push	{r4, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8000ab4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000ab6:	f7ff fffb 	bl	8000ab0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8000aba:	bd10      	pop	{r4, pc}

08000abc <I2S_DMATxCplt>:
  if (hdma->Init.Mode == DMA_NORMAL)
 8000abc:	69c1      	ldr	r1, [r0, #28]
{
 8000abe:	b510      	push	{r4, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ac0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (hdma->Init.Mode == DMA_NORMAL)
 8000ac2:	2900      	cmp	r1, #0
 8000ac4:	d109      	bne.n	8000ada <I2S_DMATxCplt+0x1e>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8000ac6:	2402      	movs	r4, #2
 8000ac8:	6818      	ldr	r0, [r3, #0]
 8000aca:	6842      	ldr	r2, [r0, #4]
 8000acc:	43a2      	bics	r2, r4
 8000ace:	6042      	str	r2, [r0, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8000ad0:	001a      	movs	r2, r3
    hi2s->TxXferCount = 0U;
 8000ad2:	8459      	strh	r1, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8000ad4:	3235      	adds	r2, #53	; 0x35
 8000ad6:	3101      	adds	r1, #1
 8000ad8:	7011      	strb	r1, [r2, #0]
  HAL_I2S_TxCpltCallback(hi2s);
 8000ada:	0018      	movs	r0, r3
 8000adc:	f003 f896 	bl	8003c0c <HAL_I2S_TxCpltCallback>
}
 8000ae0:	bd10      	pop	{r4, pc}

08000ae2 <HAL_I2S_ErrorCallback>:
 8000ae2:	4770      	bx	lr

08000ae4 <I2S_DMAError>:
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8000ae4:	2103      	movs	r1, #3
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ae6:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8000ae8:	b510      	push	{r4, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8000aea:	6802      	ldr	r2, [r0, #0]
 8000aec:	6853      	ldr	r3, [r2, #4]
 8000aee:	438b      	bics	r3, r1
 8000af0:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8000af2:	2300      	movs	r3, #0
 8000af4:	8443      	strh	r3, [r0, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8000af6:	8543      	strh	r3, [r0, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8000af8:	0003      	movs	r3, r0
 8000afa:	2201      	movs	r2, #1
 8000afc:	3335      	adds	r3, #53	; 0x35
 8000afe:	701a      	strb	r2, [r3, #0]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8000b00:	2308      	movs	r3, #8
 8000b02:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000b04:	4313      	orrs	r3, r2
 8000b06:	6383      	str	r3, [r0, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8000b08:	f7ff ffeb 	bl	8000ae2 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8000b0c:	bd10      	pop	{r4, pc}
	...

08000b10 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8000b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b12:	0004      	movs	r4, r0
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
  {
    return HAL_ERROR;
 8000b14:	2001      	movs	r0, #1
  if (hlptim == NULL)
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d042      	beq.n	8000ba0 <HAL_LPTIM_Init+0x90>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8000b1a:	0025      	movs	r5, r4
 8000b1c:	352e      	adds	r5, #46	; 0x2e
 8000b1e:	782b      	ldrb	r3, [r5, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d105      	bne.n	8000b32 <HAL_LPTIM_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8000b26:	0022      	movs	r2, r4
 8000b28:	322d      	adds	r2, #45	; 0x2d
 8000b2a:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8000b2c:	0020      	movs	r0, r4
 8000b2e:	f002 fd8d 	bl	800364c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8000b32:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8000b34:	6826      	ldr	r6, [r4, #0]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8000b36:	6867      	ldr	r7, [r4, #4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8000b38:	702b      	strb	r3, [r5, #0]
  tmpcfgr = hlptim->Instance->CFGR;
 8000b3a:	68f3      	ldr	r3, [r6, #12]
 8000b3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8000b3e:	2f01      	cmp	r7, #1
 8000b40:	d003      	beq.n	8000b4a <HAL_LPTIM_Init+0x3a>
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	0412      	lsls	r2, r2, #16
 8000b46:	4290      	cmp	r0, r2
 8000b48:	d101      	bne.n	8000b4e <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8000b4a:	221e      	movs	r2, #30
 8000b4c:	4393      	bics	r3, r2
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8000b4e:	4915      	ldr	r1, [pc, #84]	; (8000ba4 <HAL_LPTIM_Init+0x94>)
 8000b50:	6962      	ldr	r2, [r4, #20]
 8000b52:	468c      	mov	ip, r1
 8000b54:	428a      	cmp	r2, r1
 8000b56:	d001      	beq.n	8000b5c <HAL_LPTIM_Init+0x4c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8000b58:	4913      	ldr	r1, [pc, #76]	; (8000ba8 <HAL_LPTIM_Init+0x98>)
 8000b5a:	400b      	ands	r3, r1
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8000b5c:	4913      	ldr	r1, [pc, #76]	; (8000bac <HAL_LPTIM_Init+0x9c>)
 8000b5e:	4019      	ands	r1, r3

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
              hlptim->Init.Clock.Prescaler |
              hlptim->Init.OutputPolarity  |
              hlptim->Init.UpdateMode      |
 8000b60:	003b      	movs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8000b62:	9101      	str	r1, [sp, #4]
              hlptim->Init.UpdateMode      |
 8000b64:	68a1      	ldr	r1, [r4, #8]
 8000b66:	4303      	orrs	r3, r0
 8000b68:	430b      	orrs	r3, r1
 8000b6a:	6a21      	ldr	r1, [r4, #32]
 8000b6c:	430b      	orrs	r3, r1
 8000b6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000b70:	430b      	orrs	r3, r1
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000b72:	9901      	ldr	r1, [sp, #4]
 8000b74:	430b      	orrs	r3, r1
              hlptim->Init.CounterSource);

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8000b76:	2f01      	cmp	r7, #1
 8000b78:	d003      	beq.n	8000b82 <HAL_LPTIM_Init+0x72>
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	0409      	lsls	r1, r1, #16
 8000b7e:	4288      	cmp	r0, r1
 8000b80:	d103      	bne.n	8000b8a <HAL_LPTIM_Init+0x7a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8000b82:	68e1      	ldr	r1, [r4, #12]
 8000b84:	6920      	ldr	r0, [r4, #16]
 8000b86:	4301      	orrs	r1, r0
 8000b88:	430b      	orrs	r3, r1
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8000b8a:	4562      	cmp	r2, ip
 8000b8c:	d004      	beq.n	8000b98 <HAL_LPTIM_Init+0x88>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000b8e:	69a1      	ldr	r1, [r4, #24]
 8000b90:	430a      	orrs	r2, r1
                hlptim->Init.Trigger.ActiveEdge |
 8000b92:	69e1      	ldr	r1, [r4, #28]
 8000b94:	430a      	orrs	r2, r1
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000b96:	4313      	orrs	r3, r2
                hlptim->Init.Trigger.SampleTime);
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8000b98:	60f3      	str	r3, [r6, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8000b9a:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8000b9c:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8000b9e:	702b      	strb	r3, [r5, #0]
}
 8000ba0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	0000ffff 	.word	0x0000ffff
 8000ba8:	ffff1f3f 	.word	0xffff1f3f
 8000bac:	ff19f1f8 	.word	0xff19f1f8

08000bb0 <HAL_LPTIM_PWM_Start>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8000bb0:	b530      	push	{r4, r5, lr}
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8000bb2:	0004      	movs	r4, r0
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	342e      	adds	r4, #46	; 0x2e
 8000bb8:	7023      	strb	r3, [r4, #0]

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8000bba:	6803      	ldr	r3, [r0, #0]
 8000bbc:	4d08      	ldr	r5, [pc, #32]	; (8000be0 <HAL_LPTIM_PWM_Start+0x30>)
 8000bbe:	68d8      	ldr	r0, [r3, #12]
 8000bc0:	4028      	ands	r0, r5

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8000bc2:	2501      	movs	r5, #1
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8000bc4:	60d8      	str	r0, [r3, #12]
  __HAL_LPTIM_ENABLE(hlptim);
 8000bc6:	6918      	ldr	r0, [r3, #16]
 8000bc8:	4328      	orrs	r0, r5
 8000bca:	6118      	str	r0, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8000bcc:	6199      	str	r1, [r3, #24]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8000bce:	615a      	str	r2, [r3, #20]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	6919      	ldr	r1, [r3, #16]
  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000bd4:	2000      	movs	r0, #0
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	611a      	str	r2, [r3, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 8000bda:	7025      	strb	r5, [r4, #0]
}
 8000bdc:	bd30      	pop	{r4, r5, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	ffefffff 	.word	0xffefffff

08000be4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000be4:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000be8:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000bea:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000bec:	400a      	ands	r2, r1
 8000bee:	2a08      	cmp	r2, #8
 8000bf0:	d029      	beq.n	8000c46 <HAL_RCC_GetSysClockFreq+0x62>
 8000bf2:	2a0c      	cmp	r2, #12
 8000bf4:	d009      	beq.n	8000c0a <HAL_RCC_GetSysClockFreq+0x26>
 8000bf6:	2a04      	cmp	r2, #4
 8000bf8:	d11d      	bne.n	8000c36 <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000bfa:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000bfe:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8000c00:	17c0      	asrs	r0, r0, #31
 8000c02:	4018      	ands	r0, r3
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_RCC_GetSysClockFreq+0x70>)
 8000c06:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000c08:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000c0a:	028a      	lsls	r2, r1, #10
 8000c0c:	4812      	ldr	r0, [pc, #72]	; (8000c58 <HAL_RCC_GetSysClockFreq+0x74>)
 8000c0e:	0f12      	lsrs	r2, r2, #28
 8000c10:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000c12:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c14:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000c16:	0f89      	lsrs	r1, r1, #30
 8000c18:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c1a:	03c0      	lsls	r0, r0, #15
 8000c1c:	d504      	bpl.n	8000c28 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000c1e:	480f      	ldr	r0, [pc, #60]	; (8000c5c <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 8000c20:	4350      	muls	r0, r2
 8000c22:	f7ff fa7b 	bl	800011c <__udivsi3>
 8000c26:	e7ef      	b.n	8000c08 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	06db      	lsls	r3, r3, #27
 8000c2c:	d501      	bpl.n	8000c32 <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000c2e:	480c      	ldr	r0, [pc, #48]	; (8000c60 <HAL_RCC_GetSysClockFreq+0x7c>)
 8000c30:	e7f6      	b.n	8000c20 <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000c32:	4808      	ldr	r0, [pc, #32]	; (8000c54 <HAL_RCC_GetSysClockFreq+0x70>)
 8000c34:	e7f4      	b.n	8000c20 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000c36:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000c38:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000c3a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000c3c:	041b      	lsls	r3, r3, #16
 8000c3e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000c40:	3301      	adds	r3, #1
 8000c42:	4098      	lsls	r0, r3
 8000c44:	e7e0      	b.n	8000c08 <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_RCC_GetSysClockFreq+0x78>)
 8000c48:	e7de      	b.n	8000c08 <HAL_RCC_GetSysClockFreq+0x24>
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	ff48e500 	.word	0xff48e500
 8000c54:	00f42400 	.word	0x00f42400
 8000c58:	080046b0 	.word	0x080046b0
 8000c5c:	007a1200 	.word	0x007a1200
 8000c60:	003d0900 	.word	0x003d0900

08000c64 <HAL_RCC_OscConfig>:
{
 8000c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c66:	0005      	movs	r5, r0
 8000c68:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d102      	bne.n	8000c74 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000c6e:	2001      	movs	r0, #1
}
 8000c70:	b007      	add	sp, #28
 8000c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c74:	230c      	movs	r3, #12
 8000c76:	4cbe      	ldr	r4, [pc, #760]	; (8000f70 <HAL_RCC_OscConfig+0x30c>)
 8000c78:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c7a:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c7c:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	025b      	lsls	r3, r3, #9
 8000c82:	401a      	ands	r2, r3
 8000c84:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c86:	6802      	ldr	r2, [r0, #0]
 8000c88:	07d2      	lsls	r2, r2, #31
 8000c8a:	d441      	bmi.n	8000d10 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8c:	682b      	ldr	r3, [r5, #0]
 8000c8e:	079b      	lsls	r3, r3, #30
 8000c90:	d500      	bpl.n	8000c94 <HAL_RCC_OscConfig+0x30>
 8000c92:	e087      	b.n	8000da4 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c94:	682b      	ldr	r3, [r5, #0]
 8000c96:	06db      	lsls	r3, r3, #27
 8000c98:	d528      	bpl.n	8000cec <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	d000      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x3c>
 8000c9e:	e0d9      	b.n	8000e54 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ca0:	6823      	ldr	r3, [r4, #0]
 8000ca2:	059b      	lsls	r3, r3, #22
 8000ca4:	d502      	bpl.n	8000cac <HAL_RCC_OscConfig+0x48>
 8000ca6:	69eb      	ldr	r3, [r5, #28]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d0e0      	beq.n	8000c6e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cac:	6862      	ldr	r2, [r4, #4]
 8000cae:	49b1      	ldr	r1, [pc, #708]	; (8000f74 <HAL_RCC_OscConfig+0x310>)
 8000cb0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000cb2:	400a      	ands	r2, r1
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cb8:	6861      	ldr	r1, [r4, #4]
 8000cba:	6a2a      	ldr	r2, [r5, #32]
 8000cbc:	0209      	lsls	r1, r1, #8
 8000cbe:	0a09      	lsrs	r1, r1, #8
 8000cc0:	0612      	lsls	r2, r2, #24
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	0b5b      	lsrs	r3, r3, #13
 8000cca:	3301      	adds	r3, #1
 8000ccc:	0212      	lsls	r2, r2, #8
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000cd2:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000cd4:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000cd6:	060a      	lsls	r2, r1, #24
 8000cd8:	49a7      	ldr	r1, [pc, #668]	; (8000f78 <HAL_RCC_OscConfig+0x314>)
 8000cda:	0f12      	lsrs	r2, r2, #28
 8000cdc:	5c8a      	ldrb	r2, [r1, r2]
 8000cde:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000ce0:	4aa6      	ldr	r2, [pc, #664]	; (8000f7c <HAL_RCC_OscConfig+0x318>)
 8000ce2:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000ce4:	f7ff fbb2 	bl	800044c <HAL_InitTick>
        if(status != HAL_OK)
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	d1c1      	bne.n	8000c70 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cec:	682b      	ldr	r3, [r5, #0]
 8000cee:	071b      	lsls	r3, r3, #28
 8000cf0:	d500      	bpl.n	8000cf4 <HAL_RCC_OscConfig+0x90>
 8000cf2:	e0e6      	b.n	8000ec2 <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cf4:	682b      	ldr	r3, [r5, #0]
 8000cf6:	075b      	lsls	r3, r3, #29
 8000cf8:	d500      	bpl.n	8000cfc <HAL_RCC_OscConfig+0x98>
 8000cfa:	e108      	b.n	8000f0e <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000cfc:	682b      	ldr	r3, [r5, #0]
 8000cfe:	069b      	lsls	r3, r3, #26
 8000d00:	d500      	bpl.n	8000d04 <HAL_RCC_OscConfig+0xa0>
 8000d02:	e18d      	b.n	8001020 <HAL_RCC_OscConfig+0x3bc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d04:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d000      	beq.n	8000d0c <HAL_RCC_OscConfig+0xa8>
 8000d0a:	e1bc      	b.n	8001086 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	e7af      	b.n	8000c70 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d10:	2e08      	cmp	r6, #8
 8000d12:	d004      	beq.n	8000d1e <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d14:	2e0c      	cmp	r6, #12
 8000d16:	d109      	bne.n	8000d2c <HAL_RCC_OscConfig+0xc8>
 8000d18:	9a01      	ldr	r2, [sp, #4]
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	d006      	beq.n	8000d2c <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	039b      	lsls	r3, r3, #14
 8000d22:	d5b3      	bpl.n	8000c8c <HAL_RCC_OscConfig+0x28>
 8000d24:	686b      	ldr	r3, [r5, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1b0      	bne.n	8000c8c <HAL_RCC_OscConfig+0x28>
 8000d2a:	e7a0      	b.n	8000c6e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2c:	686a      	ldr	r2, [r5, #4]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d111      	bne.n	8000d56 <HAL_RCC_OscConfig+0xf2>
 8000d32:	6822      	ldr	r2, [r4, #0]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d38:	f7ff fbbc 	bl	80004b4 <HAL_GetTick>
 8000d3c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	6823      	ldr	r3, [r4, #0]
 8000d42:	0292      	lsls	r2, r2, #10
 8000d44:	4213      	tst	r3, r2
 8000d46:	d1a1      	bne.n	8000c8c <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d48:	f7ff fbb4 	bl	80004b4 <HAL_GetTick>
 8000d4c:	1bc0      	subs	r0, r0, r7
 8000d4e:	2864      	cmp	r0, #100	; 0x64
 8000d50:	d9f5      	bls.n	8000d3e <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8000d52:	2003      	movs	r0, #3
 8000d54:	e78c      	b.n	8000c70 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d56:	21a0      	movs	r1, #160	; 0xa0
 8000d58:	02c9      	lsls	r1, r1, #11
 8000d5a:	428a      	cmp	r2, r1
 8000d5c:	d105      	bne.n	8000d6a <HAL_RCC_OscConfig+0x106>
 8000d5e:	2280      	movs	r2, #128	; 0x80
 8000d60:	6821      	ldr	r1, [r4, #0]
 8000d62:	02d2      	lsls	r2, r2, #11
 8000d64:	430a      	orrs	r2, r1
 8000d66:	6022      	str	r2, [r4, #0]
 8000d68:	e7e3      	b.n	8000d32 <HAL_RCC_OscConfig+0xce>
 8000d6a:	6821      	ldr	r1, [r4, #0]
 8000d6c:	4884      	ldr	r0, [pc, #528]	; (8000f80 <HAL_RCC_OscConfig+0x31c>)
 8000d6e:	4001      	ands	r1, r0
 8000d70:	6021      	str	r1, [r4, #0]
 8000d72:	6821      	ldr	r1, [r4, #0]
 8000d74:	400b      	ands	r3, r1
 8000d76:	9305      	str	r3, [sp, #20]
 8000d78:	9b05      	ldr	r3, [sp, #20]
 8000d7a:	4982      	ldr	r1, [pc, #520]	; (8000f84 <HAL_RCC_OscConfig+0x320>)
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	400b      	ands	r3, r1
 8000d80:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	d1d8      	bne.n	8000d38 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000d86:	f7ff fb95 	bl	80004b4 <HAL_GetTick>
 8000d8a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	6823      	ldr	r3, [r4, #0]
 8000d90:	0292      	lsls	r2, r2, #10
 8000d92:	4213      	tst	r3, r2
 8000d94:	d100      	bne.n	8000d98 <HAL_RCC_OscConfig+0x134>
 8000d96:	e779      	b.n	8000c8c <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d98:	f7ff fb8c 	bl	80004b4 <HAL_GetTick>
 8000d9c:	1bc0      	subs	r0, r0, r7
 8000d9e:	2864      	cmp	r0, #100	; 0x64
 8000da0:	d9f4      	bls.n	8000d8c <HAL_RCC_OscConfig+0x128>
 8000da2:	e7d6      	b.n	8000d52 <HAL_RCC_OscConfig+0xee>
    hsi_state = RCC_OscInitStruct->HSIState;
 8000da4:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000da6:	2e04      	cmp	r6, #4
 8000da8:	d004      	beq.n	8000db4 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000daa:	2e0c      	cmp	r6, #12
 8000dac:	d125      	bne.n	8000dfa <HAL_RCC_OscConfig+0x196>
 8000dae:	9b01      	ldr	r3, [sp, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d122      	bne.n	8000dfa <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	d502      	bpl.n	8000dc0 <HAL_RCC_OscConfig+0x15c>
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d100      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x15c>
 8000dbe:	e756      	b.n	8000c6e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc0:	6861      	ldr	r1, [r4, #4]
 8000dc2:	692b      	ldr	r3, [r5, #16]
 8000dc4:	4870      	ldr	r0, [pc, #448]	; (8000f88 <HAL_RCC_OscConfig+0x324>)
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	4001      	ands	r1, r0
 8000dca:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000dcc:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dce:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000dd0:	6823      	ldr	r3, [r4, #0]
 8000dd2:	438b      	bics	r3, r1
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dd8:	f7ff ff04 	bl	8000be4 <HAL_RCC_GetSysClockFreq>
 8000ddc:	68e3      	ldr	r3, [r4, #12]
 8000dde:	4a66      	ldr	r2, [pc, #408]	; (8000f78 <HAL_RCC_OscConfig+0x314>)
 8000de0:	061b      	lsls	r3, r3, #24
 8000de2:	0f1b      	lsrs	r3, r3, #28
 8000de4:	5cd3      	ldrb	r3, [r2, r3]
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	4b64      	ldr	r3, [pc, #400]	; (8000f7c <HAL_RCC_OscConfig+0x318>)
 8000dea:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fb2d 	bl	800044c <HAL_InitTick>
      if(status != HAL_OK)
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d100      	bne.n	8000df8 <HAL_RCC_OscConfig+0x194>
 8000df6:	e74d      	b.n	8000c94 <HAL_RCC_OscConfig+0x30>
 8000df8:	e73a      	b.n	8000c70 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000dfa:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8000dfc:	2a00      	cmp	r2, #0
 8000dfe:	d018      	beq.n	8000e32 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000e00:	2109      	movs	r1, #9
 8000e02:	438b      	bics	r3, r1
 8000e04:	4313      	orrs	r3, r2
 8000e06:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e08:	f7ff fb54 	bl	80004b4 <HAL_GetTick>
 8000e0c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e0e:	2204      	movs	r2, #4
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	4213      	tst	r3, r2
 8000e14:	d007      	beq.n	8000e26 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e16:	6862      	ldr	r2, [r4, #4]
 8000e18:	692b      	ldr	r3, [r5, #16]
 8000e1a:	495b      	ldr	r1, [pc, #364]	; (8000f88 <HAL_RCC_OscConfig+0x324>)
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	400a      	ands	r2, r1
 8000e20:	4313      	orrs	r3, r2
 8000e22:	6063      	str	r3, [r4, #4]
 8000e24:	e736      	b.n	8000c94 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e26:	f7ff fb45 	bl	80004b4 <HAL_GetTick>
 8000e2a:	1bc0      	subs	r0, r0, r7
 8000e2c:	2802      	cmp	r0, #2
 8000e2e:	d9ee      	bls.n	8000e0e <HAL_RCC_OscConfig+0x1aa>
 8000e30:	e78f      	b.n	8000d52 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8000e32:	2201      	movs	r2, #1
 8000e34:	4393      	bics	r3, r2
 8000e36:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e38:	f7ff fb3c 	bl	80004b4 <HAL_GetTick>
 8000e3c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e3e:	2204      	movs	r2, #4
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	4213      	tst	r3, r2
 8000e44:	d100      	bne.n	8000e48 <HAL_RCC_OscConfig+0x1e4>
 8000e46:	e725      	b.n	8000c94 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e48:	f7ff fb34 	bl	80004b4 <HAL_GetTick>
 8000e4c:	1bc0      	subs	r0, r0, r7
 8000e4e:	2802      	cmp	r0, #2
 8000e50:	d9f5      	bls.n	8000e3e <HAL_RCC_OscConfig+0x1da>
 8000e52:	e77e      	b.n	8000d52 <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e54:	69eb      	ldr	r3, [r5, #28]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d020      	beq.n	8000e9c <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	6822      	ldr	r2, [r4, #0]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4313      	orrs	r3, r2
 8000e62:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e64:	f7ff fb26 	bl	80004b4 <HAL_GetTick>
 8000e68:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	0092      	lsls	r2, r2, #2
 8000e70:	4213      	tst	r3, r2
 8000e72:	d00d      	beq.n	8000e90 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e74:	6863      	ldr	r3, [r4, #4]
 8000e76:	4a3f      	ldr	r2, [pc, #252]	; (8000f74 <HAL_RCC_OscConfig+0x310>)
 8000e78:	4013      	ands	r3, r2
 8000e7a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e80:	6862      	ldr	r2, [r4, #4]
 8000e82:	6a2b      	ldr	r3, [r5, #32]
 8000e84:	0212      	lsls	r2, r2, #8
 8000e86:	061b      	lsls	r3, r3, #24
 8000e88:	0a12      	lsrs	r2, r2, #8
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	6063      	str	r3, [r4, #4]
 8000e8e:	e72d      	b.n	8000cec <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e90:	f7ff fb10 	bl	80004b4 <HAL_GetTick>
 8000e94:	1bc0      	subs	r0, r0, r7
 8000e96:	2802      	cmp	r0, #2
 8000e98:	d9e7      	bls.n	8000e6a <HAL_RCC_OscConfig+0x206>
 8000e9a:	e75a      	b.n	8000d52 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	4a3b      	ldr	r2, [pc, #236]	; (8000f8c <HAL_RCC_OscConfig+0x328>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fb06 	bl	80004b4 <HAL_GetTick>
 8000ea8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	6823      	ldr	r3, [r4, #0]
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	4213      	tst	r3, r2
 8000eb2:	d100      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x252>
 8000eb4:	e71a      	b.n	8000cec <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000eb6:	f7ff fafd 	bl	80004b4 <HAL_GetTick>
 8000eba:	1bc0      	subs	r0, r0, r7
 8000ebc:	2802      	cmp	r0, #2
 8000ebe:	d9f4      	bls.n	8000eaa <HAL_RCC_OscConfig+0x246>
 8000ec0:	e747      	b.n	8000d52 <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ec2:	696a      	ldr	r2, [r5, #20]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2a00      	cmp	r2, #0
 8000ec8:	d010      	beq.n	8000eec <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8000eca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000ed0:	f7ff faf0 	bl	80004b4 <HAL_GetTick>
 8000ed4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000eda:	4213      	tst	r3, r2
 8000edc:	d000      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x27c>
 8000ede:	e709      	b.n	8000cf4 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ee0:	f7ff fae8 	bl	80004b4 <HAL_GetTick>
 8000ee4:	1bc0      	subs	r0, r0, r7
 8000ee6:	2802      	cmp	r0, #2
 8000ee8:	d9f5      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x272>
 8000eea:	e732      	b.n	8000d52 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8000eec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000eee:	439a      	bics	r2, r3
 8000ef0:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000ef2:	f7ff fadf 	bl	80004b4 <HAL_GetTick>
 8000ef6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ef8:	2202      	movs	r2, #2
 8000efa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000efc:	4213      	tst	r3, r2
 8000efe:	d100      	bne.n	8000f02 <HAL_RCC_OscConfig+0x29e>
 8000f00:	e6f8      	b.n	8000cf4 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f02:	f7ff fad7 	bl	80004b4 <HAL_GetTick>
 8000f06:	1bc0      	subs	r0, r0, r7
 8000f08:	2802      	cmp	r0, #2
 8000f0a:	d9f5      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x294>
 8000f0c:	e721      	b.n	8000d52 <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f0e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000f10:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000f14:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000f16:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f18:	421a      	tst	r2, r3
 8000f1a:	d104      	bne.n	8000f26 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000f22:	2301      	movs	r3, #1
 8000f24:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	4f19      	ldr	r7, [pc, #100]	; (8000f90 <HAL_RCC_OscConfig+0x32c>)
 8000f2a:	0052      	lsls	r2, r2, #1
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	4213      	tst	r3, r2
 8000f30:	d008      	beq.n	8000f44 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f32:	2280      	movs	r2, #128	; 0x80
 8000f34:	68ab      	ldr	r3, [r5, #8]
 8000f36:	0052      	lsls	r2, r2, #1
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d12b      	bne.n	8000f94 <HAL_RCC_OscConfig+0x330>
 8000f3c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	6523      	str	r3, [r4, #80]	; 0x50
 8000f42:	e04c      	b.n	8000fde <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	0052      	lsls	r2, r2, #1
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fab1 	bl	80004b4 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8000f56:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f58:	9303      	str	r3, [sp, #12]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	9a03      	ldr	r2, [sp, #12]
 8000f5e:	4213      	tst	r3, r2
 8000f60:	d1e7      	bne.n	8000f32 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f62:	f7ff faa7 	bl	80004b4 <HAL_GetTick>
 8000f66:	9b02      	ldr	r3, [sp, #8]
 8000f68:	1ac0      	subs	r0, r0, r3
 8000f6a:	2864      	cmp	r0, #100	; 0x64
 8000f6c:	d9f5      	bls.n	8000f5a <HAL_RCC_OscConfig+0x2f6>
 8000f6e:	e6f0      	b.n	8000d52 <HAL_RCC_OscConfig+0xee>
 8000f70:	40021000 	.word	0x40021000
 8000f74:	ffff1fff 	.word	0xffff1fff
 8000f78:	08004698 	.word	0x08004698
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	fffeffff 	.word	0xfffeffff
 8000f84:	fffbffff 	.word	0xfffbffff
 8000f88:	ffffe0ff 	.word	0xffffe0ff
 8000f8c:	fffffeff 	.word	0xfffffeff
 8000f90:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d116      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x362>
 8000f98:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f9a:	4a6c      	ldr	r2, [pc, #432]	; (800114c <HAL_RCC_OscConfig+0x4e8>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	6523      	str	r3, [r4, #80]	; 0x50
 8000fa0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000fa2:	4a6b      	ldr	r2, [pc, #428]	; (8001150 <HAL_RCC_OscConfig+0x4ec>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000fa8:	f7ff fa84 	bl	80004b4 <HAL_GetTick>
 8000fac:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	4213      	tst	r3, r2
 8000fb6:	d02a      	beq.n	800100e <HAL_RCC_OscConfig+0x3aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb8:	f7ff fa7c 	bl	80004b4 <HAL_GetTick>
 8000fbc:	4b65      	ldr	r3, [pc, #404]	; (8001154 <HAL_RCC_OscConfig+0x4f0>)
 8000fbe:	1bc0      	subs	r0, r0, r7
 8000fc0:	4298      	cmp	r0, r3
 8000fc2:	d9f4      	bls.n	8000fae <HAL_RCC_OscConfig+0x34a>
 8000fc4:	e6c5      	b.n	8000d52 <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc6:	21a0      	movs	r1, #160	; 0xa0
 8000fc8:	00c9      	lsls	r1, r1, #3
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	d10b      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x382>
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	430b      	orrs	r3, r1
 8000fd6:	6523      	str	r3, [r4, #80]	; 0x50
 8000fd8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000fde:	f7ff fa69 	bl	80004b4 <HAL_GetTick>
 8000fe2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fe4:	e00e      	b.n	8001004 <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000fe8:	4a58      	ldr	r2, [pc, #352]	; (800114c <HAL_RCC_OscConfig+0x4e8>)
 8000fea:	4013      	ands	r3, r2
 8000fec:	6523      	str	r3, [r4, #80]	; 0x50
 8000fee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ff0:	4a57      	ldr	r2, [pc, #348]	; (8001150 <HAL_RCC_OscConfig+0x4ec>)
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	e7a4      	b.n	8000f40 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff6:	f7ff fa5d 	bl	80004b4 <HAL_GetTick>
 8000ffa:	4b56      	ldr	r3, [pc, #344]	; (8001154 <HAL_RCC_OscConfig+0x4f0>)
 8000ffc:	1bc0      	subs	r0, r0, r7
 8000ffe:	4298      	cmp	r0, r3
 8001000:	d900      	bls.n	8001004 <HAL_RCC_OscConfig+0x3a0>
 8001002:	e6a6      	b.n	8000d52 <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	4213      	tst	r3, r2
 800100c:	d0f3      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 800100e:	9b01      	ldr	r3, [sp, #4]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d000      	beq.n	8001016 <HAL_RCC_OscConfig+0x3b2>
 8001014:	e672      	b.n	8000cfc <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001016:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001018:	4a4f      	ldr	r2, [pc, #316]	; (8001158 <HAL_RCC_OscConfig+0x4f4>)
 800101a:	4013      	ands	r3, r2
 800101c:	63a3      	str	r3, [r4, #56]	; 0x38
 800101e:	e66d      	b.n	8000cfc <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001020:	69a9      	ldr	r1, [r5, #24]
 8001022:	2301      	movs	r3, #1
 8001024:	4a4d      	ldr	r2, [pc, #308]	; (800115c <HAL_RCC_OscConfig+0x4f8>)
 8001026:	2900      	cmp	r1, #0
 8001028:	d018      	beq.n	800105c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_HSI48_ENABLE();
 800102a:	68a1      	ldr	r1, [r4, #8]
 800102c:	4319      	orrs	r1, r3
 800102e:	60a1      	str	r1, [r4, #8]
 8001030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001032:	430b      	orrs	r3, r1
 8001034:	6363      	str	r3, [r4, #52]	; 0x34
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	6a11      	ldr	r1, [r2, #32]
 800103a:	019b      	lsls	r3, r3, #6
 800103c:	430b      	orrs	r3, r1
 800103e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001040:	f7ff fa38 	bl	80004b4 <HAL_GetTick>
 8001044:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001046:	2202      	movs	r2, #2
 8001048:	68a3      	ldr	r3, [r4, #8]
 800104a:	4213      	tst	r3, r2
 800104c:	d000      	beq.n	8001050 <HAL_RCC_OscConfig+0x3ec>
 800104e:	e659      	b.n	8000d04 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001050:	f7ff fa30 	bl	80004b4 <HAL_GetTick>
 8001054:	1bc0      	subs	r0, r0, r7
 8001056:	2802      	cmp	r0, #2
 8001058:	d9f5      	bls.n	8001046 <HAL_RCC_OscConfig+0x3e2>
 800105a:	e67a      	b.n	8000d52 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 800105c:	68a1      	ldr	r1, [r4, #8]
 800105e:	4399      	bics	r1, r3
 8001060:	60a1      	str	r1, [r4, #8]
 8001062:	6a13      	ldr	r3, [r2, #32]
 8001064:	493e      	ldr	r1, [pc, #248]	; (8001160 <HAL_RCC_OscConfig+0x4fc>)
 8001066:	400b      	ands	r3, r1
 8001068:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800106a:	f7ff fa23 	bl	80004b4 <HAL_GetTick>
 800106e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001070:	2202      	movs	r2, #2
 8001072:	68a3      	ldr	r3, [r4, #8]
 8001074:	4213      	tst	r3, r2
 8001076:	d100      	bne.n	800107a <HAL_RCC_OscConfig+0x416>
 8001078:	e644      	b.n	8000d04 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800107a:	f7ff fa1b 	bl	80004b4 <HAL_GetTick>
 800107e:	1bc0      	subs	r0, r0, r7
 8001080:	2802      	cmp	r0, #2
 8001082:	d9f5      	bls.n	8001070 <HAL_RCC_OscConfig+0x40c>
 8001084:	e665      	b.n	8000d52 <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001086:	2e0c      	cmp	r6, #12
 8001088:	d043      	beq.n	8001112 <HAL_RCC_OscConfig+0x4ae>
 800108a:	4a36      	ldr	r2, [pc, #216]	; (8001164 <HAL_RCC_OscConfig+0x500>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800108c:	2b02      	cmp	r3, #2
 800108e:	d12e      	bne.n	80010ee <HAL_RCC_OscConfig+0x48a>
        __HAL_RCC_PLL_DISABLE();
 8001090:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001092:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001094:	4013      	ands	r3, r2
 8001096:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001098:	f7ff fa0c 	bl	80004b4 <HAL_GetTick>
 800109c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800109e:	04b6      	lsls	r6, r6, #18
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	4233      	tst	r3, r6
 80010a4:	d11d      	bne.n	80010e2 <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010a6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80010a8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80010aa:	68e2      	ldr	r2, [r4, #12]
 80010ac:	430b      	orrs	r3, r1
 80010ae:	492e      	ldr	r1, [pc, #184]	; (8001168 <HAL_RCC_OscConfig+0x504>)
 80010b0:	400a      	ands	r2, r1
 80010b2:	4313      	orrs	r3, r2
 80010b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80010b6:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010b8:	4313      	orrs	r3, r2
 80010ba:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	6822      	ldr	r2, [r4, #0]
 80010c0:	045b      	lsls	r3, r3, #17
 80010c2:	4313      	orrs	r3, r2
 80010c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010c6:	f7ff f9f5 	bl	80004b4 <HAL_GetTick>
 80010ca:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80010cc:	04ad      	lsls	r5, r5, #18
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	422b      	tst	r3, r5
 80010d2:	d000      	beq.n	80010d6 <HAL_RCC_OscConfig+0x472>
 80010d4:	e61a      	b.n	8000d0c <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010d6:	f7ff f9ed 	bl	80004b4 <HAL_GetTick>
 80010da:	1b80      	subs	r0, r0, r6
 80010dc:	2802      	cmp	r0, #2
 80010de:	d9f6      	bls.n	80010ce <HAL_RCC_OscConfig+0x46a>
 80010e0:	e637      	b.n	8000d52 <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010e2:	f7ff f9e7 	bl	80004b4 <HAL_GetTick>
 80010e6:	1bc0      	subs	r0, r0, r7
 80010e8:	2802      	cmp	r0, #2
 80010ea:	d9d9      	bls.n	80010a0 <HAL_RCC_OscConfig+0x43c>
 80010ec:	e631      	b.n	8000d52 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 80010ee:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80010f0:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80010f2:	4013      	ands	r3, r2
 80010f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010f6:	f7ff f9dd 	bl	80004b4 <HAL_GetTick>
 80010fa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80010fc:	04ad      	lsls	r5, r5, #18
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	422b      	tst	r3, r5
 8001102:	d100      	bne.n	8001106 <HAL_RCC_OscConfig+0x4a2>
 8001104:	e602      	b.n	8000d0c <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001106:	f7ff f9d5 	bl	80004b4 <HAL_GetTick>
 800110a:	1b80      	subs	r0, r0, r6
 800110c:	2802      	cmp	r0, #2
 800110e:	d9f6      	bls.n	80010fe <HAL_RCC_OscConfig+0x49a>
 8001110:	e61f      	b.n	8000d52 <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 8001112:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001114:	2b01      	cmp	r3, #1
 8001116:	d100      	bne.n	800111a <HAL_RCC_OscConfig+0x4b6>
 8001118:	e5aa      	b.n	8000c70 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111a:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800111c:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001120:	0252      	lsls	r2, r2, #9
 8001122:	401a      	ands	r2, r3
        return HAL_ERROR;
 8001124:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001126:	428a      	cmp	r2, r1
 8001128:	d000      	beq.n	800112c <HAL_RCC_OscConfig+0x4c8>
 800112a:	e5a1      	b.n	8000c70 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800112c:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112e:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001130:	0392      	lsls	r2, r2, #14
 8001132:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001134:	428a      	cmp	r2, r1
 8001136:	d000      	beq.n	800113a <HAL_RCC_OscConfig+0x4d6>
 8001138:	e59a      	b.n	8000c70 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800113a:	20c0      	movs	r0, #192	; 0xc0
 800113c:	0400      	lsls	r0, r0, #16
 800113e:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001140:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001142:	1a18      	subs	r0, r3, r0
 8001144:	1e43      	subs	r3, r0, #1
 8001146:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8001148:	b2c0      	uxtb	r0, r0
 800114a:	e591      	b.n	8000c70 <HAL_RCC_OscConfig+0xc>
 800114c:	fffffeff 	.word	0xfffffeff
 8001150:	fffffbff 	.word	0xfffffbff
 8001154:	00001388 	.word	0x00001388
 8001158:	efffffff 	.word	0xefffffff
 800115c:	40010000 	.word	0x40010000
 8001160:	ffffdfff 	.word	0xffffdfff
 8001164:	feffffff 	.word	0xfeffffff
 8001168:	ff02ffff 	.word	0xff02ffff

0800116c <HAL_RCC_ClockConfig>:
{
 800116c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800116e:	1e06      	subs	r6, r0, #0
 8001170:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8001172:	d101      	bne.n	8001178 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001174:	2001      	movs	r0, #1
}
 8001176:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001178:	2201      	movs	r2, #1
 800117a:	4c51      	ldr	r4, [pc, #324]	; (80012c0 <HAL_RCC_ClockConfig+0x154>)
 800117c:	9901      	ldr	r1, [sp, #4]
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	4013      	ands	r3, r2
 8001182:	428b      	cmp	r3, r1
 8001184:	d327      	bcc.n	80011d6 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001186:	6832      	ldr	r2, [r6, #0]
 8001188:	0793      	lsls	r3, r2, #30
 800118a:	d42f      	bmi.n	80011ec <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118c:	07d3      	lsls	r3, r2, #31
 800118e:	d435      	bmi.n	80011fc <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001190:	2301      	movs	r3, #1
 8001192:	6822      	ldr	r2, [r4, #0]
 8001194:	9901      	ldr	r1, [sp, #4]
 8001196:	401a      	ands	r2, r3
 8001198:	428a      	cmp	r2, r1
 800119a:	d900      	bls.n	800119e <HAL_RCC_ClockConfig+0x32>
 800119c:	e081      	b.n	80012a2 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800119e:	6832      	ldr	r2, [r6, #0]
 80011a0:	4c48      	ldr	r4, [pc, #288]	; (80012c4 <HAL_RCC_ClockConfig+0x158>)
 80011a2:	0753      	lsls	r3, r2, #29
 80011a4:	d500      	bpl.n	80011a8 <HAL_RCC_ClockConfig+0x3c>
 80011a6:	e084      	b.n	80012b2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a8:	0713      	lsls	r3, r2, #28
 80011aa:	d506      	bpl.n	80011ba <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011ac:	68e2      	ldr	r2, [r4, #12]
 80011ae:	6933      	ldr	r3, [r6, #16]
 80011b0:	4945      	ldr	r1, [pc, #276]	; (80012c8 <HAL_RCC_ClockConfig+0x15c>)
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	400a      	ands	r2, r1
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ba:	f7ff fd13 	bl	8000be4 <HAL_RCC_GetSysClockFreq>
 80011be:	68e3      	ldr	r3, [r4, #12]
 80011c0:	4a42      	ldr	r2, [pc, #264]	; (80012cc <HAL_RCC_ClockConfig+0x160>)
 80011c2:	061b      	lsls	r3, r3, #24
 80011c4:	0f1b      	lsrs	r3, r3, #28
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	40d8      	lsrs	r0, r3
 80011ca:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <HAL_RCC_ClockConfig+0x164>)
 80011cc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff f93c 	bl	800044c <HAL_InitTick>
 80011d4:	e7cf      	b.n	8001176 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	9901      	ldr	r1, [sp, #4]
 80011da:	4393      	bics	r3, r2
 80011dc:	430b      	orrs	r3, r1
 80011de:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	4013      	ands	r3, r2
 80011e4:	9a01      	ldr	r2, [sp, #4]
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d1c4      	bne.n	8001174 <HAL_RCC_ClockConfig+0x8>
 80011ea:	e7cc      	b.n	8001186 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ec:	20f0      	movs	r0, #240	; 0xf0
 80011ee:	4935      	ldr	r1, [pc, #212]	; (80012c4 <HAL_RCC_ClockConfig+0x158>)
 80011f0:	68cb      	ldr	r3, [r1, #12]
 80011f2:	4383      	bics	r3, r0
 80011f4:	68b0      	ldr	r0, [r6, #8]
 80011f6:	4303      	orrs	r3, r0
 80011f8:	60cb      	str	r3, [r1, #12]
 80011fa:	e7c7      	b.n	800118c <HAL_RCC_ClockConfig+0x20>
 80011fc:	4d31      	ldr	r5, [pc, #196]	; (80012c4 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011fe:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001200:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001202:	2a02      	cmp	r2, #2
 8001204:	d119      	bne.n	800123a <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001206:	039b      	lsls	r3, r3, #14
 8001208:	d5b4      	bpl.n	8001174 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800120a:	2103      	movs	r1, #3
 800120c:	68eb      	ldr	r3, [r5, #12]
 800120e:	438b      	bics	r3, r1
 8001210:	4313      	orrs	r3, r2
 8001212:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8001214:	f7ff f94e 	bl	80004b4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001218:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800121a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121c:	2b02      	cmp	r3, #2
 800121e:	d119      	bne.n	8001254 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001220:	220c      	movs	r2, #12
 8001222:	68eb      	ldr	r3, [r5, #12]
 8001224:	4013      	ands	r3, r2
 8001226:	2b08      	cmp	r3, #8
 8001228:	d0b2      	beq.n	8001190 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800122a:	f7ff f943 	bl	80004b4 <HAL_GetTick>
 800122e:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <HAL_RCC_ClockConfig+0x168>)
 8001230:	1bc0      	subs	r0, r0, r7
 8001232:	4298      	cmp	r0, r3
 8001234:	d9f4      	bls.n	8001220 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8001236:	2003      	movs	r0, #3
 8001238:	e79d      	b.n	8001176 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800123a:	2a03      	cmp	r2, #3
 800123c:	d102      	bne.n	8001244 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800123e:	019b      	lsls	r3, r3, #6
 8001240:	d4e3      	bmi.n	800120a <HAL_RCC_ClockConfig+0x9e>
 8001242:	e797      	b.n	8001174 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001244:	2a01      	cmp	r2, #1
 8001246:	d102      	bne.n	800124e <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001248:	075b      	lsls	r3, r3, #29
 800124a:	d4de      	bmi.n	800120a <HAL_RCC_ClockConfig+0x9e>
 800124c:	e792      	b.n	8001174 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800124e:	059b      	lsls	r3, r3, #22
 8001250:	d4db      	bmi.n	800120a <HAL_RCC_ClockConfig+0x9e>
 8001252:	e78f      	b.n	8001174 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001254:	2b03      	cmp	r3, #3
 8001256:	d10b      	bne.n	8001270 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001258:	220c      	movs	r2, #12
 800125a:	68eb      	ldr	r3, [r5, #12]
 800125c:	4013      	ands	r3, r2
 800125e:	4293      	cmp	r3, r2
 8001260:	d096      	beq.n	8001190 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001262:	f7ff f927 	bl	80004b4 <HAL_GetTick>
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_RCC_ClockConfig+0x168>)
 8001268:	1bc0      	subs	r0, r0, r7
 800126a:	4298      	cmp	r0, r3
 800126c:	d9f4      	bls.n	8001258 <HAL_RCC_ClockConfig+0xec>
 800126e:	e7e2      	b.n	8001236 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001270:	2b01      	cmp	r3, #1
 8001272:	d010      	beq.n	8001296 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001274:	220c      	movs	r2, #12
 8001276:	68eb      	ldr	r3, [r5, #12]
 8001278:	4213      	tst	r3, r2
 800127a:	d089      	beq.n	8001190 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127c:	f7ff f91a 	bl	80004b4 <HAL_GetTick>
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <HAL_RCC_ClockConfig+0x168>)
 8001282:	1bc0      	subs	r0, r0, r7
 8001284:	4298      	cmp	r0, r3
 8001286:	d9f5      	bls.n	8001274 <HAL_RCC_ClockConfig+0x108>
 8001288:	e7d5      	b.n	8001236 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800128a:	f7ff f913 	bl	80004b4 <HAL_GetTick>
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_RCC_ClockConfig+0x168>)
 8001290:	1bc0      	subs	r0, r0, r7
 8001292:	4298      	cmp	r0, r3
 8001294:	d8cf      	bhi.n	8001236 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001296:	220c      	movs	r2, #12
 8001298:	68eb      	ldr	r3, [r5, #12]
 800129a:	4013      	ands	r3, r2
 800129c:	2b04      	cmp	r3, #4
 800129e:	d1f4      	bne.n	800128a <HAL_RCC_ClockConfig+0x11e>
 80012a0:	e776      	b.n	8001190 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a2:	6822      	ldr	r2, [r4, #0]
 80012a4:	439a      	bics	r2, r3
 80012a6:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a8:	6822      	ldr	r2, [r4, #0]
 80012aa:	421a      	tst	r2, r3
 80012ac:	d100      	bne.n	80012b0 <HAL_RCC_ClockConfig+0x144>
 80012ae:	e776      	b.n	800119e <HAL_RCC_ClockConfig+0x32>
 80012b0:	e760      	b.n	8001174 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012b2:	68e3      	ldr	r3, [r4, #12]
 80012b4:	4908      	ldr	r1, [pc, #32]	; (80012d8 <HAL_RCC_ClockConfig+0x16c>)
 80012b6:	400b      	ands	r3, r1
 80012b8:	68f1      	ldr	r1, [r6, #12]
 80012ba:	430b      	orrs	r3, r1
 80012bc:	60e3      	str	r3, [r4, #12]
 80012be:	e773      	b.n	80011a8 <HAL_RCC_ClockConfig+0x3c>
 80012c0:	40022000 	.word	0x40022000
 80012c4:	40021000 	.word	0x40021000
 80012c8:	ffffc7ff 	.word	0xffffc7ff
 80012cc:	08004698 	.word	0x08004698
 80012d0:	20000004 	.word	0x20000004
 80012d4:	00001388 	.word	0x00001388
 80012d8:	fffff8ff 	.word	0xfffff8ff

080012dc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80012dc:	4b01      	ldr	r3, [pc, #4]	; (80012e4 <HAL_RCC_GetHCLKFreq+0x8>)
 80012de:	6818      	ldr	r0, [r3, #0]
}
 80012e0:	4770      	bx	lr
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	20000004 	.word	0x20000004

080012e8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <HAL_RCC_GetPCLK1Freq+0x14>)
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <HAL_RCC_GetPCLK1Freq+0x18>)
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	055b      	lsls	r3, r3, #21
 80012f0:	0f5b      	lsrs	r3, r3, #29
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	4a03      	ldr	r2, [pc, #12]	; (8001304 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80012f6:	6810      	ldr	r0, [r2, #0]
 80012f8:	40d8      	lsrs	r0, r3
}
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000
 8001300:	080046a8 	.word	0x080046a8
 8001304:	20000004 	.word	0x20000004

08001308 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <HAL_RCC_GetPCLK2Freq+0x14>)
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <HAL_RCC_GetPCLK2Freq+0x18>)
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	049b      	lsls	r3, r3, #18
 8001310:	0f5b      	lsrs	r3, r3, #29
 8001312:	5cd3      	ldrb	r3, [r2, r3]
 8001314:	4a03      	ldr	r2, [pc, #12]	; (8001324 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001316:	6810      	ldr	r0, [r2, #0]
 8001318:	40d8      	lsrs	r0, r3
}
 800131a:	4770      	bx	lr
 800131c:	40021000 	.word	0x40021000
 8001320:	080046a8 	.word	0x080046a8
 8001324:	20000004 	.word	0x20000004

08001328 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001328:	6803      	ldr	r3, [r0, #0]
{
 800132a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800132c:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800132e:	069b      	lsls	r3, r3, #26
 8001330:	d53b      	bpl.n	80013aa <HAL_RCCEx_PeriphCLKConfig+0x82>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001332:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001334:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001336:	4c59      	ldr	r4, [pc, #356]	; (800149c <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8001338:	055b      	lsls	r3, r3, #21
 800133a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 800133c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133e:	421a      	tst	r2, r3
 8001340:	d104      	bne.n	800134c <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001344:	4313      	orrs	r3, r2
 8001346:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001348:	2301      	movs	r3, #1
 800134a:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134c:	2780      	movs	r7, #128	; 0x80
 800134e:	4e54      	ldr	r6, [pc, #336]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001350:	007f      	lsls	r7, r7, #1
 8001352:	6833      	ldr	r3, [r6, #0]
 8001354:	423b      	tst	r3, r7
 8001356:	d061      	beq.n	800141c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001358:	6868      	ldr	r0, [r5, #4]
 800135a:	23c0      	movs	r3, #192	; 0xc0
 800135c:	26c0      	movs	r6, #192	; 0xc0
 800135e:	0001      	movs	r1, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001360:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001362:	03b6      	lsls	r6, r6, #14
 8001364:	029b      	lsls	r3, r3, #10
 8001366:	4030      	ands	r0, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001368:	4032      	ands	r2, r6
 800136a:	4019      	ands	r1, r3
 800136c:	001e      	movs	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800136e:	4290      	cmp	r0, r2
 8001370:	d165      	bne.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x116>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001372:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001374:	4033      	ands	r3, r6

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001376:	d16a      	bne.n	800144e <HAL_RCCEx_PeriphCLKConfig+0x126>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001378:	6869      	ldr	r1, [r5, #4]
 800137a:	23c0      	movs	r3, #192	; 0xc0
 800137c:	000a      	movs	r2, r1
 800137e:	029b      	lsls	r3, r3, #10
 8001380:	401a      	ands	r2, r3
 8001382:	429a      	cmp	r2, r3
 8001384:	d107      	bne.n	8001396 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8001386:	6823      	ldr	r3, [r4, #0]
 8001388:	4846      	ldr	r0, [pc, #280]	; (80014a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 800138a:	4003      	ands	r3, r0
 800138c:	20c0      	movs	r0, #192	; 0xc0
 800138e:	0380      	lsls	r0, r0, #14
 8001390:	4001      	ands	r1, r0
 8001392:	430b      	orrs	r3, r1
 8001394:	6023      	str	r3, [r4, #0]
 8001396:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001398:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800139a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800139c:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d103      	bne.n	80013aa <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013a4:	4a40      	ldr	r2, [pc, #256]	; (80014a8 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80013aa:	682b      	ldr	r3, [r5, #0]
 80013ac:	07da      	lsls	r2, r3, #31
 80013ae:	d506      	bpl.n	80013be <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80013b0:	2003      	movs	r0, #3
 80013b2:	493a      	ldr	r1, [pc, #232]	; (800149c <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80013b4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80013b6:	4382      	bics	r2, r0
 80013b8:	68a8      	ldr	r0, [r5, #8]
 80013ba:	4302      	orrs	r2, r0
 80013bc:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80013be:	079a      	lsls	r2, r3, #30
 80013c0:	d506      	bpl.n	80013d0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80013c2:	200c      	movs	r0, #12
 80013c4:	4935      	ldr	r1, [pc, #212]	; (800149c <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80013c6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80013c8:	4382      	bics	r2, r0
 80013ca:	68e8      	ldr	r0, [r5, #12]
 80013cc:	4302      	orrs	r2, r0
 80013ce:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80013d0:	075a      	lsls	r2, r3, #29
 80013d2:	d506      	bpl.n	80013e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80013d4:	4931      	ldr	r1, [pc, #196]	; (800149c <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80013d6:	4835      	ldr	r0, [pc, #212]	; (80014ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013d8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80013da:	4002      	ands	r2, r0
 80013dc:	6928      	ldr	r0, [r5, #16]
 80013de:	4302      	orrs	r2, r0
 80013e0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80013e2:	071a      	lsls	r2, r3, #28
 80013e4:	d506      	bpl.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80013e6:	492d      	ldr	r1, [pc, #180]	; (800149c <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80013e8:	4831      	ldr	r0, [pc, #196]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80013ea:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80013ec:	4002      	ands	r2, r0
 80013ee:	6968      	ldr	r0, [r5, #20]
 80013f0:	4302      	orrs	r2, r0
 80013f2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80013f4:	065a      	lsls	r2, r3, #25
 80013f6:	d506      	bpl.n	8001406 <HAL_RCCEx_PeriphCLKConfig+0xde>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013f8:	4928      	ldr	r1, [pc, #160]	; (800149c <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80013fa:	482e      	ldr	r0, [pc, #184]	; (80014b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80013fc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80013fe:	4002      	ands	r2, r0
 8001400:	69e8      	ldr	r0, [r5, #28]
 8001402:	4302      	orrs	r2, r0
 8001404:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001406:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001408:	061b      	lsls	r3, r3, #24
 800140a:	d517      	bpl.n	800143c <HAL_RCCEx_PeriphCLKConfig+0x114>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800140c:	4a23      	ldr	r2, [pc, #140]	; (800149c <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800140e:	492a      	ldr	r1, [pc, #168]	; (80014b8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001410:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001412:	400b      	ands	r3, r1
 8001414:	69a9      	ldr	r1, [r5, #24]
 8001416:	430b      	orrs	r3, r1
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	e00f      	b.n	800143c <HAL_RCCEx_PeriphCLKConfig+0x114>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800141c:	6833      	ldr	r3, [r6, #0]
 800141e:	433b      	orrs	r3, r7
 8001420:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001422:	f7ff f847 	bl	80004b4 <HAL_GetTick>
 8001426:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	6833      	ldr	r3, [r6, #0]
 800142a:	423b      	tst	r3, r7
 800142c:	d194      	bne.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142e:	f7ff f841 	bl	80004b4 <HAL_GetTick>
 8001432:	9b01      	ldr	r3, [sp, #4]
 8001434:	1ac0      	subs	r0, r0, r3
 8001436:	2864      	cmp	r0, #100	; 0x64
 8001438:	d9f6      	bls.n	8001428 <HAL_RCCEx_PeriphCLKConfig+0x100>
          return HAL_TIMEOUT;
 800143a:	2003      	movs	r0, #3
}
 800143c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800143e:	4299      	cmp	r1, r3
 8001440:	d197      	bne.n	8001372 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001442:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8001444:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001446:	039b      	lsls	r3, r3, #14
 8001448:	d400      	bmi.n	800144c <HAL_RCCEx_PeriphCLKConfig+0x124>
 800144a:	e792      	b.n	8001372 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800144c:	e7f6      	b.n	800143c <HAL_RCCEx_PeriphCLKConfig+0x114>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800144e:	428b      	cmp	r3, r1
 8001450:	d100      	bne.n	8001454 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8001452:	e791      	b.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001454:	682b      	ldr	r3, [r5, #0]
 8001456:	069b      	lsls	r3, r3, #26
 8001458:	d400      	bmi.n	800145c <HAL_RCCEx_PeriphCLKConfig+0x134>
 800145a:	e78d      	b.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_BACKUPRESET_FORCE();
 800145c:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800145e:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001460:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001462:	0312      	lsls	r2, r2, #12
 8001464:	4302      	orrs	r2, r0
 8001466:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001468:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <HAL_RCCEx_PeriphCLKConfig+0x194>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800146c:	4814      	ldr	r0, [pc, #80]	; (80014c0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800146e:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001470:	4002      	ands	r2, r0
 8001472:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001474:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001476:	05cb      	lsls	r3, r1, #23
 8001478:	d400      	bmi.n	800147c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800147a:	e77d      	b.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0x50>
        tickstart = HAL_GetTick();
 800147c:	f7ff f81a 	bl	80004b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001480:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001482:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001484:	00bf      	lsls	r7, r7, #2
 8001486:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001488:	423b      	tst	r3, r7
 800148a:	d000      	beq.n	800148e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800148c:	e774      	b.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148e:	f7ff f811 	bl	80004b4 <HAL_GetTick>
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001494:	1b80      	subs	r0, r0, r6
 8001496:	4298      	cmp	r0, r3
 8001498:	d9f5      	bls.n	8001486 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800149a:	e7ce      	b.n	800143a <HAL_RCCEx_PeriphCLKConfig+0x112>
 800149c:	40021000 	.word	0x40021000
 80014a0:	40007000 	.word	0x40007000
 80014a4:	ffcfffff 	.word	0xffcfffff
 80014a8:	efffffff 	.word	0xefffffff
 80014ac:	fffff3ff 	.word	0xfffff3ff
 80014b0:	ffffcfff 	.word	0xffffcfff
 80014b4:	fbffffff 	.word	0xfbffffff
 80014b8:	fff3ffff 	.word	0xfff3ffff
 80014bc:	fffcffff 	.word	0xfffcffff
 80014c0:	fff7ffff 	.word	0xfff7ffff
 80014c4:	00001388 	.word	0x00001388

080014c8 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80014c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ca:	0004      	movs	r4, r0
 80014cc:	000d      	movs	r5, r1
 80014ce:	0016      	movs	r6, r2
 80014d0:	001f      	movs	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80014d2:	6822      	ldr	r2, [r4, #0]
 80014d4:	6893      	ldr	r3, [r2, #8]
 80014d6:	402b      	ands	r3, r5
 80014d8:	429d      	cmp	r5, r3
 80014da:	d001      	beq.n	80014e0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80014dc:	2000      	movs	r0, #0
 80014de:	e031      	b.n	8001544 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80014e0:	1c73      	adds	r3, r6, #1
 80014e2:	d0f7      	beq.n	80014d4 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80014e4:	f7fe ffe6 	bl	80004b4 <HAL_GetTick>
 80014e8:	1bc0      	subs	r0, r0, r7
 80014ea:	4286      	cmp	r6, r0
 80014ec:	d8f1      	bhi.n	80014d2 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80014ee:	21e0      	movs	r1, #224	; 0xe0
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	438a      	bics	r2, r1
 80014f6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014f8:	2282      	movs	r2, #130	; 0x82
 80014fa:	6861      	ldr	r1, [r4, #4]
 80014fc:	0052      	lsls	r2, r2, #1
 80014fe:	4291      	cmp	r1, r2
 8001500:	d10c      	bne.n	800151c <SPI_WaitFlagStateUntilTimeout.constprop.7+0x54>
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	68a2      	ldr	r2, [r4, #8]
 8001506:	0209      	lsls	r1, r1, #8
 8001508:	428a      	cmp	r2, r1
 800150a:	d003      	beq.n	8001514 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	00c9      	lsls	r1, r1, #3
 8001510:	428a      	cmp	r2, r1
 8001512:	d103      	bne.n	800151c <SPI_WaitFlagStateUntilTimeout.constprop.7+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001514:	2140      	movs	r1, #64	; 0x40
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	438a      	bics	r2, r1
 800151a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001520:	0189      	lsls	r1, r1, #6
 8001522:	428a      	cmp	r2, r1
 8001524:	d106      	bne.n	8001534 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x6c>
          SPI_RESET_CRC(hspi);
 8001526:	6819      	ldr	r1, [r3, #0]
 8001528:	4807      	ldr	r0, [pc, #28]	; (8001548 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x80>)
 800152a:	4001      	ands	r1, r0
 800152c:	6019      	str	r1, [r3, #0]
 800152e:	6819      	ldr	r1, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001534:	0023      	movs	r3, r4
 8001536:	2201      	movs	r2, #1
 8001538:	3351      	adds	r3, #81	; 0x51
 800153a:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800153c:	2300      	movs	r3, #0
 800153e:	2003      	movs	r0, #3
 8001540:	3450      	adds	r4, #80	; 0x50
 8001542:	7023      	strb	r3, [r4, #0]
}
 8001544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	ffffdfff 	.word	0xffffdfff

0800154c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154e:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001550:	2282      	movs	r2, #130	; 0x82
{
 8001552:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001554:	6840      	ldr	r0, [r0, #4]
 8001556:	0052      	lsls	r2, r2, #1
 8001558:	4290      	cmp	r0, r2
 800155a:	d11e      	bne.n	800159a <SPI_EndRxTransaction+0x4e>
 800155c:	2080      	movs	r0, #128	; 0x80
 800155e:	2580      	movs	r5, #128	; 0x80
 8001560:	68a2      	ldr	r2, [r4, #8]
 8001562:	0200      	lsls	r0, r0, #8
 8001564:	00ed      	lsls	r5, r5, #3
 8001566:	4282      	cmp	r2, r0
 8001568:	d001      	beq.n	800156e <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800156a:	42aa      	cmp	r2, r5
 800156c:	d106      	bne.n	800157c <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800156e:	2740      	movs	r7, #64	; 0x40
 8001570:	6826      	ldr	r6, [r4, #0]
 8001572:	6830      	ldr	r0, [r6, #0]
 8001574:	43b8      	bics	r0, r7
 8001576:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001578:	42aa      	cmp	r2, r5
 800157a:	d00e      	beq.n	800159a <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800157c:	000a      	movs	r2, r1
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	0020      	movs	r0, r4
 8001582:	f7ff ffa1 	bl	80014c8 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8001586:	2800      	cmp	r0, #0
 8001588:	d101      	bne.n	800158e <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800158a:	2000      	movs	r0, #0
}
 800158c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800158e:	2320      	movs	r3, #32
 8001590:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001592:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001594:	4313      	orrs	r3, r2
 8001596:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001598:	e7f8      	b.n	800158c <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800159a:	000a      	movs	r2, r1
 800159c:	2101      	movs	r1, #1
 800159e:	e7ef      	b.n	8001580 <SPI_EndRxTransaction+0x34>

080015a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80015a0:	0013      	movs	r3, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015a2:	2282      	movs	r2, #130	; 0x82
{
 80015a4:	b510      	push	{r4, lr}
 80015a6:	0004      	movs	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015a8:	6840      	ldr	r0, [r0, #4]
 80015aa:	0052      	lsls	r2, r2, #1
 80015ac:	4290      	cmp	r0, r2
 80015ae:	d108      	bne.n	80015c2 <SPI_EndRxTxTransaction+0x22>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80015b0:	000a      	movs	r2, r1
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	0020      	movs	r0, r4
 80015b6:	f7ff ff87 	bl	80014c8 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d109      	bne.n	80015d2 <SPI_EndRxTxTransaction+0x32>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80015be:	2000      	movs	r0, #0
}
 80015c0:	bd10      	pop	{r4, pc}
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 80015c2:	0022      	movs	r2, r4
 80015c4:	3251      	adds	r2, #81	; 0x51
 80015c6:	7812      	ldrb	r2, [r2, #0]
 80015c8:	2a05      	cmp	r2, #5
 80015ca:	d1f8      	bne.n	80015be <SPI_EndRxTxTransaction+0x1e>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80015cc:	000a      	movs	r2, r1
 80015ce:	2101      	movs	r1, #1
 80015d0:	e7f0      	b.n	80015b4 <SPI_EndRxTxTransaction+0x14>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80015d2:	2320      	movs	r3, #32
 80015d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80015d6:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80015d8:	4313      	orrs	r3, r2
 80015da:	6563      	str	r3, [r4, #84]	; 0x54
 80015dc:	e7f0      	b.n	80015c0 <SPI_EndRxTxTransaction+0x20>
	...

080015e0 <HAL_SPI_Init>:
{
 80015e0:	b570      	push	{r4, r5, r6, lr}
 80015e2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80015e4:	2001      	movs	r0, #1
  if (hspi == NULL)
 80015e6:	2c00      	cmp	r4, #0
 80015e8:	d037      	beq.n	800165a <HAL_SPI_Init+0x7a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ea:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80015ec:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ee:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80015f0:	3551      	adds	r5, #81	; 0x51
 80015f2:	782b      	ldrb	r3, [r5, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d105      	bne.n	8001606 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 80015fa:	0022      	movs	r2, r4
 80015fc:	3250      	adds	r2, #80	; 0x50
 80015fe:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8001600:	0020      	movs	r0, r4
 8001602:	f002 f951 	bl	80038a8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001606:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001608:	2240      	movs	r2, #64	; 0x40
 800160a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800160c:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800160e:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001610:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001612:	4393      	bics	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001616:	6863      	ldr	r3, [r4, #4]
 8001618:	69a2      	ldr	r2, [r4, #24]
 800161a:	4303      	orrs	r3, r0
 800161c:	68e0      	ldr	r0, [r4, #12]
 800161e:	4303      	orrs	r3, r0
 8001620:	6920      	ldr	r0, [r4, #16]
 8001622:	4303      	orrs	r3, r0
 8001624:	6960      	ldr	r0, [r4, #20]
 8001626:	4303      	orrs	r3, r0
 8001628:	69e0      	ldr	r0, [r4, #28]
 800162a:	4303      	orrs	r3, r0
 800162c:	6a20      	ldr	r0, [r4, #32]
 800162e:	4303      	orrs	r3, r0
 8001630:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001632:	4303      	orrs	r3, r0
 8001634:	2080      	movs	r0, #128	; 0x80
 8001636:	0080      	lsls	r0, r0, #2
 8001638:	4010      	ands	r0, r2
 800163a:	4303      	orrs	r3, r0
 800163c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800163e:	2304      	movs	r3, #4
 8001640:	0c12      	lsrs	r2, r2, #16
 8001642:	401a      	ands	r2, r3
 8001644:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001646:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001648:	431a      	orrs	r2, r3
 800164a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800164c:	69cb      	ldr	r3, [r1, #28]
 800164e:	4a03      	ldr	r2, [pc, #12]	; (800165c <HAL_SPI_Init+0x7c>)
 8001650:	4013      	ands	r3, r2
 8001652:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001654:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001656:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001658:	702b      	strb	r3, [r5, #0]
}
 800165a:	bd70      	pop	{r4, r5, r6, pc}
 800165c:	fffff7ff 	.word	0xfffff7ff

08001660 <HAL_SPI_TransmitReceive>:
{
 8001660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001662:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8001664:	0003      	movs	r3, r0
 8001666:	3350      	adds	r3, #80	; 0x50
{
 8001668:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 800166a:	781a      	ldrb	r2, [r3, #0]
{
 800166c:	0004      	movs	r4, r0
 800166e:	b085      	sub	sp, #20
 8001670:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8001672:	2002      	movs	r0, #2
 8001674:	2a01      	cmp	r2, #1
 8001676:	d100      	bne.n	800167a <HAL_SPI_TransmitReceive+0x1a>
 8001678:	e099      	b.n	80017ae <HAL_SPI_TransmitReceive+0x14e>
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800167e:	f7fe ff19 	bl	80004b4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001682:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8001684:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8001686:	3351      	adds	r3, #81	; 0x51
 8001688:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800168a:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800168c:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800168e:	2b01      	cmp	r3, #1
 8001690:	d00c      	beq.n	80016ac <HAL_SPI_TransmitReceive+0x4c>
 8001692:	2282      	movs	r2, #130	; 0x82
    errorcode = HAL_BUSY;
 8001694:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001696:	0052      	lsls	r2, r2, #1
 8001698:	4291      	cmp	r1, r2
 800169a:	d000      	beq.n	800169e <HAL_SPI_TransmitReceive+0x3e>
 800169c:	e080      	b.n	80017a0 <HAL_SPI_TransmitReceive+0x140>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800169e:	68a2      	ldr	r2, [r4, #8]
 80016a0:	2a00      	cmp	r2, #0
 80016a2:	d000      	beq.n	80016a6 <HAL_SPI_TransmitReceive+0x46>
 80016a4:	e07c      	b.n	80017a0 <HAL_SPI_TransmitReceive+0x140>
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d000      	beq.n	80016ac <HAL_SPI_TransmitReceive+0x4c>
 80016aa:	e079      	b.n	80017a0 <HAL_SPI_TransmitReceive+0x140>
    errorcode = HAL_ERROR;
 80016ac:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80016ae:	2d00      	cmp	r5, #0
 80016b0:	d076      	beq.n	80017a0 <HAL_SPI_TransmitReceive+0x140>
 80016b2:	2f00      	cmp	r7, #0
 80016b4:	d074      	beq.n	80017a0 <HAL_SPI_TransmitReceive+0x140>
 80016b6:	2e00      	cmp	r6, #0
 80016b8:	d072      	beq.n	80017a0 <HAL_SPI_TransmitReceive+0x140>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80016ba:	0023      	movs	r3, r4
 80016bc:	3351      	adds	r3, #81	; 0x51
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	2a04      	cmp	r2, #4
 80016c2:	d001      	beq.n	80016c8 <HAL_SPI_TransmitReceive+0x68>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80016c4:	2205      	movs	r2, #5
 80016c6:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016c8:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016ca:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016cc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80016ce:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80016d0:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016d2:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80016d4:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80016d6:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016d8:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80016da:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80016dc:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80016de:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80016e0:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016e2:	4210      	tst	r0, r2
 80016e4:	d102      	bne.n	80016ec <HAL_SPI_TransmitReceive+0x8c>
    __HAL_SPI_ENABLE(hspi);
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	4302      	orrs	r2, r0
 80016ea:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	68e0      	ldr	r0, [r4, #12]
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	4290      	cmp	r0, r2
 80016f4:	d15d      	bne.n	80017b2 <HAL_SPI_TransmitReceive+0x152>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016f6:	2900      	cmp	r1, #0
 80016f8:	d001      	beq.n	80016fe <HAL_SPI_TransmitReceive+0x9e>
 80016fa:	2e01      	cmp	r6, #1
 80016fc:	d107      	bne.n	800170e <HAL_SPI_TransmitReceive+0xae>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016fe:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001700:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001702:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001704:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001706:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001708:	3b01      	subs	r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800170e:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001710:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001712:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001714:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001716:	2b00      	cmp	r3, #0
 8001718:	d115      	bne.n	8001746 <HAL_SPI_TransmitReceive+0xe6>
 800171a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800171c:	2b00      	cmp	r3, #0
 800171e:	d112      	bne.n	8001746 <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001720:	9a01      	ldr	r2, [sp, #4]
 8001722:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001724:	0020      	movs	r0, r4
 8001726:	f7ff ff3b 	bl	80015a0 <SPI_EndRxTxTransaction>
 800172a:	2800      	cmp	r0, #0
 800172c:	d000      	beq.n	8001730 <HAL_SPI_TransmitReceive+0xd0>
 800172e:	e086      	b.n	800183e <HAL_SPI_TransmitReceive+0x1de>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001730:	68a3      	ldr	r3, [r4, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d134      	bne.n	80017a0 <HAL_SPI_TransmitReceive+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	9003      	str	r0, [sp, #12]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	9203      	str	r2, [sp, #12]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	9303      	str	r3, [sp, #12]
 8001742:	9b03      	ldr	r3, [sp, #12]
 8001744:	e02c      	b.n	80017a0 <HAL_SPI_TransmitReceive+0x140>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001746:	6822      	ldr	r2, [r4, #0]
 8001748:	6893      	ldr	r3, [r2, #8]
 800174a:	423b      	tst	r3, r7
 800174c:	d00e      	beq.n	800176c <HAL_SPI_TransmitReceive+0x10c>
 800174e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00b      	beq.n	800176c <HAL_SPI_TransmitReceive+0x10c>
 8001754:	2d01      	cmp	r5, #1
 8001756:	d109      	bne.n	800176c <HAL_SPI_TransmitReceive+0x10c>
        txallowed = 0U;
 8001758:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800175a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800175c:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800175e:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001760:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001762:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001764:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001766:	3b01      	subs	r3, #1
 8001768:	b29b      	uxth	r3, r3
 800176a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800176c:	6893      	ldr	r3, [r2, #8]
 800176e:	4233      	tst	r3, r6
 8001770:	d00c      	beq.n	800178c <HAL_SPI_TransmitReceive+0x12c>
 8001772:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001774:	2b00      	cmp	r3, #0
 8001776:	d009      	beq.n	800178c <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 1U;
 8001778:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800177a:	68d2      	ldr	r2, [r2, #12]
 800177c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800177e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001780:	3302      	adds	r3, #2
 8001782:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001784:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001786:	3b01      	subs	r3, #1
 8001788:	b29b      	uxth	r3, r3
 800178a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800178c:	f7fe fe92 	bl	80004b4 <HAL_GetTick>
 8001790:	9b01      	ldr	r3, [sp, #4]
 8001792:	1ac0      	subs	r0, r0, r3
 8001794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001796:	4283      	cmp	r3, r0
 8001798:	d8bc      	bhi.n	8001714 <HAL_SPI_TransmitReceive+0xb4>
 800179a:	3301      	adds	r3, #1
 800179c:	d0ba      	beq.n	8001714 <HAL_SPI_TransmitReceive+0xb4>
        errorcode = HAL_TIMEOUT;
 800179e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80017a0:	0023      	movs	r3, r4
 80017a2:	2201      	movs	r2, #1
 80017a4:	3351      	adds	r3, #81	; 0x51
 80017a6:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80017a8:	2300      	movs	r3, #0
 80017aa:	3450      	adds	r4, #80	; 0x50
 80017ac:	7023      	strb	r3, [r4, #0]
}
 80017ae:	b005      	add	sp, #20
 80017b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017b2:	2900      	cmp	r1, #0
 80017b4:	d001      	beq.n	80017ba <HAL_SPI_TransmitReceive+0x15a>
 80017b6:	2e01      	cmp	r6, #1
 80017b8:	d108      	bne.n	80017cc <HAL_SPI_TransmitReceive+0x16c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017ba:	782a      	ldrb	r2, [r5, #0]
 80017bc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80017be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80017c0:	3301      	adds	r3, #1
 80017c2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80017c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80017cc:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80017ce:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80017d0:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <HAL_SPI_TransmitReceive+0x17e>
 80017d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0a0      	beq.n	8001720 <HAL_SPI_TransmitReceive+0xc0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	423a      	tst	r2, r7
 80017e4:	d00f      	beq.n	8001806 <HAL_SPI_TransmitReceive+0x1a6>
 80017e6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80017e8:	2a00      	cmp	r2, #0
 80017ea:	d00c      	beq.n	8001806 <HAL_SPI_TransmitReceive+0x1a6>
 80017ec:	2d01      	cmp	r5, #1
 80017ee:	d10a      	bne.n	8001806 <HAL_SPI_TransmitReceive+0x1a6>
        txallowed = 0U;
 80017f0:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80017f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80017f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80017fa:	3301      	adds	r3, #1
 80017fc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80017fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001800:	3b01      	subs	r3, #1
 8001802:	b29b      	uxth	r3, r3
 8001804:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001806:	6823      	ldr	r3, [r4, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	4232      	tst	r2, r6
 800180c:	d00d      	beq.n	800182a <HAL_SPI_TransmitReceive+0x1ca>
 800180e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001810:	2a00      	cmp	r2, #0
 8001812:	d00a      	beq.n	800182a <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8001814:	0035      	movs	r5, r6
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800181a:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 800181c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800181e:	3301      	adds	r3, #1
 8001820:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001822:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001824:	3b01      	subs	r3, #1
 8001826:	b29b      	uxth	r3, r3
 8001828:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800182a:	f7fe fe43 	bl	80004b4 <HAL_GetTick>
 800182e:	9b01      	ldr	r3, [sp, #4]
 8001830:	1ac0      	subs	r0, r0, r3
 8001832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001834:	4283      	cmp	r3, r0
 8001836:	d8cc      	bhi.n	80017d2 <HAL_SPI_TransmitReceive+0x172>
 8001838:	3301      	adds	r3, #1
 800183a:	d0ca      	beq.n	80017d2 <HAL_SPI_TransmitReceive+0x172>
 800183c:	e7af      	b.n	800179e <HAL_SPI_TransmitReceive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800183e:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001840:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001842:	6563      	str	r3, [r4, #84]	; 0x54
 8001844:	e7ac      	b.n	80017a0 <HAL_SPI_TransmitReceive+0x140>
	...

08001848 <HAL_SPI_TransmitReceive_DMA>:
{
 8001848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800184a:	0006      	movs	r6, r0
{
 800184c:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(hspi);
 800184e:	3650      	adds	r6, #80	; 0x50
 8001850:	7835      	ldrb	r5, [r6, #0]
{
 8001852:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8001854:	2002      	movs	r0, #2
 8001856:	2d01      	cmp	r5, #1
 8001858:	d048      	beq.n	80018ec <HAL_SPI_TransmitReceive_DMA+0xa4>
  tmp_state           = hspi->State;
 800185a:	0025      	movs	r5, r4
  __HAL_LOCK(hspi);
 800185c:	3801      	subs	r0, #1
 800185e:	7030      	strb	r0, [r6, #0]
  tmp_state           = hspi->State;
 8001860:	3551      	adds	r5, #81	; 0x51
 8001862:	782f      	ldrb	r7, [r5, #0]
 8001864:	b2ff      	uxtb	r7, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001866:	4287      	cmp	r7, r0
 8001868:	d00c      	beq.n	8001884 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800186a:	3004      	adds	r0, #4
 800186c:	30ff      	adds	r0, #255	; 0xff
 800186e:	4684      	mov	ip, r0
 8001870:	6861      	ldr	r1, [r4, #4]
    errorcode = HAL_BUSY;
 8001872:	3803      	subs	r0, #3
 8001874:	38ff      	subs	r0, #255	; 0xff
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001876:	4561      	cmp	r1, ip
 8001878:	d136      	bne.n	80018e8 <HAL_SPI_TransmitReceive_DMA+0xa0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800187a:	68a1      	ldr	r1, [r4, #8]
 800187c:	2900      	cmp	r1, #0
 800187e:	d133      	bne.n	80018e8 <HAL_SPI_TransmitReceive_DMA+0xa0>
 8001880:	2f04      	cmp	r7, #4
 8001882:	d131      	bne.n	80018e8 <HAL_SPI_TransmitReceive_DMA+0xa0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001884:	9901      	ldr	r1, [sp, #4]
    errorcode = HAL_ERROR;
 8001886:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001888:	2900      	cmp	r1, #0
 800188a:	d02d      	beq.n	80018e8 <HAL_SPI_TransmitReceive_DMA+0xa0>
 800188c:	2a00      	cmp	r2, #0
 800188e:	d02b      	beq.n	80018e8 <HAL_SPI_TransmitReceive_DMA+0xa0>
 8001890:	2b00      	cmp	r3, #0
 8001892:	d029      	beq.n	80018e8 <HAL_SPI_TransmitReceive_DMA+0xa0>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001894:	7828      	ldrb	r0, [r5, #0]
 8001896:	2804      	cmp	r0, #4
 8001898:	d001      	beq.n	800189e <HAL_SPI_TransmitReceive_DMA+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800189a:	2005      	movs	r0, #5
 800189c:	7028      	strb	r0, [r5, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800189e:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80018a0:	9901      	ldr	r1, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018a2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80018a4:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 80018a6:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 80018a8:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80018aa:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80018ac:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80018ae:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80018b0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80018b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80018b4:	782b      	ldrb	r3, [r5, #0]
 80018b6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d118      	bne.n	80018ee <HAL_SPI_TransmitReceive_DMA+0xa6>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_SPI_TransmitReceive_DMA+0x104>)
 80018be:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80018c0:	4b23      	ldr	r3, [pc, #140]	; (8001950 <HAL_SPI_TransmitReceive_DMA+0x108>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80018c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80018c4:	4b23      	ldr	r3, [pc, #140]	; (8001954 <HAL_SPI_TransmitReceive_DMA+0x10c>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80018c6:	6821      	ldr	r1, [r4, #0]
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80018c8:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80018ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80018d0:	310c      	adds	r1, #12
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	f7fe feaa 	bl	800062c <HAL_DMA_Start_IT>
 80018d8:	1e03      	subs	r3, r0, #0
 80018da:	d00c      	beq.n	80018f6 <HAL_SPI_TransmitReceive_DMA+0xae>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80018dc:	2310      	movs	r3, #16
    hspi->State = HAL_SPI_STATE_READY;
 80018de:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80018e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80018e2:	4313      	orrs	r3, r2
 80018e4:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80018e6:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 80018e8:	2300      	movs	r3, #0
 80018ea:	7033      	strb	r3, [r6, #0]
}
 80018ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80018ee:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_SPI_TransmitReceive_DMA+0x110>)
 80018f0:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <HAL_SPI_TransmitReceive_DMA+0x114>)
 80018f4:	e7e5      	b.n	80018c2 <HAL_SPI_TransmitReceive_DMA+0x7a>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80018f6:	2701      	movs	r7, #1
 80018f8:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80018fa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80018fc:	6851      	ldr	r1, [r2, #4]
 80018fe:	4339      	orrs	r1, r7
 8001900:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8001902:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8001904:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8001906:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001908:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800190a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800190c:	320c      	adds	r2, #12
 800190e:	b29b      	uxth	r3, r3
 8001910:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001912:	f7fe fe8b 	bl	800062c <HAL_DMA_Start_IT>
 8001916:	2800      	cmp	r0, #0
 8001918:	d006      	beq.n	8001928 <HAL_SPI_TransmitReceive_DMA+0xe0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800191a:	2310      	movs	r3, #16
 800191c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800191e:	0038      	movs	r0, r7
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001920:	4313      	orrs	r3, r2
 8001922:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8001924:	702f      	strb	r7, [r5, #0]
    goto error;
 8001926:	e7df      	b.n	80018e8 <HAL_SPI_TransmitReceive_DMA+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001928:	2240      	movs	r2, #64	; 0x40
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	6819      	ldr	r1, [r3, #0]
 800192e:	4211      	tst	r1, r2
 8001930:	d102      	bne.n	8001938 <HAL_SPI_TransmitReceive_DMA+0xf0>
    __HAL_SPI_ENABLE(hspi);
 8001932:	6819      	ldr	r1, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001938:	2220      	movs	r2, #32
 800193a:	6859      	ldr	r1, [r3, #4]
 800193c:	430a      	orrs	r2, r1
 800193e:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001940:	2202      	movs	r2, #2
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	430a      	orrs	r2, r1
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	e7ce      	b.n	80018e8 <HAL_SPI_TransmitReceive_DMA+0xa0>
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	08001a49 	.word	0x08001a49
 8001950:	08001a85 	.word	0x08001a85
 8001954:	08001a61 	.word	0x08001a61
 8001958:	08001a55 	.word	0x08001a55
 800195c:	08001adb 	.word	0x08001adb

08001960 <HAL_SPI_Receive_DMA>:
{
 8001960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001962:	6883      	ldr	r3, [r0, #8]
{
 8001964:	0004      	movs	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10f      	bne.n	800198a <HAL_SPI_Receive_DMA+0x2a>
 800196a:	2082      	movs	r0, #130	; 0x82
 800196c:	6865      	ldr	r5, [r4, #4]
 800196e:	0040      	lsls	r0, r0, #1
 8001970:	4285      	cmp	r5, r0
 8001972:	d10a      	bne.n	800198a <HAL_SPI_Receive_DMA+0x2a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001974:	0023      	movs	r3, r4
 8001976:	3801      	subs	r0, #1
 8001978:	3351      	adds	r3, #81	; 0x51
 800197a:	38ff      	subs	r0, #255	; 0xff
 800197c:	7018      	strb	r0, [r3, #0]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800197e:	0013      	movs	r3, r2
 8001980:	0020      	movs	r0, r4
 8001982:	000a      	movs	r2, r1
 8001984:	f7ff ff60 	bl	8001848 <HAL_SPI_TransmitReceive_DMA>
}
 8001988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 800198a:	0025      	movs	r5, r4
 800198c:	3550      	adds	r5, #80	; 0x50
 800198e:	782e      	ldrb	r6, [r5, #0]
 8001990:	2002      	movs	r0, #2
 8001992:	2e01      	cmp	r6, #1
 8001994:	d0f8      	beq.n	8001988 <HAL_SPI_Receive_DMA+0x28>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001996:	0026      	movs	r6, r4
  __HAL_LOCK(hspi);
 8001998:	3801      	subs	r0, #1
 800199a:	7028      	strb	r0, [r5, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 800199c:	3651      	adds	r6, #81	; 0x51
 800199e:	7837      	ldrb	r7, [r6, #0]
    errorcode = HAL_BUSY;
 80019a0:	3001      	adds	r0, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 80019a2:	b2ff      	uxtb	r7, r7
 80019a4:	2f01      	cmp	r7, #1
 80019a6:	d130      	bne.n	8001a0a <HAL_SPI_Receive_DMA+0xaa>
    errorcode = HAL_ERROR;
 80019a8:	0038      	movs	r0, r7
  if ((pData == NULL) || (Size == 0U))
 80019aa:	2900      	cmp	r1, #0
 80019ac:	d02d      	beq.n	8001a0a <HAL_SPI_Receive_DMA+0xaa>
 80019ae:	2a00      	cmp	r2, #0
 80019b0:	d02b      	beq.n	8001a0a <HAL_SPI_Receive_DMA+0xaa>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80019b2:	3003      	adds	r0, #3
 80019b4:	7030      	strb	r0, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019b6:	2000      	movs	r0, #0
 80019b8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80019ba:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80019bc:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80019be:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80019c0:	86a0      	strh	r0, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80019c2:	86e0      	strh	r0, [r4, #54]	; 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019c4:	2080      	movs	r0, #128	; 0x80
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80019c6:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80019c8:	87a2      	strh	r2, [r4, #60]	; 0x3c
 80019ca:	6827      	ldr	r7, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019cc:	0200      	lsls	r0, r0, #8
 80019ce:	4283      	cmp	r3, r0
 80019d0:	d103      	bne.n	80019da <HAL_SPI_Receive_DMA+0x7a>
    SPI_1LINE_RX(hspi);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	4817      	ldr	r0, [pc, #92]	; (8001a34 <HAL_SPI_Receive_DMA+0xd4>)
 80019d6:	4003      	ands	r3, r0
 80019d8:	603b      	str	r3, [r7, #0]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80019da:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <HAL_SPI_Receive_DMA+0xd8>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80019de:	370c      	adds	r7, #12
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80019e0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_SPI_Receive_DMA+0xdc>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80019e4:	000a      	movs	r2, r1
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80019e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_SPI_Receive_DMA+0xe0>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80019ea:	0039      	movs	r1, r7
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80019ec:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80019f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	f7fe fe19 	bl	800062c <HAL_DMA_Start_IT>
 80019fa:	2800      	cmp	r0, #0
 80019fc:	d008      	beq.n	8001a10 <HAL_SPI_Receive_DMA+0xb0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80019fe:	2310      	movs	r3, #16
    hspi->State = HAL_SPI_STATE_READY;
 8001a00:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001a02:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001a04:	4313      	orrs	r3, r2
 8001a06:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8001a08:	7030      	strb	r0, [r6, #0]
  __HAL_UNLOCK(hspi);
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	702b      	strb	r3, [r5, #0]
  return errorcode;
 8001a0e:	e7bb      	b.n	8001988 <HAL_SPI_Receive_DMA+0x28>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a10:	2240      	movs	r2, #64	; 0x40
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	6819      	ldr	r1, [r3, #0]
 8001a16:	4211      	tst	r1, r2
 8001a18:	d102      	bne.n	8001a20 <HAL_SPI_Receive_DMA+0xc0>
    __HAL_SPI_ENABLE(hspi);
 8001a1a:	6819      	ldr	r1, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001a20:	2220      	movs	r2, #32
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	e7eb      	b.n	8001a0a <HAL_SPI_Receive_DMA+0xaa>
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	ffffbfff 	.word	0xffffbfff
 8001a38:	08001a49 	.word	0x08001a49
 8001a3c:	08001a85 	.word	0x08001a85
 8001a40:	08001a61 	.word	0x08001a61

08001a44 <HAL_SPI_TxRxCpltCallback>:
 8001a44:	4770      	bx	lr

08001a46 <HAL_SPI_RxHalfCpltCallback>:
 8001a46:	4770      	bx	lr

08001a48 <SPI_DMAHalfReceiveCplt>:
{
 8001a48:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8001a4a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001a4c:	f7ff fffb 	bl	8001a46 <HAL_SPI_RxHalfCpltCallback>
}
 8001a50:	bd10      	pop	{r4, pc}

08001a52 <HAL_SPI_TxRxHalfCpltCallback>:
 8001a52:	4770      	bx	lr

08001a54 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8001a54:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8001a56:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001a58:	f7ff fffb 	bl	8001a52 <HAL_SPI_TxRxHalfCpltCallback>
}
 8001a5c:	bd10      	pop	{r4, pc}

08001a5e <HAL_SPI_ErrorCallback>:
 8001a5e:	4770      	bx	lr

08001a60 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001a60:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001a62:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8001a64:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001a66:	6802      	ldr	r2, [r0, #0]
 8001a68:	6853      	ldr	r3, [r2, #4]
 8001a6a:	438b      	bics	r3, r1
 8001a6c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001a6e:	2310      	movs	r3, #16
 8001a70:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001a72:	4313      	orrs	r3, r2
 8001a74:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001a76:	0003      	movs	r3, r0
 8001a78:	2201      	movs	r2, #1
 8001a7a:	3351      	adds	r3, #81	; 0x51
 8001a7c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 8001a7e:	f7ff ffee 	bl	8001a5e <HAL_SPI_ErrorCallback>
}
 8001a82:	bd10      	pop	{r4, pc}

08001a84 <SPI_DMAReceiveCplt>:
{
 8001a84:	b570      	push	{r4, r5, r6, lr}
 8001a86:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001a88:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8001a8a:	f7fe fd13 	bl	80004b4 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001a8e:	682b      	ldr	r3, [r5, #0]
 8001a90:	2520      	movs	r5, #32
 8001a92:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8001a94:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001a96:	422b      	tst	r3, r5
 8001a98:	d11b      	bne.n	8001ad2 <SPI_DMAReceiveCplt+0x4e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001a9a:	2003      	movs	r0, #3
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	6859      	ldr	r1, [r3, #4]
 8001aa0:	43a9      	bics	r1, r5
 8001aa2:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001aa4:	6859      	ldr	r1, [r3, #4]
 8001aa6:	4381      	bics	r1, r0
 8001aa8:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001aaa:	0020      	movs	r0, r4
 8001aac:	2164      	movs	r1, #100	; 0x64
 8001aae:	f7ff fd4d 	bl	800154c <SPI_EndRxTransaction>
 8001ab2:	2800      	cmp	r0, #0
 8001ab4:	d000      	beq.n	8001ab8 <SPI_DMAReceiveCplt+0x34>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ab6:	6565      	str	r5, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8001abc:	0023      	movs	r3, r4
 8001abe:	2201      	movs	r2, #1
 8001ac0:	3351      	adds	r3, #81	; 0x51
 8001ac2:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ac4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <SPI_DMAReceiveCplt+0x4e>
      HAL_SPI_ErrorCallback(hspi);
 8001aca:	0020      	movs	r0, r4
 8001acc:	f7ff ffc7 	bl	8001a5e <HAL_SPI_ErrorCallback>
}
 8001ad0:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_RxCpltCallback(hspi);
 8001ad2:	0020      	movs	r0, r4
 8001ad4:	f000 ff40 	bl	8002958 <HAL_SPI_RxCpltCallback>
 8001ad8:	e7fa      	b.n	8001ad0 <SPI_DMAReceiveCplt+0x4c>

08001ada <SPI_DMATransmitReceiveCplt>:
{
 8001ada:	b570      	push	{r4, r5, r6, lr}
 8001adc:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001ade:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8001ae0:	f7fe fce8 	bl	80004b4 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001ae4:	682b      	ldr	r3, [r5, #0]
 8001ae6:	2520      	movs	r5, #32
 8001ae8:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8001aea:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001aec:	422b      	tst	r3, r5
 8001aee:	d11f      	bne.n	8001b30 <SPI_DMATransmitReceiveCplt+0x56>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001af0:	6821      	ldr	r1, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001af2:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001af4:	684b      	ldr	r3, [r1, #4]
 8001af6:	43ab      	bics	r3, r5
 8001af8:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001afa:	2164      	movs	r1, #100	; 0x64
 8001afc:	f7ff fd50 	bl	80015a0 <SPI_EndRxTxTransaction>
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d002      	beq.n	8001b0a <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b06:	431d      	orrs	r5, r3
 8001b08:	6565      	str	r5, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	6822      	ldr	r2, [r4, #0]
 8001b0e:	6853      	ldr	r3, [r2, #4]
 8001b10:	438b      	bics	r3, r1
 8001b12:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8001b18:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8001b1a:	0023      	movs	r3, r4
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	3351      	adds	r3, #81	; 0x51
 8001b20:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <SPI_DMATransmitReceiveCplt+0x56>
      HAL_SPI_ErrorCallback(hspi);
 8001b28:	0020      	movs	r0, r4
 8001b2a:	f7ff ff98 	bl	8001a5e <HAL_SPI_ErrorCallback>
}
 8001b2e:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 8001b30:	0020      	movs	r0, r4
 8001b32:	f7ff ff87 	bl	8001a44 <HAL_SPI_TxRxCpltCallback>
 8001b36:	e7fa      	b.n	8001b2e <SPI_DMATransmitReceiveCplt+0x54>

08001b38 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b38:	6803      	ldr	r3, [r0, #0]
 8001b3a:	4907      	ldr	r1, [pc, #28]	; (8001b58 <UART_EndRxTransfer+0x20>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	400a      	ands	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	3123      	adds	r1, #35	; 0x23
 8001b46:	31ff      	adds	r1, #255	; 0xff
 8001b48:	438a      	bics	r2, r1
 8001b4a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001b54:	4770      	bx	lr
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	fffffedf 	.word	0xfffffedf

08001b5c <HAL_UART_Receive_IT>:
{
 8001b5c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b5e:	6f84      	ldr	r4, [r0, #120]	; 0x78
{
 8001b60:	0003      	movs	r3, r0
    return HAL_BUSY;
 8001b62:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b64:	2c20      	cmp	r4, #32
 8001b66:	d141      	bne.n	8001bec <HAL_UART_Receive_IT+0x90>
      return HAL_ERROR;
 8001b68:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001b6a:	2900      	cmp	r1, #0
 8001b6c:	d03e      	beq.n	8001bec <HAL_UART_Receive_IT+0x90>
 8001b6e:	2a00      	cmp	r2, #0
 8001b70:	d03c      	beq.n	8001bec <HAL_UART_Receive_IT+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b72:	2580      	movs	r5, #128	; 0x80
 8001b74:	689c      	ldr	r4, [r3, #8]
 8001b76:	016d      	lsls	r5, r5, #5
 8001b78:	42ac      	cmp	r4, r5
 8001b7a:	d104      	bne.n	8001b86 <HAL_UART_Receive_IT+0x2a>
 8001b7c:	691d      	ldr	r5, [r3, #16]
 8001b7e:	2d00      	cmp	r5, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1) != 0)
 8001b82:	4201      	tst	r1, r0
 8001b84:	d132      	bne.n	8001bec <HAL_UART_Receive_IT+0x90>
    __HAL_LOCK(huart);
 8001b86:	001d      	movs	r5, r3
 8001b88:	3570      	adds	r5, #112	; 0x70
 8001b8a:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 8001b8c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001b8e:	2e01      	cmp	r6, #1
 8001b90:	d02c      	beq.n	8001bec <HAL_UART_Receive_IT+0x90>
 8001b92:	3801      	subs	r0, #1
 8001b94:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 8001b96:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001b98:	0019      	movs	r1, r3
 8001b9a:	3158      	adds	r1, #88	; 0x58
 8001b9c:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 8001b9e:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8001ba0:	2080      	movs	r0, #128	; 0x80
    huart->RxISR       = NULL;
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	6619      	str	r1, [r3, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8001ba8:	0140      	lsls	r0, r0, #5
 8001baa:	325c      	adds	r2, #92	; 0x5c
 8001bac:	4284      	cmp	r4, r0
 8001bae:	d120      	bne.n	8001bf2 <HAL_UART_Receive_IT+0x96>
 8001bb0:	6919      	ldr	r1, [r3, #16]
 8001bb2:	2900      	cmp	r1, #0
 8001bb4:	d11b      	bne.n	8001bee <HAL_UART_Receive_IT+0x92>
 8001bb6:	4918      	ldr	r1, [pc, #96]	; (8001c18 <HAL_UART_Receive_IT+0xbc>)
 8001bb8:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bba:	2200      	movs	r2, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bbc:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bbe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bc0:	3222      	adds	r2, #34	; 0x22
 8001bc2:	679a      	str	r2, [r3, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	6890      	ldr	r0, [r2, #8]
 8001bc8:	4301      	orrs	r1, r0
 8001bca:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	0149      	lsls	r1, r1, #5
 8001bd0:	428c      	cmp	r4, r1
 8001bd2:	d11e      	bne.n	8001c12 <HAL_UART_Receive_IT+0xb6>
 8001bd4:	6919      	ldr	r1, [r3, #16]
 8001bd6:	2900      	cmp	r1, #0
 8001bd8:	d11b      	bne.n	8001c12 <HAL_UART_Receive_IT+0xb6>
      huart->RxISR = UART_RxISR_16BIT;
 8001bda:	4910      	ldr	r1, [pc, #64]	; (8001c1c <HAL_UART_Receive_IT+0xc0>)
      huart->RxISR = UART_RxISR_8BIT;
 8001bdc:	6619      	str	r1, [r3, #96]	; 0x60
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001bde:	2390      	movs	r3, #144	; 0x90
    __HAL_UNLOCK(huart);
 8001be0:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001be2:	6811      	ldr	r1, [r2, #0]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	430b      	orrs	r3, r1
    __HAL_UNLOCK(huart);
 8001be8:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bd70      	pop	{r4, r5, r6, pc}
    UART_MASK_COMPUTATION(huart);
 8001bee:	21ff      	movs	r1, #255	; 0xff
 8001bf0:	e7e2      	b.n	8001bb8 <HAL_UART_Receive_IT+0x5c>
 8001bf2:	2c00      	cmp	r4, #0
 8001bf4:	d104      	bne.n	8001c00 <HAL_UART_Receive_IT+0xa4>
 8001bf6:	6919      	ldr	r1, [r3, #16]
 8001bf8:	2900      	cmp	r1, #0
 8001bfa:	d0f8      	beq.n	8001bee <HAL_UART_Receive_IT+0x92>
 8001bfc:	217f      	movs	r1, #127	; 0x7f
 8001bfe:	e7db      	b.n	8001bb8 <HAL_UART_Receive_IT+0x5c>
 8001c00:	2080      	movs	r0, #128	; 0x80
 8001c02:	0540      	lsls	r0, r0, #21
 8001c04:	4284      	cmp	r4, r0
 8001c06:	d1d7      	bne.n	8001bb8 <HAL_UART_Receive_IT+0x5c>
 8001c08:	6919      	ldr	r1, [r3, #16]
 8001c0a:	2900      	cmp	r1, #0
 8001c0c:	d0f6      	beq.n	8001bfc <HAL_UART_Receive_IT+0xa0>
 8001c0e:	213f      	movs	r1, #63	; 0x3f
 8001c10:	e7d2      	b.n	8001bb8 <HAL_UART_Receive_IT+0x5c>
      huart->RxISR = UART_RxISR_8BIT;
 8001c12:	4903      	ldr	r1, [pc, #12]	; (8001c20 <HAL_UART_Receive_IT+0xc4>)
 8001c14:	e7e2      	b.n	8001bdc <HAL_UART_Receive_IT+0x80>
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	000001ff 	.word	0x000001ff
 8001c1c:	08001c89 	.word	0x08001c89
 8001c20:	08001c29 	.word	0x08001c29

08001c24 <HAL_UART_TxCpltCallback>:
 8001c24:	4770      	bx	lr
	...

08001c28 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c28:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8001c2a:	b510      	push	{r4, lr}
 8001c2c:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c2e:	2a22      	cmp	r2, #34	; 0x22
 8001c30:	d123      	bne.n	8001c7a <UART_RxISR_8BIT+0x52>
  uint16_t uhMask = huart->Mask;
 8001c32:	0002      	movs	r2, r0
 8001c34:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001c38:	8812      	ldrh	r2, [r2, #0]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001c3e:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8001c40:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8001c42:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001c44:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8001c46:	3301      	adds	r3, #1
 8001c48:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001c4a:	8813      	ldrh	r3, [r2, #0]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8001c52:	8813      	ldrh	r3, [r2, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10e      	bne.n	8001c78 <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c5a:	6802      	ldr	r2, [r0, #0]
 8001c5c:	4c09      	ldr	r4, [pc, #36]	; (8001c84 <UART_RxISR_8BIT+0x5c>)
 8001c5e:	6811      	ldr	r1, [r2, #0]
 8001c60:	4021      	ands	r1, r4
 8001c62:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c64:	6891      	ldr	r1, [r2, #8]
 8001c66:	3423      	adds	r4, #35	; 0x23
 8001c68:	34ff      	adds	r4, #255	; 0xff
 8001c6a:	43a1      	bics	r1, r4
 8001c6c:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001c6e:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001c70:	6603      	str	r3, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8001c72:	6782      	str	r2, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001c74:	f001 fdea 	bl	800384c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001c78:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	6999      	ldr	r1, [r3, #24]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	619a      	str	r2, [r3, #24]
}
 8001c82:	e7f9      	b.n	8001c78 <UART_RxISR_8BIT+0x50>
 8001c84:	fffffedf 	.word	0xfffffedf

08001c88 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c88:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8001c8a:	b510      	push	{r4, lr}
 8001c8c:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c8e:	2a22      	cmp	r2, #34	; 0x22
 8001c90:	d121      	bne.n	8001cd6 <UART_RxISR_16BIT+0x4e>
  uint16_t uhMask = huart->Mask;
 8001c92:	0004      	movs	r4, r0
 8001c94:	345c      	adds	r4, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001c96:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8001c98:	8824      	ldrh	r4, [r4, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8001c9a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8001c9c:	4021      	ands	r1, r4
 8001c9e:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8001ca0:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 8001ca2:	3202      	adds	r2, #2
 8001ca4:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001ca6:	315a      	adds	r1, #90	; 0x5a
 8001ca8:	880a      	ldrh	r2, [r1, #0]
 8001caa:	3a01      	subs	r2, #1
 8001cac:	b292      	uxth	r2, r2
 8001cae:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8001cb0:	880a      	ldrh	r2, [r1, #0]
 8001cb2:	b292      	uxth	r2, r2
 8001cb4:	2a00      	cmp	r2, #0
 8001cb6:	d10d      	bne.n	8001cd4 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	4c09      	ldr	r4, [pc, #36]	; (8001ce0 <UART_RxISR_16BIT+0x58>)
 8001cbc:	4021      	ands	r1, r4
 8001cbe:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cc0:	6899      	ldr	r1, [r3, #8]
 8001cc2:	3423      	adds	r4, #35	; 0x23
 8001cc4:	34ff      	adds	r4, #255	; 0xff
 8001cc6:	43a1      	bics	r1, r4
 8001cc8:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001cca:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001ccc:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8001cce:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001cd0:	f001 fdbc 	bl	800384c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001cd4:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	6999      	ldr	r1, [r3, #24]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	619a      	str	r2, [r3, #24]
}
 8001cde:	e7f9      	b.n	8001cd4 <UART_RxISR_16BIT+0x4c>
 8001ce0:	fffffedf 	.word	0xfffffedf

08001ce4 <HAL_UART_ErrorCallback>:
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_UART_IRQHandler>:
{
 8001ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001cea:	6803      	ldr	r3, [r0, #0]
{
 8001cec:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001cee:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cf0:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cf2:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8001cf4:	0711      	lsls	r1, r2, #28
 8001cf6:	d10a      	bne.n	8001d0e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001cf8:	2120      	movs	r1, #32
 8001cfa:	420a      	tst	r2, r1
 8001cfc:	d100      	bne.n	8001d00 <HAL_UART_IRQHandler+0x18>
 8001cfe:	e06a      	b.n	8001dd6 <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d00:	4208      	tst	r0, r1
 8001d02:	d068      	beq.n	8001dd6 <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 8001d04:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 8001d06:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d15a      	bne.n	8001dc2 <HAL_UART_IRQHandler+0xda>
 8001d0c:	e05a      	b.n	8001dc4 <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001d0e:	2101      	movs	r1, #1
 8001d10:	0035      	movs	r5, r6
 8001d12:	400d      	ands	r5, r1
 8001d14:	d103      	bne.n	8001d1e <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001d16:	2790      	movs	r7, #144	; 0x90
 8001d18:	007f      	lsls	r7, r7, #1
 8001d1a:	4238      	tst	r0, r7
 8001d1c:	d05b      	beq.n	8001dd6 <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001d1e:	420a      	tst	r2, r1
 8001d20:	d005      	beq.n	8001d2e <HAL_UART_IRQHandler+0x46>
 8001d22:	05c6      	lsls	r6, r0, #23
 8001d24:	d503      	bpl.n	8001d2e <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001d26:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d28:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001d2a:	4331      	orrs	r1, r6
 8001d2c:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d2e:	2102      	movs	r1, #2
 8001d30:	420a      	tst	r2, r1
 8001d32:	d006      	beq.n	8001d42 <HAL_UART_IRQHandler+0x5a>
 8001d34:	2d00      	cmp	r5, #0
 8001d36:	d004      	beq.n	8001d42 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001d38:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d3a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001d3c:	1849      	adds	r1, r1, r1
 8001d3e:	4331      	orrs	r1, r6
 8001d40:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d42:	2104      	movs	r1, #4
 8001d44:	420a      	tst	r2, r1
 8001d46:	d006      	beq.n	8001d56 <HAL_UART_IRQHandler+0x6e>
 8001d48:	2d00      	cmp	r5, #0
 8001d4a:	d004      	beq.n	8001d56 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001d4c:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d4e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001d50:	3902      	subs	r1, #2
 8001d52:	4331      	orrs	r1, r6
 8001d54:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001d56:	0711      	lsls	r1, r2, #28
 8001d58:	d508      	bpl.n	8001d6c <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001d5a:	0681      	lsls	r1, r0, #26
 8001d5c:	d401      	bmi.n	8001d62 <HAL_UART_IRQHandler+0x7a>
 8001d5e:	2d00      	cmp	r5, #0
 8001d60:	d004      	beq.n	8001d6c <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001d62:	2108      	movs	r1, #8
 8001d64:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d66:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001d68:	4319      	orrs	r1, r3
 8001d6a:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d6c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d028      	beq.n	8001dc4 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d72:	2320      	movs	r3, #32
 8001d74:	421a      	tst	r2, r3
 8001d76:	d006      	beq.n	8001d86 <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d78:	4218      	tst	r0, r3
 8001d7a:	d004      	beq.n	8001d86 <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 8001d7c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 8001d82:	0020      	movs	r0, r4
 8001d84:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d86:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8001d88:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d8a:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8001d8c:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d8e:	065b      	lsls	r3, r3, #25
 8001d90:	d402      	bmi.n	8001d98 <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8001d92:	2308      	movs	r3, #8
 8001d94:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d96:	d01a      	beq.n	8001dce <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8001d98:	f7ff fece 	bl	8001b38 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d9c:	2140      	movs	r1, #64	; 0x40
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	420a      	tst	r2, r1
 8001da4:	d00f      	beq.n	8001dc6 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001da6:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001da8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001daa:	438a      	bics	r2, r1
 8001dac:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d009      	beq.n	8001dc6 <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_UART_IRQHandler+0x134>)
 8001db4:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001db6:	f7fe fc79 	bl	80006ac <HAL_DMA_Abort_IT>
 8001dba:	2800      	cmp	r0, #0
 8001dbc:	d002      	beq.n	8001dc4 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001dbe:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001dc0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001dc2:	4798      	blx	r3
}
 8001dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8001dc6:	0020      	movs	r0, r4
 8001dc8:	f7ff ff8c 	bl	8001ce4 <HAL_UART_ErrorCallback>
 8001dcc:	e7fa      	b.n	8001dc4 <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 8001dce:	f7ff ff89 	bl	8001ce4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd2:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001dd4:	e7f6      	b.n	8001dc4 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001dd6:	2180      	movs	r1, #128	; 0x80
 8001dd8:	0349      	lsls	r1, r1, #13
 8001dda:	420a      	tst	r2, r1
 8001ddc:	d006      	beq.n	8001dec <HAL_UART_IRQHandler+0x104>
 8001dde:	0275      	lsls	r5, r6, #9
 8001de0:	d504      	bpl.n	8001dec <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001de2:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8001de4:	0020      	movs	r0, r4
 8001de6:	f000 fa41 	bl	800226c <HAL_UARTEx_WakeupCallback>
    return;
 8001dea:	e7eb      	b.n	8001dc4 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001dec:	2180      	movs	r1, #128	; 0x80
 8001dee:	420a      	tst	r2, r1
 8001df0:	d003      	beq.n	8001dfa <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001df2:	4208      	tst	r0, r1
 8001df4:	d001      	beq.n	8001dfa <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 8001df6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001df8:	e785      	b.n	8001d06 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001dfa:	2140      	movs	r1, #64	; 0x40
 8001dfc:	420a      	tst	r2, r1
 8001dfe:	d0e1      	beq.n	8001dc4 <HAL_UART_IRQHandler+0xdc>
 8001e00:	4208      	tst	r0, r1
 8001e02:	d0df      	beq.n	8001dc4 <HAL_UART_IRQHandler+0xdc>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e04:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8001e06:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e08:	438a      	bics	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001e0c:	2320      	movs	r3, #32
 8001e0e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8001e14:	f7ff ff06 	bl	8001c24 <HAL_UART_TxCpltCallback>
 8001e18:	e7d4      	b.n	8001dc4 <HAL_UART_IRQHandler+0xdc>
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	08001e21 	.word	0x08001e21

08001e20 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001e20:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	0002      	movs	r2, r0
{
 8001e26:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001e28:	325a      	adds	r2, #90	; 0x5a
 8001e2a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001e2c:	3a08      	subs	r2, #8
 8001e2e:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8001e30:	f7ff ff58 	bl	8001ce4 <HAL_UART_ErrorCallback>
}
 8001e34:	bd10      	pop	{r4, pc}
	...

08001e38 <UART_SetConfig>:
{
 8001e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e3c:	6925      	ldr	r5, [r4, #16]
 8001e3e:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e40:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e42:	432a      	orrs	r2, r5
 8001e44:	6965      	ldr	r5, [r4, #20]
 8001e46:	69c1      	ldr	r1, [r0, #28]
 8001e48:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	4d7a      	ldr	r5, [pc, #488]	; (8002038 <UART_SetConfig+0x200>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e4e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e50:	4028      	ands	r0, r5
 8001e52:	4302      	orrs	r2, r0
 8001e54:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4878      	ldr	r0, [pc, #480]	; (800203c <UART_SetConfig+0x204>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001e5a:	4d79      	ldr	r5, [pc, #484]	; (8002040 <UART_SetConfig+0x208>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e5c:	4002      	ands	r2, r0
 8001e5e:	68e0      	ldr	r0, [r4, #12]
 8001e60:	4302      	orrs	r2, r0
 8001e62:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e64:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001e66:	42ab      	cmp	r3, r5
 8001e68:	d001      	beq.n	8001e6e <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8001e6a:	6a22      	ldr	r2, [r4, #32]
 8001e6c:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	4e74      	ldr	r6, [pc, #464]	; (8002044 <UART_SetConfig+0x20c>)
 8001e72:	4032      	ands	r2, r6
 8001e74:	4302      	orrs	r2, r0
 8001e76:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e78:	4a73      	ldr	r2, [pc, #460]	; (8002048 <UART_SetConfig+0x210>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d114      	bne.n	8001ea8 <UART_SetConfig+0x70>
 8001e7e:	2203      	movs	r2, #3
 8001e80:	4b72      	ldr	r3, [pc, #456]	; (800204c <UART_SetConfig+0x214>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e84:	4013      	ands	r3, r2
 8001e86:	4a72      	ldr	r2, [pc, #456]	; (8002050 <UART_SetConfig+0x218>)
 8001e88:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	4299      	cmp	r1, r3
 8001e90:	d000      	beq.n	8001e94 <UART_SetConfig+0x5c>
 8001e92:	e094      	b.n	8001fbe <UART_SetConfig+0x186>
    switch (clocksource)
 8001e94:	2808      	cmp	r0, #8
 8001e96:	d900      	bls.n	8001e9a <UART_SetConfig+0x62>
 8001e98:	e08e      	b.n	8001fb8 <UART_SetConfig+0x180>
 8001e9a:	f7fe f935 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001e9e:	6159      	.short	0x6159
 8001ea0:	8d858d64 	.word	0x8d858d64
 8001ea4:	8d8d      	.short	0x8d8d
 8001ea6:	88          	.byte	0x88
 8001ea7:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ea8:	4a6a      	ldr	r2, [pc, #424]	; (8002054 <UART_SetConfig+0x21c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d105      	bne.n	8001eba <UART_SetConfig+0x82>
 8001eae:	220c      	movs	r2, #12
 8001eb0:	4b66      	ldr	r3, [pc, #408]	; (800204c <UART_SetConfig+0x214>)
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	4a68      	ldr	r2, [pc, #416]	; (8002058 <UART_SetConfig+0x220>)
 8001eb8:	e7e6      	b.n	8001e88 <UART_SetConfig+0x50>
 8001eba:	42ab      	cmp	r3, r5
 8001ebc:	d000      	beq.n	8001ec0 <UART_SetConfig+0x88>
 8001ebe:	e0b4      	b.n	800202a <UART_SetConfig+0x1f2>
 8001ec0:	21c0      	movs	r1, #192	; 0xc0
 8001ec2:	2080      	movs	r0, #128	; 0x80
 8001ec4:	4a61      	ldr	r2, [pc, #388]	; (800204c <UART_SetConfig+0x214>)
 8001ec6:	0109      	lsls	r1, r1, #4
 8001ec8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001eca:	00c0      	lsls	r0, r0, #3
 8001ecc:	400b      	ands	r3, r1
 8001ece:	4283      	cmp	r3, r0
 8001ed0:	d03b      	beq.n	8001f4a <UART_SetConfig+0x112>
 8001ed2:	d803      	bhi.n	8001edc <UART_SetConfig+0xa4>
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00a      	beq.n	8001eee <UART_SetConfig+0xb6>
        ret = HAL_ERROR;
 8001ed8:	2501      	movs	r5, #1
 8001eda:	e00d      	b.n	8001ef8 <UART_SetConfig+0xc0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001edc:	2080      	movs	r0, #128	; 0x80
 8001ede:	0100      	lsls	r0, r0, #4
 8001ee0:	4283      	cmp	r3, r0
 8001ee2:	d00e      	beq.n	8001f02 <UART_SetConfig+0xca>
 8001ee4:	428b      	cmp	r3, r1
 8001ee6:	d1f7      	bne.n	8001ed8 <UART_SetConfig+0xa0>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001ee8:	2080      	movs	r0, #128	; 0x80
 8001eea:	0200      	lsls	r0, r0, #8
 8001eec:	e010      	b.n	8001f10 <UART_SetConfig+0xd8>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001eee:	f7ff f9fb 	bl	80012e8 <HAL_RCC_GetPCLK1Freq>
 8001ef2:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8001ef4:	42a8      	cmp	r0, r5
 8001ef6:	d10b      	bne.n	8001f10 <UART_SetConfig+0xd8>
  huart->RxISR = NULL;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8001efc:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001efe:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f02:	6810      	ldr	r0, [r2, #0]
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001f04:	4b55      	ldr	r3, [pc, #340]	; (800205c <UART_SetConfig+0x224>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f06:	06c0      	lsls	r0, r0, #27
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001f08:	17c0      	asrs	r0, r0, #31
 8001f0a:	4018      	ands	r0, r3
 8001f0c:	4b54      	ldr	r3, [pc, #336]	; (8002060 <UART_SetConfig+0x228>)
 8001f0e:	18c0      	adds	r0, r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001f10:	2203      	movs	r2, #3
 8001f12:	6863      	ldr	r3, [r4, #4]
 8001f14:	435a      	muls	r2, r3
 8001f16:	4282      	cmp	r2, r0
 8001f18:	d8de      	bhi.n	8001ed8 <UART_SetConfig+0xa0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001f1a:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001f1c:	4282      	cmp	r2, r0
 8001f1e:	d3db      	bcc.n	8001ed8 <UART_SetConfig+0xa0>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8001f20:	2700      	movs	r7, #0
 8001f22:	0e02      	lsrs	r2, r0, #24
 8001f24:	0201      	lsls	r1, r0, #8
 8001f26:	085e      	lsrs	r6, r3, #1
 8001f28:	1989      	adds	r1, r1, r6
 8001f2a:	417a      	adcs	r2, r7
 8001f2c:	0008      	movs	r0, r1
 8001f2e:	0011      	movs	r1, r2
 8001f30:	001a      	movs	r2, r3
 8001f32:	003b      	movs	r3, r7
 8001f34:	f7fe f97e 	bl	8000234 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001f38:	4b4a      	ldr	r3, [pc, #296]	; (8002064 <UART_SetConfig+0x22c>)
 8001f3a:	18c2      	adds	r2, r0, r3
 8001f3c:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <UART_SetConfig+0x230>)
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d8ca      	bhi.n	8001ed8 <UART_SetConfig+0xa0>
          huart->Instance->BRR = usartdiv;
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	003d      	movs	r5, r7
 8001f46:	60d8      	str	r0, [r3, #12]
 8001f48:	e7d6      	b.n	8001ef8 <UART_SetConfig+0xc0>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001f4a:	f7fe fe4b 	bl	8000be4 <HAL_RCC_GetSysClockFreq>
        break;
 8001f4e:	e7d0      	b.n	8001ef2 <UART_SetConfig+0xba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f50:	f7ff f9ca 	bl	80012e8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f54:	6863      	ldr	r3, [r4, #4]
 8001f56:	0040      	lsls	r0, r0, #1
 8001f58:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f5a:	18c0      	adds	r0, r0, r3
 8001f5c:	6861      	ldr	r1, [r4, #4]
 8001f5e:	e00b      	b.n	8001f78 <UART_SetConfig+0x140>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f60:	f7ff f9d2 	bl	8001308 <HAL_RCC_GetPCLK2Freq>
 8001f64:	e7f6      	b.n	8001f54 <UART_SetConfig+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f66:	2510      	movs	r5, #16
 8001f68:	4b38      	ldr	r3, [pc, #224]	; (800204c <UART_SetConfig+0x214>)
 8001f6a:	6861      	ldr	r1, [r4, #4]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	0848      	lsrs	r0, r1, #1
 8001f70:	4015      	ands	r5, r2
 8001f72:	d006      	beq.n	8001f82 <UART_SetConfig+0x14a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001f74:	4b3d      	ldr	r3, [pc, #244]	; (800206c <UART_SetConfig+0x234>)
 8001f76:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f78:	f7fe f8d0 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f7c:	2500      	movs	r5, #0
 8001f7e:	b283      	uxth	r3, r0
        break;
 8001f80:	e004      	b.n	8001f8c <UART_SetConfig+0x154>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001f82:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <UART_SetConfig+0x238>)
 8001f84:	18c0      	adds	r0, r0, r3
 8001f86:	f7fe f8c9 	bl	800011c <__udivsi3>
 8001f8a:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	4839      	ldr	r0, [pc, #228]	; (8002074 <UART_SetConfig+0x23c>)
 8001f90:	3910      	subs	r1, #16
 8001f92:	4281      	cmp	r1, r0
 8001f94:	d8a0      	bhi.n	8001ed8 <UART_SetConfig+0xa0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f96:	210f      	movs	r1, #15
 8001f98:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f9a:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f9c:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f9e:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8001fa0:	6821      	ldr	r1, [r4, #0]
 8001fa2:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8001fa4:	60cb      	str	r3, [r1, #12]
 8001fa6:	e7a7      	b.n	8001ef8 <UART_SetConfig+0xc0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fa8:	f7fe fe1c 	bl	8000be4 <HAL_RCC_GetSysClockFreq>
 8001fac:	e7d2      	b.n	8001f54 <UART_SetConfig+0x11c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001fae:	6863      	ldr	r3, [r4, #4]
 8001fb0:	0858      	lsrs	r0, r3, #1
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	025b      	lsls	r3, r3, #9
 8001fb6:	e7d0      	b.n	8001f5a <UART_SetConfig+0x122>
        ret = HAL_ERROR;
 8001fb8:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e7e6      	b.n	8001f8c <UART_SetConfig+0x154>
    switch (clocksource)
 8001fbe:	2808      	cmp	r0, #8
 8001fc0:	d837      	bhi.n	8002032 <UART_SetConfig+0x1fa>
 8001fc2:	f7fe f8a1 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001fc6:	0c05      	.short	0x0c05
 8001fc8:	362a360f 	.word	0x362a360f
 8001fcc:	3636      	.short	0x3636
 8001fce:	2d          	.byte	0x2d
 8001fcf:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001fd0:	f7ff f98a 	bl	80012e8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fd4:	6863      	ldr	r3, [r4, #4]
 8001fd6:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001fd8:	18c0      	adds	r0, r0, r3
 8001fda:	6861      	ldr	r1, [r4, #4]
 8001fdc:	e00b      	b.n	8001ff6 <UART_SetConfig+0x1be>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001fde:	f7ff f993 	bl	8001308 <HAL_RCC_GetPCLK2Freq>
 8001fe2:	e7f7      	b.n	8001fd4 <UART_SetConfig+0x19c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fe4:	2510      	movs	r5, #16
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <UART_SetConfig+0x214>)
 8001fe8:	6861      	ldr	r1, [r4, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	0848      	lsrs	r0, r1, #1
 8001fee:	4015      	ands	r5, r2
 8001ff0:	d00d      	beq.n	800200e <UART_SetConfig+0x1d6>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001ff2:	4b21      	ldr	r3, [pc, #132]	; (8002078 <UART_SetConfig+0x240>)
 8001ff4:	18c0      	adds	r0, r0, r3
 8001ff6:	f7fe f891 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ffa:	2500      	movs	r5, #0
 8001ffc:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ffe:	0019      	movs	r1, r3
 8002000:	481c      	ldr	r0, [pc, #112]	; (8002074 <UART_SetConfig+0x23c>)
 8002002:	3910      	subs	r1, #16
 8002004:	4281      	cmp	r1, r0
 8002006:	d900      	bls.n	800200a <UART_SetConfig+0x1d2>
 8002008:	e766      	b.n	8001ed8 <UART_SetConfig+0xa0>
      huart->Instance->BRR = usartdiv;
 800200a:	6821      	ldr	r1, [r4, #0]
 800200c:	e7ca      	b.n	8001fa4 <UART_SetConfig+0x16c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <UART_SetConfig+0x228>)
 8002010:	18c0      	adds	r0, r0, r3
 8002012:	f7fe f883 	bl	800011c <__udivsi3>
 8002016:	b283      	uxth	r3, r0
 8002018:	e7f1      	b.n	8001ffe <UART_SetConfig+0x1c6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800201a:	f7fe fde3 	bl	8000be4 <HAL_RCC_GetSysClockFreq>
 800201e:	e7d9      	b.n	8001fd4 <UART_SetConfig+0x19c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002020:	6863      	ldr	r3, [r4, #4]
 8002022:	0858      	lsrs	r0, r3, #1
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	e7d6      	b.n	8001fd8 <UART_SetConfig+0x1a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	4299      	cmp	r1, r3
 8002030:	d0c2      	beq.n	8001fb8 <UART_SetConfig+0x180>
        ret = HAL_ERROR;
 8002032:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002034:	2300      	movs	r3, #0
 8002036:	e7e2      	b.n	8001ffe <UART_SetConfig+0x1c6>
 8002038:	efff69f3 	.word	0xefff69f3
 800203c:	ffffcfff 	.word	0xffffcfff
 8002040:	40004800 	.word	0x40004800
 8002044:	fffff4ff 	.word	0xfffff4ff
 8002048:	40013800 	.word	0x40013800
 800204c:	40021000 	.word	0x40021000
 8002050:	08003d08 	.word	0x08003d08
 8002054:	40004400 	.word	0x40004400
 8002058:	08003d0c 	.word	0x08003d0c
 800205c:	ff48e500 	.word	0xff48e500
 8002060:	00f42400 	.word	0x00f42400
 8002064:	fffffd00 	.word	0xfffffd00
 8002068:	000ffcff 	.word	0x000ffcff
 800206c:	007a1200 	.word	0x007a1200
 8002070:	01e84800 	.word	0x01e84800
 8002074:	0000ffef 	.word	0x0000ffef
 8002078:	003d0900 	.word	0x003d0900

0800207c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800207c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800207e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002080:	07da      	lsls	r2, r3, #31
 8002082:	d506      	bpl.n	8002092 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002084:	6801      	ldr	r1, [r0, #0]
 8002086:	4c28      	ldr	r4, [pc, #160]	; (8002128 <UART_AdvFeatureConfig+0xac>)
 8002088:	684a      	ldr	r2, [r1, #4]
 800208a:	4022      	ands	r2, r4
 800208c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800208e:	4322      	orrs	r2, r4
 8002090:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002092:	079a      	lsls	r2, r3, #30
 8002094:	d506      	bpl.n	80020a4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002096:	6801      	ldr	r1, [r0, #0]
 8002098:	4c24      	ldr	r4, [pc, #144]	; (800212c <UART_AdvFeatureConfig+0xb0>)
 800209a:	684a      	ldr	r2, [r1, #4]
 800209c:	4022      	ands	r2, r4
 800209e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80020a0:	4322      	orrs	r2, r4
 80020a2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020a4:	075a      	lsls	r2, r3, #29
 80020a6:	d506      	bpl.n	80020b6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020a8:	6801      	ldr	r1, [r0, #0]
 80020aa:	4c21      	ldr	r4, [pc, #132]	; (8002130 <UART_AdvFeatureConfig+0xb4>)
 80020ac:	684a      	ldr	r2, [r1, #4]
 80020ae:	4022      	ands	r2, r4
 80020b0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80020b2:	4322      	orrs	r2, r4
 80020b4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020b6:	071a      	lsls	r2, r3, #28
 80020b8:	d506      	bpl.n	80020c8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020ba:	6801      	ldr	r1, [r0, #0]
 80020bc:	4c1d      	ldr	r4, [pc, #116]	; (8002134 <UART_AdvFeatureConfig+0xb8>)
 80020be:	684a      	ldr	r2, [r1, #4]
 80020c0:	4022      	ands	r2, r4
 80020c2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80020c4:	4322      	orrs	r2, r4
 80020c6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020c8:	06da      	lsls	r2, r3, #27
 80020ca:	d506      	bpl.n	80020da <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020cc:	6801      	ldr	r1, [r0, #0]
 80020ce:	4c1a      	ldr	r4, [pc, #104]	; (8002138 <UART_AdvFeatureConfig+0xbc>)
 80020d0:	688a      	ldr	r2, [r1, #8]
 80020d2:	4022      	ands	r2, r4
 80020d4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80020d6:	4322      	orrs	r2, r4
 80020d8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020da:	069a      	lsls	r2, r3, #26
 80020dc:	d506      	bpl.n	80020ec <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020de:	6801      	ldr	r1, [r0, #0]
 80020e0:	4c16      	ldr	r4, [pc, #88]	; (800213c <UART_AdvFeatureConfig+0xc0>)
 80020e2:	688a      	ldr	r2, [r1, #8]
 80020e4:	4022      	ands	r2, r4
 80020e6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80020e8:	4322      	orrs	r2, r4
 80020ea:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020ec:	065a      	lsls	r2, r3, #25
 80020ee:	d510      	bpl.n	8002112 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020f0:	6801      	ldr	r1, [r0, #0]
 80020f2:	4d13      	ldr	r5, [pc, #76]	; (8002140 <UART_AdvFeatureConfig+0xc4>)
 80020f4:	684a      	ldr	r2, [r1, #4]
 80020f6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80020f8:	402a      	ands	r2, r5
 80020fa:	4322      	orrs	r2, r4
 80020fc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	0352      	lsls	r2, r2, #13
 8002102:	4294      	cmp	r4, r2
 8002104:	d105      	bne.n	8002112 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002106:	684a      	ldr	r2, [r1, #4]
 8002108:	4c0e      	ldr	r4, [pc, #56]	; (8002144 <UART_AdvFeatureConfig+0xc8>)
 800210a:	4022      	ands	r2, r4
 800210c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800210e:	4322      	orrs	r2, r4
 8002110:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002112:	061b      	lsls	r3, r3, #24
 8002114:	d506      	bpl.n	8002124 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002116:	6802      	ldr	r2, [r0, #0]
 8002118:	490b      	ldr	r1, [pc, #44]	; (8002148 <UART_AdvFeatureConfig+0xcc>)
 800211a:	6853      	ldr	r3, [r2, #4]
 800211c:	400b      	ands	r3, r1
 800211e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002120:	430b      	orrs	r3, r1
 8002122:	6053      	str	r3, [r2, #4]
}
 8002124:	bd30      	pop	{r4, r5, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	fffdffff 	.word	0xfffdffff
 800212c:	fffeffff 	.word	0xfffeffff
 8002130:	fffbffff 	.word	0xfffbffff
 8002134:	ffff7fff 	.word	0xffff7fff
 8002138:	ffffefff 	.word	0xffffefff
 800213c:	ffffdfff 	.word	0xffffdfff
 8002140:	ffefffff 	.word	0xffefffff
 8002144:	ff9fffff 	.word	0xff9fffff
 8002148:	fff7ffff 	.word	0xfff7ffff

0800214c <UART_WaitOnFlagUntilTimeout>:
{
 800214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214e:	0004      	movs	r4, r0
 8002150:	000e      	movs	r6, r1
 8002152:	0015      	movs	r5, r2
 8002154:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002156:	6822      	ldr	r2, [r4, #0]
 8002158:	69d3      	ldr	r3, [r2, #28]
 800215a:	4033      	ands	r3, r6
 800215c:	1b9b      	subs	r3, r3, r6
 800215e:	4259      	negs	r1, r3
 8002160:	414b      	adcs	r3, r1
 8002162:	42ab      	cmp	r3, r5
 8002164:	d001      	beq.n	800216a <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002166:	2000      	movs	r0, #0
 8002168:	e01b      	b.n	80021a2 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800216a:	9b06      	ldr	r3, [sp, #24]
 800216c:	3301      	adds	r3, #1
 800216e:	d0f3      	beq.n	8002158 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002170:	f7fe f9a0 	bl	80004b4 <HAL_GetTick>
 8002174:	9b06      	ldr	r3, [sp, #24]
 8002176:	1bc0      	subs	r0, r0, r7
 8002178:	4298      	cmp	r0, r3
 800217a:	d801      	bhi.n	8002180 <UART_WaitOnFlagUntilTimeout+0x34>
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1ea      	bne.n	8002156 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002180:	6823      	ldr	r3, [r4, #0]
 8002182:	4908      	ldr	r1, [pc, #32]	; (80021a4 <UART_WaitOnFlagUntilTimeout+0x58>)
 8002184:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8002186:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002188:	400a      	ands	r2, r1
 800218a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	31a3      	adds	r1, #163	; 0xa3
 8002190:	31ff      	adds	r1, #255	; 0xff
 8002192:	438a      	bics	r2, r1
 8002194:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002196:	2320      	movs	r3, #32
 8002198:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800219a:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800219c:	2300      	movs	r3, #0
 800219e:	3470      	adds	r4, #112	; 0x70
 80021a0:	7023      	strb	r3, [r4, #0]
}
 80021a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021a4:	fffffe5f 	.word	0xfffffe5f

080021a8 <UART_CheckIdleState>:
{
 80021a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021aa:	2600      	movs	r6, #0
{
 80021ac:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ae:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80021b0:	f7fe f980 	bl	80004b4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021b4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80021b6:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	071b      	lsls	r3, r3, #28
 80021bc:	d415      	bmi.n	80021ea <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	075b      	lsls	r3, r3, #29
 80021c4:	d50a      	bpl.n	80021dc <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021c6:	2180      	movs	r1, #128	; 0x80
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <UART_CheckIdleState+0x5c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	03c9      	lsls	r1, r1, #15
 80021d0:	002b      	movs	r3, r5
 80021d2:	0020      	movs	r0, r4
 80021d4:	f7ff ffba 	bl	800214c <UART_WaitOnFlagUntilTimeout>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d111      	bne.n	8002200 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80021dc:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80021de:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80021e0:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80021e2:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80021e4:	3470      	adds	r4, #112	; 0x70
 80021e6:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80021e8:	e00b      	b.n	8002202 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021ea:	2180      	movs	r1, #128	; 0x80
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <UART_CheckIdleState+0x5c>)
 80021ee:	0032      	movs	r2, r6
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	0389      	lsls	r1, r1, #14
 80021f4:	0003      	movs	r3, r0
 80021f6:	0020      	movs	r0, r4
 80021f8:	f7ff ffa8 	bl	800214c <UART_WaitOnFlagUntilTimeout>
 80021fc:	2800      	cmp	r0, #0
 80021fe:	d0de      	beq.n	80021be <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002200:	2003      	movs	r0, #3
}
 8002202:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002204:	01ffffff 	.word	0x01ffffff

08002208 <HAL_UART_Init>:
{
 8002208:	b510      	push	{r4, lr}
 800220a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800220c:	d101      	bne.n	8002212 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800220e:	2001      	movs	r0, #1
}
 8002210:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002212:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002214:	2b00      	cmp	r3, #0
 8002216:	d104      	bne.n	8002222 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002218:	0002      	movs	r2, r0
 800221a:	3270      	adds	r2, #112	; 0x70
 800221c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800221e:	f001 fc45 	bl	8003aac <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002222:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002224:	2101      	movs	r1, #1
 8002226:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002228:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800222a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800222c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800222e:	438b      	bics	r3, r1
 8002230:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002232:	f7ff fe01 	bl	8001e38 <UART_SetConfig>
 8002236:	2801      	cmp	r0, #1
 8002238:	d0e9      	beq.n	800220e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800223a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8002240:	0020      	movs	r0, r4
 8002242:	f7ff ff1b 	bl	800207c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	4907      	ldr	r1, [pc, #28]	; (8002268 <HAL_UART_Init+0x60>)
 800224a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800224c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800224e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002250:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002252:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	438a      	bics	r2, r1
 8002258:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800225a:	2201      	movs	r2, #1
 800225c:	6819      	ldr	r1, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002262:	f7ff ffa1 	bl	80021a8 <UART_CheckIdleState>
 8002266:	e7d3      	b.n	8002210 <HAL_UART_Init+0x8>
 8002268:	ffffb7ff 	.word	0xffffb7ff

0800226c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800226c:	4770      	bx	lr
	...

08002270 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8002270:	b510      	push	{r4, lr}
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8002272:	287f      	cmp	r0, #127	; 0x7f
 8002274:	d907      	bls.n	8002286 <ff_convert+0x16>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8002276:	2900      	cmp	r1, #0
 8002278:	d006      	beq.n	8002288 <ff_convert+0x18>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800227a:	28ff      	cmp	r0, #255	; 0xff
 800227c:	d811      	bhi.n	80022a2 <ff_convert+0x32>
 800227e:	3880      	subs	r0, #128	; 0x80
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <ff_convert+0x38>)
 8002282:	0040      	lsls	r0, r0, #1
 8002284:	5ac0      	ldrh	r0, [r0, r3]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8002286:	bd10      	pop	{r4, pc}
				if (chr == Tbl[c]) break;
 8002288:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <ff_convert+0x38>)
 800228a:	004c      	lsls	r4, r1, #1
 800228c:	5b14      	ldrh	r4, [r2, r4]
 800228e:	b28b      	uxth	r3, r1
 8002290:	4284      	cmp	r4, r0
 8002292:	d003      	beq.n	800229c <ff_convert+0x2c>
 8002294:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 8002296:	2980      	cmp	r1, #128	; 0x80
 8002298:	d1f7      	bne.n	800228a <ff_convert+0x1a>
 800229a:	000b      	movs	r3, r1
			c = (c + 0x80) & 0xFF;
 800229c:	3380      	adds	r3, #128	; 0x80
 800229e:	b2d8      	uxtb	r0, r3
 80022a0:	e7f1      	b.n	8002286 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80022a2:	2000      	movs	r0, #0
 80022a4:	e7ef      	b.n	8002286 <ff_convert+0x16>
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	08003d1a 	.word	0x08003d1a

080022ac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted */
)
{
 80022ac:	b5f0      	push	{r4, r5, r6, r7, lr}
									0xFF21,0xFF22,0xFF23,0xFF24,0xFF25,0xFF26,0xFF27,0xFF28,0xFF29,0xFF2A,0xFF2B,0xFF2C,0xFF2D,0xFF2E,0xFF2F,0xFF30,0xFF31,0xFF32,0xFF33,0xFF34,0xFF35,0xFF36,0xFF37,0xFF38,0xFF39,0xFF3A
	};
	UINT i, n, hi, li;


	if (chr < 0x80) {	/* ASCII characters (acceleration) */
 80022ae:	287f      	cmp	r0, #127	; 0x7f
 80022b0:	d806      	bhi.n	80022c0 <ff_wtoupper+0x14>
		if (chr >= 0x61 && chr <= 0x7A) chr -= 0x20;
 80022b2:	0003      	movs	r3, r0
 80022b4:	3b61      	subs	r3, #97	; 0x61
 80022b6:	2b19      	cmp	r3, #25
 80022b8:	d801      	bhi.n	80022be <ff_wtoupper+0x12>
 80022ba:	3820      	subs	r0, #32
 80022bc:	b280      	uxth	r0, r0
		} while (--n);
		if (n) chr = upper[i];
	}

	return chr;
}
 80022be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n = 12; li = 0; hi = sizeof lower / sizeof lower[0];
 80022c0:	25f7      	movs	r5, #247	; 0xf7
 80022c2:	220c      	movs	r2, #12
 80022c4:	2100      	movs	r1, #0
			if (chr == lower[i]) break;
 80022c6:	4e0a      	ldr	r6, [pc, #40]	; (80022f0 <ff_wtoupper+0x44>)
		n = 12; li = 0; hi = sizeof lower / sizeof lower[0];
 80022c8:	006d      	lsls	r5, r5, #1
			i = li + (hi - li) / 2;
 80022ca:	1a6b      	subs	r3, r5, r1
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	185b      	adds	r3, r3, r1
			if (chr == lower[i]) break;
 80022d0:	005c      	lsls	r4, r3, #1
 80022d2:	5ba7      	ldrh	r7, [r4, r6]
 80022d4:	4287      	cmp	r7, r0
 80022d6:	d007      	beq.n	80022e8 <ff_wtoupper+0x3c>
			if (chr > lower[i]) li = i; else hi = i;
 80022d8:	d304      	bcc.n	80022e4 <ff_wtoupper+0x38>
			i = li + (hi - li) / 2;
 80022da:	001d      	movs	r5, r3
 80022dc:	3a01      	subs	r2, #1
		} while (--n);
 80022de:	2a00      	cmp	r2, #0
 80022e0:	d1f3      	bne.n	80022ca <ff_wtoupper+0x1e>
 80022e2:	e7ec      	b.n	80022be <ff_wtoupper+0x12>
			i = li + (hi - li) / 2;
 80022e4:	0019      	movs	r1, r3
 80022e6:	e7f9      	b.n	80022dc <ff_wtoupper+0x30>
		if (n) chr = upper[i];
 80022e8:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <ff_wtoupper+0x48>)
 80022ea:	5ae0      	ldrh	r0, [r4, r3]
	return chr;
 80022ec:	e7e7      	b.n	80022be <ff_wtoupper+0x12>
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	08003e1a 	.word	0x08003e1a
 80022f4:	080041f6 	.word	0x080041f6

080022f8 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	if (SD_ff_hw.initialized)
 80022f8:	4b02      	ldr	r3, [pc, #8]	; (8002304 <disk_status+0xc>)
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	4243      	negs	r3, r0
 80022fe:	4158      	adcs	r0, r3
 8002300:	b2c0      	uxtb	r0, r0
		return 0;

	return STA_NOINIT;
}
 8002302:	4770      	bx	lr
 8002304:	20000234 	.word	0x20000234

08002308 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002308:	b510      	push	{r4, lr}
	if (hwif_init(&SD_ff_hw) == 0)
 800230a:	4803      	ldr	r0, [pc, #12]	; (8002318 <disk_initialize+0x10>)
 800230c:	f000 fa60 	bl	80027d0 <hwif_init>
 8002310:	1e43      	subs	r3, r0, #1
 8002312:	4198      	sbcs	r0, r3
		return 0;

	return STA_NOINIT;
}
 8002314:	b2c0      	uxtb	r0, r0
 8002316:	bd10      	pop	{r4, pc}
 8002318:	20000234 	.word	0x20000234

0800231c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	0014      	movs	r4, r2
 8002320:	000d      	movs	r5, r1
 8002322:	189e      	adds	r6, r3, r2
	int i;

	for (i=0; i<count; i++)
 8002324:	42b4      	cmp	r4, r6
 8002326:	d101      	bne.n	800232c <disk_read+0x10>
		if (sd_read(&SD_ff_hw, sector+i, buff+512*i) != 0)
			return RES_ERROR;

	return RES_OK;
 8002328:	2000      	movs	r0, #0
}
 800232a:	bd70      	pop	{r4, r5, r6, pc}
		if (sd_read(&SD_ff_hw, sector+i, buff+512*i) != 0)
 800232c:	002a      	movs	r2, r5
 800232e:	0021      	movs	r1, r4
 8002330:	4805      	ldr	r0, [pc, #20]	; (8002348 <disk_read+0x2c>)
 8002332:	f000 faf3 	bl	800291c <sd_read>
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	3401      	adds	r4, #1
 800233c:	18ed      	adds	r5, r5, r3
 800233e:	2800      	cmp	r0, #0
 8002340:	d0f0      	beq.n	8002324 <disk_read+0x8>
			return RES_ERROR;
 8002342:	2001      	movs	r0, #1
 8002344:	e7f1      	b.n	800232a <disk_read+0xe>
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	20000234 	.word	0x20000234

0800234c <crc7_one>:
	int i;
	const uint8_t g = 0x89;
	t ^= data;
	for (i=0; i<8; i++) {
		if (t & 0x80)
			t ^= g;
 800234c:	2277      	movs	r2, #119	; 0x77
	t ^= data;
 800234e:	2308      	movs	r3, #8
 8002350:	4048      	eors	r0, r1
			t ^= g;
 8002352:	4252      	negs	r2, r2
		if (t & 0x80)
 8002354:	b241      	sxtb	r1, r0
 8002356:	2900      	cmp	r1, #0
 8002358:	da01      	bge.n	800235e <crc7_one+0x12>
			t ^= g;
 800235a:	4050      	eors	r0, r2
 800235c:	b2c0      	uxtb	r0, r0
		t <<= 1;
 800235e:	0040      	lsls	r0, r0, #1
 8002360:	3b01      	subs	r3, #1
 8002362:	b2c0      	uxtb	r0, r0
	for (i=0; i<8; i++) {
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f5      	bne.n	8002354 <crc7_one+0x8>
	}
	return t;
}
 8002368:	4770      	bx	lr
	...

0800236c <spi_txrx>:
{
 800236c:	b510      	push	{r4, lr}
	uint8_t out = 0;
 800236e:	2417      	movs	r4, #23
 8002370:	2300      	movs	r3, #0
{
 8002372:	210f      	movs	r1, #15
 8002374:	b086      	sub	sp, #24
	uint8_t out = 0;
 8002376:	446c      	add	r4, sp
 8002378:	7023      	strb	r3, [r4, #0]
{
 800237a:	4469      	add	r1, sp
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 800237c:	3b01      	subs	r3, #1
{
 800237e:	7008      	strb	r0, [r1, #0]
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 8002380:	0022      	movs	r2, r4
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	4803      	ldr	r0, [pc, #12]	; (8002394 <spi_txrx+0x28>)
 8002386:	3302      	adds	r3, #2
 8002388:	f7ff f96a 	bl	8001660 <HAL_SPI_TransmitReceive>
	return out;
 800238c:	7820      	ldrb	r0, [r4, #0]
}
 800238e:	b006      	add	sp, #24
 8002390:	bd10      	pop	{r4, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	20000b34 	.word	0x20000b34

08002398 <sd_cmd>:


/*** sd functions - on top of spi code ***/

static void sd_cmd(uint8_t cmd, uint32_t arg)
{
 8002398:	b570      	push	{r4, r5, r6, lr}
	uint8_t crc = 0;
	spi_txrx(0x40 | cmd);
 800239a:	2540      	movs	r5, #64	; 0x40
 800239c:	4305      	orrs	r5, r0
 800239e:	0028      	movs	r0, r5
{
 80023a0:	000c      	movs	r4, r1
	spi_txrx(0x40 | cmd);
 80023a2:	f7ff ffe3 	bl	800236c <spi_txrx>
	crc = crc7_one(crc, 0x40 | cmd);
 80023a6:	0029      	movs	r1, r5
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7ff ffcf 	bl	800234c <crc7_one>
 80023ae:	0006      	movs	r6, r0
	spi_txrx(arg >> 24);
 80023b0:	0e25      	lsrs	r5, r4, #24
 80023b2:	0028      	movs	r0, r5
 80023b4:	f7ff ffda 	bl	800236c <spi_txrx>
	crc = crc7_one(crc, arg >> 24);
 80023b8:	0029      	movs	r1, r5
 80023ba:	0030      	movs	r0, r6
 80023bc:	f7ff ffc6 	bl	800234c <crc7_one>
 80023c0:	0006      	movs	r6, r0
	spi_txrx(arg >> 16);
 80023c2:	0c25      	lsrs	r5, r4, #16
 80023c4:	b2ed      	uxtb	r5, r5
 80023c6:	0028      	movs	r0, r5
 80023c8:	f7ff ffd0 	bl	800236c <spi_txrx>
	crc = crc7_one(crc, arg >> 16);
 80023cc:	0029      	movs	r1, r5
 80023ce:	0030      	movs	r0, r6
 80023d0:	f7ff ffbc 	bl	800234c <crc7_one>
 80023d4:	0006      	movs	r6, r0
	spi_txrx(arg >> 8);
 80023d6:	0a25      	lsrs	r5, r4, #8
 80023d8:	b2ed      	uxtb	r5, r5
 80023da:	0028      	movs	r0, r5
 80023dc:	f7ff ffc6 	bl	800236c <spi_txrx>
	crc = crc7_one(crc, arg >> 8);
 80023e0:	0029      	movs	r1, r5
 80023e2:	0030      	movs	r0, r6
 80023e4:	f7ff ffb2 	bl	800234c <crc7_one>
 80023e8:	0005      	movs	r5, r0
	spi_txrx(arg);
 80023ea:	b2e4      	uxtb	r4, r4
 80023ec:	0020      	movs	r0, r4
 80023ee:	f7ff ffbd 	bl	800236c <spi_txrx>
	crc = crc7_one(crc, arg);
 80023f2:	0021      	movs	r1, r4
 80023f4:	0028      	movs	r0, r5
 80023f6:	f7ff ffa9 	bl	800234c <crc7_one>
 80023fa:	0003      	movs	r3, r0
	//spi_txrx(0x95);
	spi_txrx(crc | 0x1);	/* crc7, for cmd0 */
 80023fc:	2001      	movs	r0, #1
 80023fe:	4318      	orrs	r0, r3
 8002400:	b2c0      	uxtb	r0, r0
 8002402:	f7ff ffb3 	bl	800236c <spi_txrx>
}
 8002406:	bd70      	pop	{r4, r5, r6, pc}

08002408 <sd_get_r1>:

static uint8_t sd_get_r1()
{
 8002408:	b510      	push	{r4, lr}
	int tries = 1000;
	uint8_t r;

	while (tries--) {
 800240a:	4c05      	ldr	r4, [pc, #20]	; (8002420 <sd_get_r1+0x18>)
 800240c:	3c01      	subs	r4, #1
		r = spi_txrx(0xff);
 800240e:	20ff      	movs	r0, #255	; 0xff
	while (tries--) {
 8002410:	2c00      	cmp	r4, #0
 8002412:	d003      	beq.n	800241c <sd_get_r1+0x14>
		r = spi_txrx(0xff);
 8002414:	f7ff ffaa 	bl	800236c <spi_txrx>
		if ((r & 0x80) == 0)
 8002418:	0603      	lsls	r3, r0, #24
 800241a:	d4f7      	bmi.n	800240c <sd_get_r1+0x4>
			return r;
	}
	return 0xff;
}
 800241c:	bd10      	pop	{r4, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	000003e9 	.word	0x000003e9

08002424 <sd_nec>:


/* Nec (=Ncr? which is limited to [0,8]) dummy bytes before lowering CS,
 * as described in sandisk doc, 5.4. */
static void sd_nec()
{
 8002424:	b510      	push	{r4, lr}
 8002426:	2408      	movs	r4, #8
	int i;
	for (i=0; i<8; i++)
		spi_txrx(0xff);
 8002428:	20ff      	movs	r0, #255	; 0xff
 800242a:	3c01      	subs	r4, #1
 800242c:	f7ff ff9e 	bl	800236c <spi_txrx>
	for (i=0; i<8; i++)
 8002430:	2c00      	cmp	r4, #0
 8002432:	d1f9      	bne.n	8002428 <sd_nec+0x4>
}
 8002434:	bd10      	pop	{r4, pc}

08002436 <sd_get_r7>:
{
 8002436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002438:	0006      	movs	r6, r0
	r = sd_get_r1();
 800243a:	f7ff ffe5 	bl	8002408 <sd_get_r1>
 800243e:	0005      	movs	r5, r0
	if (r != 0x01)
 8002440:	2801      	cmp	r0, #1
 8002442:	d113      	bne.n	800246c <sd_get_r7+0x36>
	r = spi_txrx(0xff) << 24;
 8002444:	20ff      	movs	r0, #255	; 0xff
 8002446:	f7ff ff91 	bl	800236c <spi_txrx>
 800244a:	0604      	lsls	r4, r0, #24
	r |= spi_txrx(0xff) << 16;
 800244c:	20ff      	movs	r0, #255	; 0xff
 800244e:	f7ff ff8d 	bl	800236c <spi_txrx>
 8002452:	0407      	lsls	r7, r0, #16
	r |= spi_txrx(0xff) << 8;
 8002454:	20ff      	movs	r0, #255	; 0xff
 8002456:	f7ff ff89 	bl	800236c <spi_txrx>
	r |= spi_txrx(0xff) << 16;
 800245a:	4327      	orrs	r7, r4
	r |= spi_txrx(0xff) << 8;
 800245c:	0004      	movs	r4, r0
	r |= spi_txrx(0xff);
 800245e:	20ff      	movs	r0, #255	; 0xff
 8002460:	f7ff ff84 	bl	800236c <spi_txrx>
	r |= spi_txrx(0xff) << 8;
 8002464:	0224      	lsls	r4, r4, #8
 8002466:	4307      	orrs	r7, r0
	r |= spi_txrx(0xff);
 8002468:	433c      	orrs	r4, r7
	*r7 = r;
 800246a:	6034      	str	r4, [r6, #0]
}
 800246c:	0028      	movs	r0, r5
 800246e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002470 <sd_read_status.isra.2>:

static int sd_read_status(hwif *hw)
{
	uint16_t r2;

	spi_cs_low();
 8002470:	20a0      	movs	r0, #160	; 0xa0
static int sd_read_status(hwif *hw)
 8002472:	b570      	push	{r4, r5, r6, lr}
	spi_cs_low();
 8002474:	2200      	movs	r2, #0
 8002476:	2110      	movs	r1, #16
 8002478:	05c0      	lsls	r0, r0, #23
 800247a:	f7fe fa43 	bl	8000904 <HAL_GPIO_WritePin>
	sd_cmd(13, 0);
 800247e:	2100      	movs	r1, #0
 8002480:	200d      	movs	r0, #13
 8002482:	f7ff ff89 	bl	8002398 <sd_cmd>
 8002486:	4d0b      	ldr	r5, [pc, #44]	; (80024b4 <sd_read_status.isra.2+0x44>)
 8002488:	3d01      	subs	r5, #1
	while (tries--) {
 800248a:	2d00      	cmp	r5, #0
 800248c:	d109      	bne.n	80024a2 <sd_read_status.isra.2+0x32>
	r2 = sd_get_r2();
	sd_nec();
 800248e:	f7ff ffc9 	bl	8002424 <sd_nec>
	spi_cs_high();
 8002492:	20a0      	movs	r0, #160	; 0xa0
 8002494:	2201      	movs	r2, #1
 8002496:	2110      	movs	r1, #16
 8002498:	05c0      	lsls	r0, r0, #23
 800249a:	f7fe fa33 	bl	8000904 <HAL_GPIO_WritePin>
	if (r2 & 0x8000)
		return -1;
	if (r2)

	return 0;
}
 800249e:	2000      	movs	r0, #0
 80024a0:	bd70      	pop	{r4, r5, r6, pc}
		r = spi_txrx(0xff);
 80024a2:	20ff      	movs	r0, #255	; 0xff
 80024a4:	f7ff ff62 	bl	800236c <spi_txrx>
		if ((r & 0x80) == 0)
 80024a8:	0603      	lsls	r3, r0, #24
 80024aa:	d4ed      	bmi.n	8002488 <sd_read_status.isra.2+0x18>
	r = r<<8 | spi_txrx(0xff);
 80024ac:	20ff      	movs	r0, #255	; 0xff
 80024ae:	f7ff ff5d 	bl	800236c <spi_txrx>
 80024b2:	e7ec      	b.n	800248e <sd_read_status.isra.2+0x1e>
 80024b4:	000003e9 	.word	0x000003e9

080024b8 <sd_get_data.isra.3>:

/* 0xfe marks data start, then len bytes of data and crc16 */
static int sd_get_data(hwif *hw, uint8_t *buf, int len)
 80024b8:	b570      	push	{r4, r5, r6, lr}
 80024ba:	0006      	movs	r6, r0
 80024bc:	000c      	movs	r4, r1
 80024be:	4d0c      	ldr	r5, [pc, #48]	; (80024f0 <sd_get_data.isra.3+0x38>)
 80024c0:	3d01      	subs	r5, #1
	uint8_t r;
	uint16_t _crc16;
	uint16_t calc_crc;
	int i;

	while (tries--) {
 80024c2:	2d00      	cmp	r5, #0
 80024c4:	d102      	bne.n	80024cc <sd_get_data.isra.3+0x14>
		r = spi_txrx(0xff);
		if (r == 0xfe)
			break;
	}
	if (tries < 0)
		return -1;
 80024c6:	2001      	movs	r0, #1
 80024c8:	4240      	negs	r0, r0
	//if (_crc16 != calc_crc) {
	//	return -1;
	//}

	return 0;
}
 80024ca:	bd70      	pop	{r4, r5, r6, pc}
		r = spi_txrx(0xff);
 80024cc:	20ff      	movs	r0, #255	; 0xff
 80024ce:	f7ff ff4d 	bl	800236c <spi_txrx>
		if (r == 0xfe)
 80024d2:	28fe      	cmp	r0, #254	; 0xfe
 80024d4:	d1f4      	bne.n	80024c0 <sd_get_data.isra.3+0x8>
	dma_complete = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	4d06      	ldr	r5, [pc, #24]	; (80024f4 <sd_get_data.isra.3+0x3c>)
	HAL_SPI_Receive_DMA(&FAT_SD_SPI, buf, len);
 80024da:	b2a2      	uxth	r2, r4
 80024dc:	0031      	movs	r1, r6
 80024de:	4806      	ldr	r0, [pc, #24]	; (80024f8 <sd_get_data.isra.3+0x40>)
	dma_complete = 0;
 80024e0:	702b      	strb	r3, [r5, #0]
	HAL_SPI_Receive_DMA(&FAT_SD_SPI, buf, len);
 80024e2:	f7ff fa3d 	bl	8001960 <HAL_SPI_Receive_DMA>
	while (dma_complete == 0);
 80024e6:	782b      	ldrb	r3, [r5, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0fc      	beq.n	80024e6 <sd_get_data.isra.3+0x2e>
 80024ec:	2000      	movs	r0, #0
 80024ee:	e7ec      	b.n	80024ca <sd_get_data.isra.3+0x12>
 80024f0:	00004e21 	.word	0x00004e21
 80024f4:	20000024 	.word	0x20000024
 80024f8:	20000b34 	.word	0x20000b34

080024fc <sd_readsector.isra.6>:

	return 0;
}


static int sd_readsector(hwif *hw, uint32_t address, uint8_t *buf)
 80024fc:	b570      	push	{r4, r5, r6, lr}
 80024fe:	0005      	movs	r5, r0
{
	int r;

	spi_cs_low();
 8002500:	20a0      	movs	r0, #160	; 0xa0
static int sd_readsector(hwif *hw, uint32_t address, uint8_t *buf)
 8002502:	000c      	movs	r4, r1
 8002504:	0016      	movs	r6, r2
	spi_cs_low();
 8002506:	2110      	movs	r1, #16
 8002508:	2200      	movs	r2, #0
 800250a:	05c0      	lsls	r0, r0, #23
 800250c:	f7fe f9fa 	bl	8000904 <HAL_GPIO_WritePin>
	if (hw->capabilities & CAP_SDHC)
 8002510:	682b      	ldr	r3, [r5, #0]
		sd_cmd(17, address); /* read single block */
 8002512:	0021      	movs	r1, r4
	if (hw->capabilities & CAP_SDHC)
 8002514:	079b      	lsls	r3, r3, #30
 8002516:	d400      	bmi.n	800251a <sd_readsector.isra.6+0x1e>
	else
		sd_cmd(17, address*512); /* read single block */
 8002518:	0261      	lsls	r1, r4, #9
 800251a:	2011      	movs	r0, #17
 800251c:	f7ff ff3c 	bl	8002398 <sd_cmd>

	r = sd_get_r1();
 8002520:	f7ff ff72 	bl	8002408 <sd_get_r1>
	if (r == 0xff) {
 8002524:	28ff      	cmp	r0, #255	; 0xff
 8002526:	d108      	bne.n	800253a <sd_readsector.isra.6+0x3e>
		spi_cs_high();
 8002528:	20a0      	movs	r0, #160	; 0xa0
 800252a:	2201      	movs	r2, #1
 800252c:	05c0      	lsls	r0, r0, #23
 800252e:	2110      	movs	r1, #16
 8002530:	f7fe f9e8 	bl	8000904 <HAL_GPIO_WritePin>
		r = -1;
 8002534:	2001      	movs	r0, #1

	r = sd_get_data(hw, buf, 512);
	sd_nec();
	spi_cs_high();
	if (r == -1) {
		r = -3;
 8002536:	4240      	negs	r0, r0
	}

	return 0;
 fail:
	return r;
}
 8002538:	bd70      	pop	{r4, r5, r6, pc}
	if (r & 0xfe) {
 800253a:	2501      	movs	r5, #1
 800253c:	43a8      	bics	r0, r5
 800253e:	b2c4      	uxtb	r4, r0
 8002540:	2c00      	cmp	r4, #0
 8002542:	d007      	beq.n	8002554 <sd_readsector.isra.6+0x58>
		spi_cs_high();
 8002544:	20a0      	movs	r0, #160	; 0xa0
 8002546:	002a      	movs	r2, r5
 8002548:	05c0      	lsls	r0, r0, #23
 800254a:	2110      	movs	r1, #16
 800254c:	f7fe f9da 	bl	8000904 <HAL_GPIO_WritePin>
		r = -2;
 8002550:	2002      	movs	r0, #2
 8002552:	e7f0      	b.n	8002536 <sd_readsector.isra.6+0x3a>
	r = sd_get_data(hw, buf, 512);
 8002554:	2180      	movs	r1, #128	; 0x80
 8002556:	0030      	movs	r0, r6
 8002558:	0089      	lsls	r1, r1, #2
 800255a:	f7ff ffad 	bl	80024b8 <sd_get_data.isra.3>
 800255e:	0006      	movs	r6, r0
	sd_nec();
 8002560:	f7ff ff60 	bl	8002424 <sd_nec>
	spi_cs_high();
 8002564:	20a0      	movs	r0, #160	; 0xa0
 8002566:	002a      	movs	r2, r5
 8002568:	05c0      	lsls	r0, r0, #23
 800256a:	2110      	movs	r1, #16
 800256c:	f7fe f9ca 	bl	8000904 <HAL_GPIO_WritePin>
	return 0;
 8002570:	0020      	movs	r0, r4
	if (r == -1) {
 8002572:	1c73      	adds	r3, r6, #1
 8002574:	d1e0      	bne.n	8002538 <sd_readsector.isra.6+0x3c>
		r = -3;
 8002576:	2003      	movs	r0, #3
 8002578:	e7dd      	b.n	8002536 <sd_readsector.isra.6+0x3a>
	...

0800257c <sd_init.isra.1>:
	hw->capabilities = 0;
 800257c:	2300      	movs	r3, #0
static int sd_init(hwif *hw)
 800257e:	b5f0      	push	{r4, r5, r6, r7, lr}
	hw->capabilities = 0;
 8002580:	6003      	str	r3, [r0, #0]
static int sd_init(hwif *hw)
 8002582:	0004      	movs	r4, r0
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8002584:	4890      	ldr	r0, [pc, #576]	; (80027c8 <sd_init.isra.1+0x24c>)
 8002586:	3328      	adds	r3, #40	; 0x28
static int sd_init(hwif *hw)
 8002588:	b085      	sub	sp, #20
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 800258a:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 800258c:	f7ff f828 	bl	80015e0 <HAL_SPI_Init>
	spi_cs_high();
 8002590:	20a0      	movs	r0, #160	; 0xa0
 8002592:	2201      	movs	r2, #1
 8002594:	2110      	movs	r1, #16
 8002596:	05c0      	lsls	r0, r0, #23
 8002598:	f7fe f9b4 	bl	8000904 <HAL_GPIO_WritePin>
 800259c:	250a      	movs	r5, #10
		spi_txrx(0xff);
 800259e:	20ff      	movs	r0, #255	; 0xff
 80025a0:	3d01      	subs	r5, #1
 80025a2:	f7ff fee3 	bl	800236c <spi_txrx>
	for (i=0; i<10; i++)
 80025a6:	2d00      	cmp	r5, #0
 80025a8:	d1f9      	bne.n	800259e <sd_init.isra.1+0x22>
	spi_cs_low();
 80025aa:	20a0      	movs	r0, #160	; 0xa0
 80025ac:	002a      	movs	r2, r5
 80025ae:	2110      	movs	r1, #16
 80025b0:	05c0      	lsls	r0, r0, #23
 80025b2:	f7fe f9a7 	bl	8000904 <HAL_GPIO_WritePin>
	sd_cmd(0, 0);
 80025b6:	0029      	movs	r1, r5
 80025b8:	0028      	movs	r0, r5
 80025ba:	f7ff feed 	bl	8002398 <sd_cmd>
	r = sd_get_r1();
 80025be:	f7ff ff23 	bl	8002408 <sd_get_r1>
 80025c2:	0006      	movs	r6, r0
	sd_nec();
 80025c4:	f7ff ff2e 	bl	8002424 <sd_nec>
	spi_cs_high();
 80025c8:	20a0      	movs	r0, #160	; 0xa0
 80025ca:	2201      	movs	r2, #1
 80025cc:	2110      	movs	r1, #16
 80025ce:	05c0      	lsls	r0, r0, #23
 80025d0:	f7fe f998 	bl	8000904 <HAL_GPIO_WritePin>
	if (r == 0xff)
 80025d4:	2eff      	cmp	r6, #255	; 0xff
 80025d6:	d104      	bne.n	80025e2 <sd_init.isra.1+0x66>
	return -1;
 80025d8:	2501      	movs	r5, #1
	return -2;
 80025da:	426d      	negs	r5, r5
}
 80025dc:	0028      	movs	r0, r5
 80025de:	b005      	add	sp, #20
 80025e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (r != 0x01) {
 80025e2:	2e01      	cmp	r6, #1
 80025e4:	d001      	beq.n	80025ea <sd_init.isra.1+0x6e>
	return -2;
 80025e6:	2502      	movs	r5, #2
 80025e8:	e7f7      	b.n	80025da <sd_init.isra.1+0x5e>
	spi_cs_low();
 80025ea:	20a0      	movs	r0, #160	; 0xa0
 80025ec:	002a      	movs	r2, r5
 80025ee:	2110      	movs	r1, #16
 80025f0:	05c0      	lsls	r0, r0, #23
 80025f2:	f7fe f987 	bl	8000904 <HAL_GPIO_WritePin>
	sd_cmd(8, 0x1aa /* VHS = 1 */);
 80025f6:	21d5      	movs	r1, #213	; 0xd5
 80025f8:	2008      	movs	r0, #8
 80025fa:	0049      	lsls	r1, r1, #1
 80025fc:	f7ff fecc 	bl	8002398 <sd_cmd>
	r = sd_get_r7(&r7);
 8002600:	a802      	add	r0, sp, #8
 8002602:	f7ff ff18 	bl	8002436 <sd_get_r7>
 8002606:	0005      	movs	r5, r0
	sd_nec();
 8002608:	f7ff ff0c 	bl	8002424 <sd_nec>
	spi_cs_high();
 800260c:	20a0      	movs	r0, #160	; 0xa0
 800260e:	0032      	movs	r2, r6
 8002610:	2110      	movs	r1, #16
 8002612:	05c0      	lsls	r0, r0, #23
 8002614:	f7fe f976 	bl	8000904 <HAL_GPIO_WritePin>
	hw->capabilities |= CAP_VER2_00;
 8002618:	0032      	movs	r2, r6
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	431a      	orrs	r2, r3
 800261e:	6022      	str	r2, [r4, #0]
	if (r == 0xff)
 8002620:	2dff      	cmp	r5, #255	; 0xff
 8002622:	d0d9      	beq.n	80025d8 <sd_init.isra.1+0x5c>
	if (r == 0x01)
 8002624:	2d01      	cmp	r5, #1
 8002626:	d003      	beq.n	8002630 <sd_init.isra.1+0xb4>
	else if (r & 0x4) {
 8002628:	076a      	lsls	r2, r5, #29
 800262a:	d5dc      	bpl.n	80025e6 <sd_init.isra.1+0x6a>
		hw->capabilities &= ~CAP_VER2_00;
 800262c:	43b3      	bics	r3, r6
 800262e:	6023      	str	r3, [r4, #0]
	spi_cs_low();
 8002630:	20a0      	movs	r0, #160	; 0xa0
 8002632:	2200      	movs	r2, #0
 8002634:	2110      	movs	r1, #16
 8002636:	05c0      	lsls	r0, r0, #23
 8002638:	f7fe f964 	bl	8000904 <HAL_GPIO_WritePin>
	sd_cmd(58, 0);
 800263c:	2100      	movs	r1, #0
 800263e:	203a      	movs	r0, #58	; 0x3a
 8002640:	f7ff feaa 	bl	8002398 <sd_cmd>
	r = sd_get_r3(&r3);
 8002644:	a803      	add	r0, sp, #12
 8002646:	f7ff fef6 	bl	8002436 <sd_get_r7>
 800264a:	0005      	movs	r5, r0
	sd_nec();
 800264c:	f7ff feea 	bl	8002424 <sd_nec>
	spi_cs_high();
 8002650:	20a0      	movs	r0, #160	; 0xa0
 8002652:	2201      	movs	r2, #1
 8002654:	2110      	movs	r1, #16
 8002656:	05c0      	lsls	r0, r0, #23
 8002658:	f7fe f954 	bl	8000904 <HAL_GPIO_WritePin>
	if (r == 0xff)
 800265c:	2dff      	cmp	r5, #255	; 0xff
 800265e:	d0bb      	beq.n	80025d8 <sd_init.isra.1+0x5c>
	if (r != 0x01 && !(r & 0x4)) { /* allow it to not be implemented - old cards */
 8002660:	2d01      	cmp	r5, #1
 8002662:	d001      	beq.n	8002668 <sd_init.isra.1+0xec>
 8002664:	076b      	lsls	r3, r5, #29
 8002666:	d5be      	bpl.n	80025e6 <sd_init.isra.1+0x6a>
	uint32_t hcs = 0;
 8002668:	2301      	movs	r3, #1
		spi_cs_low();
 800266a:	27a0      	movs	r7, #160	; 0xa0
	uint32_t hcs = 0;
 800266c:	6822      	ldr	r2, [r4, #0]
		spi_cs_low();
 800266e:	05ff      	lsls	r7, r7, #23
	uint32_t hcs = 0;
 8002670:	4013      	ands	r3, r2
 8002672:	079b      	lsls	r3, r3, #30
 8002674:	9301      	str	r3, [sp, #4]
		hcs = 1<<30;
 8002676:	4b55      	ldr	r3, [pc, #340]	; (80027cc <sd_init.isra.1+0x250>)
 8002678:	9300      	str	r3, [sp, #0]
		spi_cs_low();
 800267a:	2200      	movs	r2, #0
 800267c:	2110      	movs	r1, #16
 800267e:	0038      	movs	r0, r7
 8002680:	f7fe f940 	bl	8000904 <HAL_GPIO_WritePin>
		sd_cmd(55, 0);
 8002684:	2100      	movs	r1, #0
 8002686:	2037      	movs	r0, #55	; 0x37
 8002688:	f7ff fe86 	bl	8002398 <sd_cmd>
		r = sd_get_r1();
 800268c:	f7ff febc 	bl	8002408 <sd_get_r1>
 8002690:	0005      	movs	r5, r0
		sd_nec();
 8002692:	f7ff fec7 	bl	8002424 <sd_nec>
		spi_cs_high();
 8002696:	2201      	movs	r2, #1
 8002698:	2110      	movs	r1, #16
 800269a:	0038      	movs	r0, r7
 800269c:	f7fe f932 	bl	8000904 <HAL_GPIO_WritePin>
		if (r == 0xff)
 80026a0:	2dff      	cmp	r5, #255	; 0xff
 80026a2:	d099      	beq.n	80025d8 <sd_init.isra.1+0x5c>
		if (r & 0xfe) {
 80026a4:	2601      	movs	r6, #1
 80026a6:	43b5      	bics	r5, r6
 80026a8:	b2ea      	uxtb	r2, r5
 80026aa:	2a00      	cmp	r2, #0
 80026ac:	d19b      	bne.n	80025e6 <sd_init.isra.1+0x6a>
		spi_cs_low();
 80026ae:	2110      	movs	r1, #16
 80026b0:	0038      	movs	r0, r7
 80026b2:	f7fe f927 	bl	8000904 <HAL_GPIO_WritePin>
		sd_cmd(41, hcs);
 80026b6:	9901      	ldr	r1, [sp, #4]
 80026b8:	2029      	movs	r0, #41	; 0x29
 80026ba:	f7ff fe6d 	bl	8002398 <sd_cmd>
		r = sd_get_r1();
 80026be:	f7ff fea3 	bl	8002408 <sd_get_r1>
 80026c2:	0005      	movs	r5, r0
		sd_nec();
 80026c4:	f7ff feae 	bl	8002424 <sd_nec>
		spi_cs_high();
 80026c8:	0032      	movs	r2, r6
 80026ca:	2110      	movs	r1, #16
 80026cc:	0038      	movs	r0, r7
 80026ce:	f7fe f919 	bl	8000904 <HAL_GPIO_WritePin>
		if (r == 0xff)
 80026d2:	2dff      	cmp	r5, #255	; 0xff
 80026d4:	d100      	bne.n	80026d8 <sd_init.isra.1+0x15c>
 80026d6:	e77f      	b.n	80025d8 <sd_init.isra.1+0x5c>
		if (r & 0xfe) {
 80026d8:	002b      	movs	r3, r5
 80026da:	43b3      	bics	r3, r6
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d181      	bne.n	80025e6 <sd_init.isra.1+0x6a>
	} while (r != 0 && tries--);
 80026e2:	2d00      	cmp	r5, #0
 80026e4:	d021      	beq.n	800272a <sd_init.isra.1+0x1ae>
 80026e6:	9b00      	ldr	r3, [sp, #0]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1c4      	bne.n	800267a <sd_init.isra.1+0xfe>
 80026f0:	e779      	b.n	80025e6 <sd_init.isra.1+0x6a>
		spi_cs_low();
 80026f2:	20a0      	movs	r0, #160	; 0xa0
 80026f4:	2110      	movs	r1, #16
 80026f6:	05c0      	lsls	r0, r0, #23
 80026f8:	f7fe f904 	bl	8000904 <HAL_GPIO_WritePin>
		sd_cmd(16, 512);
 80026fc:	2180      	movs	r1, #128	; 0x80
 80026fe:	2010      	movs	r0, #16
 8002700:	0089      	lsls	r1, r1, #2
 8002702:	f7ff fe49 	bl	8002398 <sd_cmd>
		r = sd_get_r1();
 8002706:	f7ff fe7f 	bl	8002408 <sd_get_r1>
 800270a:	0004      	movs	r4, r0
		sd_nec();
 800270c:	f7ff fe8a 	bl	8002424 <sd_nec>
		spi_cs_high();
 8002710:	20a0      	movs	r0, #160	; 0xa0
 8002712:	2201      	movs	r2, #1
 8002714:	2110      	movs	r1, #16
 8002716:	05c0      	lsls	r0, r0, #23
 8002718:	f7fe f8f4 	bl	8000904 <HAL_GPIO_WritePin>
		if (r == 0xff)
 800271c:	2cff      	cmp	r4, #255	; 0xff
 800271e:	d100      	bne.n	8002722 <sd_init.isra.1+0x1a6>
 8002720:	e75a      	b.n	80025d8 <sd_init.isra.1+0x5c>
		if (r & 0xfe) {
 8002722:	23fe      	movs	r3, #254	; 0xfe
 8002724:	421c      	tst	r4, r3
 8002726:	d02d      	beq.n	8002784 <sd_init.isra.1+0x208>
 8002728:	e75d      	b.n	80025e6 <sd_init.isra.1+0x6a>
	if (hw->capabilities & CAP_VER2_00) {
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	4233      	tst	r3, r6
 800272e:	d025      	beq.n	800277c <sd_init.isra.1+0x200>
		spi_cs_low();
 8002730:	20a0      	movs	r0, #160	; 0xa0
 8002732:	002a      	movs	r2, r5
 8002734:	2110      	movs	r1, #16
 8002736:	05c0      	lsls	r0, r0, #23
 8002738:	f7fe f8e4 	bl	8000904 <HAL_GPIO_WritePin>
		sd_cmd(58, 0);
 800273c:	0029      	movs	r1, r5
 800273e:	203a      	movs	r0, #58	; 0x3a
 8002740:	f7ff fe2a 	bl	8002398 <sd_cmd>
		r = sd_get_r3(&r3);
 8002744:	a803      	add	r0, sp, #12
 8002746:	f7ff fe76 	bl	8002436 <sd_get_r7>
 800274a:	0007      	movs	r7, r0
		sd_nec();
 800274c:	f7ff fe6a 	bl	8002424 <sd_nec>
		spi_cs_high();
 8002750:	20a0      	movs	r0, #160	; 0xa0
 8002752:	0032      	movs	r2, r6
 8002754:	2110      	movs	r1, #16
 8002756:	05c0      	lsls	r0, r0, #23
 8002758:	f7fe f8d4 	bl	8000904 <HAL_GPIO_WritePin>
		if (r == 0xff)
 800275c:	2fff      	cmp	r7, #255	; 0xff
 800275e:	d100      	bne.n	8002762 <sd_init.isra.1+0x1e6>
 8002760:	e73a      	b.n	80025d8 <sd_init.isra.1+0x5c>
		if (r & 0xfe) {
 8002762:	43b7      	bics	r7, r6
 8002764:	b2ff      	uxtb	r7, r7
 8002766:	2f00      	cmp	r7, #0
 8002768:	d000      	beq.n	800276c <sd_init.isra.1+0x1f0>
 800276a:	e73c      	b.n	80025e6 <sd_init.isra.1+0x6a>
			if (r3>>30 & 1) {
 800276c:	9b03      	ldr	r3, [sp, #12]
 800276e:	0f9b      	lsrs	r3, r3, #30
 8002770:	4233      	tst	r3, r6
 8002772:	d003      	beq.n	800277c <sd_init.isra.1+0x200>
				hw->capabilities |= CAP_SDHC;
 8002774:	2302      	movs	r3, #2
 8002776:	6822      	ldr	r2, [r4, #0]
 8002778:	4313      	orrs	r3, r2
 800277a:	6023      	str	r3, [r4, #0]
	if ((hw->capabilities & CAP_SDHC) == 0) {
 800277c:	2302      	movs	r3, #2
 800277e:	6822      	ldr	r2, [r4, #0]
 8002780:	401a      	ands	r2, r3
 8002782:	d0b6      	beq.n	80026f2 <sd_init.isra.1+0x176>
	spi_cs_low();
 8002784:	20a0      	movs	r0, #160	; 0xa0
 8002786:	2200      	movs	r2, #0
 8002788:	2110      	movs	r1, #16
 800278a:	05c0      	lsls	r0, r0, #23
 800278c:	f7fe f8ba 	bl	8000904 <HAL_GPIO_WritePin>
	sd_cmd(59, 0);
 8002790:	2100      	movs	r1, #0
 8002792:	203b      	movs	r0, #59	; 0x3b
 8002794:	f7ff fe00 	bl	8002398 <sd_cmd>
	r = sd_get_r1();
 8002798:	f7ff fe36 	bl	8002408 <sd_get_r1>
 800279c:	0004      	movs	r4, r0
	sd_nec();
 800279e:	f7ff fe41 	bl	8002424 <sd_nec>
	spi_cs_high();
 80027a2:	20a0      	movs	r0, #160	; 0xa0
 80027a4:	2201      	movs	r2, #1
 80027a6:	2110      	movs	r1, #16
 80027a8:	05c0      	lsls	r0, r0, #23
 80027aa:	f7fe f8ab 	bl	8000904 <HAL_GPIO_WritePin>
	if (r == 0xff)
 80027ae:	2cff      	cmp	r4, #255	; 0xff
 80027b0:	d100      	bne.n	80027b4 <sd_init.isra.1+0x238>
 80027b2:	e711      	b.n	80025d8 <sd_init.isra.1+0x5c>
	if (r & 0xfe) {
 80027b4:	23fe      	movs	r3, #254	; 0xfe
 80027b6:	421c      	tst	r4, r3
 80027b8:	d000      	beq.n	80027bc <sd_init.isra.1+0x240>
 80027ba:	e714      	b.n	80025e6 <sd_init.isra.1+0x6a>
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <sd_init.isra.1+0x24c>)
 80027be:	3bee      	subs	r3, #238	; 0xee
 80027c0:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 80027c2:	f7fe ff0d 	bl	80015e0 <HAL_SPI_Init>
 80027c6:	e709      	b.n	80025dc <sd_init.isra.1+0x60>
 80027c8:	20000b34 	.word	0x20000b34
 80027cc:	000003e9 	.word	0x000003e9

080027d0 <hwif_init>:


/*** public API - on top of sd/spi code ***/

int hwif_init(hwif* hw)
{
 80027d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int tries = 10;

	if (hw->initialized)
		return 0;
 80027d2:	2500      	movs	r5, #0
	if (hw->initialized)
 80027d4:	6803      	ldr	r3, [r0, #0]
{
 80027d6:	0004      	movs	r4, r0
	if (hw->initialized)
 80027d8:	42ab      	cmp	r3, r5
 80027da:	d10a      	bne.n	80027f2 <hwif_init+0x22>
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 80027dc:	2328      	movs	r3, #40	; 0x28
 80027de:	484e      	ldr	r0, [pc, #312]	; (8002918 <hwif_init+0x148>)
	HAL_SPI_Init(&FAT_SD_SPI);
 80027e0:	260b      	movs	r6, #11
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 80027e2:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 80027e4:	f7fe fefc 	bl	80015e0 <HAL_SPI_Init>
 80027e8:	3e01      	subs	r6, #1

	spi_init();

	while (tries--) {
 80027ea:	2e00      	cmp	r6, #0
 80027ec:	d104      	bne.n	80027f8 <hwif_init+0x28>
	/* read status register */
	sd_read_status(hw);

	sd_read_cid(hw);
	if (sd_read_csd(hw) != 0)
		return -1;
 80027ee:	2501      	movs	r5, #1
 80027f0:	426d      	negs	r5, r5

	hw->initialized = 1;
	return 0;
}
 80027f2:	0028      	movs	r0, r5
 80027f4:	b004      	add	sp, #16
 80027f6:	bd70      	pop	{r4, r5, r6, pc}
		if (sd_init(hw) == 0)
 80027f8:	0020      	movs	r0, r4
 80027fa:	300c      	adds	r0, #12
 80027fc:	f7ff febe 	bl	800257c <sd_init.isra.1>
 8002800:	1e05      	subs	r5, r0, #0
 8002802:	d1f1      	bne.n	80027e8 <hwif_init+0x18>
	sd_read_status(hw);
 8002804:	f7ff fe34 	bl	8002470 <sd_read_status.isra.2>
	spi_cs_low();
 8002808:	20a0      	movs	r0, #160	; 0xa0
 800280a:	002a      	movs	r2, r5
 800280c:	2110      	movs	r1, #16
 800280e:	05c0      	lsls	r0, r0, #23
 8002810:	f7fe f878 	bl	8000904 <HAL_GPIO_WritePin>
	sd_cmd(10, 0);
 8002814:	0029      	movs	r1, r5
 8002816:	200a      	movs	r0, #10
 8002818:	f7ff fdbe 	bl	8002398 <sd_cmd>
	r = sd_get_r1();
 800281c:	f7ff fdf4 	bl	8002408 <sd_get_r1>
	if (r == 0xff) {
 8002820:	28ff      	cmp	r0, #255	; 0xff
 8002822:	d11a      	bne.n	800285a <hwif_init+0x8a>
		spi_cs_high();
 8002824:	2201      	movs	r2, #1
	spi_cs_high();
 8002826:	20a0      	movs	r0, #160	; 0xa0
 8002828:	2110      	movs	r1, #16
 800282a:	05c0      	lsls	r0, r0, #23
 800282c:	f7fe f86a 	bl	8000904 <HAL_GPIO_WritePin>
	spi_cs_low();
 8002830:	20a0      	movs	r0, #160	; 0xa0
 8002832:	2200      	movs	r2, #0
 8002834:	2110      	movs	r1, #16
 8002836:	05c0      	lsls	r0, r0, #23
 8002838:	f7fe f864 	bl	8000904 <HAL_GPIO_WritePin>
	sd_cmd(9, 0);
 800283c:	2100      	movs	r1, #0
 800283e:	2009      	movs	r0, #9
 8002840:	f7ff fdaa 	bl	8002398 <sd_cmd>
	r = sd_get_r1();
 8002844:	f7ff fde0 	bl	8002408 <sd_get_r1>
	if (r == 0xff) {
 8002848:	28ff      	cmp	r0, #255	; 0xff
 800284a:	d113      	bne.n	8002874 <hwif_init+0xa4>
		spi_cs_high();
 800284c:	20a0      	movs	r0, #160	; 0xa0
 800284e:	2201      	movs	r2, #1
 8002850:	2110      	movs	r1, #16
 8002852:	05c0      	lsls	r0, r0, #23
 8002854:	f7fe f856 	bl	8000904 <HAL_GPIO_WritePin>
 8002858:	e7c9      	b.n	80027ee <hwif_init+0x1e>
	if (r & 0xfe) {
 800285a:	2501      	movs	r5, #1
 800285c:	43a8      	bics	r0, r5
 800285e:	b2c0      	uxtb	r0, r0
 8002860:	2800      	cmp	r0, #0
 8002862:	d1df      	bne.n	8002824 <hwif_init+0x54>
	r = sd_get_data(hw, buf, 16);
 8002864:	2110      	movs	r1, #16
 8002866:	4668      	mov	r0, sp
 8002868:	f7ff fe26 	bl	80024b8 <sd_get_data.isra.3>
	sd_nec();
 800286c:	f7ff fdda 	bl	8002424 <sd_nec>
	spi_cs_high();
 8002870:	002a      	movs	r2, r5
 8002872:	e7d8      	b.n	8002826 <hwif_init+0x56>
	if (r & 0xfe) {
 8002874:	2601      	movs	r6, #1
 8002876:	43b0      	bics	r0, r6
 8002878:	b2c0      	uxtb	r0, r0
 800287a:	2800      	cmp	r0, #0
 800287c:	d1e6      	bne.n	800284c <hwif_init+0x7c>
	r = sd_get_data(hw, buf, 16);
 800287e:	2110      	movs	r1, #16
 8002880:	4668      	mov	r0, sp
 8002882:	f7ff fe19 	bl	80024b8 <sd_get_data.isra.3>
 8002886:	0005      	movs	r5, r0
	sd_nec();
 8002888:	f7ff fdcc 	bl	8002424 <sd_nec>
	spi_cs_high();
 800288c:	20a0      	movs	r0, #160	; 0xa0
 800288e:	0032      	movs	r2, r6
 8002890:	2110      	movs	r1, #16
 8002892:	05c0      	lsls	r0, r0, #23
 8002894:	f7fe f836 	bl	8000904 <HAL_GPIO_WritePin>
	if (r == -1) {
 8002898:	1c6b      	adds	r3, r5, #1
 800289a:	d0aa      	beq.n	80027f2 <hwif_init+0x22>
 800289c:	466b      	mov	r3, sp
 800289e:	7a99      	ldrb	r1, [r3, #10]
 80028a0:	79da      	ldrb	r2, [r3, #7]
 80028a2:	7a1d      	ldrb	r5, [r3, #8]
 80028a4:	7a58      	ldrb	r0, [r3, #9]
	if ((buf[0] >> 6) + 1 == 1) {
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	099b      	lsrs	r3, r3, #6
 80028aa:	d12a      	bne.n	8002902 <hwif_init+0x132>
	capacity = (((buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6)+1) << (2+(((buf[9]&3) << 1) | buf[10]>>7)) << ((buf[5] & 0xf) - 9);
 80028ac:	466b      	mov	r3, sp
 80028ae:	26c0      	movs	r6, #192	; 0xc0
 80028b0:	799b      	ldrb	r3, [r3, #6]
 80028b2:	0136      	lsls	r6, r6, #4
 80028b4:	029b      	lsls	r3, r3, #10
 80028b6:	0092      	lsls	r2, r2, #2
 80028b8:	09ad      	lsrs	r5, r5, #6
 80028ba:	432a      	orrs	r2, r5
 80028bc:	4033      	ands	r3, r6
 80028be:	4313      	orrs	r3, r2
 80028c0:	2206      	movs	r2, #6
 80028c2:	0040      	lsls	r0, r0, #1
 80028c4:	4010      	ands	r0, r2
 80028c6:	09ca      	lsrs	r2, r1, #7
 80028c8:	4310      	orrs	r0, r2
 80028ca:	466a      	mov	r2, sp
 80028cc:	3002      	adds	r0, #2
 80028ce:	3301      	adds	r3, #1
 80028d0:	4083      	lsls	r3, r0
 80028d2:	200f      	movs	r0, #15
 80028d4:	7952      	ldrb	r2, [r2, #5]
 80028d6:	4002      	ands	r2, r0
 80028d8:	3a09      	subs	r2, #9
 80028da:	4093      	lsls	r3, r2
	hw->sectors = capacity;
 80028dc:	6063      	str	r3, [r4, #4]
	hw->erase_sectors = 1;
 80028de:	2301      	movs	r3, #1
	if (((buf[10]>>6)&1) == 0)
 80028e0:	098a      	lsrs	r2, r1, #6
	hw->erase_sectors = 1;
 80028e2:	60a3      	str	r3, [r4, #8]
	if (((buf[10]>>6)&1) == 0)
 80028e4:	421a      	tst	r2, r3
 80028e6:	d108      	bne.n	80028fa <hwif_init+0x12a>
		hw->erase_sectors = ((buf[10]&0x3f)<<1 | buf[11]>>7) + 1;
 80028e8:	4099      	lsls	r1, r3
 80028ea:	337d      	adds	r3, #125	; 0x7d
 80028ec:	4019      	ands	r1, r3
 80028ee:	466b      	mov	r3, sp
 80028f0:	7adb      	ldrb	r3, [r3, #11]
 80028f2:	09db      	lsrs	r3, r3, #7
 80028f4:	4319      	orrs	r1, r3
 80028f6:	3101      	adds	r1, #1
 80028f8:	60a1      	str	r1, [r4, #8]
	hw->initialized = 1;
 80028fa:	2301      	movs	r3, #1
	return 0;
 80028fc:	2500      	movs	r5, #0
	hw->initialized = 1;
 80028fe:	6023      	str	r3, [r4, #0]
	return 0;
 8002900:	e777      	b.n	80027f2 <hwif_init+0x22>
		hw->capabilities |= CAP_SDHC;
 8002902:	2302      	movs	r3, #2
 8002904:	68e6      	ldr	r6, [r4, #12]
	capacity = buf[7]<<16 | buf[8]<<8 | buf[9]; /* in 512 kB */
 8002906:	0412      	lsls	r2, r2, #16
		hw->capabilities |= CAP_SDHC;
 8002908:	4333      	orrs	r3, r6
 800290a:	60e3      	str	r3, [r4, #12]
	capacity = buf[7]<<16 | buf[8]<<8 | buf[9]; /* in 512 kB */
 800290c:	022b      	lsls	r3, r5, #8
 800290e:	4313      	orrs	r3, r2
 8002910:	4303      	orrs	r3, r0
	capacity *= 1024; /* in 512 B sectors */
 8002912:	029b      	lsls	r3, r3, #10
 8002914:	e7e2      	b.n	80028dc <hwif_init+0x10c>
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	20000b34 	.word	0x20000b34

0800291c <sd_read>:

int sd_read(hwif* hw, uint32_t address, uint8_t *buf)
{
 800291c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800291e:	300c      	adds	r0, #12
 8002920:	9101      	str	r1, [sp, #4]
 8002922:	0017      	movs	r7, r2
 8002924:	0004      	movs	r4, r0
	int r;
	int tries = 10;

	r = sd_readsector(hw, address, buf);
 8002926:	f7ff fde9 	bl	80024fc <sd_readsector.isra.6>

	while (r < 0 && tries--) {
 800292a:	260b      	movs	r6, #11
	r = sd_readsector(hw, address, buf);
 800292c:	0005      	movs	r5, r0
	while (r < 0 && tries--) {
 800292e:	2d00      	cmp	r5, #0
 8002930:	da02      	bge.n	8002938 <sd_read+0x1c>
 8002932:	3e01      	subs	r6, #1
 8002934:	2e00      	cmp	r6, #0
 8002936:	d101      	bne.n	800293c <sd_read+0x20>
		r = sd_readsector(hw, address, buf);
	}
	if (tries == -1)

	return r;
}
 8002938:	0028      	movs	r0, r5
 800293a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (sd_init(hw) != 0)
 800293c:	0020      	movs	r0, r4
 800293e:	f7ff fe1d 	bl	800257c <sd_init.isra.1>
 8002942:	2800      	cmp	r0, #0
 8002944:	d1f3      	bne.n	800292e <sd_read+0x12>
		sd_read_status(hw);
 8002946:	f7ff fd93 	bl	8002470 <sd_read_status.isra.2>
		r = sd_readsector(hw, address, buf);
 800294a:	003a      	movs	r2, r7
 800294c:	9901      	ldr	r1, [sp, #4]
 800294e:	0020      	movs	r0, r4
 8002950:	f7ff fdd4 	bl	80024fc <sd_readsector.isra.6>
 8002954:	0005      	movs	r5, r0
 8002956:	e7ea      	b.n	800292e <sd_read+0x12>

08002958 <HAL_SPI_RxCpltCallback>:

	return r;
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef* hspi) {
    dma_complete = 1;
 8002958:	2201      	movs	r2, #1
 800295a:	4b01      	ldr	r3, [pc, #4]	; (8002960 <HAL_SPI_RxCpltCallback+0x8>)
 800295c:	701a      	strb	r2, [r3, #0]
	return;
}
 800295e:	4770      	bx	lr
 8002960:	20000024 	.word	0x20000024

08002964 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002964:	6802      	ldr	r2, [r0, #0]
 8002966:	1e13      	subs	r3, r2, #0
 8002968:	d103      	bne.n	8002972 <get_ldnumber+0xe>
	int vol = -1;
 800296a:	2001      	movs	r0, #1
 800296c:	4240      	negs	r0, r0
 800296e:	e00e      	b.n	800298e <get_ldnumber+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002970:	3301      	adds	r3, #1
 8002972:	7819      	ldrb	r1, [r3, #0]
 8002974:	291f      	cmp	r1, #31
 8002976:	d909      	bls.n	800298c <get_ldnumber+0x28>
 8002978:	293a      	cmp	r1, #58	; 0x3a
 800297a:	d1f9      	bne.n	8002970 <get_ldnumber+0xc>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 800297c:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800297e:	428b      	cmp	r3, r1
 8002980:	d1f3      	bne.n	800296a <get_ldnumber+0x6>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002982:	7812      	ldrb	r2, [r2, #0]
 8002984:	2a30      	cmp	r2, #48	; 0x30
 8002986:	d1f0      	bne.n	800296a <get_ldnumber+0x6>
					vol = (int)i;
					*path = ++tt;
 8002988:	3301      	adds	r3, #1
 800298a:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800298c:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800298e:	4770      	bx	lr

08002990 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8002990:	b510      	push	{r4, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8002992:	2800      	cmp	r0, #0
 8002994:	d00f      	beq.n	80029b6 <validate+0x26>
 8002996:	6803      	ldr	r3, [r0, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00c      	beq.n	80029b6 <validate+0x26>
 800299c:	781a      	ldrb	r2, [r3, #0]
 800299e:	2a00      	cmp	r2, #0
 80029a0:	d009      	beq.n	80029b6 <validate+0x26>
 80029a2:	88d9      	ldrh	r1, [r3, #6]
 80029a4:	8882      	ldrh	r2, [r0, #4]
 80029a6:	4291      	cmp	r1, r2
 80029a8:	d105      	bne.n	80029b6 <validate+0x26>
 80029aa:	7858      	ldrb	r0, [r3, #1]
 80029ac:	f7ff fca4 	bl	80022f8 <disk_status>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80029b0:	2300      	movs	r3, #0
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80029b2:	07c2      	lsls	r2, r0, #31
 80029b4:	d500      	bpl.n	80029b8 <validate+0x28>
		return FR_INVALID_OBJECT;
 80029b6:	2309      	movs	r3, #9
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	bd10      	pop	{r4, pc}

080029bc <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 80029bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80029be:	b570      	push	{r4, r5, r6, lr}
 80029c0:	0004      	movs	r4, r0
 80029c2:	000d      	movs	r5, r1
	FRESULT res = FR_OK;
 80029c4:	2600      	movs	r6, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80029c6:	428b      	cmp	r3, r1
 80029c8:	d00c      	beq.n	80029e4 <move_window+0x28>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80029ca:	000a      	movs	r2, r1
 80029cc:	0021      	movs	r1, r4
 80029ce:	7840      	ldrb	r0, [r0, #1]
 80029d0:	2301      	movs	r3, #1
 80029d2:	3128      	adds	r1, #40	; 0x28
 80029d4:	f7ff fca2 	bl	800231c <disk_read>
 80029d8:	42b0      	cmp	r0, r6
 80029da:	d002      	beq.n	80029e2 <move_window+0x26>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80029dc:	2501      	movs	r5, #1
				res = FR_DISK_ERR;
 80029de:	3601      	adds	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80029e0:	426d      	negs	r5, r5
			fs->winsect = sector;
 80029e2:	6265      	str	r5, [r4, #36]	; 0x24
}
 80029e4:	0030      	movs	r0, r6
 80029e6:	bd70      	pop	{r4, r5, r6, pc}

080029e8 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80029e8:	2300      	movs	r3, #0
{
 80029ea:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80029ec:	7103      	strb	r3, [r0, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	6243      	str	r3, [r0, #36]	; 0x24
{
 80029f2:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80029f4:	f7ff ffe2 	bl	80029bc <move_window>
		return 3;
 80029f8:	2303      	movs	r3, #3
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80029fa:	2800      	cmp	r0, #0
 80029fc:	d122      	bne.n	8002a44 <check_fs+0x5c>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <check_fs+0x60>)
 8002a00:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <check_fs+0x64>)
 8002a02:	5ce3      	ldrb	r3, [r4, r3]
 8002a04:	5ca2      	ldrb	r2, [r4, r2]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	4911      	ldr	r1, [pc, #68]	; (8002a50 <check_fs+0x68>)
 8002a0c:	b212      	sxth	r2, r2
		return 2;
 8002a0e:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8002a10:	428a      	cmp	r2, r1
 8002a12:	d117      	bne.n	8002a44 <check_fs+0x5c>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8002a14:	0023      	movs	r3, r4
 8002a16:	335e      	adds	r3, #94	; 0x5e
 8002a18:	885a      	ldrh	r2, [r3, #2]
 8002a1a:	8819      	ldrh	r1, [r3, #0]
 8002a1c:	0412      	lsls	r2, r2, #16
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	490c      	ldr	r1, [pc, #48]	; (8002a54 <check_fs+0x6c>)
 8002a22:	0212      	lsls	r2, r2, #8
 8002a24:	0a12      	lsrs	r2, r2, #8
		return 0;
 8002a26:	0003      	movs	r3, r0
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8002a28:	428a      	cmp	r2, r1
 8002a2a:	d00b      	beq.n	8002a44 <check_fs+0x5c>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8002a2c:	347a      	adds	r4, #122	; 0x7a
 8002a2e:	8863      	ldrh	r3, [r4, #2]
 8002a30:	8820      	ldrh	r0, [r4, #0]
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	4303      	orrs	r3, r0
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <check_fs+0x70>)
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	189b      	adds	r3, r3, r2
 8002a3e:	1e58      	subs	r0, r3, #1
 8002a40:	4183      	sbcs	r3, r0
		return 3;
 8002a42:	b2db      	uxtb	r3, r3
}
 8002a44:	0018      	movs	r0, r3
 8002a46:	bd10      	pop	{r4, pc}
 8002a48:	00000227 	.word	0x00000227
 8002a4c:	00000226 	.word	0x00000226
 8002a50:	ffffaa55 	.word	0xffffaa55
 8002a54:	00544146 	.word	0x00544146
 8002a58:	ffabbeba 	.word	0xffabbeba

08002a5c <find_volume.isra.3>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 8002a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8002a5e:	2600      	movs	r6, #0
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 8002a60:	b089      	sub	sp, #36	; 0x24
	*rfs = 0;
 8002a62:	6006      	str	r6, [r0, #0]
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 8002a64:	0007      	movs	r7, r0
	vol = get_ldnumber(path);
 8002a66:	0008      	movs	r0, r1
 8002a68:	f7ff ff7c 	bl	8002964 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002a6c:	230b      	movs	r3, #11
	vol = get_ldnumber(path);
 8002a6e:	0005      	movs	r5, r0
	if (vol < 0) return FR_INVALID_DRIVE;
 8002a70:	42b0      	cmp	r0, r6
 8002a72:	db15      	blt.n	8002aa0 <find_volume.isra.3+0x44>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002a74:	4b74      	ldr	r3, [pc, #464]	; (8002c48 <find_volume.isra.3+0x1ec>)
 8002a76:	0082      	lsls	r2, r0, #2
 8002a78:	58d4      	ldr	r4, [r2, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	42b4      	cmp	r4, r6
 8002a7e:	d00f      	beq.n	8002aa0 <find_volume.isra.3+0x44>
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002a80:	7823      	ldrb	r3, [r4, #0]
	*rfs = fs;							/* Return pointer to the file system object */
 8002a82:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002a84:	42b3      	cmp	r3, r6
 8002a86:	d10e      	bne.n	8002aa6 <find_volume.isra.3+0x4a>
	fs->fs_type = 0;					/* Clear the file system object */
 8002a88:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002a8a:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 8002a8c:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002a8e:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002a90:	f7ff fc3a 	bl	8002308 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8002a94:	2601      	movs	r6, #1
 8002a96:	4030      	ands	r0, r6
 8002a98:	0005      	movs	r5, r0
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002a9a:	2303      	movs	r3, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8002a9c:	2800      	cmp	r0, #0
 8002a9e:	d009      	beq.n	8002ab4 <find_volume.isra.3+0x58>
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	b009      	add	sp, #36	; 0x24
 8002aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stat = disk_status(fs->drv);
 8002aa6:	7860      	ldrb	r0, [r4, #1]
 8002aa8:	f7ff fc26 	bl	80022f8 <disk_status>
			return FR_OK;				/* The file system object is valid */
 8002aac:	0033      	movs	r3, r6
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002aae:	07c2      	lsls	r2, r0, #31
 8002ab0:	d4ea      	bmi.n	8002a88 <find_volume.isra.3+0x2c>
 8002ab2:	e7f5      	b.n	8002aa0 <find_volume.isra.3+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8002ab4:	0001      	movs	r1, r0
 8002ab6:	0020      	movs	r0, r4
 8002ab8:	f7ff ff96 	bl	80029e8 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8002abc:	2801      	cmp	r0, #1
 8002abe:	d12c      	bne.n	8002b1a <find_volume.isra.3+0xbe>
 8002ac0:	0022      	movs	r2, r4
 8002ac2:	32eb      	adds	r2, #235	; 0xeb
 8002ac4:	32ff      	adds	r2, #255	; 0xff
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	7811      	ldrb	r1, [r2, #0]
 8002aca:	4299      	cmp	r1, r3
 8002acc:	d009      	beq.n	8002ae2 <find_volume.isra.3+0x86>
 8002ace:	7951      	ldrb	r1, [r2, #5]
 8002ad0:	7913      	ldrb	r3, [r2, #4]
 8002ad2:	0209      	lsls	r1, r1, #8
 8002ad4:	4319      	orrs	r1, r3
 8002ad6:	7993      	ldrb	r3, [r2, #6]
 8002ad8:	041b      	lsls	r3, r3, #16
 8002ada:	4319      	orrs	r1, r3
 8002adc:	79d3      	ldrb	r3, [r2, #7]
 8002ade:	061b      	lsls	r3, r3, #24
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	00a9      	lsls	r1, r5, #2
 8002ae4:	a804      	add	r0, sp, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8002ae6:	3501      	adds	r5, #1
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8002ae8:	500b      	str	r3, [r1, r0]
 8002aea:	3210      	adds	r2, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8002aec:	2d04      	cmp	r5, #4
 8002aee:	d1ea      	bne.n	8002ac6 <find_volume.isra.3+0x6a>
 8002af0:	2600      	movs	r6, #0
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002af2:	2702      	movs	r7, #2
			bsect = br[i];
 8002af4:	00b3      	lsls	r3, r6, #2
 8002af6:	aa04      	add	r2, sp, #16
 8002af8:	58d5      	ldr	r5, [r2, r3]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002afa:	0038      	movs	r0, r7
 8002afc:	2d00      	cmp	r5, #0
 8002afe:	d005      	beq.n	8002b0c <find_volume.isra.3+0xb0>
 8002b00:	0029      	movs	r1, r5
 8002b02:	0020      	movs	r0, r4
 8002b04:	f7ff ff70 	bl	80029e8 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	d00d      	beq.n	8002b28 <find_volume.isra.3+0xcc>
 8002b0c:	3601      	adds	r6, #1
 8002b0e:	2e04      	cmp	r6, #4
 8002b10:	d1f0      	bne.n	8002af4 <find_volume.isra.3+0x98>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002b12:	2301      	movs	r3, #1
 8002b14:	2803      	cmp	r0, #3
 8002b16:	d105      	bne.n	8002b24 <find_volume.isra.3+0xc8>
 8002b18:	e7c2      	b.n	8002aa0 <find_volume.isra.3+0x44>
 8002b1a:	0033      	movs	r3, r6
 8002b1c:	2803      	cmp	r0, #3
 8002b1e:	d0bf      	beq.n	8002aa0 <find_volume.isra.3+0x44>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8002b20:	2800      	cmp	r0, #0
 8002b22:	d001      	beq.n	8002b28 <find_volume.isra.3+0xcc>
 8002b24:	230d      	movs	r3, #13
 8002b26:	e7bb      	b.n	8002aa0 <find_volume.isra.3+0x44>
	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3334      	adds	r3, #52	; 0x34
 8002b2c:	781a      	ldrb	r2, [r3, #0]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	0212      	lsls	r2, r2, #8
 8002b34:	4313      	orrs	r3, r2
 8002b36:	2280      	movs	r2, #128	; 0x80
 8002b38:	b21b      	sxth	r3, r3
 8002b3a:	0092      	lsls	r2, r2, #2
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d1f1      	bne.n	8002b24 <find_volume.isra.3+0xc8>
	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 8002b40:	0023      	movs	r3, r4
 8002b42:	0022      	movs	r2, r4
 8002b44:	333f      	adds	r3, #63	; 0x3f
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	323e      	adds	r2, #62	; 0x3e
 8002b4a:	7816      	ldrb	r6, [r2, #0]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	431e      	orrs	r6, r3
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 8002b50:	d100      	bne.n	8002b54 <find_volume.isra.3+0xf8>
 8002b52:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8002b54:	0023      	movs	r3, r4
	fs->fsize = fasize;
 8002b56:	6126      	str	r6, [r4, #16]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8002b58:	3338      	adds	r3, #56	; 0x38
 8002b5a:	781b      	ldrb	r3, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8002b5c:	1e5a      	subs	r2, r3, #1
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	70e3      	strb	r3, [r4, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8002b62:	2a01      	cmp	r2, #1
 8002b64:	d8de      	bhi.n	8002b24 <find_volume.isra.3+0xc8>
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 8002b66:	0022      	movs	r2, r4
 8002b68:	3235      	adds	r2, #53	; 0x35
 8002b6a:	7811      	ldrb	r1, [r2, #0]
 8002b6c:	70a1      	strb	r1, [r4, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8002b6e:	2900      	cmp	r1, #0
 8002b70:	d0d8      	beq.n	8002b24 <find_volume.isra.3+0xc8>
 8002b72:	1e4a      	subs	r2, r1, #1
 8002b74:	4211      	tst	r1, r2
 8002b76:	d1d5      	bne.n	8002b24 <find_volume.isra.3+0xc8>
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002b78:	0022      	movs	r2, r4
 8002b7a:	323a      	adds	r2, #58	; 0x3a
 8002b7c:	7817      	ldrb	r7, [r2, #0]
 8002b7e:	3a01      	subs	r2, #1
 8002b80:	7812      	ldrb	r2, [r2, #0]
 8002b82:	023f      	lsls	r7, r7, #8
 8002b84:	4317      	orrs	r7, r2
 8002b86:	8127      	strh	r7, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8002b88:	073b      	lsls	r3, r7, #28
 8002b8a:	d1cb      	bne.n	8002b24 <find_volume.isra.3+0xc8>
	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 8002b8c:	0022      	movs	r2, r4
 8002b8e:	0020      	movs	r0, r4
 8002b90:	323c      	adds	r2, #60	; 0x3c
 8002b92:	7812      	ldrb	r2, [r2, #0]
 8002b94:	303b      	adds	r0, #59	; 0x3b
 8002b96:	7800      	ldrb	r0, [r0, #0]
 8002b98:	0212      	lsls	r2, r2, #8
 8002b9a:	4310      	orrs	r0, r2
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
 8002b9c:	d100      	bne.n	8002ba0 <find_volume.isra.3+0x144>
 8002b9e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8002ba0:	2336      	movs	r3, #54	; 0x36
 8002ba2:	469c      	mov	ip, r3
 8002ba4:	0022      	movs	r2, r4
 8002ba6:	44a4      	add	ip, r4
 8002ba8:	4663      	mov	r3, ip
 8002baa:	3237      	adds	r2, #55	; 0x37
 8002bac:	7812      	ldrb	r2, [r2, #0]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	0212      	lsls	r2, r2, #8
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	9302      	str	r3, [sp, #8]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8002bb6:	d0b5      	beq.n	8002b24 <find_volume.isra.3+0xc8>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8002bb8:	9b01      	ldr	r3, [sp, #4]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8002bba:	9a02      	ldr	r2, [sp, #8]
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8002bbc:	4373      	muls	r3, r6
 8002bbe:	9303      	str	r3, [sp, #12]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8002bc0:	093b      	lsrs	r3, r7, #4
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	9a03      	ldr	r2, [sp, #12]
 8002bc6:	189b      	adds	r3, r3, r2
 8002bc8:	9301      	str	r3, [sp, #4]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002bca:	4283      	cmp	r3, r0
 8002bcc:	d8aa      	bhi.n	8002b24 <find_volume.isra.3+0xc8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8002bce:	1ac0      	subs	r0, r0, r3
 8002bd0:	f7fd faa4 	bl	800011c <__udivsi3>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	d0a5      	beq.n	8002b24 <find_volume.isra.3+0xc8>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002bd8:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <find_volume.isra.3+0x1f0>)
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8002bda:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <find_volume.isra.3+0x1f4>)
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002bdc:	4283      	cmp	r3, r0
 8002bde:	419b      	sbcs	r3, r3
 8002be0:	425b      	negs	r3, r3
 8002be2:	3301      	adds	r3, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8002be4:	4290      	cmp	r0, r2
 8002be6:	d900      	bls.n	8002bea <find_volume.isra.3+0x18e>
 8002be8:	2303      	movs	r3, #3
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002bea:	9a02      	ldr	r2, [sp, #8]
	fs->database = bsect + sysect;						/* Data start sector */
 8002bec:	9901      	ldr	r1, [sp, #4]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002bee:	18aa      	adds	r2, r5, r2
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002bf0:	3002      	adds	r0, #2
	fs->volbase = bsect;								/* Volume start sector */
 8002bf2:	6165      	str	r5, [r4, #20]
	fs->database = bsect + sysect;						/* Data start sector */
 8002bf4:	186d      	adds	r5, r5, r1
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002bf6:	60e0      	str	r0, [r4, #12]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002bf8:	61a2      	str	r2, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
 8002bfa:	6225      	str	r5, [r4, #32]
	if (fmt == FS_FAT32) {
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d112      	bne.n	8002c26 <find_volume.isra.3+0x1ca>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8002c00:	2f00      	cmp	r7, #0
 8002c02:	d18f      	bne.n	8002b24 <find_volume.isra.3+0xc8>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8002c04:	6d62      	ldr	r2, [r4, #84]	; 0x54
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8002c06:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8002c08:	61e2      	str	r2, [r4, #28]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <find_volume.isra.3+0x1f8>)
 8002c0c:	1880      	adds	r0, r0, r2
 8002c0e:	0a40      	lsrs	r0, r0, #9
 8002c10:	4286      	cmp	r6, r0
 8002c12:	d387      	bcc.n	8002b24 <find_volume.isra.3+0xc8>
	fs->id = ++Fsid;	/* File system mount ID */
 8002c14:	4a10      	ldr	r2, [pc, #64]	; (8002c58 <find_volume.isra.3+0x1fc>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8002c16:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8002c18:	8813      	ldrh	r3, [r2, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	8013      	strh	r3, [r2, #0]
 8002c20:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e73c      	b.n	8002aa0 <find_volume.isra.3+0x44>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002c26:	2f00      	cmp	r7, #0
 8002c28:	d100      	bne.n	8002c2c <find_volume.isra.3+0x1d0>
 8002c2a:	e77b      	b.n	8002b24 <find_volume.isra.3+0xc8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002c2c:	9903      	ldr	r1, [sp, #12]
 8002c2e:	188a      	adds	r2, r1, r2
 8002c30:	61e2      	str	r2, [r4, #28]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d101      	bne.n	8002c3a <find_volume.isra.3+0x1de>
 8002c36:	0040      	lsls	r0, r0, #1
 8002c38:	e7e7      	b.n	8002c0a <find_volume.isra.3+0x1ae>
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	4342      	muls	r2, r0
 8002c40:	4008      	ands	r0, r1
 8002c42:	0852      	lsrs	r2, r2, #1
 8002c44:	1810      	adds	r0, r2, r0
 8002c46:	e7e0      	b.n	8002c0a <find_volume.isra.3+0x1ae>
 8002c48:	20000028 	.word	0x20000028
 8002c4c:	00000ff5 	.word	0x00000ff5
 8002c50:	0000fff5 	.word	0x0000fff5
 8002c54:	000001ff 	.word	0x000001ff
 8002c58:	2000002c 	.word	0x2000002c

08002c5c <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002c5c:	68c2      	ldr	r2, [r0, #12]
	clst -= 2;
 8002c5e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002c60:	3a02      	subs	r2, #2
{
 8002c62:	0003      	movs	r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002c64:	2000      	movs	r0, #0
 8002c66:	428a      	cmp	r2, r1
 8002c68:	d903      	bls.n	8002c72 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
 8002c6a:	7898      	ldrb	r0, [r3, #2]
 8002c6c:	4341      	muls	r1, r0
 8002c6e:	6a18      	ldr	r0, [r3, #32]
 8002c70:	1808      	adds	r0, r1, r0
}
 8002c72:	4770      	bx	lr

08002c74 <get_fat>:
{
 8002c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		val = 1;	/* Internal error */
 8002c76:	2501      	movs	r5, #1
{
 8002c78:	0006      	movs	r6, r0
 8002c7a:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002c7c:	42a9      	cmp	r1, r5
 8002c7e:	d914      	bls.n	8002caa <get_fat+0x36>
 8002c80:	68c3      	ldr	r3, [r0, #12]
 8002c82:	428b      	cmp	r3, r1
 8002c84:	d911      	bls.n	8002caa <get_fat+0x36>
		switch (fs->fs_type) {
 8002c86:	7803      	ldrb	r3, [r0, #0]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d02e      	beq.n	8002cea <get_fat+0x76>
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d03e      	beq.n	8002d0e <get_fat+0x9a>
 8002c90:	42ab      	cmp	r3, r5
 8002c92:	d10a      	bne.n	8002caa <get_fat+0x36>
			bc = (UINT)clst; bc += bc / 2;
 8002c94:	084f      	lsrs	r7, r1, #1
 8002c96:	187f      	adds	r7, r7, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002c98:	6983      	ldr	r3, [r0, #24]
 8002c9a:	0a79      	lsrs	r1, r7, #9
 8002c9c:	18c9      	adds	r1, r1, r3
 8002c9e:	f7ff fe8d 	bl	80029bc <move_window>
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	d003      	beq.n	8002cae <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002ca6:	2501      	movs	r5, #1
 8002ca8:	426d      	negs	r5, r5
}
 8002caa:	0028      	movs	r0, r5
 8002cac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8002cae:	1c7b      	adds	r3, r7, #1
 8002cb0:	05ff      	lsls	r7, r7, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002cb2:	0a59      	lsrs	r1, r3, #9
			wc = fs->win[bc++ % SS(fs)];
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	0dff      	lsrs	r7, r7, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002cb8:	69b3      	ldr	r3, [r6, #24]
			wc = fs->win[bc++ % SS(fs)];
 8002cba:	19f7      	adds	r7, r6, r7
 8002cbc:	3728      	adds	r7, #40	; 0x28
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002cbe:	18c9      	adds	r1, r1, r3
 8002cc0:	0030      	movs	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 8002cc2:	783f      	ldrb	r7, [r7, #0]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002cc4:	f7ff fe7a 	bl	80029bc <move_window>
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	d1ec      	bne.n	8002ca6 <get_fat+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 8002ccc:	9b01      	ldr	r3, [sp, #4]
 8002cce:	05db      	lsls	r3, r3, #23
 8002cd0:	0ddb      	lsrs	r3, r3, #23
 8002cd2:	18f6      	adds	r6, r6, r3
 8002cd4:	3628      	adds	r6, #40	; 0x28
 8002cd6:	7833      	ldrb	r3, [r6, #0]
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	431f      	orrs	r7, r3
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8002cdc:	422c      	tst	r4, r5
 8002cde:	d001      	beq.n	8002ce4 <get_fat+0x70>
 8002ce0:	093d      	lsrs	r5, r7, #4
 8002ce2:	e7e2      	b.n	8002caa <get_fat+0x36>
 8002ce4:	053f      	lsls	r7, r7, #20
 8002ce6:	0d3d      	lsrs	r5, r7, #20
 8002ce8:	e7df      	b.n	8002caa <get_fat+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002cea:	6983      	ldr	r3, [r0, #24]
 8002cec:	0a09      	lsrs	r1, r1, #8
 8002cee:	18c9      	adds	r1, r1, r3
 8002cf0:	f7ff fe64 	bl	80029bc <move_window>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	d1d6      	bne.n	8002ca6 <get_fat+0x32>
			p = &fs->win[clst * 2 % SS(fs)];
 8002cf8:	23ff      	movs	r3, #255	; 0xff
 8002cfa:	0064      	lsls	r4, r4, #1
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	401c      	ands	r4, r3
			val = LD_WORD(p);
 8002d00:	1936      	adds	r6, r6, r4
 8002d02:	3628      	adds	r6, #40	; 0x28
 8002d04:	7875      	ldrb	r5, [r6, #1]
 8002d06:	7833      	ldrb	r3, [r6, #0]
 8002d08:	022d      	lsls	r5, r5, #8
 8002d0a:	431d      	orrs	r5, r3
 8002d0c:	e7cd      	b.n	8002caa <get_fat+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002d0e:	6983      	ldr	r3, [r0, #24]
 8002d10:	09c9      	lsrs	r1, r1, #7
 8002d12:	18c9      	adds	r1, r1, r3
 8002d14:	f7ff fe52 	bl	80029bc <move_window>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	d1c4      	bne.n	8002ca6 <get_fat+0x32>
			p = &fs->win[clst * 4 % SS(fs)];
 8002d1c:	23fe      	movs	r3, #254	; 0xfe
 8002d1e:	00a4      	lsls	r4, r4, #2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	401c      	ands	r4, r3
 8002d24:	0023      	movs	r3, r4
 8002d26:	3328      	adds	r3, #40	; 0x28
 8002d28:	18f3      	adds	r3, r6, r3
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8002d2a:	78dd      	ldrb	r5, [r3, #3]
 8002d2c:	789a      	ldrb	r2, [r3, #2]
 8002d2e:	1936      	adds	r6, r6, r4
 8002d30:	0412      	lsls	r2, r2, #16
 8002d32:	062d      	lsls	r5, r5, #24
 8002d34:	3628      	adds	r6, #40	; 0x28
 8002d36:	4315      	orrs	r5, r2
 8002d38:	785b      	ldrb	r3, [r3, #1]
 8002d3a:	7832      	ldrb	r2, [r6, #0]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	4315      	orrs	r5, r2
 8002d40:	431d      	orrs	r5, r3
 8002d42:	012d      	lsls	r5, r5, #4
 8002d44:	092d      	lsrs	r5, r5, #4
 8002d46:	e7b0      	b.n	8002caa <get_fat+0x36>

08002d48 <dir_sdi.constprop.7>:
	dp->index = (WORD)idx;	/* Current index */
 8002d48:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002d4a:	b570      	push	{r4, r5, r6, lr}
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8002d4c:	6884      	ldr	r4, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002d4e:	0005      	movs	r5, r0
	dp->index = (WORD)idx;	/* Current index */
 8002d50:	80c3      	strh	r3, [r0, #6]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8002d52:	2c01      	cmp	r4, #1
 8002d54:	d101      	bne.n	8002d5a <dir_sdi.constprop.7+0x12>
		return FR_INT_ERR;
 8002d56:	2002      	movs	r0, #2
}
 8002d58:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8002d5a:	6803      	ldr	r3, [r0, #0]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	4294      	cmp	r4, r2
 8002d60:	d2f9      	bcs.n	8002d56 <dir_sdi.constprop.7+0xe>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8002d62:	2c00      	cmp	r4, #0
 8002d64:	d112      	bne.n	8002d8c <dir_sdi.constprop.7+0x44>
 8002d66:	781a      	ldrb	r2, [r3, #0]
 8002d68:	2a03      	cmp	r2, #3
 8002d6a:	d102      	bne.n	8002d72 <dir_sdi.constprop.7+0x2a>
		clst = dp->fs->dirbase;
 8002d6c:	69da      	ldr	r2, [r3, #28]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002d6e:	2a00      	cmp	r2, #0
 8002d70:	d10d      	bne.n	8002d8e <dir_sdi.constprop.7+0x46>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8002d72:	891a      	ldrh	r2, [r3, #8]
 8002d74:	2a00      	cmp	r2, #0
 8002d76:	d0ee      	beq.n	8002d56 <dir_sdi.constprop.7+0xe>
		sect = dp->fs->dirbase;
 8002d78:	69d8      	ldr	r0, [r3, #28]
	dp->clust = clst;	/* Current cluster# */
 8002d7a:	60ec      	str	r4, [r5, #12]
	if (!sect) return FR_INT_ERR;
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	d0ea      	beq.n	8002d56 <dir_sdi.constprop.7+0xe>
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8002d80:	682b      	ldr	r3, [r5, #0]
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8002d82:	6128      	str	r0, [r5, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8002d84:	3328      	adds	r3, #40	; 0x28
 8002d86:	616b      	str	r3, [r5, #20]
	return FR_OK;
 8002d88:	2000      	movs	r0, #0
 8002d8a:	e7e5      	b.n	8002d58 <dir_sdi.constprop.7+0x10>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8002d8c:	0022      	movs	r2, r4
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8002d8e:	0014      	movs	r4, r2
 8002d90:	789e      	ldrb	r6, [r3, #2]
 8002d92:	0136      	lsls	r6, r6, #4
 8002d94:	6828      	ldr	r0, [r5, #0]
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002d96:	0021      	movs	r1, r4
		while (idx >= ic) {	/* Follow cluster chain */
 8002d98:	2e00      	cmp	r6, #0
 8002d9a:	d002      	beq.n	8002da2 <dir_sdi.constprop.7+0x5a>
		sect = clust2sect(dp->fs, clst);
 8002d9c:	f7ff ff5e 	bl	8002c5c <clust2sect>
 8002da0:	e7eb      	b.n	8002d7a <dir_sdi.constprop.7+0x32>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002da2:	f7ff ff67 	bl	8002c74 <get_fat>
 8002da6:	0004      	movs	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002da8:	1c43      	adds	r3, r0, #1
 8002daa:	d006      	beq.n	8002dba <dir_sdi.constprop.7+0x72>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8002dac:	2801      	cmp	r0, #1
 8002dae:	d9d2      	bls.n	8002d56 <dir_sdi.constprop.7+0xe>
 8002db0:	682b      	ldr	r3, [r5, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4298      	cmp	r0, r3
 8002db6:	d3ed      	bcc.n	8002d94 <dir_sdi.constprop.7+0x4c>
 8002db8:	e7cd      	b.n	8002d56 <dir_sdi.constprop.7+0xe>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002dba:	2001      	movs	r0, #1
 8002dbc:	e7cc      	b.n	8002d58 <dir_sdi.constprop.7+0x10>
	...

08002dc0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002dc2:	9001      	str	r0, [sp, #4]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 8002dc4:	a803      	add	r0, sp, #12
{
 8002dc6:	9100      	str	r1, [sp, #0]
 8002dc8:	0014      	movs	r4, r2
	const TCHAR *rp = path;
 8002dca:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8002dcc:	f7ff fdca 	bl	8002964 <get_ldnumber>
 8002dd0:	0003      	movs	r3, r0
	if (vol < 0) return FR_INVALID_DRIVE;
 8002dd2:	200b      	movs	r0, #11
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	db15      	blt.n	8002e04 <f_mount+0x44>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002dd8:	4a0b      	ldr	r2, [pc, #44]	; (8002e08 <f_mount+0x48>)
 8002dda:	0098      	lsls	r0, r3, #2
 8002ddc:	5883      	ldr	r3, [r0, r2]

	if (cfs) {
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <f_mount+0x26>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002de2:	2100      	movs	r1, #0
 8002de4:	7019      	strb	r1, [r3, #0]
	}

	if (fs) {
 8002de6:	9b01      	ldr	r3, [sp, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 8002dec:	2100      	movs	r1, #0
 8002dee:	7019      	strb	r1, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002df0:	5013      	str	r3, [r2, r0]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8002df2:	1e18      	subs	r0, r3, #0
 8002df4:	d006      	beq.n	8002e04 <f_mount+0x44>
 8002df6:	2000      	movs	r0, #0
 8002df8:	2c01      	cmp	r4, #1
 8002dfa:	d103      	bne.n	8002e04 <f_mount+0x44>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8002dfc:	4669      	mov	r1, sp
 8002dfe:	a801      	add	r0, sp, #4
 8002e00:	f7ff fe2c 	bl	8002a5c <find_volume.isra.3>
	LEAVE_FF(fs, res);
}
 8002e04:	b004      	add	sp, #16
 8002e06:	bd10      	pop	{r4, pc}
 8002e08:	20000028 	.word	0x20000028

08002e0c <f_open>:
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8002e0c:	2309      	movs	r3, #9
{
 8002e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e10:	b099      	sub	sp, #100	; 0x64
 8002e12:	1e07      	subs	r7, r0, #0
 8002e14:	910b      	str	r1, [sp, #44]	; 0x2c
 8002e16:	9209      	str	r2, [sp, #36]	; 0x24
	if (!fp) return FR_INVALID_OBJECT;
 8002e18:	9302      	str	r3, [sp, #8]
 8002e1a:	d100      	bne.n	8002e1e <f_open+0x12>
 8002e1c:	e243      	b.n	80032a6 <f_open+0x49a>
	fp->fs = 0;			/* Clear file object */
 8002e1e:	2300      	movs	r3, #0
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
 8002e20:	a90b      	add	r1, sp, #44	; 0x2c
	fp->fs = 0;			/* Clear file object */
 8002e22:	6003      	str	r3, [r0, #0]
	res = find_volume(&dj.fs, &path, 0);
 8002e24:	a80f      	add	r0, sp, #60	; 0x3c
 8002e26:	f7ff fe19 	bl	8002a5c <find_volume.isra.3>
 8002e2a:	9002      	str	r0, [sp, #8]
#endif
	if (res == FR_OK) {
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	d000      	beq.n	8002e32 <f_open+0x26>
 8002e30:	e239      	b.n	80032a6 <f_open+0x49a>
		INIT_BUF(dj);
 8002e32:	ab0c      	add	r3, sp, #48	; 0x30
 8002e34:	9315      	str	r3, [sp, #84]	; 0x54
 8002e36:	4b97      	ldr	r3, [pc, #604]	; (8003094 <f_open+0x288>)
 8002e38:	9316      	str	r3, [sp, #88]	; 0x58
		res = follow_path(&dj, path);	/* Follow the file path */
 8002e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e3c:	9301      	str	r3, [sp, #4]
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b2f      	cmp	r3, #47	; 0x2f
 8002e42:	d001      	beq.n	8002e48 <f_open+0x3c>
 8002e44:	2b5c      	cmp	r3, #92	; 0x5c
 8002e46:	d102      	bne.n	8002e4e <f_open+0x42>
		path++;
 8002e48:	9b01      	ldr	r3, [sp, #4]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	9301      	str	r3, [sp, #4]
	dp->sclust = 0;							/* Always start from the root directory */
 8002e4e:	2400      	movs	r4, #0
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002e50:	9b01      	ldr	r3, [sp, #4]
	dp->sclust = 0;							/* Always start from the root directory */
 8002e52:	9411      	str	r4, [sp, #68]	; 0x44
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b1f      	cmp	r3, #31
 8002e58:	d80b      	bhi.n	8002e72 <f_open+0x66>
		res = dir_sdi(dp, 0);
 8002e5a:	a80f      	add	r0, sp, #60	; 0x3c
 8002e5c:	f7ff ff74 	bl	8002d48 <dir_sdi.constprop.7>
		dp->dir = 0;
 8002e60:	9414      	str	r4, [sp, #80]	; 0x50
			if (!fp->lockid) res = FR_INT_ERR;
#endif
		}

#else				/* R/O configuration */
		if (res == FR_OK) {					/* Follow succeeded */
 8002e62:	42a0      	cmp	r0, r4
 8002e64:	d100      	bne.n	8002e68 <f_open+0x5c>
 8002e66:	e1f0      	b.n	800324a <f_open+0x43e>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8002e68:	9002      	str	r0, [sp, #8]
 8002e6a:	e21c      	b.n	80032a6 <f_open+0x49a>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8002e6c:	9b01      	ldr	r3, [sp, #4]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	9b01      	ldr	r3, [sp, #4]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b2f      	cmp	r3, #47	; 0x2f
 8002e78:	d0f8      	beq.n	8002e6c <f_open+0x60>
 8002e7a:	2b5c      	cmp	r3, #92	; 0x5c
 8002e7c:	d0f6      	beq.n	8002e6c <f_open+0x60>
	lfn = dp->lfn;
 8002e7e:	2500      	movs	r5, #0
 8002e80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002e82:	9306      	str	r3, [sp, #24]
		w = p[si++];					/* Get a character */
 8002e84:	9b01      	ldr	r3, [sp, #4]
 8002e86:	1c6c      	adds	r4, r5, #1
 8002e88:	5d58      	ldrb	r0, [r3, r5]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8002e8a:	281f      	cmp	r0, #31
 8002e8c:	d91b      	bls.n	8002ec6 <f_open+0xba>
 8002e8e:	282f      	cmp	r0, #47	; 0x2f
 8002e90:	d019      	beq.n	8002ec6 <f_open+0xba>
 8002e92:	285c      	cmp	r0, #92	; 0x5c
 8002e94:	d017      	beq.n	8002ec6 <f_open+0xba>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8002e96:	2dff      	cmp	r5, #255	; 0xff
 8002e98:	d00e      	beq.n	8002eb8 <f_open+0xac>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	f7ff f9e8 	bl	8002270 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d009      	beq.n	8002eb8 <f_open+0xac>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8002ea4:	287f      	cmp	r0, #127	; 0x7f
 8002ea6:	d809      	bhi.n	8002ebc <f_open+0xb0>
 8002ea8:	2300      	movs	r3, #0
	while (*str && *str != chr) str++;
 8002eaa:	497b      	ldr	r1, [pc, #492]	; (8003098 <f_open+0x28c>)
 8002eac:	5cca      	ldrb	r2, [r1, r3]
 8002eae:	2a00      	cmp	r2, #0
 8002eb0:	d004      	beq.n	8002ebc <f_open+0xb0>
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	4290      	cmp	r0, r2
 8002eb6:	d1f9      	bne.n	8002eac <f_open+0xa0>
			dir = dj.dir;
			if (!dir) {						/* Current directory itself */
				res = FR_INVALID_NAME;
 8002eb8:	2306      	movs	r3, #6
 8002eba:	e0a7      	b.n	800300c <f_open+0x200>
		lfn[di++] = w;					/* Store the Unicode character */
 8002ebc:	9b06      	ldr	r3, [sp, #24]
 8002ebe:	006d      	lsls	r5, r5, #1
 8002ec0:	5358      	strh	r0, [r3, r5]
 8002ec2:	0025      	movs	r5, r4
 8002ec4:	e7de      	b.n	8002e84 <f_open+0x78>
	*path = &p[si];						/* Return pointer to the next segment */
 8002ec6:	9b01      	ldr	r3, [sp, #4]
 8002ec8:	191b      	adds	r3, r3, r4
 8002eca:	9301      	str	r3, [sp, #4]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8002ecc:	2400      	movs	r4, #0
 8002ece:	281f      	cmp	r0, #31
 8002ed0:	d800      	bhi.n	8002ed4 <f_open+0xc8>
 8002ed2:	3404      	adds	r4, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8002ed4:	2d00      	cmp	r5, #0
 8002ed6:	d0ef      	beq.n	8002eb8 <f_open+0xac>
 8002ed8:	9a06      	ldr	r2, [sp, #24]
 8002eda:	006b      	lsls	r3, r5, #1
 8002edc:	18d3      	adds	r3, r2, r3
		w = lfn[di - 1];
 8002ede:	1e9a      	subs	r2, r3, #2
 8002ee0:	8812      	ldrh	r2, [r2, #0]
		if (w != ' ' && w != '.') break;
 8002ee2:	2a20      	cmp	r2, #32
 8002ee4:	d002      	beq.n	8002eec <f_open+0xe0>
 8002ee6:	2a2e      	cmp	r2, #46	; 0x2e
 8002ee8:	d000      	beq.n	8002eec <f_open+0xe0>
 8002eea:	e1df      	b.n	80032ac <f_open+0x4a0>
		di--;
 8002eec:	3d01      	subs	r5, #1
 8002eee:	e7f1      	b.n	8002ed4 <f_open+0xc8>
		*d++ = (BYTE)val;
 8002ef0:	2120      	movs	r1, #32
 8002ef2:	7019      	strb	r1, [r3, #0]
 8002ef4:	3301      	adds	r3, #1
	while (cnt--)
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d1fa      	bne.n	8002ef0 <f_open+0xe4>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8002efa:	2300      	movs	r3, #0
 8002efc:	9906      	ldr	r1, [sp, #24]
 8002efe:	005a      	lsls	r2, r3, #1
 8002f00:	5a8a      	ldrh	r2, [r1, r2]
 8002f02:	2a20      	cmp	r2, #32
 8002f04:	d025      	beq.n	8002f52 <f_open+0x146>
 8002f06:	2a2e      	cmp	r2, #46	; 0x2e
 8002f08:	d023      	beq.n	8002f52 <f_open+0x146>
	if (si) cf |= NS_LOSS | NS_LFN;
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <f_open+0x106>
 8002f0e:	2203      	movs	r2, #3
 8002f10:	4314      	orrs	r4, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8002f12:	006a      	lsls	r2, r5, #1
 8002f14:	9906      	ldr	r1, [sp, #24]
 8002f16:	3a02      	subs	r2, #2
 8002f18:	5a8a      	ldrh	r2, [r1, r2]
 8002f1a:	2a2e      	cmp	r2, #46	; 0x2e
 8002f1c:	d002      	beq.n	8002f24 <f_open+0x118>
 8002f1e:	3d01      	subs	r5, #1
 8002f20:	2d00      	cmp	r5, #0
 8002f22:	d1f6      	bne.n	8002f12 <f_open+0x106>
		dp->fn[i++] = (BYTE)w;
 8002f24:	2208      	movs	r2, #8
 8002f26:	9203      	str	r2, [sp, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	0016      	movs	r6, r2
 8002f2c:	9205      	str	r2, [sp, #20]
		w = lfn[si++];					/* Get an LFN character */
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	9204      	str	r2, [sp, #16]
 8002f32:	9a06      	ldr	r2, [sp, #24]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	d01e      	beq.n	8002f7a <f_open+0x16e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8002f3c:	2820      	cmp	r0, #32
 8002f3e:	d004      	beq.n	8002f4a <f_open+0x13e>
 8002f40:	282e      	cmp	r0, #46	; 0x2e
 8002f42:	d108      	bne.n	8002f56 <f_open+0x14a>
 8002f44:	9b04      	ldr	r3, [sp, #16]
 8002f46:	42ab      	cmp	r3, r5
 8002f48:	d00c      	beq.n	8002f64 <f_open+0x158>
			cf |= NS_LOSS | NS_LFN; continue;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	431c      	orrs	r4, r3
		dp->fn[i++] = (BYTE)w;
 8002f4e:	9b04      	ldr	r3, [sp, #16]
 8002f50:	e7ed      	b.n	8002f2e <f_open+0x122>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8002f52:	3301      	adds	r3, #1
 8002f54:	e7d2      	b.n	8002efc <f_open+0xf0>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8002f56:	9b05      	ldr	r3, [sp, #20]
 8002f58:	9a03      	ldr	r2, [sp, #12]
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d206      	bcs.n	8002f6c <f_open+0x160>
 8002f5e:	9b04      	ldr	r3, [sp, #16]
 8002f60:	42ab      	cmp	r3, r5
 8002f62:	d165      	bne.n	8003030 <f_open+0x224>
			if (ni == 11) {				/* Long extension */
 8002f64:	9b03      	ldr	r3, [sp, #12]
 8002f66:	2b0b      	cmp	r3, #11
 8002f68:	d15a      	bne.n	8003020 <f_open+0x214>
 8002f6a:	e002      	b.n	8002f72 <f_open+0x166>
 8002f6c:	9b03      	ldr	r3, [sp, #12]
 8002f6e:	2b0b      	cmp	r3, #11
 8002f70:	d14e      	bne.n	8003010 <f_open+0x204>
				cf |= NS_LOSS | NS_LFN; break;
 8002f72:	2303      	movs	r3, #3
 8002f74:	431c      	orrs	r4, r3
 8002f76:	3308      	adds	r3, #8
 8002f78:	9303      	str	r3, [sp, #12]
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002f7a:	ad0f      	add	r5, sp, #60	; 0x3c
 8002f7c:	69ab      	ldr	r3, [r5, #24]
 8002f7e:	781a      	ldrb	r2, [r3, #0]
 8002f80:	2ae5      	cmp	r2, #229	; 0xe5
 8002f82:	d101      	bne.n	8002f88 <f_open+0x17c>
 8002f84:	3ae0      	subs	r2, #224	; 0xe0
 8002f86:	701a      	strb	r2, [r3, #0]
	if (ni == 8) b <<= 2;
 8002f88:	9b03      	ldr	r3, [sp, #12]
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d101      	bne.n	8002f92 <f_open+0x186>
 8002f8e:	00b6      	lsls	r6, r6, #2
 8002f90:	b2f6      	uxtb	r6, r6
 8002f92:	230c      	movs	r3, #12
 8002f94:	4033      	ands	r3, r6
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d002      	beq.n	8002fa0 <f_open+0x194>
 8002f9a:	43f2      	mvns	r2, r6
 8002f9c:	0792      	lsls	r2, r2, #30
 8002f9e:	d101      	bne.n	8002fa4 <f_open+0x198>
		cf |= NS_LFN;
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	4314      	orrs	r4, r2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8002fa4:	07a2      	lsls	r2, r4, #30
 8002fa6:	d409      	bmi.n	8002fbc <f_open+0x1b0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8002fa8:	2203      	movs	r2, #3
 8002faa:	4016      	ands	r6, r2
 8002fac:	2e01      	cmp	r6, #1
 8002fae:	d101      	bne.n	8002fb4 <f_open+0x1a8>
 8002fb0:	320d      	adds	r2, #13
 8002fb2:	4314      	orrs	r4, r2
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d101      	bne.n	8002fbc <f_open+0x1b0>
 8002fb8:	3304      	adds	r3, #4
 8002fba:	431c      	orrs	r4, r3
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8002fbc:	69ab      	ldr	r3, [r5, #24]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002fbe:	0028      	movs	r0, r5
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8002fc0:	72dc      	strb	r4, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002fc2:	f7ff fec1 	bl	8002d48 <dir_sdi.constprop.7>
	if (res != FR_OK) return res;
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d111      	bne.n	8002fee <f_open+0x1e2>
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8002fca:	22ff      	movs	r2, #255	; 0xff
 8002fcc:	2301      	movs	r3, #1
 8002fce:	0016      	movs	r6, r2
 8002fd0:	425b      	negs	r3, r3
 8002fd2:	842b      	strh	r3, [r5, #32]
 8002fd4:	9205      	str	r2, [sp, #20]
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8002fd6:	9307      	str	r3, [sp, #28]
		res = move_window(dp->fs, dp->sect);
 8002fd8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002fda:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002fdc:	f7ff fcee 	bl	80029bc <move_window>
		if (res != FR_OK) break;
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	d104      	bne.n	8002fee <f_open+0x1e2>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8002fe4:	9d14      	ldr	r5, [sp, #80]	; 0x50
		c = dir[DIR_Name];
 8002fe6:	782a      	ldrb	r2, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002fe8:	2a00      	cmp	r2, #0
 8002fea:	d145      	bne.n	8003078 <f_open+0x26c>
 8002fec:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 8002fee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002ff0:	9303      	str	r3, [sp, #12]
 8002ff2:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d100      	bne.n	8002ffa <f_open+0x1ee>
 8002ff8:	e10f      	b.n	800321a <f_open+0x40e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002ffa:	2804      	cmp	r0, #4
 8002ffc:	d000      	beq.n	8003000 <f_open+0x1f4>
 8002ffe:	e733      	b.n	8002e68 <f_open+0x5c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003000:	2205      	movs	r2, #5
 8003002:	9202      	str	r2, [sp, #8]
 8003004:	4203      	tst	r3, r0
 8003006:	d100      	bne.n	800300a <f_open+0x1fe>
 8003008:	e14d      	b.n	80032a6 <f_open+0x49a>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800300a:	2304      	movs	r3, #4
				res = FR_INVALID_NAME;
 800300c:	9302      	str	r3, [sp, #8]
 800300e:	e14a      	b.n	80032a6 <f_open+0x49a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003010:	9b04      	ldr	r3, [sp, #16]
 8003012:	42ab      	cmp	r3, r5
 8003014:	d004      	beq.n	8003020 <f_open+0x214>
 8003016:	2303      	movs	r3, #3
 8003018:	431c      	orrs	r4, r3
			if (si > di) break;			/* No extension */
 800301a:	9b04      	ldr	r3, [sp, #16]
 800301c:	42ab      	cmp	r3, r5
 800301e:	d8ac      	bhi.n	8002f7a <f_open+0x16e>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003020:	230b      	movs	r3, #11
			b <<= 2; continue;
 8003022:	00b6      	lsls	r6, r6, #2
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003024:	9303      	str	r3, [sp, #12]
			b <<= 2; continue;
 8003026:	b2f6      	uxtb	r6, r6
 8003028:	9504      	str	r5, [sp, #16]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800302a:	3b03      	subs	r3, #3
		dp->fn[i++] = (BYTE)w;
 800302c:	9305      	str	r3, [sp, #20]
 800302e:	e78e      	b.n	8002f4e <f_open+0x142>
		if (w >= 0x80) {				/* Non ASCII character */
 8003030:	287f      	cmp	r0, #127	; 0x7f
 8003032:	d90c      	bls.n	800304e <f_open+0x242>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003034:	2100      	movs	r1, #0
 8003036:	f7ff f91b 	bl	8002270 <ff_convert>
 800303a:	2302      	movs	r3, #2
 800303c:	431c      	orrs	r4, r3
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800303e:	2800      	cmp	r0, #0
 8003040:	d00e      	beq.n	8003060 <f_open+0x254>
 8003042:	4b16      	ldr	r3, [pc, #88]	; (800309c <f_open+0x290>)
 8003044:	1818      	adds	r0, r3, r0
 8003046:	3880      	subs	r0, #128	; 0x80
 8003048:	7800      	ldrb	r0, [r0, #0]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800304a:	2800      	cmp	r0, #0
 800304c:	d008      	beq.n	8003060 <f_open+0x254>
		dp->fn[i++] = (BYTE)w;
 800304e:	2300      	movs	r3, #0
	while (*str && *str != chr) str++;
 8003050:	4913      	ldr	r1, [pc, #76]	; (80030a0 <f_open+0x294>)
 8003052:	5cca      	ldrb	r2, [r1, r3]
 8003054:	2a00      	cmp	r2, #0
 8003056:	d100      	bne.n	800305a <f_open+0x24e>
 8003058:	e12e      	b.n	80032b8 <f_open+0x4ac>
 800305a:	3301      	adds	r3, #1
 800305c:	4282      	cmp	r2, r0
 800305e:	d1f8      	bne.n	8003052 <f_open+0x246>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003060:	2303      	movs	r3, #3
 8003062:	205f      	movs	r0, #95	; 0x5f
 8003064:	431c      	orrs	r4, r3
		dp->fn[i++] = (BYTE)w;
 8003066:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003068:	9a05      	ldr	r2, [sp, #20]
 800306a:	5498      	strb	r0, [r3, r2]
 800306c:	0013      	movs	r3, r2
 800306e:	3301      	adds	r3, #1
 8003070:	e7dc      	b.n	800302c <f_open+0x220>
					b |= 2;
 8003072:	2302      	movs	r3, #2
 8003074:	431e      	orrs	r6, r3
 8003076:	e7f6      	b.n	8003066 <f_open+0x25a>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003078:	2ae5      	cmp	r2, #229	; 0xe5
 800307a:	d006      	beq.n	800308a <f_open+0x27e>
		a = dir[DIR_Attr] & AM_MASK;
 800307c:	233f      	movs	r3, #63	; 0x3f
 800307e:	7ae9      	ldrb	r1, [r5, #11]
 8003080:	400b      	ands	r3, r1
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003082:	0709      	lsls	r1, r1, #28
 8003084:	d50e      	bpl.n	80030a4 <f_open+0x298>
 8003086:	2b0f      	cmp	r3, #15
 8003088:	d00e      	beq.n	80030a8 <f_open+0x29c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800308a:	9a07      	ldr	r2, [sp, #28]
 800308c:	ab0f      	add	r3, sp, #60	; 0x3c
 800308e:	841a      	strh	r2, [r3, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003090:	26ff      	movs	r6, #255	; 0xff
 8003092:	e058      	b.n	8003146 <f_open+0x33a>
 8003094:	2000002e 	.word	0x2000002e
 8003098:	0800465f 	.word	0x0800465f
 800309c:	080045d2 	.word	0x080045d2
 80030a0:	08004668 	.word	0x08004668
			if (a == AM_LFN) {			/* An LFN entry is found */
 80030a4:	2b0f      	cmp	r3, #15
 80030a6:	d179      	bne.n	800319c <f_open+0x390>
				if (dp->lfn) {
 80030a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80030aa:	ab0f      	add	r3, sp, #60	; 0x3c
 80030ac:	9104      	str	r1, [sp, #16]
 80030ae:	2900      	cmp	r1, #0
 80030b0:	d049      	beq.n	8003146 <f_open+0x33a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80030b2:	2140      	movs	r1, #64	; 0x40
 80030b4:	420a      	tst	r2, r1
 80030b6:	d068      	beq.n	800318a <f_open+0x37e>
						sum = dir[LDIR_Chksum];
 80030b8:	7b68      	ldrb	r0, [r5, #13]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80030ba:	438a      	bics	r2, r1
						sum = dir[LDIR_Chksum];
 80030bc:	9005      	str	r0, [sp, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80030be:	0016      	movs	r6, r2
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80030c0:	88da      	ldrh	r2, [r3, #6]
 80030c2:	841a      	strh	r2, [r3, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80030c4:	7b6b      	ldrb	r3, [r5, #13]
 80030c6:	9a05      	ldr	r2, [sp, #20]
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d1e1      	bne.n	8003090 <f_open+0x284>
	if (LD_WORD(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80030cc:	7eea      	ldrb	r2, [r5, #27]
 80030ce:	7eab      	ldrb	r3, [r5, #26]
 80030d0:	0212      	lsls	r2, r2, #8
 80030d2:	4313      	orrs	r3, r2
 80030d4:	b21b      	sxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1da      	bne.n	8003090 <f_open+0x284>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80030da:	223f      	movs	r2, #63	; 0x3f
 80030dc:	782c      	ldrb	r4, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80030de:	9303      	str	r3, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80030e0:	4014      	ands	r4, r2
 80030e2:	3c01      	subs	r4, #1
 80030e4:	3a32      	subs	r2, #50	; 0x32
 80030e6:	4354      	muls	r4, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80030e8:	3a0c      	subs	r2, #12
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character */
 80030ea:	9903      	ldr	r1, [sp, #12]
 80030ec:	4b7b      	ldr	r3, [pc, #492]	; (80032dc <f_open+0x4d0>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	18e9      	adds	r1, r5, r3
 80030f2:	7849      	ldrb	r1, [r1, #1]
 80030f4:	5ceb      	ldrb	r3, [r5, r3]
 80030f6:	0209      	lsls	r1, r1, #8
 80030f8:	430b      	orrs	r3, r1
 80030fa:	9306      	str	r3, [sp, #24]
		if (wc) {
 80030fc:	2a00      	cmp	r2, #0
 80030fe:	d048      	beq.n	8003192 <f_open+0x386>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003100:	2cfe      	cmp	r4, #254	; 0xfe
 8003102:	d8c5      	bhi.n	8003090 <f_open+0x284>
 8003104:	0018      	movs	r0, r3
 8003106:	f7ff f8d1 	bl	80022ac <ff_wtoupper>
 800310a:	1c63      	adds	r3, r4, #1
 800310c:	9308      	str	r3, [sp, #32]
 800310e:	9b04      	ldr	r3, [sp, #16]
 8003110:	0064      	lsls	r4, r4, #1
 8003112:	900a      	str	r0, [sp, #40]	; 0x28
 8003114:	5ae0      	ldrh	r0, [r4, r3]
 8003116:	f7ff f8c9 	bl	80022ac <ff_wtoupper>
 800311a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800311c:	4283      	cmp	r3, r0
 800311e:	d1b7      	bne.n	8003090 <f_open+0x284>
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003120:	9a06      	ldr	r2, [sp, #24]
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003122:	9c08      	ldr	r4, [sp, #32]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003124:	9b03      	ldr	r3, [sp, #12]
 8003126:	3301      	adds	r3, #1
 8003128:	9303      	str	r3, [sp, #12]
 800312a:	2b0d      	cmp	r3, #13
 800312c:	d1dd      	bne.n	80030ea <f_open+0x2de>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800312e:	782b      	ldrb	r3, [r5, #0]
 8003130:	065b      	lsls	r3, r3, #25
 8003132:	d506      	bpl.n	8003142 <f_open+0x336>
 8003134:	2a00      	cmp	r2, #0
 8003136:	d004      	beq.n	8003142 <f_open+0x336>
 8003138:	9b04      	ldr	r3, [sp, #16]
 800313a:	0064      	lsls	r4, r4, #1
 800313c:	5ae3      	ldrh	r3, [r4, r3]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1a6      	bne.n	8003090 <f_open+0x284>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003142:	3e01      	subs	r6, #1
 8003144:	b2f6      	uxtb	r6, r6
	i = dp->index + 1;
 8003146:	ac0f      	add	r4, sp, #60	; 0x3c
 8003148:	88e5      	ldrh	r5, [r4, #6]
 800314a:	3501      	adds	r5, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800314c:	b2ab      	uxth	r3, r5
 800314e:	2b00      	cmp	r3, #0
 8003150:	d100      	bne.n	8003154 <f_open+0x348>
 8003152:	e74b      	b.n	8002fec <f_open+0x1e0>
 8003154:	6923      	ldr	r3, [r4, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d100      	bne.n	800315c <f_open+0x350>
 800315a:	e747      	b.n	8002fec <f_open+0x1e0>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800315c:	220f      	movs	r2, #15
 800315e:	402a      	ands	r2, r5
 8003160:	9203      	str	r2, [sp, #12]
 8003162:	d109      	bne.n	8003178 <f_open+0x36c>
		if (!dp->clust) {		/* Static table */
 8003164:	68e1      	ldr	r1, [r4, #12]
		dp->sect++;					/* Next sector */
 8003166:	3301      	adds	r3, #1
 8003168:	6820      	ldr	r0, [r4, #0]
 800316a:	6123      	str	r3, [r4, #16]
		if (!dp->clust) {		/* Static table */
 800316c:	2900      	cmp	r1, #0
 800316e:	d13a      	bne.n	80031e6 <f_open+0x3da>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003170:	8903      	ldrh	r3, [r0, #8]
 8003172:	429d      	cmp	r5, r3
 8003174:	d300      	bcc.n	8003178 <f_open+0x36c>
 8003176:	e739      	b.n	8002fec <f_open+0x1e0>
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800317a:	9903      	ldr	r1, [sp, #12]
 800317c:	3328      	adds	r3, #40	; 0x28
 800317e:	0149      	lsls	r1, r1, #5
	dp->index = (WORD)i;	/* Current index */
 8003180:	aa0f      	add	r2, sp, #60	; 0x3c
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003182:	185b      	adds	r3, r3, r1
	dp->index = (WORD)i;	/* Current index */
 8003184:	80d5      	strh	r5, [r2, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003186:	9314      	str	r3, [sp, #80]	; 0x50
 8003188:	e726      	b.n	8002fd8 <f_open+0x1cc>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800318a:	42b2      	cmp	r2, r6
 800318c:	d000      	beq.n	8003190 <f_open+0x384>
 800318e:	e77f      	b.n	8003090 <f_open+0x284>
 8003190:	e798      	b.n	80030c4 <f_open+0x2b8>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003192:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <f_open+0x4d4>)
 8003194:	9906      	ldr	r1, [sp, #24]
 8003196:	4299      	cmp	r1, r3
 8003198:	d0c4      	beq.n	8003124 <f_open+0x318>
 800319a:	e779      	b.n	8003090 <f_open+0x284>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800319c:	2e00      	cmp	r6, #0
 800319e:	d10f      	bne.n	80031c0 <f_open+0x3b4>
 80031a0:	0029      	movs	r1, r5
 80031a2:	002a      	movs	r2, r5
 80031a4:	310b      	adds	r1, #11
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80031a6:	0873      	lsrs	r3, r6, #1
 80031a8:	7814      	ldrb	r4, [r2, #0]
 80031aa:	01f6      	lsls	r6, r6, #7
 80031ac:	4333      	orrs	r3, r6
 80031ae:	191b      	adds	r3, r3, r4
 80031b0:	3201      	adds	r2, #1
 80031b2:	b2de      	uxtb	r6, r3
 80031b4:	4291      	cmp	r1, r2
 80031b6:	d1f6      	bne.n	80031a6 <f_open+0x39a>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80031b8:	9b05      	ldr	r3, [sp, #20]
 80031ba:	42b3      	cmp	r3, r6
 80031bc:	d100      	bne.n	80031c0 <f_open+0x3b4>
 80031be:	e716      	b.n	8002fee <f_open+0x1e2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80031c0:	2401      	movs	r4, #1
 80031c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80031c4:	6991      	ldr	r1, [r2, #24]
 80031c6:	7acb      	ldrb	r3, [r1, #11]
 80031c8:	4023      	ands	r3, r4
 80031ca:	d006      	beq.n	80031da <f_open+0x3ce>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80031cc:	9b07      	ldr	r3, [sp, #28]
 80031ce:	8413      	strh	r3, [r2, #32]
 80031d0:	e75e      	b.n	8003090 <f_open+0x284>
 80031d2:	0033      	movs	r3, r6
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80031d4:	2e0b      	cmp	r6, #11
 80031d6:	d100      	bne.n	80031da <f_open+0x3ce>
 80031d8:	e709      	b.n	8002fee <f_open+0x1e2>
 80031da:	1c5e      	adds	r6, r3, #1
 80031dc:	5cec      	ldrb	r4, [r5, r3]
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	429c      	cmp	r4, r3
 80031e2:	d0f6      	beq.n	80031d2 <f_open+0x3c6>
 80031e4:	e7f2      	b.n	80031cc <f_open+0x3c0>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80031e6:	7883      	ldrb	r3, [r0, #2]
 80031e8:	092a      	lsrs	r2, r5, #4
 80031ea:	3b01      	subs	r3, #1
 80031ec:	421a      	tst	r2, r3
 80031ee:	d1c3      	bne.n	8003178 <f_open+0x36c>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80031f0:	f7ff fd40 	bl	8002c74 <get_fat>
 80031f4:	0001      	movs	r1, r0
				if (clst <= 1) return FR_INT_ERR;
 80031f6:	2801      	cmp	r0, #1
 80031f8:	d90b      	bls.n	8003212 <f_open+0x406>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80031fa:	1c43      	adds	r3, r0, #1
 80031fc:	d00b      	beq.n	8003216 <f_open+0x40a>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80031fe:	6820      	ldr	r0, [r4, #0]
 8003200:	68c3      	ldr	r3, [r0, #12]
 8003202:	4299      	cmp	r1, r3
 8003204:	d300      	bcc.n	8003208 <f_open+0x3fc>
 8003206:	e6f1      	b.n	8002fec <f_open+0x1e0>
				dp->clust = clst;				/* Initialize data for new cluster */
 8003208:	60e1      	str	r1, [r4, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800320a:	f7ff fd27 	bl	8002c5c <clust2sect>
 800320e:	6120      	str	r0, [r4, #16]
 8003210:	e7b2      	b.n	8003178 <f_open+0x36c>
				if (clst <= 1) return FR_INT_ERR;
 8003212:	2002      	movs	r0, #2
 8003214:	e6eb      	b.n	8002fee <f_open+0x1e2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003216:	2001      	movs	r0, #1
 8003218:	e6e9      	b.n	8002fee <f_open+0x1e2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800321a:	2204      	movs	r2, #4
 800321c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800321e:	4213      	tst	r3, r2
 8003220:	d113      	bne.n	800324a <f_open+0x43e>
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8003222:	7acb      	ldrb	r3, [r1, #11]
 8003224:	06db      	lsls	r3, r3, #27
 8003226:	d556      	bpl.n	80032d6 <f_open+0x4ca>
	cl = LD_WORD(dir + DIR_FstClusLO);
 8003228:	7ecb      	ldrb	r3, [r1, #27]
 800322a:	7e8a      	ldrb	r2, [r1, #26]
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	4313      	orrs	r3, r2
			dp->sclust = ld_clust(dp->fs, dir);
 8003230:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003232:	9203      	str	r2, [sp, #12]
	if (fs->fs_type == FS_FAT32)
 8003234:	7812      	ldrb	r2, [r2, #0]
 8003236:	2a03      	cmp	r2, #3
 8003238:	d105      	bne.n	8003246 <f_open+0x43a>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800323a:	7d48      	ldrb	r0, [r1, #21]
 800323c:	7d0a      	ldrb	r2, [r1, #20]
 800323e:	0200      	lsls	r0, r0, #8
 8003240:	4302      	orrs	r2, r0
 8003242:	0412      	lsls	r2, r2, #16
 8003244:	4313      	orrs	r3, r2
			dp->sclust = ld_clust(dp->fs, dir);
 8003246:	9311      	str	r3, [sp, #68]	; 0x44
 8003248:	e613      	b.n	8002e72 <f_open+0x66>
		dir = dj.dir;
 800324a:	9b14      	ldr	r3, [sp, #80]	; 0x50
			if (!dir) {						/* Current directory itself */
 800324c:	2b00      	cmp	r3, #0
 800324e:	d100      	bne.n	8003252 <f_open+0x446>
 8003250:	e632      	b.n	8002eb8 <f_open+0xac>
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
 8003252:	2110      	movs	r1, #16
 8003254:	7ada      	ldrb	r2, [r3, #11]
 8003256:	400a      	ands	r2, r1
 8003258:	d000      	beq.n	800325c <f_open+0x450>
 800325a:	e6d6      	b.n	800300a <f_open+0x1fe>
	mode &= FA_READ;
 800325c:	2101      	movs	r1, #1
 800325e:	9809      	ldr	r0, [sp, #36]	; 0x24
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
			fp->err = 0;						/* Clear error flag */
 8003260:	71fa      	strb	r2, [r7, #7]
	mode &= FA_READ;
 8003262:	4008      	ands	r0, r1
			fp->flag = mode;					/* File access mode */
 8003264:	71b8      	strb	r0, [r7, #6]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8003266:	7eda      	ldrb	r2, [r3, #27]
 8003268:	7e98      	ldrb	r0, [r3, #26]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800326a:	990f      	ldr	r1, [sp, #60]	; 0x3c
	cl = LD_WORD(dir + DIR_FstClusLO);
 800326c:	0212      	lsls	r2, r2, #8
 800326e:	4302      	orrs	r2, r0
	if (fs->fs_type == FS_FAT32)
 8003270:	7808      	ldrb	r0, [r1, #0]
 8003272:	2803      	cmp	r0, #3
 8003274:	d105      	bne.n	8003282 <f_open+0x476>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8003276:	7d5c      	ldrb	r4, [r3, #21]
 8003278:	7d18      	ldrb	r0, [r3, #20]
 800327a:	0224      	lsls	r4, r4, #8
 800327c:	4320      	orrs	r0, r4
 800327e:	0400      	lsls	r0, r0, #16
 8003280:	4302      	orrs	r2, r0
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8003282:	613a      	str	r2, [r7, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8003284:	7f5a      	ldrb	r2, [r3, #29]
 8003286:	7f18      	ldrb	r0, [r3, #28]
 8003288:	0212      	lsls	r2, r2, #8
 800328a:	4310      	orrs	r0, r2
 800328c:	7f9a      	ldrb	r2, [r3, #30]
 800328e:	7fdb      	ldrb	r3, [r3, #31]
 8003290:	0412      	lsls	r2, r2, #16
 8003292:	4302      	orrs	r2, r0
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
			fp->fptr = 0;						/* File pointer */
 800329a:	2300      	movs	r3, #0
			fp->dsect = 0;
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800329c:	6039      	str	r1, [r7, #0]
			fp->fptr = 0;						/* File pointer */
 800329e:	60bb      	str	r3, [r7, #8]
			fp->dsect = 0;
 80032a0:	61bb      	str	r3, [r7, #24]
			fp->id = fp->fs->id;
 80032a2:	88cb      	ldrh	r3, [r1, #6]
 80032a4:	80bb      	strh	r3, [r7, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
}
 80032a6:	9802      	ldr	r0, [sp, #8]
 80032a8:	b019      	add	sp, #100	; 0x64
 80032aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	lfn[di] = 0;						/* LFN is created */
 80032ac:	2200      	movs	r2, #0
 80032ae:	801a      	strh	r2, [r3, #0]
 80032b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80032b2:	001a      	movs	r2, r3
 80032b4:	320b      	adds	r2, #11
 80032b6:	e61e      	b.n	8002ef6 <f_open+0xea>
				if (IsUpper(w)) {		/* ASCII large capital */
 80032b8:	0003      	movs	r3, r0
 80032ba:	3b41      	subs	r3, #65	; 0x41
 80032bc:	2b19      	cmp	r3, #25
 80032be:	d800      	bhi.n	80032c2 <f_open+0x4b6>
 80032c0:	e6d7      	b.n	8003072 <f_open+0x266>
					if (IsLower(w)) {	/* ASCII small capital */
 80032c2:	0003      	movs	r3, r0
 80032c4:	3b61      	subs	r3, #97	; 0x61
 80032c6:	2b19      	cmp	r3, #25
 80032c8:	d900      	bls.n	80032cc <f_open+0x4c0>
 80032ca:	e6cc      	b.n	8003066 <f_open+0x25a>
						b |= 1; w -= 0x20;
 80032cc:	2301      	movs	r3, #1
 80032ce:	3820      	subs	r0, #32
 80032d0:	431e      	orrs	r6, r3
 80032d2:	b280      	uxth	r0, r0
 80032d4:	e6c7      	b.n	8003066 <f_open+0x25a>
				res = FR_NO_PATH; break;
 80032d6:	2005      	movs	r0, #5
 80032d8:	e5c6      	b.n	8002e68 <f_open+0x5c>
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	08004652 	.word	0x08004652
 80032e0:	0000ffff 	.word	0x0000ffff

080032e4 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80032e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032e6:	001f      	movs	r7, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80032e8:	2300      	movs	r3, #0
{
 80032ea:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 80032ec:	603b      	str	r3, [r7, #0]
{
 80032ee:	0004      	movs	r4, r0
 80032f0:	9102      	str	r1, [sp, #8]
 80032f2:	0015      	movs	r5, r2

	res = validate(fp);							/* Check validity */
 80032f4:	f7ff fb4c 	bl	8002990 <validate>
 80032f8:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80032fa:	2800      	cmp	r0, #0
 80032fc:	d10e      	bne.n	800331c <f_read+0x38>
	if (fp->err)								/* Check error */
 80032fe:	79e3      	ldrb	r3, [r4, #7]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d121      	bne.n	8003348 <f_read+0x64>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8003304:	79a3      	ldrb	r3, [r4, #6]
 8003306:	07db      	lsls	r3, r3, #31
 8003308:	d400      	bmi.n	800330c <f_read+0x28>
 800330a:	e06f      	b.n	80033ec <f_read+0x108>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 800330c:	68e3      	ldr	r3, [r4, #12]
 800330e:	68a2      	ldr	r2, [r4, #8]
 8003310:	1a9e      	subs	r6, r3, r2
 8003312:	42ae      	cmp	r6, r5
 8003314:	d900      	bls.n	8003318 <f_read+0x34>
 8003316:	002e      	movs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8003318:	2e00      	cmp	r6, #0
 800331a:	d102      	bne.n	8003322 <f_read+0x3e>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 800331c:	9800      	ldr	r0, [sp, #0]
 800331e:	b005      	add	sp, #20
 8003320:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8003322:	68a3      	ldr	r3, [r4, #8]
 8003324:	05da      	lsls	r2, r3, #23
 8003326:	d144      	bne.n	80033b2 <f_read+0xce>
 8003328:	6820      	ldr	r0, [r4, #0]
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800332a:	0a5a      	lsrs	r2, r3, #9
 800332c:	7881      	ldrb	r1, [r0, #2]
 800332e:	3901      	subs	r1, #1
 8003330:	400a      	ands	r2, r1
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	9201      	str	r2, [sp, #4]
			if (!csect) {						/* On the cluster boundary? */
 8003336:	2a00      	cmp	r2, #0
 8003338:	d111      	bne.n	800335e <f_read+0x7a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <f_read+0x68>
					clst = fp->sclust;			/* Follow from the origin */
 800333e:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8003340:	2801      	cmp	r0, #1
 8003342:	d807      	bhi.n	8003354 <f_read+0x70>
 8003344:	2302      	movs	r3, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003346:	71e3      	strb	r3, [r4, #7]
		LEAVE_FF(fp->fs, FR_DENIED);
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	e7e7      	b.n	800331c <f_read+0x38>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800334c:	6961      	ldr	r1, [r4, #20]
 800334e:	f7ff fc91 	bl	8002c74 <get_fat>
 8003352:	e7f5      	b.n	8003340 <f_read+0x5c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003354:	1c43      	adds	r3, r0, #1
 8003356:	d101      	bne.n	800335c <f_read+0x78>
 8003358:	2301      	movs	r3, #1
 800335a:	e7f4      	b.n	8003346 <f_read+0x62>
				fp->clust = clst;				/* Update current cluster */
 800335c:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	6961      	ldr	r1, [r4, #20]
 8003362:	0018      	movs	r0, r3
 8003364:	9303      	str	r3, [sp, #12]
 8003366:	f7ff fc79 	bl	8002c5c <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800336a:	2800      	cmp	r0, #0
 800336c:	d0ea      	beq.n	8003344 <f_read+0x60>
			sect += csect;
 800336e:	9b01      	ldr	r3, [sp, #4]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8003370:	0a75      	lsrs	r5, r6, #9
			sect += csect;
 8003372:	181a      	adds	r2, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003374:	2d00      	cmp	r5, #0
 8003376:	d01b      	beq.n	80033b0 <f_read+0xcc>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8003378:	9b03      	ldr	r3, [sp, #12]
 800337a:	9901      	ldr	r1, [sp, #4]
 800337c:	789b      	ldrb	r3, [r3, #2]
 800337e:	1949      	adds	r1, r1, r5
 8003380:	4299      	cmp	r1, r3
 8003382:	d901      	bls.n	8003388 <f_read+0xa4>
					cc = fp->fs->csize - csect;
 8003384:	9901      	ldr	r1, [sp, #4]
 8003386:	1a5d      	subs	r5, r3, r1
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8003388:	9b03      	ldr	r3, [sp, #12]
 800338a:	9902      	ldr	r1, [sp, #8]
 800338c:	7858      	ldrb	r0, [r3, #1]
 800338e:	002b      	movs	r3, r5
 8003390:	f7fe ffc4 	bl	800231c <disk_read>
 8003394:	2800      	cmp	r0, #0
 8003396:	d1df      	bne.n	8003358 <f_read+0x74>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8003398:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800339a:	9b02      	ldr	r3, [sp, #8]
 800339c:	1b76      	subs	r6, r6, r5
 800339e:	195b      	adds	r3, r3, r5
 80033a0:	9302      	str	r3, [sp, #8]
 80033a2:	68a3      	ldr	r3, [r4, #8]
 80033a4:	195b      	adds	r3, r3, r5
 80033a6:	60a3      	str	r3, [r4, #8]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	195b      	adds	r3, r3, r5
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	e7b3      	b.n	8003318 <f_read+0x34>
			fp->dsect = sect;
 80033b0:	61a2      	str	r2, [r4, #24]
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	68a3      	ldr	r3, [r4, #8]
 80033b6:	0092      	lsls	r2, r2, #2
 80033b8:	05db      	lsls	r3, r3, #23
 80033ba:	0ddb      	lsrs	r3, r3, #23
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	0035      	movs	r5, r6
 80033c0:	429e      	cmp	r6, r3
 80033c2:	d900      	bls.n	80033c6 <f_read+0xe2>
 80033c4:	001d      	movs	r5, r3
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 80033c6:	69a1      	ldr	r1, [r4, #24]
 80033c8:	6820      	ldr	r0, [r4, #0]
 80033ca:	f7ff faf7 	bl	80029bc <move_window>
 80033ce:	2800      	cmp	r0, #0
 80033d0:	d1c2      	bne.n	8003358 <f_read+0x74>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80033d2:	68a3      	ldr	r3, [r4, #8]
 80033d4:	6822      	ldr	r2, [r4, #0]
 80033d6:	05db      	lsls	r3, r3, #23
 80033d8:	0ddb      	lsrs	r3, r3, #23
 80033da:	3328      	adds	r3, #40	; 0x28
 80033dc:	18d3      	adds	r3, r2, r3
		*d++ = *s++;
 80033de:	5c1a      	ldrb	r2, [r3, r0]
 80033e0:	9902      	ldr	r1, [sp, #8]
 80033e2:	540a      	strb	r2, [r1, r0]
 80033e4:	3001      	adds	r0, #1
	while (cnt--)
 80033e6:	4285      	cmp	r5, r0
 80033e8:	d1f9      	bne.n	80033de <f_read+0xfa>
 80033ea:	e7d6      	b.n	800339a <f_read+0xb6>
		LEAVE_FF(fp->fs, FR_DENIED);
 80033ec:	2307      	movs	r3, #7
 80033ee:	e7ab      	b.n	8003348 <f_read+0x64>

080033f0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80033f0:	b510      	push	{r4, lr}
 80033f2:	0004      	movs	r4, r0
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(fp);				/* Lock volume */
 80033f4:	f7ff facc 	bl	8002990 <validate>
		if (res == FR_OK) {
 80033f8:	2800      	cmp	r0, #0
 80033fa:	d100      	bne.n	80033fe <f_close+0xe>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
 80033fc:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80033fe:	bd10      	pop	{r4, pc}

08003400 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003400:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003402:	2001      	movs	r0, #1
 8003404:	4a0c      	ldr	r2, [pc, #48]	; (8003438 <MX_DMA_Init+0x38>)
 8003406:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003408:	4301      	orrs	r1, r0
 800340a:	6311      	str	r1, [r2, #48]	; 0x30
 800340c:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800340e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003410:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003412:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003414:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003416:	3009      	adds	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003418:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800341a:	f7fd f861 	bl	80004e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800341e:	200a      	movs	r0, #10
 8003420:	f7fd f888 	bl	8000534 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003424:	2200      	movs	r2, #0
 8003426:	200b      	movs	r0, #11
 8003428:	0011      	movs	r1, r2
 800342a:	f7fd f859 	bl	80004e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800342e:	200b      	movs	r0, #11
 8003430:	f7fd f880 	bl	8000534 <HAL_NVIC_EnableIRQ>

}
 8003434:	bd07      	pop	{r0, r1, r2, pc}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	40021000 	.word	0x40021000

0800343c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800343c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800343e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003440:	2214      	movs	r2, #20
 8003442:	2100      	movs	r1, #0
 8003444:	a803      	add	r0, sp, #12
 8003446:	f000 fc3a 	bl	8003cbe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800344a:	2004      	movs	r0, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800344c:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800344e:	4b38      	ldr	r3, [pc, #224]	; (8003530 <MX_GPIO_Init+0xf4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AUDIO_SD_N_0_Pin|AUDIO_SD_N_1_Pin, GPIO_PIN_RESET);
 8003450:	24a0      	movs	r4, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003452:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003454:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003456:	4301      	orrs	r1, r0
 8003458:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800345a:	2102      	movs	r1, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800345c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, AUDIO_SD_N_0_Pin|AUDIO_SD_N_1_Pin, GPIO_PIN_RESET);
 800345e:	0224      	lsls	r4, r4, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003460:	4002      	ands	r2, r0
 8003462:	9200      	str	r2, [sp, #0]
 8003464:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003468:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800346a:	432a      	orrs	r2, r5
 800346c:	62da      	str	r2, [r3, #44]	; 0x2c
 800346e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, AUDIO_SD_N_0_Pin|AUDIO_SD_N_1_Pin, GPIO_PIN_RESET);
 8003470:	4830      	ldr	r0, [pc, #192]	; (8003534 <MX_GPIO_Init+0xf8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003472:	402a      	ands	r2, r5
 8003474:	9201      	str	r2, [sp, #4]
 8003476:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003478:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_ENB_GPIO_Port, PWR_ENB_Pin, GPIO_PIN_RESET);
 800347a:	4f2f      	ldr	r7, [pc, #188]	; (8003538 <MX_GPIO_Init+0xfc>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800347c:	430a      	orrs	r2, r1
 800347e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, AUDIO_SD_N_0_Pin|AUDIO_SD_N_1_Pin, GPIO_PIN_RESET);
 8003482:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003484:	400b      	ands	r3, r1
 8003486:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, AUDIO_SD_N_0_Pin|AUDIO_SD_N_1_Pin, GPIO_PIN_RESET);
 8003488:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800348a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, AUDIO_SD_N_0_Pin|AUDIO_SD_N_1_Pin, GPIO_PIN_RESET);
 800348c:	f7fd fa3a 	bl	8000904 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003490:	002a      	movs	r2, r5
 8003492:	0030      	movs	r0, r6
 8003494:	2110      	movs	r1, #16
 8003496:	f7fd fa35 	bl	8000904 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 800349a:	2180      	movs	r1, #128	; 0x80
 800349c:	0030      	movs	r0, r6
 800349e:	2200      	movs	r2, #0
 80034a0:	0109      	lsls	r1, r1, #4
 80034a2:	f7fd fa2f 	bl	8000904 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PWR_ENB_GPIO_Port, PWR_ENB_Pin, GPIO_PIN_RESET);
 80034a6:	2200      	movs	r2, #0
 80034a8:	0038      	movs	r0, r7
 80034aa:	2108      	movs	r1, #8
 80034ac:	f7fd fa2a 	bl	8000904 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AUDIO_SD_N_0_Pin|AUDIO_SD_N_1_Pin;
 80034b0:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b4:	a903      	add	r1, sp, #12
 80034b6:	481f      	ldr	r0, [pc, #124]	; (8003534 <MX_GPIO_Init+0xf8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034bc:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034be:	f7fd f965 	bl	800078c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin|SD_SW_Pin;
 80034c2:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c4:	a903      	add	r1, sp, #12
 80034c6:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = SD_DETECT_Pin|SD_SW_Pin;
 80034c8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ca:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034cc:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ce:	f7fd f95d 	bl	800078c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_SW_0_Pin|MOTOR_SW_1_Pin;
 80034d2:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d4:	a903      	add	r1, sp, #12
 80034d6:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = MOTOR_SW_0_Pin|MOTOR_SW_1_Pin;
 80034d8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034da:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034de:	f7fd f955 	bl	800078c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin */
  GPIO_InitStruct.Pin = MOTOR_SW_2_Pin;
 80034e2:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e4:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = MOTOR_SW_2_Pin;
 80034e6:	005b      	lsls	r3, r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e8:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = MOTOR_SW_2_Pin;
 80034ea:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ec:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ee:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f0:	f7fd f94c 	bl	800078c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80034f4:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80034f6:	a903      	add	r1, sp, #12
 80034f8:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80034fa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034fc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034fe:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003500:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003502:	f7fd f943 	bl	800078c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 8003506:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 8003508:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 800350a:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 800350c:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 800350e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003510:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003514:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 8003516:	f7fd f939 	bl	800078c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_ENB_Pin;
 800351a:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(PWR_ENB_GPIO_Port, &GPIO_InitStruct);
 800351c:	a903      	add	r1, sp, #12
 800351e:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = PWR_ENB_Pin;
 8003520:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003522:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003526:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(PWR_ENB_GPIO_Port, &GPIO_InitStruct);
 8003528:	f7fd f930 	bl	800078c <HAL_GPIO_Init>

}
 800352c:	b009      	add	sp, #36	; 0x24
 800352e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	50000800 	.word	0x50000800
 8003538:	50000400 	.word	0x50000400

0800353c <MX_I2S2_Init>:

/* I2S2 init function */
void MX_I2S2_Init(void)
{

  hi2s2.Instance = SPI2;
 800353c:	480b      	ldr	r0, [pc, #44]	; (800356c <MX_I2S2_Init+0x30>)
 800353e:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <MX_I2S2_Init+0x34>)
{
 8003540:	b510      	push	{r4, lr}
  hi2s2.Instance = SPI2;
 8003542:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800354a:	2300      	movs	r3, #0
 800354c:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800354e:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8003550:	6103      	str	r3, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <MX_I2S2_Init+0x38>)
 8003554:	6143      	str	r3, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8003556:	2308      	movs	r3, #8
 8003558:	6183      	str	r3, [r0, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800355a:	f7fd f9eb 	bl	8000934 <HAL_I2S_Init>
 800355e:	2800      	cmp	r0, #0
 8003560:	d003      	beq.n	800356a <MX_I2S2_Init+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003562:	214c      	movs	r1, #76	; 0x4c
 8003564:	4804      	ldr	r0, [pc, #16]	; (8003578 <MX_I2S2_Init+0x3c>)
 8003566:	f000 f977 	bl	8003858 <_Error_Handler>
  }

}
 800356a:	bd10      	pop	{r4, pc}
 800356c:	2000028c 	.word	0x2000028c
 8003570:	40003800 	.word	0x40003800
 8003574:	0000ac44 	.word	0x0000ac44
 8003578:	0800466f 	.word	0x0800466f

0800357c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800357c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2sHandle->Instance==SPI2)
 800357e:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <HAL_I2S_MspInit+0x70>)
 8003580:	6802      	ldr	r2, [r0, #0]
{
 8003582:	b087      	sub	sp, #28
 8003584:	0006      	movs	r6, r0
  if(i2sHandle->Instance==SPI2)
 8003586:	429a      	cmp	r2, r3
 8003588:	d12d      	bne.n	80035e6 <HAL_I2S_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <HAL_I2S_MspInit+0x74>)
 800358e:	01db      	lsls	r3, r3, #7
 8003590:	6b91      	ldr	r1, [r2, #56]	; 0x38
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	2500      	movs	r5, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003594:	430b      	orrs	r3, r1
 8003596:	6393      	str	r3, [r2, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003598:	23b0      	movs	r3, #176	; 0xb0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800359c:	021b      	lsls	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359e:	4815      	ldr	r0, [pc, #84]	; (80035f4 <HAL_I2S_MspInit+0x78>)
 80035a0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80035a2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a4:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80035aa:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ac:	f7fd f8ee 	bl	800078c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80035b0:	4c11      	ldr	r4, [pc, #68]	; (80035f8 <HAL_I2S_MspInit+0x7c>)
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_I2S_MspInit+0x80>)
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80035b4:	0020      	movs	r0, r4
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80035b6:	6023      	str	r3, [r4, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035b8:	2310      	movs	r3, #16
 80035ba:	60a3      	str	r3, [r4, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035bc:	3370      	adds	r3, #112	; 0x70
 80035be:	6123      	str	r3, [r4, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035c0:	3380      	adds	r3, #128	; 0x80
 80035c2:	6163      	str	r3, [r4, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	00db      	lsls	r3, r3, #3
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 80035c8:	6067      	str	r7, [r4, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ca:	60e5      	str	r5, [r4, #12]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035cc:	61a3      	str	r3, [r4, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80035ce:	61e5      	str	r5, [r4, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035d0:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80035d2:	f7fc ffe7 	bl	80005a4 <HAL_DMA_Init>
 80035d6:	42a8      	cmp	r0, r5
 80035d8:	d003      	beq.n	80035e2 <HAL_I2S_MspInit+0x66>
    {
      _Error_Handler(__FILE__, __LINE__);
 80035da:	2176      	movs	r1, #118	; 0x76
 80035dc:	4808      	ldr	r0, [pc, #32]	; (8003600 <HAL_I2S_MspInit+0x84>)
 80035de:	f000 f93b 	bl	8003858 <_Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 80035e2:	62f4      	str	r4, [r6, #44]	; 0x2c
 80035e4:	62a6      	str	r6, [r4, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80035e6:	b007      	add	sp, #28
 80035e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	40003800 	.word	0x40003800
 80035f0:	40021000 	.word	0x40021000
 80035f4:	50000400 	.word	0x50000400
 80035f8:	20000244 	.word	0x20000244
 80035fc:	40020058 	.word	0x40020058
 8003600:	0800466f 	.word	0x0800466f

08003604 <MX_LPTIM1_Init>:
void MX_LPTIM1_Init(void)
{

  hlptim1.Instance = LPTIM1;
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8003604:	22e0      	movs	r2, #224	; 0xe0
  hlptim1.Instance = LPTIM1;
 8003606:	480d      	ldr	r0, [pc, #52]	; (800363c <MX_LPTIM1_Init+0x38>)
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8003608:	0112      	lsls	r2, r2, #4
{
 800360a:	b510      	push	{r4, lr}
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 800360c:	6082      	str	r2, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800360e:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <MX_LPTIM1_Init+0x3c>)
  hlptim1.Instance = LPTIM1;
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <MX_LPTIM1_Init+0x40>)
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8003612:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_LOW;
 8003614:	2280      	movs	r2, #128	; 0x80
 8003616:	0392      	lsls	r2, r2, #14
 8003618:	6202      	str	r2, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 800361a:	2280      	movs	r2, #128	; 0x80
  hlptim1.Instance = LPTIM1;
 800361c:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800361e:	2300      	movs	r3, #0
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8003620:	03d2      	lsls	r2, r2, #15
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003622:	6043      	str	r3, [r0, #4]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8003624:	6242      	str	r2, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8003626:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8003628:	f7fd fa72 	bl	8000b10 <HAL_LPTIM_Init>
 800362c:	2800      	cmp	r0, #0
 800362e:	d003      	beq.n	8003638 <MX_LPTIM1_Init+0x34>
  {
    Error_Handler();
 8003630:	212a      	movs	r1, #42	; 0x2a
 8003632:	4805      	ldr	r0, [pc, #20]	; (8003648 <MX_LPTIM1_Init+0x44>)
 8003634:	f000 f910 	bl	8003858 <_Error_Handler>
  }

}
 8003638:	bd10      	pop	{r4, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	200002c8 	.word	0x200002c8
 8003640:	0000ffff 	.word	0x0000ffff
 8003644:	40007c00 	.word	0x40007c00
 8003648:	0800467c 	.word	0x0800467c

0800364c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800364c:	b510      	push	{r4, lr}
 800364e:	0004      	movs	r4, r0
 8003650:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003652:	2214      	movs	r2, #20
 8003654:	2100      	movs	r1, #0
 8003656:	a801      	add	r0, sp, #4
 8003658:	f000 fb31 	bl	8003cbe <memset>
  if(lptimHandle->Instance==LPTIM1)
 800365c:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <HAL_LPTIM_MspInit+0x48>)
 800365e:	6822      	ldr	r2, [r4, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d115      	bne.n	8003690 <HAL_LPTIM_MspInit+0x44>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <HAL_LPTIM_MspInit+0x4c>)
 8003668:	0612      	lsls	r2, r2, #24
 800366a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = MOTOR_CTRL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_LPTIM1;
    HAL_GPIO_Init(MOTOR_CTRL_GPIO_Port, &GPIO_InitStruct);
 800366c:	480b      	ldr	r0, [pc, #44]	; (800369c <HAL_LPTIM_MspInit+0x50>)
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800366e:	430a      	orrs	r2, r1
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003672:	2202      	movs	r2, #2
 8003674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003676:	4311      	orrs	r1, r2
 8003678:	62d9      	str	r1, [r3, #44]	; 0x2c
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(MOTOR_CTRL_GPIO_Port, &GPIO_InitStruct);
 800367c:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800367e:	4013      	ands	r3, r2
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MOTOR_CTRL_Pin;
 8003684:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003686:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pin = MOTOR_CTRL_Pin;
 8003688:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_LPTIM1;
 800368a:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(MOTOR_CTRL_GPIO_Port, &GPIO_InitStruct);
 800368c:	f7fd f87e 	bl	800078c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8003690:	b006      	add	sp, #24
 8003692:	bd10      	pop	{r4, pc}
 8003694:	40007c00 	.word	0x40007c00
 8003698:	40021000 	.word	0x40021000
 800369c:	50000400 	.word	0x50000400

080036a0 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  
    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036a0:	4924      	ldr	r1, [pc, #144]	; (8003734 <SystemClock_Config+0x94>)
 80036a2:	4a25      	ldr	r2, [pc, #148]	; (8003738 <SystemClock_Config+0x98>)
 80036a4:	680b      	ldr	r3, [r1, #0]
{
 80036a6:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036a8:	401a      	ands	r2, r3
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036b2:	2302      	movs	r3, #2
{
 80036b4:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036b6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036b8:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036ba:	2300      	movs	r3, #0
 80036bc:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	02db      	lsls	r3, r3, #11
 80036c2:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80036c4:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036c6:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80036c8:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80036ca:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036cc:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036ce:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80036d0:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80036d2:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036d4:	f7fd fac6 	bl	8000c64 <HAL_RCC_OscConfig>
 80036d8:	2800      	cmp	r0, #0
 80036da:	d000      	beq.n	80036de <SystemClock_Config+0x3e>
 80036dc:	e7fe      	b.n	80036dc <SystemClock_Config+0x3c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036de:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036e0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036e2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036e4:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036e6:	3b0c      	subs	r3, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036e8:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80036ea:	0021      	movs	r1, r4
 80036ec:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036ee:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80036f0:	f7fd fd3c 	bl	800116c <HAL_RCC_ClockConfig>
 80036f4:	2800      	cmp	r0, #0
 80036f6:	d000      	beq.n	80036fa <SystemClock_Config+0x5a>
 80036f8:	e7fe      	b.n	80036f8 <SystemClock_Config+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPTIM1;
 80036fa:	2381      	movs	r3, #129	; 0x81
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80036fc:	9008      	str	r0, [sp, #32]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80036fe:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003700:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPTIM1;
 8003702:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003704:	f7fd fe10 	bl	8001328 <HAL_RCCEx_PeriphCLKConfig>
 8003708:	1e04      	subs	r4, r0, #0
 800370a:	d000      	beq.n	800370e <SystemClock_Config+0x6e>
 800370c:	e7fe      	b.n	800370c <SystemClock_Config+0x6c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800370e:	f7fd fde5 	bl	80012dc <HAL_RCC_GetHCLKFreq>
 8003712:	21fa      	movs	r1, #250	; 0xfa
 8003714:	0089      	lsls	r1, r1, #2
 8003716:	f7fc fd01 	bl	800011c <__udivsi3>
 800371a:	f7fc ff15 	bl	8000548 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800371e:	2004      	movs	r0, #4
 8003720:	f7fc ff2c 	bl	800057c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003724:	2001      	movs	r0, #1
 8003726:	0022      	movs	r2, r4
 8003728:	0021      	movs	r1, r4
 800372a:	4240      	negs	r0, r0
 800372c:	f7fc fed8 	bl	80004e0 <HAL_NVIC_SetPriority>
}
 8003730:	b01c      	add	sp, #112	; 0x70
 8003732:	bd10      	pop	{r4, pc}
 8003734:	40007000 	.word	0x40007000
 8003738:	ffffe7ff 	.word	0xffffe7ff

0800373c <main>:
{
 800373c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800373e:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8003740:	f7fc fe9c 	bl	800047c <HAL_Init>
  SystemClock_Config();
 8003744:	f7ff ffac 	bl	80036a0 <SystemClock_Config>
  MX_GPIO_Init();
 8003748:	f7ff fe78 	bl	800343c <MX_GPIO_Init>
  MX_DMA_Init();
 800374c:	f7ff fe58 	bl	8003400 <MX_DMA_Init>
  MX_I2S2_Init();
 8003750:	f7ff fef4 	bl	800353c <MX_I2S2_Init>
  MX_SPI1_Init();
 8003754:	f000 f882 	bl	800385c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003758:	f000 f988 	bl	8003a6c <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 800375c:	f7ff ff52 	bl	8003604 <MX_LPTIM1_Init>
  HAL_Delay(100);
 8003760:	2064      	movs	r0, #100	; 0x64
 8003762:	f7fc fead 	bl	80004c0 <HAL_Delay>
  HAL_GPIO_WritePin(PWR_ENB_GPIO_Port, PWR_ENB_Pin, GPIO_PIN_SET);
 8003766:	2201      	movs	r2, #1
 8003768:	2108      	movs	r1, #8
 800376a:	482f      	ldr	r0, [pc, #188]	; (8003828 <main+0xec>)
 800376c:	f7fd f8ca 	bl	8000904 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003770:	20a0      	movs	r0, #160	; 0xa0
 8003772:	2201      	movs	r2, #1
 8003774:	2110      	movs	r1, #16
 8003776:	05c0      	lsls	r0, r0, #23
 8003778:	f7fd f8c4 	bl	8000904 <HAL_GPIO_WritePin>
  fr = f_mount(&FatFs, "", 1);
 800377c:	2201      	movs	r2, #1
 800377e:	492b      	ldr	r1, [pc, #172]	; (800382c <main+0xf0>)
 8003780:	482b      	ldr	r0, [pc, #172]	; (8003830 <main+0xf4>)
 8003782:	f7ff fb1d 	bl	8002dc0 <f_mount>
  HAL_LPTIM_PWM_Start(&hlptim1, 0x1388, 0x00FA);
 8003786:	4c2b      	ldr	r4, [pc, #172]	; (8003834 <main+0xf8>)
 8003788:	22fa      	movs	r2, #250	; 0xfa
 800378a:	492b      	ldr	r1, [pc, #172]	; (8003838 <main+0xfc>)
 800378c:	0020      	movs	r0, r4
 800378e:	f7fd fa0f 	bl	8000bb0 <HAL_LPTIM_PWM_Start>
  const char audio_file[32] = "red.wav";
 8003792:	2208      	movs	r2, #8
 8003794:	4929      	ldr	r1, [pc, #164]	; (800383c <main+0x100>)
 8003796:	4668      	mov	r0, sp
 8003798:	f000 fa88 	bl	8003cac <memcpy>
 800379c:	2218      	movs	r2, #24
 800379e:	2100      	movs	r1, #0
 80037a0:	a802      	add	r0, sp, #8
 80037a2:	f000 fa8c 	bl	8003cbe <memset>
  play_wav(audio_file);
 80037a6:	4668      	mov	r0, sp
 80037a8:	f000 f9b6 	bl	8003b18 <play_wav>
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_SET);
 80037ac:	2180      	movs	r1, #128	; 0x80
 80037ae:	20a0      	movs	r0, #160	; 0xa0
 80037b0:	2201      	movs	r2, #1
 80037b2:	0109      	lsls	r1, r1, #4
 80037b4:	05c0      	lsls	r0, r0, #23
 80037b6:	f7fd f8a5 	bl	8000904 <HAL_GPIO_WritePin>
    motor_state_0 = HAL_GPIO_ReadPin(MOTOR_SW_0_GPIO_Port, MOTOR_SW_0_Pin);
 80037ba:	2501      	movs	r5, #1
 80037bc:	0029      	movs	r1, r5
 80037be:	481a      	ldr	r0, [pc, #104]	; (8003828 <main+0xec>)
 80037c0:	f7fd f89a 	bl	80008f8 <HAL_GPIO_ReadPin>
    motor_state_1 = HAL_GPIO_ReadPin(MOTOR_SW_1_GPIO_Port, MOTOR_SW_1_Pin);
 80037c4:	2102      	movs	r1, #2
    motor_state_0 = HAL_GPIO_ReadPin(MOTOR_SW_0_GPIO_Port, MOTOR_SW_0_Pin);
 80037c6:	0007      	movs	r7, r0
    motor_state_1 = HAL_GPIO_ReadPin(MOTOR_SW_1_GPIO_Port, MOTOR_SW_1_Pin);
 80037c8:	4817      	ldr	r0, [pc, #92]	; (8003828 <main+0xec>)
 80037ca:	f7fd f895 	bl	80008f8 <HAL_GPIO_ReadPin>
    motor_state_2 = HAL_GPIO_ReadPin(MOTOR_SW_2_GPIO_Port, MOTOR_SW_2_Pin);
 80037ce:	2180      	movs	r1, #128	; 0x80
    motor_state_1 = HAL_GPIO_ReadPin(MOTOR_SW_1_GPIO_Port, MOTOR_SW_1_Pin);
 80037d0:	0006      	movs	r6, r0
    motor_state_2 = HAL_GPIO_ReadPin(MOTOR_SW_2_GPIO_Port, MOTOR_SW_2_Pin);
 80037d2:	0049      	lsls	r1, r1, #1
 80037d4:	4814      	ldr	r0, [pc, #80]	; (8003828 <main+0xec>)
 80037d6:	f7fd f88f 	bl	80008f8 <HAL_GPIO_ReadPin>
    if ((motor_state_0 == 0) & (motor_state_last != 0)) {
 80037da:	2f00      	cmp	r7, #0
 80037dc:	d118      	bne.n	8003810 <main+0xd4>
      __HAL_LPTIM_COMPARE_SET(&hlptim1, 0x01F4);
 80037de:	22fa      	movs	r2, #250	; 0xfa
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	0052      	lsls	r2, r2, #1
      __HAL_LPTIM_COMPARE_SET(&hlptim1, 0x00FA);
 80037e4:	615a      	str	r2, [r3, #20]
    HAL_Delay(20);
 80037e6:	2014      	movs	r0, #20
 80037e8:	f7fc fe6a 	bl	80004c0 <HAL_Delay>
    if (uart_ready == 1) {
 80037ec:	4e14      	ldr	r6, [pc, #80]	; (8003840 <main+0x104>)
 80037ee:	7833      	ldrb	r3, [r6, #0]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d1e3      	bne.n	80037bc <main+0x80>
      HAL_GPIO_TogglePin(TEST_LED_GPIO_Port, TEST_LED_Pin);
 80037f4:	2180      	movs	r1, #128	; 0x80
 80037f6:	20a0      	movs	r0, #160	; 0xa0
 80037f8:	0109      	lsls	r1, r1, #4
 80037fa:	05c0      	lsls	r0, r0, #23
 80037fc:	f7fd f888 	bl	8000910 <HAL_GPIO_TogglePin>
      HAL_UART_Receive_IT(&huart1, &uart_data, 1);
 8003800:	002a      	movs	r2, r5
 8003802:	4910      	ldr	r1, [pc, #64]	; (8003844 <main+0x108>)
 8003804:	4810      	ldr	r0, [pc, #64]	; (8003848 <main+0x10c>)
 8003806:	f7fe f9a9 	bl	8001b5c <HAL_UART_Receive_IT>
      uart_ready = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	7033      	strb	r3, [r6, #0]
 800380e:	e7d5      	b.n	80037bc <main+0x80>
    } else if ((motor_state_1 == 0) & (motor_state_last != 1)) {
 8003810:	2e00      	cmp	r6, #0
 8003812:	d103      	bne.n	800381c <main+0xe0>
      __HAL_LPTIM_COMPARE_SET(&hlptim1, 0x0177);
 8003814:	2278      	movs	r2, #120	; 0x78
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	32ff      	adds	r2, #255	; 0xff
 800381a:	e7e3      	b.n	80037e4 <main+0xa8>
    } else if ((motor_state_2 == 0) & (motor_state_last != 2)) {
 800381c:	2800      	cmp	r0, #0
 800381e:	d1e2      	bne.n	80037e6 <main+0xaa>
      __HAL_LPTIM_COMPARE_SET(&hlptim1, 0x00FA);
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	22fa      	movs	r2, #250	; 0xfa
 8003824:	e7de      	b.n	80037e4 <main+0xa8>
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	50000400 	.word	0x50000400
 800382c:	0800466e 	.word	0x0800466e
 8003830:	200002f8 	.word	0x200002f8
 8003834:	200002c8 	.word	0x200002c8
 8003838:	00001388 	.word	0x00001388
 800383c:	08003ce8 	.word	0x08003ce8
 8003840:	20000000 	.word	0x20000000
 8003844:	20000924 	.word	0x20000924
 8003848:	20000c1c 	.word	0x20000c1c

0800384c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
  uart_ready = 1;
 800384c:	2201      	movs	r2, #1
 800384e:	4b01      	ldr	r3, [pc, #4]	; (8003854 <HAL_UART_RxCpltCallback+0x8>)
 8003850:	701a      	strb	r2, [r3, #0]
}
 8003852:	4770      	bx	lr
 8003854:	20000000 	.word	0x20000000

08003858 <_Error_Handler>:
  * @param  file: The file name as string
  * @param  line: The line in file as a number
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003858:	e7fe      	b.n	8003858 <_Error_Handler>
	...

0800385c <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 800385c:	480f      	ldr	r0, [pc, #60]	; (800389c <MX_SPI1_Init+0x40>)
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <MX_SPI1_Init+0x44>)
{
 8003860:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8003862:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003864:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003866:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800386c:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800386e:	0092      	lsls	r2, r2, #2
 8003870:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003872:	3af1      	subs	r2, #241	; 0xf1
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003874:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003876:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003878:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800387a:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800387c:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800387e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003880:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003882:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003884:	3307      	adds	r3, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003886:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8003888:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800388a:	f7fd fea9 	bl	80015e0 <HAL_SPI_Init>
 800388e:	2800      	cmp	r0, #0
 8003890:	d003      	beq.n	800389a <MX_SPI1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003892:	2152      	movs	r1, #82	; 0x52
 8003894:	4803      	ldr	r0, [pc, #12]	; (80038a4 <MX_SPI1_Init+0x48>)
 8003896:	f7ff ffdf 	bl	8003858 <_Error_Handler>
  }

}
 800389a:	bd10      	pop	{r4, pc}
 800389c:	20000b34 	.word	0x20000b34
 80038a0:	40013000 	.word	0x40013000
 80038a4:	0800468b 	.word	0x0800468b

080038a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038a8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 80038aa:	4b2c      	ldr	r3, [pc, #176]	; (800395c <HAL_SPI_MspInit+0xb4>)
 80038ac:	6802      	ldr	r2, [r0, #0]
{
 80038ae:	b087      	sub	sp, #28
 80038b0:	0006      	movs	r6, r0
  if(spiHandle->Instance==SPI1)
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d150      	bne.n	8003958 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	4a29      	ldr	r2, [pc, #164]	; (8003960 <HAL_SPI_MspInit+0xb8>)
 80038ba:	015b      	lsls	r3, r3, #5
 80038bc:	6b51      	ldr	r1, [r2, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038be:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038c0:	430b      	orrs	r3, r1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	2500      	movs	r5, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038c4:	6353      	str	r3, [r2, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c6:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80038c8:	23a0      	movs	r3, #160	; 0xa0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ca:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038cc:	a901      	add	r1, sp, #4
 80038ce:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80038d0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80038d8:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038da:	f7fc ff57 	bl	800078c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038de:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038e0:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e2:	9702      	str	r7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038e6:	3f01      	subs	r7, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038ea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ec:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038ee:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80038f0:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f2:	f7fc ff4b 	bl	800078c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80038f6:	4c1b      	ldr	r4, [pc, #108]	; (8003964 <HAL_SPI_MspInit+0xbc>)
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_SPI_MspInit+0xc0>)
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80038fa:	0020      	movs	r0, r4
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80038fc:	6023      	str	r3, [r4, #0]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038fe:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8003900:	6067      	str	r7, [r4, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003902:	60a5      	str	r5, [r4, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003904:	60e5      	str	r5, [r4, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003906:	6123      	str	r3, [r4, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003908:	6165      	str	r5, [r4, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800390a:	61a5      	str	r5, [r4, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800390c:	61e5      	str	r5, [r4, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800390e:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003910:	f7fc fe48 	bl	80005a4 <HAL_DMA_Init>
 8003914:	42a8      	cmp	r0, r5
 8003916:	d003      	beq.n	8003920 <HAL_SPI_MspInit+0x78>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003918:	2183      	movs	r1, #131	; 0x83
 800391a:	4814      	ldr	r0, [pc, #80]	; (800396c <HAL_SPI_MspInit+0xc4>)
 800391c:	f7ff ff9c 	bl	8003858 <_Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <HAL_SPI_MspInit+0xc8>)
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003922:	64f4      	str	r4, [r6, #76]	; 0x4c
 8003924:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003926:	4c13      	ldr	r4, [pc, #76]	; (8003974 <HAL_SPI_MspInit+0xcc>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003928:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800392a:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800392c:	2301      	movs	r3, #1
 800392e:	6063      	str	r3, [r4, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003930:	330f      	adds	r3, #15
 8003932:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003934:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003936:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003938:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800393a:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800393c:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800393e:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003940:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003942:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003944:	f7fc fe2e 	bl	80005a4 <HAL_DMA_Init>
 8003948:	2800      	cmp	r0, #0
 800394a:	d003      	beq.n	8003954 <HAL_SPI_MspInit+0xac>
    {
      _Error_Handler(__FILE__, __LINE__);
 800394c:	2194      	movs	r1, #148	; 0x94
 800394e:	4807      	ldr	r0, [pc, #28]	; (800396c <HAL_SPI_MspInit+0xc4>)
 8003950:	f7ff ff82 	bl	8003858 <_Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003954:	64b4      	str	r4, [r6, #72]	; 0x48
 8003956:	62a6      	str	r6, [r4, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003958:	b007      	add	sp, #28
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	40013000 	.word	0x40013000
 8003960:	40021000 	.word	0x40021000
 8003964:	20000b8c 	.word	0x20000b8c
 8003968:	4002001c 	.word	0x4002001c
 800396c:	0800468b 	.word	0x0800468b
 8003970:	40020030 	.word	0x40020030
 8003974:	20000bd4 	.word	0x20000bd4

08003978 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003978:	2201      	movs	r2, #1
 800397a:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <HAL_MspInit+0x3c>)
{
 800397c:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397e:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003980:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003982:	430a      	orrs	r2, r1
 8003984:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003986:	2280      	movs	r2, #128	; 0x80
 8003988:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800398a:	0552      	lsls	r2, r2, #21
 800398c:	430a      	orrs	r2, r1
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003990:	2200      	movs	r2, #0
 8003992:	4240      	negs	r0, r0
 8003994:	0011      	movs	r1, r2
 8003996:	f7fc fda3 	bl	80004e0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800399a:	2200      	movs	r2, #0
 800399c:	2002      	movs	r0, #2
 800399e:	0011      	movs	r1, r2
 80039a0:	4240      	negs	r0, r0
 80039a2:	f7fc fd9d 	bl	80004e0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80039a6:	2200      	movs	r2, #0
 80039a8:	2001      	movs	r0, #1
 80039aa:	0011      	movs	r1, r2
 80039ac:	4240      	negs	r0, r0
 80039ae:	f7fc fd97 	bl	80004e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039b2:	bd10      	pop	{r4, pc}
 80039b4:	40021000 	.word	0x40021000

080039b8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039b8:	4770      	bx	lr

080039ba <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80039ba:	e7fe      	b.n	80039ba <HardFault_Handler>

080039bc <SVC_Handler>:
 80039bc:	4770      	bx	lr

080039be <PendSV_Handler>:
 80039be:	4770      	bx	lr

080039c0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80039c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039c2:	f7fc fd6f 	bl	80004a4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80039c6:	f7fc fde8 	bl	800059a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039ca:	bd10      	pop	{r4, pc}

080039cc <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80039cc:	2080      	movs	r0, #128	; 0x80
{
 80039ce:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80039d0:	0200      	lsls	r0, r0, #8
 80039d2:	f7fc ffa3 	bl	800091c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80039d6:	bd10      	pop	{r4, pc}

080039d8 <DMA1_Channel2_3_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 and channel 3 interrupts.
*/
void DMA1_Channel2_3_IRQHandler(void)
{
 80039d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80039da:	4803      	ldr	r0, [pc, #12]	; (80039e8 <DMA1_Channel2_3_IRQHandler+0x10>)
 80039dc:	f7fc fe8b 	bl	80006f6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80039e0:	4802      	ldr	r0, [pc, #8]	; (80039ec <DMA1_Channel2_3_IRQHandler+0x14>)
 80039e2:	f7fc fe88 	bl	80006f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80039e6:	bd10      	pop	{r4, pc}
 80039e8:	20000b8c 	.word	0x20000b8c
 80039ec:	20000bd4 	.word	0x20000bd4

080039f0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
*/
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80039f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80039f2:	4802      	ldr	r0, [pc, #8]	; (80039fc <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 80039f4:	f7fc fe7f 	bl	80006f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80039f8:	bd10      	pop	{r4, pc}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	20000244 	.word	0x20000244

08003a00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003a00:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a02:	4802      	ldr	r0, [pc, #8]	; (8003a0c <USART1_IRQHandler+0xc>)
 8003a04:	f7fe f970 	bl	8001ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a08:	bd10      	pop	{r4, pc}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	20000c1c 	.word	0x20000c1c

08003a10 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003a10:	2280      	movs	r2, #128	; 0x80
 8003a12:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <SystemInit+0x44>)
 8003a14:	0052      	lsls	r2, r2, #1
 8003a16:	6819      	ldr	r1, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	490e      	ldr	r1, [pc, #56]	; (8003a58 <SystemInit+0x48>)
 8003a20:	400a      	ands	r2, r1
 8003a22:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	490d      	ldr	r1, [pc, #52]	; (8003a5c <SystemInit+0x4c>)
 8003a28:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003a2a:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003a2c:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	438a      	bics	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	490a      	ldr	r1, [pc, #40]	; (8003a60 <SystemInit+0x50>)
 8003a38:	400a      	ands	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	4909      	ldr	r1, [pc, #36]	; (8003a64 <SystemInit+0x54>)
 8003a40:	400a      	ands	r2, r1
 8003a42:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003a44:	2200      	movs	r2, #0
 8003a46:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a48:	2280      	movs	r2, #128	; 0x80
 8003a4a:	4b07      	ldr	r3, [pc, #28]	; (8003a68 <SystemInit+0x58>)
 8003a4c:	0512      	lsls	r2, r2, #20
 8003a4e:	609a      	str	r2, [r3, #8]
#endif
}
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	40021000 	.word	0x40021000
 8003a58:	88ff400c 	.word	0x88ff400c
 8003a5c:	fef6fff6 	.word	0xfef6fff6
 8003a60:	fffbffff 	.word	0xfffbffff
 8003a64:	ff02ffff 	.word	0xff02ffff
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8003a6c:	480c      	ldr	r0, [pc, #48]	; (8003aa0 <MX_USART1_UART_Init+0x34>)
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <MX_USART1_UART_Init+0x38>)
{
 8003a70:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8003a72:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003a74:	23e1      	movs	r3, #225	; 0xe1
 8003a76:	025b      	lsls	r3, r3, #9
 8003a78:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a7a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a7c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a7e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a80:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a82:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a84:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a86:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a88:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a8a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a8c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a8e:	f7fe fbbb 	bl	8002208 <HAL_UART_Init>
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d003      	beq.n	8003a9e <MX_USART1_UART_Init+0x32>
  {
    Error_Handler();
 8003a96:	212e      	movs	r1, #46	; 0x2e
 8003a98:	4803      	ldr	r0, [pc, #12]	; (8003aa8 <MX_USART1_UART_Init+0x3c>)
 8003a9a:	f7ff fedd 	bl	8003858 <_Error_Handler>
  }

}
 8003a9e:	bd10      	pop	{r4, pc}
 8003aa0:	20000c1c 	.word	0x20000c1c
 8003aa4:	40013800 	.word	0x40013800
 8003aa8:	080046b9 	.word	0x080046b9

08003aac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003aac:	b510      	push	{r4, lr}
 8003aae:	0004      	movs	r4, r0
 8003ab0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab2:	2214      	movs	r2, #20
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	a801      	add	r0, sp, #4
 8003ab8:	f000 f901 	bl	8003cbe <memset>
  if(uartHandle->Instance==USART1)
 8003abc:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <HAL_UART_MspInit+0x64>)
 8003abe:	6822      	ldr	r2, [r4, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d123      	bne.n	8003b0c <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ac4:	2280      	movs	r2, #128	; 0x80
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_UART_MspInit+0x68>)
 8003ac8:	01d2      	lsls	r2, r2, #7
 8003aca:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003acc:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ace:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad0:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ad2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	62da      	str	r2, [r3, #44]	; 0x2c
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	400b      	ands	r3, r1
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ae4:	23c0      	movs	r3, #192	; 0xc0
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aea:	2302      	movs	r3, #2
 8003aec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aee:	185b      	adds	r3, r3, r1
 8003af0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003af2:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003af6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af8:	f7fc fe48 	bl	800078c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003afc:	2200      	movs	r2, #0
 8003afe:	201b      	movs	r0, #27
 8003b00:	0011      	movs	r1, r2
 8003b02:	f7fc fced 	bl	80004e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b06:	201b      	movs	r0, #27
 8003b08:	f7fc fd14 	bl	8000534 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003b0c:	b006      	add	sp, #24
 8003b0e:	bd10      	pop	{r4, pc}
 8003b10:	40013800 	.word	0x40013800
 8003b14:	40021000 	.word	0x40021000

08003b18 <play_wav>:
#include "wav_player.h"

void play_wav(char wav_file[32]) {
    HAL_GPIO_WritePin(AUDIO_SD_N_0_GPIO_Port, AUDIO_SD_N_0_Pin, GPIO_PIN_SET);
 8003b18:	2180      	movs	r1, #128	; 0x80
void play_wav(char wav_file[32]) {
 8003b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
    HAL_GPIO_WritePin(AUDIO_SD_N_0_GPIO_Port, AUDIO_SD_N_0_Pin, GPIO_PIN_SET);
 8003b1c:	2201      	movs	r2, #1
void play_wav(char wav_file[32]) {
 8003b1e:	b089      	sub	sp, #36	; 0x24
 8003b20:	0004      	movs	r4, r0
    HAL_GPIO_WritePin(AUDIO_SD_N_0_GPIO_Port, AUDIO_SD_N_0_Pin, GPIO_PIN_SET);
 8003b22:	0189      	lsls	r1, r1, #6
 8003b24:	482e      	ldr	r0, [pc, #184]	; (8003be0 <play_wav+0xc8>)
 8003b26:	f7fc feed 	bl	8000904 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AUDIO_SD_N_1_GPIO_Port, AUDIO_SD_N_1_Pin, GPIO_PIN_SET);
 8003b2a:	2180      	movs	r1, #128	; 0x80
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	0209      	lsls	r1, r1, #8
 8003b30:	482b      	ldr	r0, [pc, #172]	; (8003be0 <play_wav+0xc8>)
 8003b32:	f7fc fee7 	bl	8000904 <HAL_GPIO_WritePin>
    FIL fil;                                // Create file object
    fr = f_open(&fil, wav_file, FA_READ);  // open file
 8003b36:	0021      	movs	r1, r4
 8003b38:	2201      	movs	r2, #1
 8003b3a:	a801      	add	r0, sp, #4
 8003b3c:	f7ff f966 	bl	8002e0c <f_open>
 8003b40:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <play_wav+0xcc>)
    //f_lseek(&fil, 76);                      // move to data region of .wav
    ptr = audio_buf_0;        // point to buffer 0 first
 8003b42:	4e29      	ldr	r6, [pc, #164]	; (8003be8 <play_wav+0xd0>)
 8003b44:	4d29      	ldr	r5, [pc, #164]	; (8003bec <play_wav+0xd4>)
    ptr_start = audio_buf_0;
 8003b46:	4c2a      	ldr	r4, [pc, #168]	; (8003bf0 <play_wav+0xd8>)
    fr = f_open(&fil, wav_file, FA_READ);  // open file
 8003b48:	7018      	strb	r0, [r3, #0]
    ptr = audio_buf_0;        // point to buffer 0 first
 8003b4a:	6035      	str	r5, [r6, #0]
    ptr_start = audio_buf_0;
 8003b4c:	6025      	str	r5, [r4, #0]

    while(1) {
        f_read(&fil, &wav_buf[0], 512, &bytes_read);
 8003b4e:	2280      	movs	r2, #128	; 0x80
 8003b50:	4f28      	ldr	r7, [pc, #160]	; (8003bf4 <play_wav+0xdc>)
 8003b52:	0092      	lsls	r2, r2, #2
 8003b54:	003b      	movs	r3, r7
 8003b56:	4928      	ldr	r1, [pc, #160]	; (8003bf8 <play_wav+0xe0>)
 8003b58:	a801      	add	r0, sp, #4
 8003b5a:	f7ff fbc3 	bl	80032e4 <f_read>

        //////////// End of File ////////////
        if (bytes_read < 512) {
 8003b5e:	4b27      	ldr	r3, [pc, #156]	; (8003bfc <play_wav+0xe4>)
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d810      	bhi.n	8003b88 <play_wav+0x70>
            f_close(&fil);
 8003b66:	a801      	add	r0, sp, #4
 8003b68:	f7ff fc42 	bl	80033f0 <f_close>
            HAL_GPIO_WritePin(AUDIO_SD_N_0_GPIO_Port, AUDIO_SD_N_0_Pin, GPIO_PIN_RESET);
 8003b6c:	2180      	movs	r1, #128	; 0x80
 8003b6e:	2200      	movs	r2, #0
 8003b70:	0189      	lsls	r1, r1, #6
 8003b72:	481b      	ldr	r0, [pc, #108]	; (8003be0 <play_wav+0xc8>)
 8003b74:	f7fc fec6 	bl	8000904 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(AUDIO_SD_N_1_GPIO_Port, AUDIO_SD_N_1_Pin, GPIO_PIN_RESET);
 8003b78:	2180      	movs	r1, #128	; 0x80
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	0209      	lsls	r1, r1, #8
 8003b7e:	4818      	ldr	r0, [pc, #96]	; (8003be0 <play_wav+0xc8>)
 8003b80:	f7fc fec0 	bl	8000904 <HAL_GPIO_WritePin>
            ptr = &audio_buf_0[0];
            ptr_start = &audio_buf_0[0];
        }
    }
    
}
 8003b84:	b009      	add	sp, #36	; 0x24
 8003b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (int ii=0; ii<511; ii+=2) {
 8003b88:	2300      	movs	r3, #0
 8003b8a:	6831      	ldr	r1, [r6, #0]
            *ptr = ((uint16_t)wav_buf[ii+1] << 8) | (uint16_t)wav_buf[ii];
 8003b8c:	4a1a      	ldr	r2, [pc, #104]	; (8003bf8 <play_wav+0xe0>)
 8003b8e:	18d7      	adds	r7, r2, r3
 8003b90:	787a      	ldrb	r2, [r7, #1]
 8003b92:	7838      	ldrb	r0, [r7, #0]
 8003b94:	0212      	lsls	r2, r2, #8
 8003b96:	4310      	orrs	r0, r2
 8003b98:	b200      	sxth	r0, r0
 8003b9a:	b282      	uxth	r2, r0
 8003b9c:	52ca      	strh	r2, [r1, r3]
 8003b9e:	0852      	lsrs	r2, r2, #1
            if (*ptr > 32767) {
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	da01      	bge.n	8003ba8 <play_wav+0x90>
            	*ptr = (*ptr >> 1) + 32768;
 8003ba4:	4816      	ldr	r0, [pc, #88]	; (8003c00 <play_wav+0xe8>)
 8003ba6:	1812      	adds	r2, r2, r0
            	*ptr = *ptr >> 1;
 8003ba8:	52ca      	strh	r2, [r1, r3]
        for (int ii=0; ii<511; ii+=2) {
 8003baa:	2280      	movs	r2, #128	; 0x80
 8003bac:	3302      	adds	r3, #2
 8003bae:	0092      	lsls	r2, r2, #2
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d1eb      	bne.n	8003b8c <play_wav+0x74>
        while (hi2s2.State != HAL_I2S_STATE_READY);    // Wait for I2S to be ready
 8003bb4:	4813      	ldr	r0, [pc, #76]	; (8003c04 <play_wav+0xec>)
 8003bb6:	1889      	adds	r1, r1, r2
 8003bb8:	0002      	movs	r2, r0
 8003bba:	6031      	str	r1, [r6, #0]
 8003bbc:	3235      	adds	r2, #53	; 0x35
 8003bbe:	7813      	ldrb	r3, [r2, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d1fc      	bne.n	8003bbe <play_wav+0xa6>
        HAL_I2S_Transmit_DMA(&hi2s2, ptr_start, 256);    // play buffer
 8003bc4:	2280      	movs	r2, #128	; 0x80
 8003bc6:	6821      	ldr	r1, [r4, #0]
 8003bc8:	0052      	lsls	r2, r2, #1
 8003bca:	f7fc ff23 	bl	8000a14 <HAL_I2S_Transmit_DMA>
        if (ptr_start == &audio_buf_0[0]) {
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	42ab      	cmp	r3, r5
 8003bd2:	d103      	bne.n	8003bdc <play_wav+0xc4>
            ptr = &audio_buf_1[0];
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <play_wav+0xf0>)
 8003bd6:	6033      	str	r3, [r6, #0]
            ptr_start = &audio_buf_1[0];
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	e7b8      	b.n	8003b4e <play_wav+0x36>
            ptr = &audio_buf_0[0];
 8003bdc:	6035      	str	r5, [r6, #0]
 8003bde:	e7b5      	b.n	8003b4c <play_wav+0x34>
 8003be0:	50000800 	.word	0x50000800
 8003be4:	20000930 	.word	0x20000930
 8003be8:	20000520 	.word	0x20000520
 8003bec:	20000724 	.word	0x20000724
 8003bf0:	20000928 	.word	0x20000928
 8003bf4:	2000092c 	.word	0x2000092c
 8003bf8:	20000931 	.word	0x20000931
 8003bfc:	000001ff 	.word	0x000001ff
 8003c00:	ffff8000 	.word	0xffff8000
 8003c04:	2000028c 	.word	0x2000028c
 8003c08:	20000524 	.word	0x20000524

08003c0c <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef* hi2s) {
    return;
}
 8003c0c:	4770      	bx	lr
	...

08003c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003c10:	480d      	ldr	r0, [pc, #52]	; (8003c48 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003c12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003c14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c16:	e003      	b.n	8003c20 <LoopCopyDataInit>

08003c18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003c1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c1e:	3104      	adds	r1, #4

08003c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c20:	480b      	ldr	r0, [pc, #44]	; (8003c50 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003c22:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003c24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c28:	d3f6      	bcc.n	8003c18 <CopyDataInit>
  ldr  r2, =_sbss
 8003c2a:	4a0b      	ldr	r2, [pc, #44]	; (8003c58 <LoopForever+0x12>)
  b  LoopFillZerobss
 8003c2c:	e002      	b.n	8003c34 <LoopFillZerobss>

08003c2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003c2e:	2300      	movs	r3, #0
  str  r3, [r2]
 8003c30:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c32:	3204      	adds	r2, #4

08003c34 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003c34:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <LoopForever+0x16>)
  cmp  r2, r3
 8003c36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c38:	d3f9      	bcc.n	8003c2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003c3a:	f7ff fee9 	bl	8003a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c3e:	f000 f811 	bl	8003c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c42:	f7ff fd7b 	bl	800373c <main>

08003c46 <LoopForever>:

LoopForever:
    b LoopForever
 8003c46:	e7fe      	b.n	8003c46 <LoopForever>
   ldr   r0, =_estack
 8003c48:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8003c4c:	080046d8 	.word	0x080046d8
  ldr  r0, =_sdata
 8003c50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c54:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8003c58:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8003c5c:	20000c9c 	.word	0x20000c9c

08003c60 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c60:	e7fe      	b.n	8003c60 <ADC1_COMP_IRQHandler>
	...

08003c64 <__libc_init_array>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	2600      	movs	r6, #0
 8003c68:	4d0c      	ldr	r5, [pc, #48]	; (8003c9c <__libc_init_array+0x38>)
 8003c6a:	4c0d      	ldr	r4, [pc, #52]	; (8003ca0 <__libc_init_array+0x3c>)
 8003c6c:	1b64      	subs	r4, r4, r5
 8003c6e:	10a4      	asrs	r4, r4, #2
 8003c70:	42a6      	cmp	r6, r4
 8003c72:	d109      	bne.n	8003c88 <__libc_init_array+0x24>
 8003c74:	2600      	movs	r6, #0
 8003c76:	f000 f82b 	bl	8003cd0 <_init>
 8003c7a:	4d0a      	ldr	r5, [pc, #40]	; (8003ca4 <__libc_init_array+0x40>)
 8003c7c:	4c0a      	ldr	r4, [pc, #40]	; (8003ca8 <__libc_init_array+0x44>)
 8003c7e:	1b64      	subs	r4, r4, r5
 8003c80:	10a4      	asrs	r4, r4, #2
 8003c82:	42a6      	cmp	r6, r4
 8003c84:	d105      	bne.n	8003c92 <__libc_init_array+0x2e>
 8003c86:	bd70      	pop	{r4, r5, r6, pc}
 8003c88:	00b3      	lsls	r3, r6, #2
 8003c8a:	58eb      	ldr	r3, [r5, r3]
 8003c8c:	4798      	blx	r3
 8003c8e:	3601      	adds	r6, #1
 8003c90:	e7ee      	b.n	8003c70 <__libc_init_array+0xc>
 8003c92:	00b3      	lsls	r3, r6, #2
 8003c94:	58eb      	ldr	r3, [r5, r3]
 8003c96:	4798      	blx	r3
 8003c98:	3601      	adds	r6, #1
 8003c9a:	e7f2      	b.n	8003c82 <__libc_init_array+0x1e>
 8003c9c:	080046d0 	.word	0x080046d0
 8003ca0:	080046d0 	.word	0x080046d0
 8003ca4:	080046d0 	.word	0x080046d0
 8003ca8:	080046d4 	.word	0x080046d4

08003cac <memcpy>:
 8003cac:	2300      	movs	r3, #0
 8003cae:	b510      	push	{r4, lr}
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d100      	bne.n	8003cb6 <memcpy+0xa>
 8003cb4:	bd10      	pop	{r4, pc}
 8003cb6:	5ccc      	ldrb	r4, [r1, r3]
 8003cb8:	54c4      	strb	r4, [r0, r3]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	e7f8      	b.n	8003cb0 <memcpy+0x4>

08003cbe <memset>:
 8003cbe:	0003      	movs	r3, r0
 8003cc0:	1812      	adds	r2, r2, r0
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d100      	bne.n	8003cc8 <memset+0xa>
 8003cc6:	4770      	bx	lr
 8003cc8:	7019      	strb	r1, [r3, #0]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	e7f9      	b.n	8003cc2 <memset+0x4>
	...

08003cd0 <_init>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd6:	bc08      	pop	{r3}
 8003cd8:	469e      	mov	lr, r3
 8003cda:	4770      	bx	lr

08003cdc <_fini>:
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce2:	bc08      	pop	{r3}
 8003ce4:	469e      	mov	lr, r3
 8003ce6:	4770      	bx	lr
