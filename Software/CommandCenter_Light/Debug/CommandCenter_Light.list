
CommandCenter_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cbc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006d7c  08006d7c  00016d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e68  08006e68  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006e68  08006e68  00016e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e70  08006e70  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e70  08006e70  00016e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e74  08006e74  00016e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000068  08006ee0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08006ee0  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f75  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033e0  00000000  00000000  00035005  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa8  00000000  00000000  000383e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e40  00000000  00000000  00039390  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016e46  00000000  00000000  0003a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f919  00000000  00000000  00051016  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c43e  00000000  00000000  0006092f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dcd6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a14  00000000  00000000  000dcde8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006d64 	.word	0x08006d64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006d64 	.word	0x08006d64

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f9a3 	bl	8000574 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f925 	bl	8000488 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f995 	bl	8000574 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f98b 	bl	8000574 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f933 	bl	80004d8 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f929 	bl	80004d8 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_uldivmod>:
 8000294:	2b00      	cmp	r3, #0
 8000296:	d111      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 8000298:	2a00      	cmp	r2, #0
 800029a:	d10f      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 800029c:	2900      	cmp	r1, #0
 800029e:	d100      	bne.n	80002a2 <__aeabi_uldivmod+0xe>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d002      	beq.n	80002aa <__aeabi_uldivmod+0x16>
 80002a4:	2100      	movs	r1, #0
 80002a6:	43c9      	mvns	r1, r1
 80002a8:	1c08      	adds	r0, r1, #0
 80002aa:	b407      	push	{r0, r1, r2}
 80002ac:	4802      	ldr	r0, [pc, #8]	; (80002b8 <__aeabi_uldivmod+0x24>)
 80002ae:	a102      	add	r1, pc, #8	; (adr r1, 80002b8 <__aeabi_uldivmod+0x24>)
 80002b0:	1840      	adds	r0, r0, r1
 80002b2:	9002      	str	r0, [sp, #8]
 80002b4:	bd03      	pop	{r0, r1, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	ffffff65 	.word	0xffffff65
 80002bc:	b403      	push	{r0, r1}
 80002be:	4668      	mov	r0, sp
 80002c0:	b501      	push	{r0, lr}
 80002c2:	9802      	ldr	r0, [sp, #8]
 80002c4:	f000 f81e 	bl	8000304 <__udivmoddi4>
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	469e      	mov	lr, r3
 80002cc:	b002      	add	sp, #8
 80002ce:	bc0c      	pop	{r2, r3}
 80002d0:	4770      	bx	lr
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_f2uiz>:
 80002d4:	219e      	movs	r1, #158	; 0x9e
 80002d6:	b510      	push	{r4, lr}
 80002d8:	05c9      	lsls	r1, r1, #23
 80002da:	1c04      	adds	r4, r0, #0
 80002dc:	f7ff ffd0 	bl	8000280 <__aeabi_fcmpge>
 80002e0:	2800      	cmp	r0, #0
 80002e2:	d103      	bne.n	80002ec <__aeabi_f2uiz+0x18>
 80002e4:	1c20      	adds	r0, r4, #0
 80002e6:	f000 fb59 	bl	800099c <__aeabi_f2iz>
 80002ea:	bd10      	pop	{r4, pc}
 80002ec:	219e      	movs	r1, #158	; 0x9e
 80002ee:	1c20      	adds	r0, r4, #0
 80002f0:	05c9      	lsls	r1, r1, #23
 80002f2:	f000 f98f 	bl	8000614 <__aeabi_fsub>
 80002f6:	f000 fb51 	bl	800099c <__aeabi_f2iz>
 80002fa:	2380      	movs	r3, #128	; 0x80
 80002fc:	061b      	lsls	r3, r3, #24
 80002fe:	469c      	mov	ip, r3
 8000300:	4460      	add	r0, ip
 8000302:	e7f2      	b.n	80002ea <__aeabi_f2uiz+0x16>

08000304 <__udivmoddi4>:
 8000304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000306:	464f      	mov	r7, r9
 8000308:	4646      	mov	r6, r8
 800030a:	46d6      	mov	lr, sl
 800030c:	b5c0      	push	{r6, r7, lr}
 800030e:	0004      	movs	r4, r0
 8000310:	b082      	sub	sp, #8
 8000312:	000d      	movs	r5, r1
 8000314:	4691      	mov	r9, r2
 8000316:	4698      	mov	r8, r3
 8000318:	428b      	cmp	r3, r1
 800031a:	d82f      	bhi.n	800037c <__udivmoddi4+0x78>
 800031c:	d02c      	beq.n	8000378 <__udivmoddi4+0x74>
 800031e:	4641      	mov	r1, r8
 8000320:	4648      	mov	r0, r9
 8000322:	f001 faa5 	bl	8001870 <__clzdi2>
 8000326:	0029      	movs	r1, r5
 8000328:	0006      	movs	r6, r0
 800032a:	0020      	movs	r0, r4
 800032c:	f001 faa0 	bl	8001870 <__clzdi2>
 8000330:	1a33      	subs	r3, r6, r0
 8000332:	469c      	mov	ip, r3
 8000334:	3b20      	subs	r3, #32
 8000336:	469a      	mov	sl, r3
 8000338:	d500      	bpl.n	800033c <__udivmoddi4+0x38>
 800033a:	e076      	b.n	800042a <__udivmoddi4+0x126>
 800033c:	464b      	mov	r3, r9
 800033e:	4652      	mov	r2, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001f      	movs	r7, r3
 8000344:	464b      	mov	r3, r9
 8000346:	4662      	mov	r2, ip
 8000348:	4093      	lsls	r3, r2
 800034a:	001e      	movs	r6, r3
 800034c:	42af      	cmp	r7, r5
 800034e:	d828      	bhi.n	80003a2 <__udivmoddi4+0x9e>
 8000350:	d025      	beq.n	800039e <__udivmoddi4+0x9a>
 8000352:	4653      	mov	r3, sl
 8000354:	1ba4      	subs	r4, r4, r6
 8000356:	41bd      	sbcs	r5, r7
 8000358:	2b00      	cmp	r3, #0
 800035a:	da00      	bge.n	800035e <__udivmoddi4+0x5a>
 800035c:	e07b      	b.n	8000456 <__udivmoddi4+0x152>
 800035e:	2200      	movs	r2, #0
 8000360:	2300      	movs	r3, #0
 8000362:	9200      	str	r2, [sp, #0]
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	4652      	mov	r2, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	2301      	movs	r3, #1
 8000370:	4662      	mov	r2, ip
 8000372:	4093      	lsls	r3, r2
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	e018      	b.n	80003aa <__udivmoddi4+0xa6>
 8000378:	4282      	cmp	r2, r0
 800037a:	d9d0      	bls.n	800031e <__udivmoddi4+0x1a>
 800037c:	2200      	movs	r2, #0
 800037e:	2300      	movs	r3, #0
 8000380:	9200      	str	r2, [sp, #0]
 8000382:	9301      	str	r3, [sp, #4]
 8000384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <__udivmoddi4+0x8a>
 800038a:	601c      	str	r4, [r3, #0]
 800038c:	605d      	str	r5, [r3, #4]
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	b002      	add	sp, #8
 8000394:	bc1c      	pop	{r2, r3, r4}
 8000396:	4690      	mov	r8, r2
 8000398:	4699      	mov	r9, r3
 800039a:	46a2      	mov	sl, r4
 800039c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800039e:	42a3      	cmp	r3, r4
 80003a0:	d9d7      	bls.n	8000352 <__udivmoddi4+0x4e>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4663      	mov	r3, ip
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0e9      	beq.n	8000384 <__udivmoddi4+0x80>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	4698      	mov	r8, r3
 80003b4:	4641      	mov	r1, r8
 80003b6:	0872      	lsrs	r2, r6, #1
 80003b8:	430a      	orrs	r2, r1
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	4666      	mov	r6, ip
 80003be:	e00e      	b.n	80003de <__udivmoddi4+0xda>
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d101      	bne.n	80003c8 <__udivmoddi4+0xc4>
 80003c4:	42a2      	cmp	r2, r4
 80003c6:	d80c      	bhi.n	80003e2 <__udivmoddi4+0xde>
 80003c8:	1aa4      	subs	r4, r4, r2
 80003ca:	419d      	sbcs	r5, r3
 80003cc:	2001      	movs	r0, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	3e01      	subs	r6, #1
 80003d6:	1824      	adds	r4, r4, r0
 80003d8:	414d      	adcs	r5, r1
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d006      	beq.n	80003ec <__udivmoddi4+0xe8>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d9ee      	bls.n	80003c0 <__udivmoddi4+0xbc>
 80003e2:	3e01      	subs	r6, #1
 80003e4:	1924      	adds	r4, r4, r4
 80003e6:	416d      	adcs	r5, r5
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d1f8      	bne.n	80003de <__udivmoddi4+0xda>
 80003ec:	9800      	ldr	r0, [sp, #0]
 80003ee:	9901      	ldr	r1, [sp, #4]
 80003f0:	4653      	mov	r3, sl
 80003f2:	1900      	adds	r0, r0, r4
 80003f4:	4169      	adcs	r1, r5
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db23      	blt.n	8000442 <__udivmoddi4+0x13e>
 80003fa:	002b      	movs	r3, r5
 80003fc:	4652      	mov	r2, sl
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	4664      	mov	r4, ip
 8000404:	40e2      	lsrs	r2, r4
 8000406:	001c      	movs	r4, r3
 8000408:	4653      	mov	r3, sl
 800040a:	0015      	movs	r5, r2
 800040c:	2b00      	cmp	r3, #0
 800040e:	db2d      	blt.n	800046c <__udivmoddi4+0x168>
 8000410:	0026      	movs	r6, r4
 8000412:	4657      	mov	r7, sl
 8000414:	40be      	lsls	r6, r7
 8000416:	0033      	movs	r3, r6
 8000418:	0026      	movs	r6, r4
 800041a:	4667      	mov	r7, ip
 800041c:	40be      	lsls	r6, r7
 800041e:	0032      	movs	r2, r6
 8000420:	1a80      	subs	r0, r0, r2
 8000422:	4199      	sbcs	r1, r3
 8000424:	9000      	str	r0, [sp, #0]
 8000426:	9101      	str	r1, [sp, #4]
 8000428:	e7ac      	b.n	8000384 <__udivmoddi4+0x80>
 800042a:	4662      	mov	r2, ip
 800042c:	2320      	movs	r3, #32
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	464a      	mov	r2, r9
 8000432:	40da      	lsrs	r2, r3
 8000434:	4661      	mov	r1, ip
 8000436:	0013      	movs	r3, r2
 8000438:	4642      	mov	r2, r8
 800043a:	408a      	lsls	r2, r1
 800043c:	0017      	movs	r7, r2
 800043e:	431f      	orrs	r7, r3
 8000440:	e780      	b.n	8000344 <__udivmoddi4+0x40>
 8000442:	4662      	mov	r2, ip
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4666      	mov	r6, ip
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4313      	orrs	r3, r2
 8000454:	e7d4      	b.n	8000400 <__udivmoddi4+0xfc>
 8000456:	4662      	mov	r2, ip
 8000458:	2320      	movs	r3, #32
 800045a:	2100      	movs	r1, #0
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	2200      	movs	r2, #0
 8000460:	9100      	str	r1, [sp, #0]
 8000462:	9201      	str	r2, [sp, #4]
 8000464:	2201      	movs	r2, #1
 8000466:	40da      	lsrs	r2, r3
 8000468:	9201      	str	r2, [sp, #4]
 800046a:	e780      	b.n	800036e <__udivmoddi4+0x6a>
 800046c:	2320      	movs	r3, #32
 800046e:	4662      	mov	r2, ip
 8000470:	0026      	movs	r6, r4
 8000472:	1a9b      	subs	r3, r3, r2
 8000474:	40de      	lsrs	r6, r3
 8000476:	002f      	movs	r7, r5
 8000478:	46b0      	mov	r8, r6
 800047a:	4666      	mov	r6, ip
 800047c:	40b7      	lsls	r7, r6
 800047e:	4646      	mov	r6, r8
 8000480:	003b      	movs	r3, r7
 8000482:	4333      	orrs	r3, r6
 8000484:	e7c8      	b.n	8000418 <__udivmoddi4+0x114>
 8000486:	46c0      	nop			; (mov r8, r8)

08000488 <__eqsf2>:
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	0042      	lsls	r2, r0, #1
 800048c:	024e      	lsls	r6, r1, #9
 800048e:	004c      	lsls	r4, r1, #1
 8000490:	0245      	lsls	r5, r0, #9
 8000492:	0a6d      	lsrs	r5, r5, #9
 8000494:	0e12      	lsrs	r2, r2, #24
 8000496:	0fc3      	lsrs	r3, r0, #31
 8000498:	0a76      	lsrs	r6, r6, #9
 800049a:	0e24      	lsrs	r4, r4, #24
 800049c:	0fc9      	lsrs	r1, r1, #31
 800049e:	2aff      	cmp	r2, #255	; 0xff
 80004a0:	d00f      	beq.n	80004c2 <__eqsf2+0x3a>
 80004a2:	2cff      	cmp	r4, #255	; 0xff
 80004a4:	d011      	beq.n	80004ca <__eqsf2+0x42>
 80004a6:	2001      	movs	r0, #1
 80004a8:	42a2      	cmp	r2, r4
 80004aa:	d000      	beq.n	80004ae <__eqsf2+0x26>
 80004ac:	bd70      	pop	{r4, r5, r6, pc}
 80004ae:	42b5      	cmp	r5, r6
 80004b0:	d1fc      	bne.n	80004ac <__eqsf2+0x24>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d00d      	beq.n	80004d2 <__eqsf2+0x4a>
 80004b6:	2a00      	cmp	r2, #0
 80004b8:	d1f8      	bne.n	80004ac <__eqsf2+0x24>
 80004ba:	0028      	movs	r0, r5
 80004bc:	1e45      	subs	r5, r0, #1
 80004be:	41a8      	sbcs	r0, r5
 80004c0:	e7f4      	b.n	80004ac <__eqsf2+0x24>
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d1f1      	bne.n	80004ac <__eqsf2+0x24>
 80004c8:	e7eb      	b.n	80004a2 <__eqsf2+0x1a>
 80004ca:	2001      	movs	r0, #1
 80004cc:	2e00      	cmp	r6, #0
 80004ce:	d1ed      	bne.n	80004ac <__eqsf2+0x24>
 80004d0:	e7e9      	b.n	80004a6 <__eqsf2+0x1e>
 80004d2:	2000      	movs	r0, #0
 80004d4:	e7ea      	b.n	80004ac <__eqsf2+0x24>
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__gesf2>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	004a      	lsls	r2, r1, #1
 80004dc:	024e      	lsls	r6, r1, #9
 80004de:	0245      	lsls	r5, r0, #9
 80004e0:	0044      	lsls	r4, r0, #1
 80004e2:	0a6d      	lsrs	r5, r5, #9
 80004e4:	0e24      	lsrs	r4, r4, #24
 80004e6:	0fc3      	lsrs	r3, r0, #31
 80004e8:	0a76      	lsrs	r6, r6, #9
 80004ea:	0e12      	lsrs	r2, r2, #24
 80004ec:	0fc9      	lsrs	r1, r1, #31
 80004ee:	2cff      	cmp	r4, #255	; 0xff
 80004f0:	d015      	beq.n	800051e <__gesf2+0x46>
 80004f2:	2aff      	cmp	r2, #255	; 0xff
 80004f4:	d00e      	beq.n	8000514 <__gesf2+0x3c>
 80004f6:	2c00      	cmp	r4, #0
 80004f8:	d115      	bne.n	8000526 <__gesf2+0x4e>
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	d101      	bne.n	8000502 <__gesf2+0x2a>
 80004fe:	2e00      	cmp	r6, #0
 8000500:	d01c      	beq.n	800053c <__gesf2+0x64>
 8000502:	2d00      	cmp	r5, #0
 8000504:	d014      	beq.n	8000530 <__gesf2+0x58>
 8000506:	428b      	cmp	r3, r1
 8000508:	d027      	beq.n	800055a <__gesf2+0x82>
 800050a:	2002      	movs	r0, #2
 800050c:	3b01      	subs	r3, #1
 800050e:	4018      	ands	r0, r3
 8000510:	3801      	subs	r0, #1
 8000512:	bd70      	pop	{r4, r5, r6, pc}
 8000514:	2e00      	cmp	r6, #0
 8000516:	d0ee      	beq.n	80004f6 <__gesf2+0x1e>
 8000518:	2002      	movs	r0, #2
 800051a:	4240      	negs	r0, r0
 800051c:	e7f9      	b.n	8000512 <__gesf2+0x3a>
 800051e:	2d00      	cmp	r5, #0
 8000520:	d1fa      	bne.n	8000518 <__gesf2+0x40>
 8000522:	2aff      	cmp	r2, #255	; 0xff
 8000524:	d00e      	beq.n	8000544 <__gesf2+0x6c>
 8000526:	2a00      	cmp	r2, #0
 8000528:	d10e      	bne.n	8000548 <__gesf2+0x70>
 800052a:	2e00      	cmp	r6, #0
 800052c:	d0ed      	beq.n	800050a <__gesf2+0x32>
 800052e:	e00b      	b.n	8000548 <__gesf2+0x70>
 8000530:	2301      	movs	r3, #1
 8000532:	3901      	subs	r1, #1
 8000534:	4399      	bics	r1, r3
 8000536:	0008      	movs	r0, r1
 8000538:	3001      	adds	r0, #1
 800053a:	e7ea      	b.n	8000512 <__gesf2+0x3a>
 800053c:	2000      	movs	r0, #0
 800053e:	2d00      	cmp	r5, #0
 8000540:	d0e7      	beq.n	8000512 <__gesf2+0x3a>
 8000542:	e7e2      	b.n	800050a <__gesf2+0x32>
 8000544:	2e00      	cmp	r6, #0
 8000546:	d1e7      	bne.n	8000518 <__gesf2+0x40>
 8000548:	428b      	cmp	r3, r1
 800054a:	d1de      	bne.n	800050a <__gesf2+0x32>
 800054c:	4294      	cmp	r4, r2
 800054e:	dd05      	ble.n	800055c <__gesf2+0x84>
 8000550:	2102      	movs	r1, #2
 8000552:	1e58      	subs	r0, r3, #1
 8000554:	4008      	ands	r0, r1
 8000556:	3801      	subs	r0, #1
 8000558:	e7db      	b.n	8000512 <__gesf2+0x3a>
 800055a:	2400      	movs	r4, #0
 800055c:	42a2      	cmp	r2, r4
 800055e:	dc04      	bgt.n	800056a <__gesf2+0x92>
 8000560:	42b5      	cmp	r5, r6
 8000562:	d8d2      	bhi.n	800050a <__gesf2+0x32>
 8000564:	2000      	movs	r0, #0
 8000566:	42b5      	cmp	r5, r6
 8000568:	d2d3      	bcs.n	8000512 <__gesf2+0x3a>
 800056a:	1e58      	subs	r0, r3, #1
 800056c:	2301      	movs	r3, #1
 800056e:	4398      	bics	r0, r3
 8000570:	3001      	adds	r0, #1
 8000572:	e7ce      	b.n	8000512 <__gesf2+0x3a>

08000574 <__lesf2>:
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	0042      	lsls	r2, r0, #1
 8000578:	0244      	lsls	r4, r0, #9
 800057a:	024d      	lsls	r5, r1, #9
 800057c:	0fc3      	lsrs	r3, r0, #31
 800057e:	0048      	lsls	r0, r1, #1
 8000580:	0a64      	lsrs	r4, r4, #9
 8000582:	0e12      	lsrs	r2, r2, #24
 8000584:	0a6d      	lsrs	r5, r5, #9
 8000586:	0e00      	lsrs	r0, r0, #24
 8000588:	0fc9      	lsrs	r1, r1, #31
 800058a:	2aff      	cmp	r2, #255	; 0xff
 800058c:	d012      	beq.n	80005b4 <__lesf2+0x40>
 800058e:	28ff      	cmp	r0, #255	; 0xff
 8000590:	d00c      	beq.n	80005ac <__lesf2+0x38>
 8000592:	2a00      	cmp	r2, #0
 8000594:	d112      	bne.n	80005bc <__lesf2+0x48>
 8000596:	2800      	cmp	r0, #0
 8000598:	d119      	bne.n	80005ce <__lesf2+0x5a>
 800059a:	2d00      	cmp	r5, #0
 800059c:	d117      	bne.n	80005ce <__lesf2+0x5a>
 800059e:	2c00      	cmp	r4, #0
 80005a0:	d02b      	beq.n	80005fa <__lesf2+0x86>
 80005a2:	2002      	movs	r0, #2
 80005a4:	3b01      	subs	r3, #1
 80005a6:	4018      	ands	r0, r3
 80005a8:	3801      	subs	r0, #1
 80005aa:	e026      	b.n	80005fa <__lesf2+0x86>
 80005ac:	2d00      	cmp	r5, #0
 80005ae:	d0f0      	beq.n	8000592 <__lesf2+0x1e>
 80005b0:	2002      	movs	r0, #2
 80005b2:	e022      	b.n	80005fa <__lesf2+0x86>
 80005b4:	2c00      	cmp	r4, #0
 80005b6:	d1fb      	bne.n	80005b0 <__lesf2+0x3c>
 80005b8:	28ff      	cmp	r0, #255	; 0xff
 80005ba:	d01f      	beq.n	80005fc <__lesf2+0x88>
 80005bc:	2800      	cmp	r0, #0
 80005be:	d11f      	bne.n	8000600 <__lesf2+0x8c>
 80005c0:	2d00      	cmp	r5, #0
 80005c2:	d11d      	bne.n	8000600 <__lesf2+0x8c>
 80005c4:	2002      	movs	r0, #2
 80005c6:	3b01      	subs	r3, #1
 80005c8:	4018      	ands	r0, r3
 80005ca:	3801      	subs	r0, #1
 80005cc:	e015      	b.n	80005fa <__lesf2+0x86>
 80005ce:	2c00      	cmp	r4, #0
 80005d0:	d00e      	beq.n	80005f0 <__lesf2+0x7c>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d1e5      	bne.n	80005a2 <__lesf2+0x2e>
 80005d6:	2200      	movs	r2, #0
 80005d8:	4290      	cmp	r0, r2
 80005da:	dc04      	bgt.n	80005e6 <__lesf2+0x72>
 80005dc:	42ac      	cmp	r4, r5
 80005de:	d8e0      	bhi.n	80005a2 <__lesf2+0x2e>
 80005e0:	2000      	movs	r0, #0
 80005e2:	42ac      	cmp	r4, r5
 80005e4:	d209      	bcs.n	80005fa <__lesf2+0x86>
 80005e6:	1e58      	subs	r0, r3, #1
 80005e8:	2301      	movs	r3, #1
 80005ea:	4398      	bics	r0, r3
 80005ec:	3001      	adds	r0, #1
 80005ee:	e004      	b.n	80005fa <__lesf2+0x86>
 80005f0:	2301      	movs	r3, #1
 80005f2:	3901      	subs	r1, #1
 80005f4:	4399      	bics	r1, r3
 80005f6:	0008      	movs	r0, r1
 80005f8:	3001      	adds	r0, #1
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	2d00      	cmp	r5, #0
 80005fe:	d1d7      	bne.n	80005b0 <__lesf2+0x3c>
 8000600:	428b      	cmp	r3, r1
 8000602:	d1ce      	bne.n	80005a2 <__lesf2+0x2e>
 8000604:	4282      	cmp	r2, r0
 8000606:	dde7      	ble.n	80005d8 <__lesf2+0x64>
 8000608:	2102      	movs	r1, #2
 800060a:	1e58      	subs	r0, r3, #1
 800060c:	4008      	ands	r0, r1
 800060e:	3801      	subs	r0, #1
 8000610:	e7f3      	b.n	80005fa <__lesf2+0x86>
 8000612:	46c0      	nop			; (mov r8, r8)

08000614 <__aeabi_fsub>:
 8000614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000616:	4647      	mov	r7, r8
 8000618:	46ce      	mov	lr, r9
 800061a:	0044      	lsls	r4, r0, #1
 800061c:	0fc2      	lsrs	r2, r0, #31
 800061e:	b580      	push	{r7, lr}
 8000620:	0247      	lsls	r7, r0, #9
 8000622:	0248      	lsls	r0, r1, #9
 8000624:	0a40      	lsrs	r0, r0, #9
 8000626:	4684      	mov	ip, r0
 8000628:	4666      	mov	r6, ip
 800062a:	0048      	lsls	r0, r1, #1
 800062c:	0a7f      	lsrs	r7, r7, #9
 800062e:	0e24      	lsrs	r4, r4, #24
 8000630:	00f6      	lsls	r6, r6, #3
 8000632:	0025      	movs	r5, r4
 8000634:	4690      	mov	r8, r2
 8000636:	00fb      	lsls	r3, r7, #3
 8000638:	0e00      	lsrs	r0, r0, #24
 800063a:	0fc9      	lsrs	r1, r1, #31
 800063c:	46b1      	mov	r9, r6
 800063e:	28ff      	cmp	r0, #255	; 0xff
 8000640:	d100      	bne.n	8000644 <__aeabi_fsub+0x30>
 8000642:	e085      	b.n	8000750 <__aeabi_fsub+0x13c>
 8000644:	2601      	movs	r6, #1
 8000646:	4071      	eors	r1, r6
 8000648:	1a26      	subs	r6, r4, r0
 800064a:	4291      	cmp	r1, r2
 800064c:	d057      	beq.n	80006fe <__aeabi_fsub+0xea>
 800064e:	2e00      	cmp	r6, #0
 8000650:	dd43      	ble.n	80006da <__aeabi_fsub+0xc6>
 8000652:	2800      	cmp	r0, #0
 8000654:	d000      	beq.n	8000658 <__aeabi_fsub+0x44>
 8000656:	e07f      	b.n	8000758 <__aeabi_fsub+0x144>
 8000658:	4649      	mov	r1, r9
 800065a:	2900      	cmp	r1, #0
 800065c:	d100      	bne.n	8000660 <__aeabi_fsub+0x4c>
 800065e:	e0aa      	b.n	80007b6 <__aeabi_fsub+0x1a2>
 8000660:	3e01      	subs	r6, #1
 8000662:	2e00      	cmp	r6, #0
 8000664:	d000      	beq.n	8000668 <__aeabi_fsub+0x54>
 8000666:	e0f7      	b.n	8000858 <__aeabi_fsub+0x244>
 8000668:	1a5b      	subs	r3, r3, r1
 800066a:	015a      	lsls	r2, r3, #5
 800066c:	d400      	bmi.n	8000670 <__aeabi_fsub+0x5c>
 800066e:	e08b      	b.n	8000788 <__aeabi_fsub+0x174>
 8000670:	019b      	lsls	r3, r3, #6
 8000672:	099c      	lsrs	r4, r3, #6
 8000674:	0020      	movs	r0, r4
 8000676:	f001 f8dd 	bl	8001834 <__clzsi2>
 800067a:	3805      	subs	r0, #5
 800067c:	4084      	lsls	r4, r0
 800067e:	4285      	cmp	r5, r0
 8000680:	dd00      	ble.n	8000684 <__aeabi_fsub+0x70>
 8000682:	e0d3      	b.n	800082c <__aeabi_fsub+0x218>
 8000684:	1b45      	subs	r5, r0, r5
 8000686:	0023      	movs	r3, r4
 8000688:	2020      	movs	r0, #32
 800068a:	3501      	adds	r5, #1
 800068c:	40eb      	lsrs	r3, r5
 800068e:	1b45      	subs	r5, r0, r5
 8000690:	40ac      	lsls	r4, r5
 8000692:	1e62      	subs	r2, r4, #1
 8000694:	4194      	sbcs	r4, r2
 8000696:	4323      	orrs	r3, r4
 8000698:	2407      	movs	r4, #7
 800069a:	2500      	movs	r5, #0
 800069c:	401c      	ands	r4, r3
 800069e:	2201      	movs	r2, #1
 80006a0:	4641      	mov	r1, r8
 80006a2:	400a      	ands	r2, r1
 80006a4:	2c00      	cmp	r4, #0
 80006a6:	d004      	beq.n	80006b2 <__aeabi_fsub+0x9e>
 80006a8:	210f      	movs	r1, #15
 80006aa:	4019      	ands	r1, r3
 80006ac:	2904      	cmp	r1, #4
 80006ae:	d000      	beq.n	80006b2 <__aeabi_fsub+0x9e>
 80006b0:	3304      	adds	r3, #4
 80006b2:	0159      	lsls	r1, r3, #5
 80006b4:	d400      	bmi.n	80006b8 <__aeabi_fsub+0xa4>
 80006b6:	e080      	b.n	80007ba <__aeabi_fsub+0x1a6>
 80006b8:	3501      	adds	r5, #1
 80006ba:	b2ec      	uxtb	r4, r5
 80006bc:	2dff      	cmp	r5, #255	; 0xff
 80006be:	d000      	beq.n	80006c2 <__aeabi_fsub+0xae>
 80006c0:	e0a3      	b.n	800080a <__aeabi_fsub+0x1f6>
 80006c2:	24ff      	movs	r4, #255	; 0xff
 80006c4:	2300      	movs	r3, #0
 80006c6:	025b      	lsls	r3, r3, #9
 80006c8:	05e4      	lsls	r4, r4, #23
 80006ca:	0a58      	lsrs	r0, r3, #9
 80006cc:	07d2      	lsls	r2, r2, #31
 80006ce:	4320      	orrs	r0, r4
 80006d0:	4310      	orrs	r0, r2
 80006d2:	bc0c      	pop	{r2, r3}
 80006d4:	4690      	mov	r8, r2
 80006d6:	4699      	mov	r9, r3
 80006d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006da:	2e00      	cmp	r6, #0
 80006dc:	d174      	bne.n	80007c8 <__aeabi_fsub+0x1b4>
 80006de:	1c60      	adds	r0, r4, #1
 80006e0:	b2c0      	uxtb	r0, r0
 80006e2:	2801      	cmp	r0, #1
 80006e4:	dc00      	bgt.n	80006e8 <__aeabi_fsub+0xd4>
 80006e6:	e0a7      	b.n	8000838 <__aeabi_fsub+0x224>
 80006e8:	464a      	mov	r2, r9
 80006ea:	1a9c      	subs	r4, r3, r2
 80006ec:	0162      	lsls	r2, r4, #5
 80006ee:	d500      	bpl.n	80006f2 <__aeabi_fsub+0xde>
 80006f0:	e0b6      	b.n	8000860 <__aeabi_fsub+0x24c>
 80006f2:	2c00      	cmp	r4, #0
 80006f4:	d1be      	bne.n	8000674 <__aeabi_fsub+0x60>
 80006f6:	2200      	movs	r2, #0
 80006f8:	2400      	movs	r4, #0
 80006fa:	2300      	movs	r3, #0
 80006fc:	e7e3      	b.n	80006c6 <__aeabi_fsub+0xb2>
 80006fe:	2e00      	cmp	r6, #0
 8000700:	dc00      	bgt.n	8000704 <__aeabi_fsub+0xf0>
 8000702:	e085      	b.n	8000810 <__aeabi_fsub+0x1fc>
 8000704:	2800      	cmp	r0, #0
 8000706:	d046      	beq.n	8000796 <__aeabi_fsub+0x182>
 8000708:	2cff      	cmp	r4, #255	; 0xff
 800070a:	d049      	beq.n	80007a0 <__aeabi_fsub+0x18c>
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	4648      	mov	r0, r9
 8000710:	04d2      	lsls	r2, r2, #19
 8000712:	4310      	orrs	r0, r2
 8000714:	4681      	mov	r9, r0
 8000716:	2201      	movs	r2, #1
 8000718:	2e1b      	cmp	r6, #27
 800071a:	dc09      	bgt.n	8000730 <__aeabi_fsub+0x11c>
 800071c:	2020      	movs	r0, #32
 800071e:	464c      	mov	r4, r9
 8000720:	1b80      	subs	r0, r0, r6
 8000722:	4084      	lsls	r4, r0
 8000724:	464a      	mov	r2, r9
 8000726:	0020      	movs	r0, r4
 8000728:	40f2      	lsrs	r2, r6
 800072a:	1e44      	subs	r4, r0, #1
 800072c:	41a0      	sbcs	r0, r4
 800072e:	4302      	orrs	r2, r0
 8000730:	189b      	adds	r3, r3, r2
 8000732:	015a      	lsls	r2, r3, #5
 8000734:	d528      	bpl.n	8000788 <__aeabi_fsub+0x174>
 8000736:	3501      	adds	r5, #1
 8000738:	2dff      	cmp	r5, #255	; 0xff
 800073a:	d100      	bne.n	800073e <__aeabi_fsub+0x12a>
 800073c:	e0a8      	b.n	8000890 <__aeabi_fsub+0x27c>
 800073e:	2201      	movs	r2, #1
 8000740:	2407      	movs	r4, #7
 8000742:	4994      	ldr	r1, [pc, #592]	; (8000994 <__aeabi_fsub+0x380>)
 8000744:	401a      	ands	r2, r3
 8000746:	085b      	lsrs	r3, r3, #1
 8000748:	400b      	ands	r3, r1
 800074a:	4313      	orrs	r3, r2
 800074c:	401c      	ands	r4, r3
 800074e:	e7a6      	b.n	800069e <__aeabi_fsub+0x8a>
 8000750:	2e00      	cmp	r6, #0
 8000752:	d000      	beq.n	8000756 <__aeabi_fsub+0x142>
 8000754:	e778      	b.n	8000648 <__aeabi_fsub+0x34>
 8000756:	e775      	b.n	8000644 <__aeabi_fsub+0x30>
 8000758:	2cff      	cmp	r4, #255	; 0xff
 800075a:	d054      	beq.n	8000806 <__aeabi_fsub+0x1f2>
 800075c:	2280      	movs	r2, #128	; 0x80
 800075e:	4649      	mov	r1, r9
 8000760:	04d2      	lsls	r2, r2, #19
 8000762:	4311      	orrs	r1, r2
 8000764:	4689      	mov	r9, r1
 8000766:	2201      	movs	r2, #1
 8000768:	2e1b      	cmp	r6, #27
 800076a:	dc09      	bgt.n	8000780 <__aeabi_fsub+0x16c>
 800076c:	2120      	movs	r1, #32
 800076e:	4648      	mov	r0, r9
 8000770:	1b89      	subs	r1, r1, r6
 8000772:	4088      	lsls	r0, r1
 8000774:	464a      	mov	r2, r9
 8000776:	0001      	movs	r1, r0
 8000778:	40f2      	lsrs	r2, r6
 800077a:	1e48      	subs	r0, r1, #1
 800077c:	4181      	sbcs	r1, r0
 800077e:	430a      	orrs	r2, r1
 8000780:	1a9b      	subs	r3, r3, r2
 8000782:	015a      	lsls	r2, r3, #5
 8000784:	d500      	bpl.n	8000788 <__aeabi_fsub+0x174>
 8000786:	e773      	b.n	8000670 <__aeabi_fsub+0x5c>
 8000788:	2201      	movs	r2, #1
 800078a:	4641      	mov	r1, r8
 800078c:	400a      	ands	r2, r1
 800078e:	0759      	lsls	r1, r3, #29
 8000790:	d000      	beq.n	8000794 <__aeabi_fsub+0x180>
 8000792:	e789      	b.n	80006a8 <__aeabi_fsub+0x94>
 8000794:	e011      	b.n	80007ba <__aeabi_fsub+0x1a6>
 8000796:	4648      	mov	r0, r9
 8000798:	2800      	cmp	r0, #0
 800079a:	d158      	bne.n	800084e <__aeabi_fsub+0x23a>
 800079c:	2cff      	cmp	r4, #255	; 0xff
 800079e:	d10c      	bne.n	80007ba <__aeabi_fsub+0x1a6>
 80007a0:	08db      	lsrs	r3, r3, #3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fsub+0x194>
 80007a6:	e78c      	b.n	80006c2 <__aeabi_fsub+0xae>
 80007a8:	2080      	movs	r0, #128	; 0x80
 80007aa:	03c0      	lsls	r0, r0, #15
 80007ac:	4303      	orrs	r3, r0
 80007ae:	025b      	lsls	r3, r3, #9
 80007b0:	0a5b      	lsrs	r3, r3, #9
 80007b2:	24ff      	movs	r4, #255	; 0xff
 80007b4:	e787      	b.n	80006c6 <__aeabi_fsub+0xb2>
 80007b6:	2cff      	cmp	r4, #255	; 0xff
 80007b8:	d025      	beq.n	8000806 <__aeabi_fsub+0x1f2>
 80007ba:	08db      	lsrs	r3, r3, #3
 80007bc:	2dff      	cmp	r5, #255	; 0xff
 80007be:	d0f0      	beq.n	80007a2 <__aeabi_fsub+0x18e>
 80007c0:	025b      	lsls	r3, r3, #9
 80007c2:	0a5b      	lsrs	r3, r3, #9
 80007c4:	b2ec      	uxtb	r4, r5
 80007c6:	e77e      	b.n	80006c6 <__aeabi_fsub+0xb2>
 80007c8:	2c00      	cmp	r4, #0
 80007ca:	d04d      	beq.n	8000868 <__aeabi_fsub+0x254>
 80007cc:	28ff      	cmp	r0, #255	; 0xff
 80007ce:	d018      	beq.n	8000802 <__aeabi_fsub+0x1ee>
 80007d0:	2480      	movs	r4, #128	; 0x80
 80007d2:	04e4      	lsls	r4, r4, #19
 80007d4:	4272      	negs	r2, r6
 80007d6:	4323      	orrs	r3, r4
 80007d8:	2a1b      	cmp	r2, #27
 80007da:	dd00      	ble.n	80007de <__aeabi_fsub+0x1ca>
 80007dc:	e0c4      	b.n	8000968 <__aeabi_fsub+0x354>
 80007de:	001c      	movs	r4, r3
 80007e0:	2520      	movs	r5, #32
 80007e2:	40d4      	lsrs	r4, r2
 80007e4:	1aaa      	subs	r2, r5, r2
 80007e6:	4093      	lsls	r3, r2
 80007e8:	1e5a      	subs	r2, r3, #1
 80007ea:	4193      	sbcs	r3, r2
 80007ec:	4323      	orrs	r3, r4
 80007ee:	464a      	mov	r2, r9
 80007f0:	0005      	movs	r5, r0
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	4688      	mov	r8, r1
 80007f6:	e738      	b.n	800066a <__aeabi_fsub+0x56>
 80007f8:	1c72      	adds	r2, r6, #1
 80007fa:	d0f8      	beq.n	80007ee <__aeabi_fsub+0x1da>
 80007fc:	43f2      	mvns	r2, r6
 80007fe:	28ff      	cmp	r0, #255	; 0xff
 8000800:	d1ea      	bne.n	80007d8 <__aeabi_fsub+0x1c4>
 8000802:	000a      	movs	r2, r1
 8000804:	464b      	mov	r3, r9
 8000806:	25ff      	movs	r5, #255	; 0xff
 8000808:	e7d7      	b.n	80007ba <__aeabi_fsub+0x1a6>
 800080a:	019b      	lsls	r3, r3, #6
 800080c:	0a5b      	lsrs	r3, r3, #9
 800080e:	e75a      	b.n	80006c6 <__aeabi_fsub+0xb2>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d141      	bne.n	8000898 <__aeabi_fsub+0x284>
 8000814:	1c65      	adds	r5, r4, #1
 8000816:	b2e9      	uxtb	r1, r5
 8000818:	2901      	cmp	r1, #1
 800081a:	dd45      	ble.n	80008a8 <__aeabi_fsub+0x294>
 800081c:	2dff      	cmp	r5, #255	; 0xff
 800081e:	d100      	bne.n	8000822 <__aeabi_fsub+0x20e>
 8000820:	e74f      	b.n	80006c2 <__aeabi_fsub+0xae>
 8000822:	2407      	movs	r4, #7
 8000824:	444b      	add	r3, r9
 8000826:	085b      	lsrs	r3, r3, #1
 8000828:	401c      	ands	r4, r3
 800082a:	e738      	b.n	800069e <__aeabi_fsub+0x8a>
 800082c:	2207      	movs	r2, #7
 800082e:	4b5a      	ldr	r3, [pc, #360]	; (8000998 <__aeabi_fsub+0x384>)
 8000830:	1a2d      	subs	r5, r5, r0
 8000832:	4023      	ands	r3, r4
 8000834:	4014      	ands	r4, r2
 8000836:	e732      	b.n	800069e <__aeabi_fsub+0x8a>
 8000838:	2c00      	cmp	r4, #0
 800083a:	d11d      	bne.n	8000878 <__aeabi_fsub+0x264>
 800083c:	2b00      	cmp	r3, #0
 800083e:	d17a      	bne.n	8000936 <__aeabi_fsub+0x322>
 8000840:	464b      	mov	r3, r9
 8000842:	2b00      	cmp	r3, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fsub+0x234>
 8000846:	e091      	b.n	800096c <__aeabi_fsub+0x358>
 8000848:	000a      	movs	r2, r1
 800084a:	2500      	movs	r5, #0
 800084c:	e7b5      	b.n	80007ba <__aeabi_fsub+0x1a6>
 800084e:	3e01      	subs	r6, #1
 8000850:	2e00      	cmp	r6, #0
 8000852:	d119      	bne.n	8000888 <__aeabi_fsub+0x274>
 8000854:	444b      	add	r3, r9
 8000856:	e76c      	b.n	8000732 <__aeabi_fsub+0x11e>
 8000858:	2cff      	cmp	r4, #255	; 0xff
 800085a:	d184      	bne.n	8000766 <__aeabi_fsub+0x152>
 800085c:	25ff      	movs	r5, #255	; 0xff
 800085e:	e7ac      	b.n	80007ba <__aeabi_fsub+0x1a6>
 8000860:	464a      	mov	r2, r9
 8000862:	4688      	mov	r8, r1
 8000864:	1ad4      	subs	r4, r2, r3
 8000866:	e705      	b.n	8000674 <__aeabi_fsub+0x60>
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1c5      	bne.n	80007f8 <__aeabi_fsub+0x1e4>
 800086c:	000a      	movs	r2, r1
 800086e:	28ff      	cmp	r0, #255	; 0xff
 8000870:	d0c8      	beq.n	8000804 <__aeabi_fsub+0x1f0>
 8000872:	0005      	movs	r5, r0
 8000874:	464b      	mov	r3, r9
 8000876:	e7a0      	b.n	80007ba <__aeabi_fsub+0x1a6>
 8000878:	2b00      	cmp	r3, #0
 800087a:	d149      	bne.n	8000910 <__aeabi_fsub+0x2fc>
 800087c:	464b      	mov	r3, r9
 800087e:	2b00      	cmp	r3, #0
 8000880:	d077      	beq.n	8000972 <__aeabi_fsub+0x35e>
 8000882:	000a      	movs	r2, r1
 8000884:	25ff      	movs	r5, #255	; 0xff
 8000886:	e798      	b.n	80007ba <__aeabi_fsub+0x1a6>
 8000888:	2cff      	cmp	r4, #255	; 0xff
 800088a:	d000      	beq.n	800088e <__aeabi_fsub+0x27a>
 800088c:	e743      	b.n	8000716 <__aeabi_fsub+0x102>
 800088e:	e787      	b.n	80007a0 <__aeabi_fsub+0x18c>
 8000890:	000a      	movs	r2, r1
 8000892:	24ff      	movs	r4, #255	; 0xff
 8000894:	2300      	movs	r3, #0
 8000896:	e716      	b.n	80006c6 <__aeabi_fsub+0xb2>
 8000898:	2c00      	cmp	r4, #0
 800089a:	d115      	bne.n	80008c8 <__aeabi_fsub+0x2b4>
 800089c:	2b00      	cmp	r3, #0
 800089e:	d157      	bne.n	8000950 <__aeabi_fsub+0x33c>
 80008a0:	28ff      	cmp	r0, #255	; 0xff
 80008a2:	d1e6      	bne.n	8000872 <__aeabi_fsub+0x25e>
 80008a4:	464b      	mov	r3, r9
 80008a6:	e77b      	b.n	80007a0 <__aeabi_fsub+0x18c>
 80008a8:	2c00      	cmp	r4, #0
 80008aa:	d120      	bne.n	80008ee <__aeabi_fsub+0x2da>
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d057      	beq.n	8000960 <__aeabi_fsub+0x34c>
 80008b0:	4649      	mov	r1, r9
 80008b2:	2900      	cmp	r1, #0
 80008b4:	d053      	beq.n	800095e <__aeabi_fsub+0x34a>
 80008b6:	444b      	add	r3, r9
 80008b8:	015a      	lsls	r2, r3, #5
 80008ba:	d568      	bpl.n	800098e <__aeabi_fsub+0x37a>
 80008bc:	2407      	movs	r4, #7
 80008be:	4a36      	ldr	r2, [pc, #216]	; (8000998 <__aeabi_fsub+0x384>)
 80008c0:	401c      	ands	r4, r3
 80008c2:	2501      	movs	r5, #1
 80008c4:	4013      	ands	r3, r2
 80008c6:	e6ea      	b.n	800069e <__aeabi_fsub+0x8a>
 80008c8:	28ff      	cmp	r0, #255	; 0xff
 80008ca:	d0eb      	beq.n	80008a4 <__aeabi_fsub+0x290>
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	04d2      	lsls	r2, r2, #19
 80008d0:	4276      	negs	r6, r6
 80008d2:	4313      	orrs	r3, r2
 80008d4:	2e1b      	cmp	r6, #27
 80008d6:	dc53      	bgt.n	8000980 <__aeabi_fsub+0x36c>
 80008d8:	2520      	movs	r5, #32
 80008da:	1bad      	subs	r5, r5, r6
 80008dc:	001a      	movs	r2, r3
 80008de:	40ab      	lsls	r3, r5
 80008e0:	40f2      	lsrs	r2, r6
 80008e2:	1e5c      	subs	r4, r3, #1
 80008e4:	41a3      	sbcs	r3, r4
 80008e6:	4313      	orrs	r3, r2
 80008e8:	444b      	add	r3, r9
 80008ea:	0005      	movs	r5, r0
 80008ec:	e721      	b.n	8000732 <__aeabi_fsub+0x11e>
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0d8      	beq.n	80008a4 <__aeabi_fsub+0x290>
 80008f2:	4649      	mov	r1, r9
 80008f4:	2900      	cmp	r1, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_fsub+0x2e6>
 80008f8:	e752      	b.n	80007a0 <__aeabi_fsub+0x18c>
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	03c9      	lsls	r1, r1, #15
 80008fe:	420f      	tst	r7, r1
 8000900:	d100      	bne.n	8000904 <__aeabi_fsub+0x2f0>
 8000902:	e74d      	b.n	80007a0 <__aeabi_fsub+0x18c>
 8000904:	4660      	mov	r0, ip
 8000906:	4208      	tst	r0, r1
 8000908:	d000      	beq.n	800090c <__aeabi_fsub+0x2f8>
 800090a:	e749      	b.n	80007a0 <__aeabi_fsub+0x18c>
 800090c:	464b      	mov	r3, r9
 800090e:	e747      	b.n	80007a0 <__aeabi_fsub+0x18c>
 8000910:	4648      	mov	r0, r9
 8000912:	25ff      	movs	r5, #255	; 0xff
 8000914:	2800      	cmp	r0, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fsub+0x306>
 8000918:	e74f      	b.n	80007ba <__aeabi_fsub+0x1a6>
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4217      	tst	r7, r2
 8000920:	d004      	beq.n	800092c <__aeabi_fsub+0x318>
 8000922:	4660      	mov	r0, ip
 8000924:	4210      	tst	r0, r2
 8000926:	d101      	bne.n	800092c <__aeabi_fsub+0x318>
 8000928:	464b      	mov	r3, r9
 800092a:	4688      	mov	r8, r1
 800092c:	2201      	movs	r2, #1
 800092e:	4641      	mov	r1, r8
 8000930:	25ff      	movs	r5, #255	; 0xff
 8000932:	400a      	ands	r2, r1
 8000934:	e741      	b.n	80007ba <__aeabi_fsub+0x1a6>
 8000936:	4648      	mov	r0, r9
 8000938:	2800      	cmp	r0, #0
 800093a:	d01f      	beq.n	800097c <__aeabi_fsub+0x368>
 800093c:	1a1a      	subs	r2, r3, r0
 800093e:	0150      	lsls	r0, r2, #5
 8000940:	d520      	bpl.n	8000984 <__aeabi_fsub+0x370>
 8000942:	464a      	mov	r2, r9
 8000944:	2407      	movs	r4, #7
 8000946:	1ad3      	subs	r3, r2, r3
 8000948:	401c      	ands	r4, r3
 800094a:	4688      	mov	r8, r1
 800094c:	2500      	movs	r5, #0
 800094e:	e6a6      	b.n	800069e <__aeabi_fsub+0x8a>
 8000950:	1c74      	adds	r4, r6, #1
 8000952:	d0c9      	beq.n	80008e8 <__aeabi_fsub+0x2d4>
 8000954:	43f6      	mvns	r6, r6
 8000956:	28ff      	cmp	r0, #255	; 0xff
 8000958:	d1bc      	bne.n	80008d4 <__aeabi_fsub+0x2c0>
 800095a:	464b      	mov	r3, r9
 800095c:	e720      	b.n	80007a0 <__aeabi_fsub+0x18c>
 800095e:	4699      	mov	r9, r3
 8000960:	464b      	mov	r3, r9
 8000962:	2500      	movs	r5, #0
 8000964:	08db      	lsrs	r3, r3, #3
 8000966:	e72b      	b.n	80007c0 <__aeabi_fsub+0x1ac>
 8000968:	2301      	movs	r3, #1
 800096a:	e740      	b.n	80007ee <__aeabi_fsub+0x1da>
 800096c:	2200      	movs	r2, #0
 800096e:	2300      	movs	r3, #0
 8000970:	e6a9      	b.n	80006c6 <__aeabi_fsub+0xb2>
 8000972:	2380      	movs	r3, #128	; 0x80
 8000974:	2200      	movs	r2, #0
 8000976:	03db      	lsls	r3, r3, #15
 8000978:	24ff      	movs	r4, #255	; 0xff
 800097a:	e6a4      	b.n	80006c6 <__aeabi_fsub+0xb2>
 800097c:	2500      	movs	r5, #0
 800097e:	e71c      	b.n	80007ba <__aeabi_fsub+0x1a6>
 8000980:	2301      	movs	r3, #1
 8000982:	e7b1      	b.n	80008e8 <__aeabi_fsub+0x2d4>
 8000984:	2a00      	cmp	r2, #0
 8000986:	d0f1      	beq.n	800096c <__aeabi_fsub+0x358>
 8000988:	0013      	movs	r3, r2
 800098a:	2500      	movs	r5, #0
 800098c:	e6fc      	b.n	8000788 <__aeabi_fsub+0x174>
 800098e:	2500      	movs	r5, #0
 8000990:	e6fa      	b.n	8000788 <__aeabi_fsub+0x174>
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	7dffffff 	.word	0x7dffffff
 8000998:	fbffffff 	.word	0xfbffffff

0800099c <__aeabi_f2iz>:
 800099c:	0241      	lsls	r1, r0, #9
 800099e:	0042      	lsls	r2, r0, #1
 80009a0:	0fc3      	lsrs	r3, r0, #31
 80009a2:	0a49      	lsrs	r1, r1, #9
 80009a4:	0e12      	lsrs	r2, r2, #24
 80009a6:	2000      	movs	r0, #0
 80009a8:	2a7e      	cmp	r2, #126	; 0x7e
 80009aa:	d90d      	bls.n	80009c8 <__aeabi_f2iz+0x2c>
 80009ac:	2a9d      	cmp	r2, #157	; 0x9d
 80009ae:	d80c      	bhi.n	80009ca <__aeabi_f2iz+0x2e>
 80009b0:	2080      	movs	r0, #128	; 0x80
 80009b2:	0400      	lsls	r0, r0, #16
 80009b4:	4301      	orrs	r1, r0
 80009b6:	2a95      	cmp	r2, #149	; 0x95
 80009b8:	dc0a      	bgt.n	80009d0 <__aeabi_f2iz+0x34>
 80009ba:	2096      	movs	r0, #150	; 0x96
 80009bc:	1a82      	subs	r2, r0, r2
 80009be:	40d1      	lsrs	r1, r2
 80009c0:	4248      	negs	r0, r1
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d100      	bne.n	80009c8 <__aeabi_f2iz+0x2c>
 80009c6:	0008      	movs	r0, r1
 80009c8:	4770      	bx	lr
 80009ca:	4a03      	ldr	r2, [pc, #12]	; (80009d8 <__aeabi_f2iz+0x3c>)
 80009cc:	1898      	adds	r0, r3, r2
 80009ce:	e7fb      	b.n	80009c8 <__aeabi_f2iz+0x2c>
 80009d0:	3a96      	subs	r2, #150	; 0x96
 80009d2:	4091      	lsls	r1, r2
 80009d4:	e7f4      	b.n	80009c0 <__aeabi_f2iz+0x24>
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	7fffffff 	.word	0x7fffffff

080009dc <__aeabi_ui2f>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	1e04      	subs	r4, r0, #0
 80009e0:	d034      	beq.n	8000a4c <__aeabi_ui2f+0x70>
 80009e2:	f000 ff27 	bl	8001834 <__clzsi2>
 80009e6:	229e      	movs	r2, #158	; 0x9e
 80009e8:	1a12      	subs	r2, r2, r0
 80009ea:	2a96      	cmp	r2, #150	; 0x96
 80009ec:	dc07      	bgt.n	80009fe <__aeabi_ui2f+0x22>
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	2808      	cmp	r0, #8
 80009f2:	dd2e      	ble.n	8000a52 <__aeabi_ui2f+0x76>
 80009f4:	3808      	subs	r0, #8
 80009f6:	4084      	lsls	r4, r0
 80009f8:	0260      	lsls	r0, r4, #9
 80009fa:	0a40      	lsrs	r0, r0, #9
 80009fc:	e021      	b.n	8000a42 <__aeabi_ui2f+0x66>
 80009fe:	2a99      	cmp	r2, #153	; 0x99
 8000a00:	dd09      	ble.n	8000a16 <__aeabi_ui2f+0x3a>
 8000a02:	0003      	movs	r3, r0
 8000a04:	0021      	movs	r1, r4
 8000a06:	331b      	adds	r3, #27
 8000a08:	4099      	lsls	r1, r3
 8000a0a:	1e4b      	subs	r3, r1, #1
 8000a0c:	4199      	sbcs	r1, r3
 8000a0e:	2305      	movs	r3, #5
 8000a10:	1a1b      	subs	r3, r3, r0
 8000a12:	40dc      	lsrs	r4, r3
 8000a14:	430c      	orrs	r4, r1
 8000a16:	2805      	cmp	r0, #5
 8000a18:	dd01      	ble.n	8000a1e <__aeabi_ui2f+0x42>
 8000a1a:	1f43      	subs	r3, r0, #5
 8000a1c:	409c      	lsls	r4, r3
 8000a1e:	0023      	movs	r3, r4
 8000a20:	490d      	ldr	r1, [pc, #52]	; (8000a58 <__aeabi_ui2f+0x7c>)
 8000a22:	400b      	ands	r3, r1
 8000a24:	0765      	lsls	r5, r4, #29
 8000a26:	d009      	beq.n	8000a3c <__aeabi_ui2f+0x60>
 8000a28:	250f      	movs	r5, #15
 8000a2a:	402c      	ands	r4, r5
 8000a2c:	2c04      	cmp	r4, #4
 8000a2e:	d005      	beq.n	8000a3c <__aeabi_ui2f+0x60>
 8000a30:	3304      	adds	r3, #4
 8000a32:	015c      	lsls	r4, r3, #5
 8000a34:	d502      	bpl.n	8000a3c <__aeabi_ui2f+0x60>
 8000a36:	229f      	movs	r2, #159	; 0x9f
 8000a38:	400b      	ands	r3, r1
 8000a3a:	1a12      	subs	r2, r2, r0
 8000a3c:	019b      	lsls	r3, r3, #6
 8000a3e:	0a58      	lsrs	r0, r3, #9
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	0240      	lsls	r0, r0, #9
 8000a44:	05d2      	lsls	r2, r2, #23
 8000a46:	0a40      	lsrs	r0, r0, #9
 8000a48:	4310      	orrs	r0, r2
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2000      	movs	r0, #0
 8000a50:	e7f7      	b.n	8000a42 <__aeabi_ui2f+0x66>
 8000a52:	0260      	lsls	r0, r4, #9
 8000a54:	0a40      	lsrs	r0, r0, #9
 8000a56:	e7f4      	b.n	8000a42 <__aeabi_ui2f+0x66>
 8000a58:	fbffffff 	.word	0xfbffffff

08000a5c <__aeabi_ddiv>:
 8000a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5e:	4657      	mov	r7, sl
 8000a60:	46de      	mov	lr, fp
 8000a62:	464e      	mov	r6, r9
 8000a64:	4645      	mov	r5, r8
 8000a66:	b5e0      	push	{r5, r6, r7, lr}
 8000a68:	4683      	mov	fp, r0
 8000a6a:	0007      	movs	r7, r0
 8000a6c:	030e      	lsls	r6, r1, #12
 8000a6e:	0048      	lsls	r0, r1, #1
 8000a70:	b085      	sub	sp, #20
 8000a72:	4692      	mov	sl, r2
 8000a74:	001c      	movs	r4, r3
 8000a76:	0b36      	lsrs	r6, r6, #12
 8000a78:	0d40      	lsrs	r0, r0, #21
 8000a7a:	0fcd      	lsrs	r5, r1, #31
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_ddiv+0x26>
 8000a80:	e09d      	b.n	8000bbe <__aeabi_ddiv+0x162>
 8000a82:	4b95      	ldr	r3, [pc, #596]	; (8000cd8 <__aeabi_ddiv+0x27c>)
 8000a84:	4298      	cmp	r0, r3
 8000a86:	d039      	beq.n	8000afc <__aeabi_ddiv+0xa0>
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	00f6      	lsls	r6, r6, #3
 8000a8c:	041b      	lsls	r3, r3, #16
 8000a8e:	431e      	orrs	r6, r3
 8000a90:	4a92      	ldr	r2, [pc, #584]	; (8000cdc <__aeabi_ddiv+0x280>)
 8000a92:	0f7b      	lsrs	r3, r7, #29
 8000a94:	4333      	orrs	r3, r6
 8000a96:	4699      	mov	r9, r3
 8000a98:	4694      	mov	ip, r2
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	4463      	add	r3, ip
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	2600      	movs	r6, #0
 8000aa4:	00ff      	lsls	r7, r7, #3
 8000aa6:	9302      	str	r3, [sp, #8]
 8000aa8:	0323      	lsls	r3, r4, #12
 8000aaa:	0b1b      	lsrs	r3, r3, #12
 8000aac:	4698      	mov	r8, r3
 8000aae:	0063      	lsls	r3, r4, #1
 8000ab0:	0fe4      	lsrs	r4, r4, #31
 8000ab2:	4652      	mov	r2, sl
 8000ab4:	0d5b      	lsrs	r3, r3, #21
 8000ab6:	9401      	str	r4, [sp, #4]
 8000ab8:	d100      	bne.n	8000abc <__aeabi_ddiv+0x60>
 8000aba:	e0b3      	b.n	8000c24 <__aeabi_ddiv+0x1c8>
 8000abc:	4986      	ldr	r1, [pc, #536]	; (8000cd8 <__aeabi_ddiv+0x27c>)
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_ddiv+0x68>
 8000ac2:	e09e      	b.n	8000c02 <__aeabi_ddiv+0x1a6>
 8000ac4:	4642      	mov	r2, r8
 8000ac6:	00d1      	lsls	r1, r2, #3
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0412      	lsls	r2, r2, #16
 8000acc:	430a      	orrs	r2, r1
 8000ace:	4651      	mov	r1, sl
 8000ad0:	0f49      	lsrs	r1, r1, #29
 8000ad2:	4311      	orrs	r1, r2
 8000ad4:	468b      	mov	fp, r1
 8000ad6:	4981      	ldr	r1, [pc, #516]	; (8000cdc <__aeabi_ddiv+0x280>)
 8000ad8:	4652      	mov	r2, sl
 8000ada:	468c      	mov	ip, r1
 8000adc:	9900      	ldr	r1, [sp, #0]
 8000ade:	4463      	add	r3, ip
 8000ae0:	1acb      	subs	r3, r1, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	00d2      	lsls	r2, r2, #3
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	002b      	movs	r3, r5
 8000aea:	4063      	eors	r3, r4
 8000aec:	469a      	mov	sl, r3
 8000aee:	2e0f      	cmp	r6, #15
 8000af0:	d900      	bls.n	8000af4 <__aeabi_ddiv+0x98>
 8000af2:	e105      	b.n	8000d00 <__aeabi_ddiv+0x2a4>
 8000af4:	4b7a      	ldr	r3, [pc, #488]	; (8000ce0 <__aeabi_ddiv+0x284>)
 8000af6:	00b6      	lsls	r6, r6, #2
 8000af8:	599b      	ldr	r3, [r3, r6]
 8000afa:	469f      	mov	pc, r3
 8000afc:	465b      	mov	r3, fp
 8000afe:	4333      	orrs	r3, r6
 8000b00:	4699      	mov	r9, r3
 8000b02:	d000      	beq.n	8000b06 <__aeabi_ddiv+0xaa>
 8000b04:	e0b8      	b.n	8000c78 <__aeabi_ddiv+0x21c>
 8000b06:	2302      	movs	r3, #2
 8000b08:	2608      	movs	r6, #8
 8000b0a:	2700      	movs	r7, #0
 8000b0c:	9000      	str	r0, [sp, #0]
 8000b0e:	9302      	str	r3, [sp, #8]
 8000b10:	e7ca      	b.n	8000aa8 <__aeabi_ddiv+0x4c>
 8000b12:	46cb      	mov	fp, r9
 8000b14:	003a      	movs	r2, r7
 8000b16:	9902      	ldr	r1, [sp, #8]
 8000b18:	9501      	str	r5, [sp, #4]
 8000b1a:	9b01      	ldr	r3, [sp, #4]
 8000b1c:	469a      	mov	sl, r3
 8000b1e:	2902      	cmp	r1, #2
 8000b20:	d027      	beq.n	8000b72 <__aeabi_ddiv+0x116>
 8000b22:	2903      	cmp	r1, #3
 8000b24:	d100      	bne.n	8000b28 <__aeabi_ddiv+0xcc>
 8000b26:	e280      	b.n	800102a <__aeabi_ddiv+0x5ce>
 8000b28:	2901      	cmp	r1, #1
 8000b2a:	d044      	beq.n	8000bb6 <__aeabi_ddiv+0x15a>
 8000b2c:	496d      	ldr	r1, [pc, #436]	; (8000ce4 <__aeabi_ddiv+0x288>)
 8000b2e:	9b00      	ldr	r3, [sp, #0]
 8000b30:	468c      	mov	ip, r1
 8000b32:	4463      	add	r3, ip
 8000b34:	001c      	movs	r4, r3
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	dd38      	ble.n	8000bac <__aeabi_ddiv+0x150>
 8000b3a:	0753      	lsls	r3, r2, #29
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_ddiv+0xe4>
 8000b3e:	e213      	b.n	8000f68 <__aeabi_ddiv+0x50c>
 8000b40:	08d2      	lsrs	r2, r2, #3
 8000b42:	465b      	mov	r3, fp
 8000b44:	01db      	lsls	r3, r3, #7
 8000b46:	d509      	bpl.n	8000b5c <__aeabi_ddiv+0x100>
 8000b48:	4659      	mov	r1, fp
 8000b4a:	4b67      	ldr	r3, [pc, #412]	; (8000ce8 <__aeabi_ddiv+0x28c>)
 8000b4c:	4019      	ands	r1, r3
 8000b4e:	468b      	mov	fp, r1
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	00c9      	lsls	r1, r1, #3
 8000b54:	468c      	mov	ip, r1
 8000b56:	9b00      	ldr	r3, [sp, #0]
 8000b58:	4463      	add	r3, ip
 8000b5a:	001c      	movs	r4, r3
 8000b5c:	4b63      	ldr	r3, [pc, #396]	; (8000cec <__aeabi_ddiv+0x290>)
 8000b5e:	429c      	cmp	r4, r3
 8000b60:	dc07      	bgt.n	8000b72 <__aeabi_ddiv+0x116>
 8000b62:	465b      	mov	r3, fp
 8000b64:	0564      	lsls	r4, r4, #21
 8000b66:	075f      	lsls	r7, r3, #29
 8000b68:	025b      	lsls	r3, r3, #9
 8000b6a:	4317      	orrs	r7, r2
 8000b6c:	0b1b      	lsrs	r3, r3, #12
 8000b6e:	0d62      	lsrs	r2, r4, #21
 8000b70:	e002      	b.n	8000b78 <__aeabi_ddiv+0x11c>
 8000b72:	2300      	movs	r3, #0
 8000b74:	2700      	movs	r7, #0
 8000b76:	4a58      	ldr	r2, [pc, #352]	; (8000cd8 <__aeabi_ddiv+0x27c>)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	031b      	lsls	r3, r3, #12
 8000b7c:	0b1c      	lsrs	r4, r3, #12
 8000b7e:	0d0b      	lsrs	r3, r1, #20
 8000b80:	051b      	lsls	r3, r3, #20
 8000b82:	4323      	orrs	r3, r4
 8000b84:	0514      	lsls	r4, r2, #20
 8000b86:	4a5a      	ldr	r2, [pc, #360]	; (8000cf0 <__aeabi_ddiv+0x294>)
 8000b88:	0038      	movs	r0, r7
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	431c      	orrs	r4, r3
 8000b8e:	4653      	mov	r3, sl
 8000b90:	0064      	lsls	r4, r4, #1
 8000b92:	07db      	lsls	r3, r3, #31
 8000b94:	0864      	lsrs	r4, r4, #1
 8000b96:	431c      	orrs	r4, r3
 8000b98:	0021      	movs	r1, r4
 8000b9a:	b005      	add	sp, #20
 8000b9c:	bc3c      	pop	{r2, r3, r4, r5}
 8000b9e:	4690      	mov	r8, r2
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	46a2      	mov	sl, r4
 8000ba4:	46ab      	mov	fp, r5
 8000ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4252      	negs	r2, r2
 8000bac:	2301      	movs	r3, #1
 8000bae:	1b1b      	subs	r3, r3, r4
 8000bb0:	2b38      	cmp	r3, #56	; 0x38
 8000bb2:	dc00      	bgt.n	8000bb6 <__aeabi_ddiv+0x15a>
 8000bb4:	e1ad      	b.n	8000f12 <__aeabi_ddiv+0x4b6>
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2300      	movs	r3, #0
 8000bba:	2700      	movs	r7, #0
 8000bbc:	e7dc      	b.n	8000b78 <__aeabi_ddiv+0x11c>
 8000bbe:	465b      	mov	r3, fp
 8000bc0:	4333      	orrs	r3, r6
 8000bc2:	4699      	mov	r9, r3
 8000bc4:	d05e      	beq.n	8000c84 <__aeabi_ddiv+0x228>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_ddiv+0x170>
 8000bca:	e18a      	b.n	8000ee2 <__aeabi_ddiv+0x486>
 8000bcc:	0030      	movs	r0, r6
 8000bce:	f000 fe31 	bl	8001834 <__clzsi2>
 8000bd2:	0003      	movs	r3, r0
 8000bd4:	3b0b      	subs	r3, #11
 8000bd6:	2b1c      	cmp	r3, #28
 8000bd8:	dd00      	ble.n	8000bdc <__aeabi_ddiv+0x180>
 8000bda:	e17b      	b.n	8000ed4 <__aeabi_ddiv+0x478>
 8000bdc:	221d      	movs	r2, #29
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	465a      	mov	r2, fp
 8000be2:	0001      	movs	r1, r0
 8000be4:	40da      	lsrs	r2, r3
 8000be6:	3908      	subs	r1, #8
 8000be8:	408e      	lsls	r6, r1
 8000bea:	0013      	movs	r3, r2
 8000bec:	465f      	mov	r7, fp
 8000bee:	4333      	orrs	r3, r6
 8000bf0:	4699      	mov	r9, r3
 8000bf2:	408f      	lsls	r7, r1
 8000bf4:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <__aeabi_ddiv+0x298>)
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	1a1b      	subs	r3, r3, r0
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	9302      	str	r3, [sp, #8]
 8000c00:	e752      	b.n	8000aa8 <__aeabi_ddiv+0x4c>
 8000c02:	4641      	mov	r1, r8
 8000c04:	4653      	mov	r3, sl
 8000c06:	430b      	orrs	r3, r1
 8000c08:	493b      	ldr	r1, [pc, #236]	; (8000cf8 <__aeabi_ddiv+0x29c>)
 8000c0a:	469b      	mov	fp, r3
 8000c0c:	468c      	mov	ip, r1
 8000c0e:	9b00      	ldr	r3, [sp, #0]
 8000c10:	4463      	add	r3, ip
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	465b      	mov	r3, fp
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d13b      	bne.n	8000c92 <__aeabi_ddiv+0x236>
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	431e      	orrs	r6, r3
 8000c20:	2102      	movs	r1, #2
 8000c22:	e761      	b.n	8000ae8 <__aeabi_ddiv+0x8c>
 8000c24:	4643      	mov	r3, r8
 8000c26:	4313      	orrs	r3, r2
 8000c28:	469b      	mov	fp, r3
 8000c2a:	d037      	beq.n	8000c9c <__aeabi_ddiv+0x240>
 8000c2c:	4643      	mov	r3, r8
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d100      	bne.n	8000c34 <__aeabi_ddiv+0x1d8>
 8000c32:	e162      	b.n	8000efa <__aeabi_ddiv+0x49e>
 8000c34:	4640      	mov	r0, r8
 8000c36:	f000 fdfd 	bl	8001834 <__clzsi2>
 8000c3a:	0003      	movs	r3, r0
 8000c3c:	3b0b      	subs	r3, #11
 8000c3e:	2b1c      	cmp	r3, #28
 8000c40:	dd00      	ble.n	8000c44 <__aeabi_ddiv+0x1e8>
 8000c42:	e153      	b.n	8000eec <__aeabi_ddiv+0x490>
 8000c44:	0002      	movs	r2, r0
 8000c46:	4641      	mov	r1, r8
 8000c48:	3a08      	subs	r2, #8
 8000c4a:	4091      	lsls	r1, r2
 8000c4c:	4688      	mov	r8, r1
 8000c4e:	211d      	movs	r1, #29
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	4651      	mov	r1, sl
 8000c54:	40d9      	lsrs	r1, r3
 8000c56:	000b      	movs	r3, r1
 8000c58:	4641      	mov	r1, r8
 8000c5a:	430b      	orrs	r3, r1
 8000c5c:	469b      	mov	fp, r3
 8000c5e:	4653      	mov	r3, sl
 8000c60:	4093      	lsls	r3, r2
 8000c62:	001a      	movs	r2, r3
 8000c64:	9b00      	ldr	r3, [sp, #0]
 8000c66:	4925      	ldr	r1, [pc, #148]	; (8000cfc <__aeabi_ddiv+0x2a0>)
 8000c68:	469c      	mov	ip, r3
 8000c6a:	4460      	add	r0, ip
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	468c      	mov	ip, r1
 8000c70:	4463      	add	r3, ip
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2100      	movs	r1, #0
 8000c76:	e737      	b.n	8000ae8 <__aeabi_ddiv+0x8c>
 8000c78:	2303      	movs	r3, #3
 8000c7a:	46b1      	mov	r9, r6
 8000c7c:	9000      	str	r0, [sp, #0]
 8000c7e:	260c      	movs	r6, #12
 8000c80:	9302      	str	r3, [sp, #8]
 8000c82:	e711      	b.n	8000aa8 <__aeabi_ddiv+0x4c>
 8000c84:	2300      	movs	r3, #0
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	2604      	movs	r6, #4
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	9302      	str	r3, [sp, #8]
 8000c90:	e70a      	b.n	8000aa8 <__aeabi_ddiv+0x4c>
 8000c92:	2303      	movs	r3, #3
 8000c94:	46c3      	mov	fp, r8
 8000c96:	431e      	orrs	r6, r3
 8000c98:	2103      	movs	r1, #3
 8000c9a:	e725      	b.n	8000ae8 <__aeabi_ddiv+0x8c>
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	431e      	orrs	r6, r3
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	e720      	b.n	8000ae8 <__aeabi_ddiv+0x8c>
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	469a      	mov	sl, r3
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	2700      	movs	r7, #0
 8000cae:	031b      	lsls	r3, r3, #12
 8000cb0:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <__aeabi_ddiv+0x27c>)
 8000cb2:	e761      	b.n	8000b78 <__aeabi_ddiv+0x11c>
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	4649      	mov	r1, r9
 8000cb8:	031b      	lsls	r3, r3, #12
 8000cba:	4219      	tst	r1, r3
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_ddiv+0x264>
 8000cbe:	e0e2      	b.n	8000e86 <__aeabi_ddiv+0x42a>
 8000cc0:	4659      	mov	r1, fp
 8000cc2:	4219      	tst	r1, r3
 8000cc4:	d000      	beq.n	8000cc8 <__aeabi_ddiv+0x26c>
 8000cc6:	e0de      	b.n	8000e86 <__aeabi_ddiv+0x42a>
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	031b      	lsls	r3, r3, #12
 8000ccc:	0017      	movs	r7, r2
 8000cce:	0b1b      	lsrs	r3, r3, #12
 8000cd0:	46a2      	mov	sl, r4
 8000cd2:	4a01      	ldr	r2, [pc, #4]	; (8000cd8 <__aeabi_ddiv+0x27c>)
 8000cd4:	e750      	b.n	8000b78 <__aeabi_ddiv+0x11c>
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	000007ff 	.word	0x000007ff
 8000cdc:	fffffc01 	.word	0xfffffc01
 8000ce0:	08006d7c 	.word	0x08006d7c
 8000ce4:	000003ff 	.word	0x000003ff
 8000ce8:	feffffff 	.word	0xfeffffff
 8000cec:	000007fe 	.word	0x000007fe
 8000cf0:	800fffff 	.word	0x800fffff
 8000cf4:	fffffc0d 	.word	0xfffffc0d
 8000cf8:	fffff801 	.word	0xfffff801
 8000cfc:	000003f3 	.word	0x000003f3
 8000d00:	45d9      	cmp	r9, fp
 8000d02:	d900      	bls.n	8000d06 <__aeabi_ddiv+0x2aa>
 8000d04:	e0cb      	b.n	8000e9e <__aeabi_ddiv+0x442>
 8000d06:	d100      	bne.n	8000d0a <__aeabi_ddiv+0x2ae>
 8000d08:	e0c6      	b.n	8000e98 <__aeabi_ddiv+0x43c>
 8000d0a:	003c      	movs	r4, r7
 8000d0c:	4648      	mov	r0, r9
 8000d0e:	2700      	movs	r7, #0
 8000d10:	9b00      	ldr	r3, [sp, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	465b      	mov	r3, fp
 8000d18:	0e16      	lsrs	r6, r2, #24
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	431e      	orrs	r6, r3
 8000d1e:	0213      	lsls	r3, r2, #8
 8000d20:	4698      	mov	r8, r3
 8000d22:	0433      	lsls	r3, r6, #16
 8000d24:	0c1b      	lsrs	r3, r3, #16
 8000d26:	4699      	mov	r9, r3
 8000d28:	0c31      	lsrs	r1, r6, #16
 8000d2a:	9101      	str	r1, [sp, #4]
 8000d2c:	f7ff fa72 	bl	8000214 <__aeabi_uidivmod>
 8000d30:	464a      	mov	r2, r9
 8000d32:	4342      	muls	r2, r0
 8000d34:	040b      	lsls	r3, r1, #16
 8000d36:	0c21      	lsrs	r1, r4, #16
 8000d38:	0005      	movs	r5, r0
 8000d3a:	4319      	orrs	r1, r3
 8000d3c:	428a      	cmp	r2, r1
 8000d3e:	d907      	bls.n	8000d50 <__aeabi_ddiv+0x2f4>
 8000d40:	1989      	adds	r1, r1, r6
 8000d42:	3d01      	subs	r5, #1
 8000d44:	428e      	cmp	r6, r1
 8000d46:	d803      	bhi.n	8000d50 <__aeabi_ddiv+0x2f4>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	d901      	bls.n	8000d50 <__aeabi_ddiv+0x2f4>
 8000d4c:	1e85      	subs	r5, r0, #2
 8000d4e:	1989      	adds	r1, r1, r6
 8000d50:	1a88      	subs	r0, r1, r2
 8000d52:	9901      	ldr	r1, [sp, #4]
 8000d54:	f7ff fa5e 	bl	8000214 <__aeabi_uidivmod>
 8000d58:	0409      	lsls	r1, r1, #16
 8000d5a:	468c      	mov	ip, r1
 8000d5c:	464a      	mov	r2, r9
 8000d5e:	0421      	lsls	r1, r4, #16
 8000d60:	4664      	mov	r4, ip
 8000d62:	4342      	muls	r2, r0
 8000d64:	0c09      	lsrs	r1, r1, #16
 8000d66:	0003      	movs	r3, r0
 8000d68:	4321      	orrs	r1, r4
 8000d6a:	428a      	cmp	r2, r1
 8000d6c:	d904      	bls.n	8000d78 <__aeabi_ddiv+0x31c>
 8000d6e:	1989      	adds	r1, r1, r6
 8000d70:	3b01      	subs	r3, #1
 8000d72:	428e      	cmp	r6, r1
 8000d74:	d800      	bhi.n	8000d78 <__aeabi_ddiv+0x31c>
 8000d76:	e0f1      	b.n	8000f5c <__aeabi_ddiv+0x500>
 8000d78:	042d      	lsls	r5, r5, #16
 8000d7a:	431d      	orrs	r5, r3
 8000d7c:	46ab      	mov	fp, r5
 8000d7e:	4643      	mov	r3, r8
 8000d80:	1a89      	subs	r1, r1, r2
 8000d82:	4642      	mov	r2, r8
 8000d84:	0c28      	lsrs	r0, r5, #16
 8000d86:	0412      	lsls	r2, r2, #16
 8000d88:	0c1d      	lsrs	r5, r3, #16
 8000d8a:	465b      	mov	r3, fp
 8000d8c:	0c14      	lsrs	r4, r2, #16
 8000d8e:	0022      	movs	r2, r4
 8000d90:	041b      	lsls	r3, r3, #16
 8000d92:	0c1b      	lsrs	r3, r3, #16
 8000d94:	435a      	muls	r2, r3
 8000d96:	9403      	str	r4, [sp, #12]
 8000d98:	436b      	muls	r3, r5
 8000d9a:	4344      	muls	r4, r0
 8000d9c:	9502      	str	r5, [sp, #8]
 8000d9e:	4368      	muls	r0, r5
 8000da0:	191b      	adds	r3, r3, r4
 8000da2:	0c15      	lsrs	r5, r2, #16
 8000da4:	18eb      	adds	r3, r5, r3
 8000da6:	429c      	cmp	r4, r3
 8000da8:	d903      	bls.n	8000db2 <__aeabi_ddiv+0x356>
 8000daa:	2480      	movs	r4, #128	; 0x80
 8000dac:	0264      	lsls	r4, r4, #9
 8000dae:	46a4      	mov	ip, r4
 8000db0:	4460      	add	r0, ip
 8000db2:	0c1c      	lsrs	r4, r3, #16
 8000db4:	0415      	lsls	r5, r2, #16
 8000db6:	041b      	lsls	r3, r3, #16
 8000db8:	0c2d      	lsrs	r5, r5, #16
 8000dba:	1820      	adds	r0, r4, r0
 8000dbc:	195d      	adds	r5, r3, r5
 8000dbe:	4281      	cmp	r1, r0
 8000dc0:	d377      	bcc.n	8000eb2 <__aeabi_ddiv+0x456>
 8000dc2:	d073      	beq.n	8000eac <__aeabi_ddiv+0x450>
 8000dc4:	1a0c      	subs	r4, r1, r0
 8000dc6:	4aa2      	ldr	r2, [pc, #648]	; (8001050 <__aeabi_ddiv+0x5f4>)
 8000dc8:	1b7d      	subs	r5, r7, r5
 8000dca:	42af      	cmp	r7, r5
 8000dcc:	41bf      	sbcs	r7, r7
 8000dce:	4694      	mov	ip, r2
 8000dd0:	9b00      	ldr	r3, [sp, #0]
 8000dd2:	427f      	negs	r7, r7
 8000dd4:	4463      	add	r3, ip
 8000dd6:	1be0      	subs	r0, r4, r7
 8000dd8:	001c      	movs	r4, r3
 8000dda:	4286      	cmp	r6, r0
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_ddiv+0x384>
 8000dde:	e0db      	b.n	8000f98 <__aeabi_ddiv+0x53c>
 8000de0:	9901      	ldr	r1, [sp, #4]
 8000de2:	f7ff fa17 	bl	8000214 <__aeabi_uidivmod>
 8000de6:	464a      	mov	r2, r9
 8000de8:	4342      	muls	r2, r0
 8000dea:	040b      	lsls	r3, r1, #16
 8000dec:	0c29      	lsrs	r1, r5, #16
 8000dee:	0007      	movs	r7, r0
 8000df0:	4319      	orrs	r1, r3
 8000df2:	428a      	cmp	r2, r1
 8000df4:	d907      	bls.n	8000e06 <__aeabi_ddiv+0x3aa>
 8000df6:	1989      	adds	r1, r1, r6
 8000df8:	3f01      	subs	r7, #1
 8000dfa:	428e      	cmp	r6, r1
 8000dfc:	d803      	bhi.n	8000e06 <__aeabi_ddiv+0x3aa>
 8000dfe:	428a      	cmp	r2, r1
 8000e00:	d901      	bls.n	8000e06 <__aeabi_ddiv+0x3aa>
 8000e02:	1e87      	subs	r7, r0, #2
 8000e04:	1989      	adds	r1, r1, r6
 8000e06:	1a88      	subs	r0, r1, r2
 8000e08:	9901      	ldr	r1, [sp, #4]
 8000e0a:	f7ff fa03 	bl	8000214 <__aeabi_uidivmod>
 8000e0e:	0409      	lsls	r1, r1, #16
 8000e10:	464a      	mov	r2, r9
 8000e12:	4689      	mov	r9, r1
 8000e14:	0429      	lsls	r1, r5, #16
 8000e16:	464d      	mov	r5, r9
 8000e18:	4342      	muls	r2, r0
 8000e1a:	0c09      	lsrs	r1, r1, #16
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	4329      	orrs	r1, r5
 8000e20:	428a      	cmp	r2, r1
 8000e22:	d907      	bls.n	8000e34 <__aeabi_ddiv+0x3d8>
 8000e24:	1989      	adds	r1, r1, r6
 8000e26:	3b01      	subs	r3, #1
 8000e28:	428e      	cmp	r6, r1
 8000e2a:	d803      	bhi.n	8000e34 <__aeabi_ddiv+0x3d8>
 8000e2c:	428a      	cmp	r2, r1
 8000e2e:	d901      	bls.n	8000e34 <__aeabi_ddiv+0x3d8>
 8000e30:	1e83      	subs	r3, r0, #2
 8000e32:	1989      	adds	r1, r1, r6
 8000e34:	043f      	lsls	r7, r7, #16
 8000e36:	1a89      	subs	r1, r1, r2
 8000e38:	003a      	movs	r2, r7
 8000e3a:	9f03      	ldr	r7, [sp, #12]
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	0038      	movs	r0, r7
 8000e40:	0413      	lsls	r3, r2, #16
 8000e42:	0c1b      	lsrs	r3, r3, #16
 8000e44:	4358      	muls	r0, r3
 8000e46:	4681      	mov	r9, r0
 8000e48:	9802      	ldr	r0, [sp, #8]
 8000e4a:	0c15      	lsrs	r5, r2, #16
 8000e4c:	436f      	muls	r7, r5
 8000e4e:	4343      	muls	r3, r0
 8000e50:	4345      	muls	r5, r0
 8000e52:	4648      	mov	r0, r9
 8000e54:	0c00      	lsrs	r0, r0, #16
 8000e56:	4684      	mov	ip, r0
 8000e58:	19db      	adds	r3, r3, r7
 8000e5a:	4463      	add	r3, ip
 8000e5c:	429f      	cmp	r7, r3
 8000e5e:	d903      	bls.n	8000e68 <__aeabi_ddiv+0x40c>
 8000e60:	2080      	movs	r0, #128	; 0x80
 8000e62:	0240      	lsls	r0, r0, #9
 8000e64:	4684      	mov	ip, r0
 8000e66:	4465      	add	r5, ip
 8000e68:	4648      	mov	r0, r9
 8000e6a:	0c1f      	lsrs	r7, r3, #16
 8000e6c:	0400      	lsls	r0, r0, #16
 8000e6e:	041b      	lsls	r3, r3, #16
 8000e70:	0c00      	lsrs	r0, r0, #16
 8000e72:	197d      	adds	r5, r7, r5
 8000e74:	1818      	adds	r0, r3, r0
 8000e76:	42a9      	cmp	r1, r5
 8000e78:	d200      	bcs.n	8000e7c <__aeabi_ddiv+0x420>
 8000e7a:	e084      	b.n	8000f86 <__aeabi_ddiv+0x52a>
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_ddiv+0x424>
 8000e7e:	e07f      	b.n	8000f80 <__aeabi_ddiv+0x524>
 8000e80:	2301      	movs	r3, #1
 8000e82:	431a      	orrs	r2, r3
 8000e84:	e657      	b.n	8000b36 <__aeabi_ddiv+0xda>
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	464a      	mov	r2, r9
 8000e8a:	031b      	lsls	r3, r3, #12
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	031b      	lsls	r3, r3, #12
 8000e90:	0b1b      	lsrs	r3, r3, #12
 8000e92:	46aa      	mov	sl, r5
 8000e94:	4a6f      	ldr	r2, [pc, #444]	; (8001054 <__aeabi_ddiv+0x5f8>)
 8000e96:	e66f      	b.n	8000b78 <__aeabi_ddiv+0x11c>
 8000e98:	42ba      	cmp	r2, r7
 8000e9a:	d900      	bls.n	8000e9e <__aeabi_ddiv+0x442>
 8000e9c:	e735      	b.n	8000d0a <__aeabi_ddiv+0x2ae>
 8000e9e:	464b      	mov	r3, r9
 8000ea0:	07dc      	lsls	r4, r3, #31
 8000ea2:	0858      	lsrs	r0, r3, #1
 8000ea4:	087b      	lsrs	r3, r7, #1
 8000ea6:	431c      	orrs	r4, r3
 8000ea8:	07ff      	lsls	r7, r7, #31
 8000eaa:	e734      	b.n	8000d16 <__aeabi_ddiv+0x2ba>
 8000eac:	2400      	movs	r4, #0
 8000eae:	42af      	cmp	r7, r5
 8000eb0:	d289      	bcs.n	8000dc6 <__aeabi_ddiv+0x36a>
 8000eb2:	4447      	add	r7, r8
 8000eb4:	4547      	cmp	r7, r8
 8000eb6:	41a4      	sbcs	r4, r4
 8000eb8:	465b      	mov	r3, fp
 8000eba:	4264      	negs	r4, r4
 8000ebc:	19a4      	adds	r4, r4, r6
 8000ebe:	1864      	adds	r4, r4, r1
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	42a6      	cmp	r6, r4
 8000ec4:	d21e      	bcs.n	8000f04 <__aeabi_ddiv+0x4a8>
 8000ec6:	42a0      	cmp	r0, r4
 8000ec8:	d86d      	bhi.n	8000fa6 <__aeabi_ddiv+0x54a>
 8000eca:	d100      	bne.n	8000ece <__aeabi_ddiv+0x472>
 8000ecc:	e0b6      	b.n	800103c <__aeabi_ddiv+0x5e0>
 8000ece:	1a24      	subs	r4, r4, r0
 8000ed0:	469b      	mov	fp, r3
 8000ed2:	e778      	b.n	8000dc6 <__aeabi_ddiv+0x36a>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	465a      	mov	r2, fp
 8000ed8:	3b28      	subs	r3, #40	; 0x28
 8000eda:	409a      	lsls	r2, r3
 8000edc:	2700      	movs	r7, #0
 8000ede:	4691      	mov	r9, r2
 8000ee0:	e688      	b.n	8000bf4 <__aeabi_ddiv+0x198>
 8000ee2:	4658      	mov	r0, fp
 8000ee4:	f000 fca6 	bl	8001834 <__clzsi2>
 8000ee8:	3020      	adds	r0, #32
 8000eea:	e672      	b.n	8000bd2 <__aeabi_ddiv+0x176>
 8000eec:	0003      	movs	r3, r0
 8000eee:	4652      	mov	r2, sl
 8000ef0:	3b28      	subs	r3, #40	; 0x28
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	4693      	mov	fp, r2
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	e6b4      	b.n	8000c64 <__aeabi_ddiv+0x208>
 8000efa:	4650      	mov	r0, sl
 8000efc:	f000 fc9a 	bl	8001834 <__clzsi2>
 8000f00:	3020      	adds	r0, #32
 8000f02:	e69a      	b.n	8000c3a <__aeabi_ddiv+0x1de>
 8000f04:	42a6      	cmp	r6, r4
 8000f06:	d1e2      	bne.n	8000ece <__aeabi_ddiv+0x472>
 8000f08:	45b8      	cmp	r8, r7
 8000f0a:	d9dc      	bls.n	8000ec6 <__aeabi_ddiv+0x46a>
 8000f0c:	1a34      	subs	r4, r6, r0
 8000f0e:	469b      	mov	fp, r3
 8000f10:	e759      	b.n	8000dc6 <__aeabi_ddiv+0x36a>
 8000f12:	2b1f      	cmp	r3, #31
 8000f14:	dc65      	bgt.n	8000fe2 <__aeabi_ddiv+0x586>
 8000f16:	4c50      	ldr	r4, [pc, #320]	; (8001058 <__aeabi_ddiv+0x5fc>)
 8000f18:	9900      	ldr	r1, [sp, #0]
 8000f1a:	46a4      	mov	ip, r4
 8000f1c:	465c      	mov	r4, fp
 8000f1e:	4461      	add	r1, ip
 8000f20:	0008      	movs	r0, r1
 8000f22:	408c      	lsls	r4, r1
 8000f24:	0011      	movs	r1, r2
 8000f26:	4082      	lsls	r2, r0
 8000f28:	40d9      	lsrs	r1, r3
 8000f2a:	1e50      	subs	r0, r2, #1
 8000f2c:	4182      	sbcs	r2, r0
 8000f2e:	430c      	orrs	r4, r1
 8000f30:	4314      	orrs	r4, r2
 8000f32:	465a      	mov	r2, fp
 8000f34:	40da      	lsrs	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	0762      	lsls	r2, r4, #29
 8000f3a:	d009      	beq.n	8000f50 <__aeabi_ddiv+0x4f4>
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	4022      	ands	r2, r4
 8000f40:	2a04      	cmp	r2, #4
 8000f42:	d005      	beq.n	8000f50 <__aeabi_ddiv+0x4f4>
 8000f44:	0022      	movs	r2, r4
 8000f46:	1d14      	adds	r4, r2, #4
 8000f48:	4294      	cmp	r4, r2
 8000f4a:	4189      	sbcs	r1, r1
 8000f4c:	4249      	negs	r1, r1
 8000f4e:	185b      	adds	r3, r3, r1
 8000f50:	021a      	lsls	r2, r3, #8
 8000f52:	d562      	bpl.n	800101a <__aeabi_ddiv+0x5be>
 8000f54:	2201      	movs	r2, #1
 8000f56:	2300      	movs	r3, #0
 8000f58:	2700      	movs	r7, #0
 8000f5a:	e60d      	b.n	8000b78 <__aeabi_ddiv+0x11c>
 8000f5c:	428a      	cmp	r2, r1
 8000f5e:	d800      	bhi.n	8000f62 <__aeabi_ddiv+0x506>
 8000f60:	e70a      	b.n	8000d78 <__aeabi_ddiv+0x31c>
 8000f62:	1e83      	subs	r3, r0, #2
 8000f64:	1989      	adds	r1, r1, r6
 8000f66:	e707      	b.n	8000d78 <__aeabi_ddiv+0x31c>
 8000f68:	230f      	movs	r3, #15
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_ddiv+0x516>
 8000f70:	e5e6      	b.n	8000b40 <__aeabi_ddiv+0xe4>
 8000f72:	1d17      	adds	r7, r2, #4
 8000f74:	4297      	cmp	r7, r2
 8000f76:	4192      	sbcs	r2, r2
 8000f78:	4253      	negs	r3, r2
 8000f7a:	449b      	add	fp, r3
 8000f7c:	08fa      	lsrs	r2, r7, #3
 8000f7e:	e5e0      	b.n	8000b42 <__aeabi_ddiv+0xe6>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d100      	bne.n	8000f86 <__aeabi_ddiv+0x52a>
 8000f84:	e5d7      	b.n	8000b36 <__aeabi_ddiv+0xda>
 8000f86:	1871      	adds	r1, r6, r1
 8000f88:	1e53      	subs	r3, r2, #1
 8000f8a:	42b1      	cmp	r1, r6
 8000f8c:	d327      	bcc.n	8000fde <__aeabi_ddiv+0x582>
 8000f8e:	42a9      	cmp	r1, r5
 8000f90:	d315      	bcc.n	8000fbe <__aeabi_ddiv+0x562>
 8000f92:	d058      	beq.n	8001046 <__aeabi_ddiv+0x5ea>
 8000f94:	001a      	movs	r2, r3
 8000f96:	e773      	b.n	8000e80 <__aeabi_ddiv+0x424>
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	dc00      	bgt.n	8000f9e <__aeabi_ddiv+0x542>
 8000f9c:	e604      	b.n	8000ba8 <__aeabi_ddiv+0x14c>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	449b      	add	fp, r3
 8000fa4:	e5cd      	b.n	8000b42 <__aeabi_ddiv+0xe6>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	4447      	add	r7, r8
 8000faa:	4547      	cmp	r7, r8
 8000fac:	4189      	sbcs	r1, r1
 8000fae:	425b      	negs	r3, r3
 8000fb0:	469c      	mov	ip, r3
 8000fb2:	4249      	negs	r1, r1
 8000fb4:	1989      	adds	r1, r1, r6
 8000fb6:	190c      	adds	r4, r1, r4
 8000fb8:	44e3      	add	fp, ip
 8000fba:	1a24      	subs	r4, r4, r0
 8000fbc:	e703      	b.n	8000dc6 <__aeabi_ddiv+0x36a>
 8000fbe:	4643      	mov	r3, r8
 8000fc0:	005f      	lsls	r7, r3, #1
 8000fc2:	4547      	cmp	r7, r8
 8000fc4:	419b      	sbcs	r3, r3
 8000fc6:	46b8      	mov	r8, r7
 8000fc8:	425b      	negs	r3, r3
 8000fca:	199e      	adds	r6, r3, r6
 8000fcc:	3a02      	subs	r2, #2
 8000fce:	1989      	adds	r1, r1, r6
 8000fd0:	42a9      	cmp	r1, r5
 8000fd2:	d000      	beq.n	8000fd6 <__aeabi_ddiv+0x57a>
 8000fd4:	e754      	b.n	8000e80 <__aeabi_ddiv+0x424>
 8000fd6:	4540      	cmp	r0, r8
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_ddiv+0x580>
 8000fda:	e751      	b.n	8000e80 <__aeabi_ddiv+0x424>
 8000fdc:	e5ab      	b.n	8000b36 <__aeabi_ddiv+0xda>
 8000fde:	001a      	movs	r2, r3
 8000fe0:	e7f6      	b.n	8000fd0 <__aeabi_ddiv+0x574>
 8000fe2:	211f      	movs	r1, #31
 8000fe4:	465f      	mov	r7, fp
 8000fe6:	4249      	negs	r1, r1
 8000fe8:	1b0c      	subs	r4, r1, r4
 8000fea:	40e7      	lsrs	r7, r4
 8000fec:	2b20      	cmp	r3, #32
 8000fee:	d007      	beq.n	8001000 <__aeabi_ddiv+0x5a4>
 8000ff0:	491a      	ldr	r1, [pc, #104]	; (800105c <__aeabi_ddiv+0x600>)
 8000ff2:	9b00      	ldr	r3, [sp, #0]
 8000ff4:	468c      	mov	ip, r1
 8000ff6:	4463      	add	r3, ip
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	465b      	mov	r3, fp
 8000ffc:	4083      	lsls	r3, r0
 8000ffe:	431a      	orrs	r2, r3
 8001000:	1e50      	subs	r0, r2, #1
 8001002:	4182      	sbcs	r2, r0
 8001004:	433a      	orrs	r2, r7
 8001006:	2707      	movs	r7, #7
 8001008:	2300      	movs	r3, #0
 800100a:	4017      	ands	r7, r2
 800100c:	d009      	beq.n	8001022 <__aeabi_ddiv+0x5c6>
 800100e:	210f      	movs	r1, #15
 8001010:	2300      	movs	r3, #0
 8001012:	4011      	ands	r1, r2
 8001014:	0014      	movs	r4, r2
 8001016:	2904      	cmp	r1, #4
 8001018:	d195      	bne.n	8000f46 <__aeabi_ddiv+0x4ea>
 800101a:	0022      	movs	r2, r4
 800101c:	075f      	lsls	r7, r3, #29
 800101e:	025b      	lsls	r3, r3, #9
 8001020:	0b1b      	lsrs	r3, r3, #12
 8001022:	08d2      	lsrs	r2, r2, #3
 8001024:	4317      	orrs	r7, r2
 8001026:	2200      	movs	r2, #0
 8001028:	e5a6      	b.n	8000b78 <__aeabi_ddiv+0x11c>
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	4659      	mov	r1, fp
 800102e:	031b      	lsls	r3, r3, #12
 8001030:	430b      	orrs	r3, r1
 8001032:	031b      	lsls	r3, r3, #12
 8001034:	0017      	movs	r7, r2
 8001036:	0b1b      	lsrs	r3, r3, #12
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <__aeabi_ddiv+0x5f8>)
 800103a:	e59d      	b.n	8000b78 <__aeabi_ddiv+0x11c>
 800103c:	42bd      	cmp	r5, r7
 800103e:	d8b2      	bhi.n	8000fa6 <__aeabi_ddiv+0x54a>
 8001040:	469b      	mov	fp, r3
 8001042:	2400      	movs	r4, #0
 8001044:	e6bf      	b.n	8000dc6 <__aeabi_ddiv+0x36a>
 8001046:	4580      	cmp	r8, r0
 8001048:	d3b9      	bcc.n	8000fbe <__aeabi_ddiv+0x562>
 800104a:	001a      	movs	r2, r3
 800104c:	e7c3      	b.n	8000fd6 <__aeabi_ddiv+0x57a>
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	000003ff 	.word	0x000003ff
 8001054:	000007ff 	.word	0x000007ff
 8001058:	0000041e 	.word	0x0000041e
 800105c:	0000043e 	.word	0x0000043e

08001060 <__aeabi_dmul>:
 8001060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001062:	4657      	mov	r7, sl
 8001064:	46de      	mov	lr, fp
 8001066:	464e      	mov	r6, r9
 8001068:	4645      	mov	r5, r8
 800106a:	b5e0      	push	{r5, r6, r7, lr}
 800106c:	4683      	mov	fp, r0
 800106e:	0006      	movs	r6, r0
 8001070:	030f      	lsls	r7, r1, #12
 8001072:	0048      	lsls	r0, r1, #1
 8001074:	b087      	sub	sp, #28
 8001076:	4692      	mov	sl, r2
 8001078:	001d      	movs	r5, r3
 800107a:	0b3f      	lsrs	r7, r7, #12
 800107c:	0d40      	lsrs	r0, r0, #21
 800107e:	0fcc      	lsrs	r4, r1, #31
 8001080:	2800      	cmp	r0, #0
 8001082:	d100      	bne.n	8001086 <__aeabi_dmul+0x26>
 8001084:	e06f      	b.n	8001166 <__aeabi_dmul+0x106>
 8001086:	4bde      	ldr	r3, [pc, #888]	; (8001400 <__aeabi_dmul+0x3a0>)
 8001088:	4298      	cmp	r0, r3
 800108a:	d038      	beq.n	80010fe <__aeabi_dmul+0x9e>
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	00ff      	lsls	r7, r7, #3
 8001090:	041b      	lsls	r3, r3, #16
 8001092:	431f      	orrs	r7, r3
 8001094:	0f73      	lsrs	r3, r6, #29
 8001096:	433b      	orrs	r3, r7
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	4bda      	ldr	r3, [pc, #872]	; (8001404 <__aeabi_dmul+0x3a4>)
 800109c:	2700      	movs	r7, #0
 800109e:	4699      	mov	r9, r3
 80010a0:	2300      	movs	r3, #0
 80010a2:	469b      	mov	fp, r3
 80010a4:	00f6      	lsls	r6, r6, #3
 80010a6:	4481      	add	r9, r0
 80010a8:	032b      	lsls	r3, r5, #12
 80010aa:	0069      	lsls	r1, r5, #1
 80010ac:	0b1b      	lsrs	r3, r3, #12
 80010ae:	4652      	mov	r2, sl
 80010b0:	4698      	mov	r8, r3
 80010b2:	0d49      	lsrs	r1, r1, #21
 80010b4:	0fed      	lsrs	r5, r5, #31
 80010b6:	2900      	cmp	r1, #0
 80010b8:	d100      	bne.n	80010bc <__aeabi_dmul+0x5c>
 80010ba:	e085      	b.n	80011c8 <__aeabi_dmul+0x168>
 80010bc:	4bd0      	ldr	r3, [pc, #832]	; (8001400 <__aeabi_dmul+0x3a0>)
 80010be:	4299      	cmp	r1, r3
 80010c0:	d100      	bne.n	80010c4 <__aeabi_dmul+0x64>
 80010c2:	e073      	b.n	80011ac <__aeabi_dmul+0x14c>
 80010c4:	4643      	mov	r3, r8
 80010c6:	00da      	lsls	r2, r3, #3
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	041b      	lsls	r3, r3, #16
 80010cc:	4313      	orrs	r3, r2
 80010ce:	4652      	mov	r2, sl
 80010d0:	48cc      	ldr	r0, [pc, #816]	; (8001404 <__aeabi_dmul+0x3a4>)
 80010d2:	0f52      	lsrs	r2, r2, #29
 80010d4:	4684      	mov	ip, r0
 80010d6:	4313      	orrs	r3, r2
 80010d8:	4652      	mov	r2, sl
 80010da:	2000      	movs	r0, #0
 80010dc:	4461      	add	r1, ip
 80010de:	00d2      	lsls	r2, r2, #3
 80010e0:	4489      	add	r9, r1
 80010e2:	0021      	movs	r1, r4
 80010e4:	4069      	eors	r1, r5
 80010e6:	9100      	str	r1, [sp, #0]
 80010e8:	468c      	mov	ip, r1
 80010ea:	2101      	movs	r1, #1
 80010ec:	4449      	add	r1, r9
 80010ee:	468a      	mov	sl, r1
 80010f0:	2f0f      	cmp	r7, #15
 80010f2:	d900      	bls.n	80010f6 <__aeabi_dmul+0x96>
 80010f4:	e090      	b.n	8001218 <__aeabi_dmul+0x1b8>
 80010f6:	49c4      	ldr	r1, [pc, #784]	; (8001408 <__aeabi_dmul+0x3a8>)
 80010f8:	00bf      	lsls	r7, r7, #2
 80010fa:	59cf      	ldr	r7, [r1, r7]
 80010fc:	46bf      	mov	pc, r7
 80010fe:	465b      	mov	r3, fp
 8001100:	433b      	orrs	r3, r7
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	d000      	beq.n	8001108 <__aeabi_dmul+0xa8>
 8001106:	e16a      	b.n	80013de <__aeabi_dmul+0x37e>
 8001108:	2302      	movs	r3, #2
 800110a:	2708      	movs	r7, #8
 800110c:	2600      	movs	r6, #0
 800110e:	4681      	mov	r9, r0
 8001110:	469b      	mov	fp, r3
 8001112:	e7c9      	b.n	80010a8 <__aeabi_dmul+0x48>
 8001114:	0032      	movs	r2, r6
 8001116:	4658      	mov	r0, fp
 8001118:	9b01      	ldr	r3, [sp, #4]
 800111a:	4661      	mov	r1, ip
 800111c:	9100      	str	r1, [sp, #0]
 800111e:	2802      	cmp	r0, #2
 8001120:	d100      	bne.n	8001124 <__aeabi_dmul+0xc4>
 8001122:	e075      	b.n	8001210 <__aeabi_dmul+0x1b0>
 8001124:	2803      	cmp	r0, #3
 8001126:	d100      	bne.n	800112a <__aeabi_dmul+0xca>
 8001128:	e1fe      	b.n	8001528 <__aeabi_dmul+0x4c8>
 800112a:	2801      	cmp	r0, #1
 800112c:	d000      	beq.n	8001130 <__aeabi_dmul+0xd0>
 800112e:	e12c      	b.n	800138a <__aeabi_dmul+0x32a>
 8001130:	2300      	movs	r3, #0
 8001132:	2700      	movs	r7, #0
 8001134:	2600      	movs	r6, #0
 8001136:	2500      	movs	r5, #0
 8001138:	033f      	lsls	r7, r7, #12
 800113a:	0d2a      	lsrs	r2, r5, #20
 800113c:	0b3f      	lsrs	r7, r7, #12
 800113e:	48b3      	ldr	r0, [pc, #716]	; (800140c <__aeabi_dmul+0x3ac>)
 8001140:	0512      	lsls	r2, r2, #20
 8001142:	433a      	orrs	r2, r7
 8001144:	4002      	ands	r2, r0
 8001146:	051b      	lsls	r3, r3, #20
 8001148:	4313      	orrs	r3, r2
 800114a:	9a00      	ldr	r2, [sp, #0]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	07d1      	lsls	r1, r2, #31
 8001150:	085b      	lsrs	r3, r3, #1
 8001152:	430b      	orrs	r3, r1
 8001154:	0030      	movs	r0, r6
 8001156:	0019      	movs	r1, r3
 8001158:	b007      	add	sp, #28
 800115a:	bc3c      	pop	{r2, r3, r4, r5}
 800115c:	4690      	mov	r8, r2
 800115e:	4699      	mov	r9, r3
 8001160:	46a2      	mov	sl, r4
 8001162:	46ab      	mov	fp, r5
 8001164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001166:	465b      	mov	r3, fp
 8001168:	433b      	orrs	r3, r7
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	d100      	bne.n	8001170 <__aeabi_dmul+0x110>
 800116e:	e12f      	b.n	80013d0 <__aeabi_dmul+0x370>
 8001170:	2f00      	cmp	r7, #0
 8001172:	d100      	bne.n	8001176 <__aeabi_dmul+0x116>
 8001174:	e1a5      	b.n	80014c2 <__aeabi_dmul+0x462>
 8001176:	0038      	movs	r0, r7
 8001178:	f000 fb5c 	bl	8001834 <__clzsi2>
 800117c:	0003      	movs	r3, r0
 800117e:	3b0b      	subs	r3, #11
 8001180:	2b1c      	cmp	r3, #28
 8001182:	dd00      	ble.n	8001186 <__aeabi_dmul+0x126>
 8001184:	e196      	b.n	80014b4 <__aeabi_dmul+0x454>
 8001186:	221d      	movs	r2, #29
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	465a      	mov	r2, fp
 800118c:	0001      	movs	r1, r0
 800118e:	40da      	lsrs	r2, r3
 8001190:	465e      	mov	r6, fp
 8001192:	3908      	subs	r1, #8
 8001194:	408f      	lsls	r7, r1
 8001196:	0013      	movs	r3, r2
 8001198:	408e      	lsls	r6, r1
 800119a:	433b      	orrs	r3, r7
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	4b9c      	ldr	r3, [pc, #624]	; (8001410 <__aeabi_dmul+0x3b0>)
 80011a0:	2700      	movs	r7, #0
 80011a2:	1a1b      	subs	r3, r3, r0
 80011a4:	4699      	mov	r9, r3
 80011a6:	2300      	movs	r3, #0
 80011a8:	469b      	mov	fp, r3
 80011aa:	e77d      	b.n	80010a8 <__aeabi_dmul+0x48>
 80011ac:	4641      	mov	r1, r8
 80011ae:	4653      	mov	r3, sl
 80011b0:	430b      	orrs	r3, r1
 80011b2:	4993      	ldr	r1, [pc, #588]	; (8001400 <__aeabi_dmul+0x3a0>)
 80011b4:	468c      	mov	ip, r1
 80011b6:	44e1      	add	r9, ip
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d000      	beq.n	80011be <__aeabi_dmul+0x15e>
 80011bc:	e11a      	b.n	80013f4 <__aeabi_dmul+0x394>
 80011be:	2202      	movs	r2, #2
 80011c0:	2002      	movs	r0, #2
 80011c2:	4317      	orrs	r7, r2
 80011c4:	2200      	movs	r2, #0
 80011c6:	e78c      	b.n	80010e2 <__aeabi_dmul+0x82>
 80011c8:	4313      	orrs	r3, r2
 80011ca:	d100      	bne.n	80011ce <__aeabi_dmul+0x16e>
 80011cc:	e10d      	b.n	80013ea <__aeabi_dmul+0x38a>
 80011ce:	4643      	mov	r3, r8
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d100      	bne.n	80011d6 <__aeabi_dmul+0x176>
 80011d4:	e181      	b.n	80014da <__aeabi_dmul+0x47a>
 80011d6:	4640      	mov	r0, r8
 80011d8:	f000 fb2c 	bl	8001834 <__clzsi2>
 80011dc:	0002      	movs	r2, r0
 80011de:	3a0b      	subs	r2, #11
 80011e0:	2a1c      	cmp	r2, #28
 80011e2:	dd00      	ble.n	80011e6 <__aeabi_dmul+0x186>
 80011e4:	e172      	b.n	80014cc <__aeabi_dmul+0x46c>
 80011e6:	0001      	movs	r1, r0
 80011e8:	4643      	mov	r3, r8
 80011ea:	3908      	subs	r1, #8
 80011ec:	408b      	lsls	r3, r1
 80011ee:	4698      	mov	r8, r3
 80011f0:	231d      	movs	r3, #29
 80011f2:	1a9a      	subs	r2, r3, r2
 80011f4:	4653      	mov	r3, sl
 80011f6:	40d3      	lsrs	r3, r2
 80011f8:	001a      	movs	r2, r3
 80011fa:	4643      	mov	r3, r8
 80011fc:	4313      	orrs	r3, r2
 80011fe:	4652      	mov	r2, sl
 8001200:	408a      	lsls	r2, r1
 8001202:	4649      	mov	r1, r9
 8001204:	1a08      	subs	r0, r1, r0
 8001206:	4982      	ldr	r1, [pc, #520]	; (8001410 <__aeabi_dmul+0x3b0>)
 8001208:	4689      	mov	r9, r1
 800120a:	4481      	add	r9, r0
 800120c:	2000      	movs	r0, #0
 800120e:	e768      	b.n	80010e2 <__aeabi_dmul+0x82>
 8001210:	4b7b      	ldr	r3, [pc, #492]	; (8001400 <__aeabi_dmul+0x3a0>)
 8001212:	2700      	movs	r7, #0
 8001214:	2600      	movs	r6, #0
 8001216:	e78e      	b.n	8001136 <__aeabi_dmul+0xd6>
 8001218:	0c14      	lsrs	r4, r2, #16
 800121a:	0412      	lsls	r2, r2, #16
 800121c:	0c12      	lsrs	r2, r2, #16
 800121e:	0011      	movs	r1, r2
 8001220:	0c37      	lsrs	r7, r6, #16
 8001222:	0436      	lsls	r6, r6, #16
 8001224:	0c35      	lsrs	r5, r6, #16
 8001226:	4379      	muls	r1, r7
 8001228:	0028      	movs	r0, r5
 800122a:	468c      	mov	ip, r1
 800122c:	002e      	movs	r6, r5
 800122e:	4360      	muls	r0, r4
 8001230:	4460      	add	r0, ip
 8001232:	4683      	mov	fp, r0
 8001234:	4356      	muls	r6, r2
 8001236:	0021      	movs	r1, r4
 8001238:	0c30      	lsrs	r0, r6, #16
 800123a:	4680      	mov	r8, r0
 800123c:	4658      	mov	r0, fp
 800123e:	4379      	muls	r1, r7
 8001240:	4440      	add	r0, r8
 8001242:	9102      	str	r1, [sp, #8]
 8001244:	4584      	cmp	ip, r0
 8001246:	d906      	bls.n	8001256 <__aeabi_dmul+0x1f6>
 8001248:	4688      	mov	r8, r1
 800124a:	2180      	movs	r1, #128	; 0x80
 800124c:	0249      	lsls	r1, r1, #9
 800124e:	468c      	mov	ip, r1
 8001250:	44e0      	add	r8, ip
 8001252:	4641      	mov	r1, r8
 8001254:	9102      	str	r1, [sp, #8]
 8001256:	0436      	lsls	r6, r6, #16
 8001258:	0c01      	lsrs	r1, r0, #16
 800125a:	0c36      	lsrs	r6, r6, #16
 800125c:	0400      	lsls	r0, r0, #16
 800125e:	468b      	mov	fp, r1
 8001260:	1981      	adds	r1, r0, r6
 8001262:	0c1e      	lsrs	r6, r3, #16
 8001264:	041b      	lsls	r3, r3, #16
 8001266:	0c1b      	lsrs	r3, r3, #16
 8001268:	9103      	str	r1, [sp, #12]
 800126a:	0019      	movs	r1, r3
 800126c:	4379      	muls	r1, r7
 800126e:	468c      	mov	ip, r1
 8001270:	0028      	movs	r0, r5
 8001272:	4375      	muls	r5, r6
 8001274:	4465      	add	r5, ip
 8001276:	46a8      	mov	r8, r5
 8001278:	4358      	muls	r0, r3
 800127a:	0c05      	lsrs	r5, r0, #16
 800127c:	4445      	add	r5, r8
 800127e:	4377      	muls	r7, r6
 8001280:	42a9      	cmp	r1, r5
 8001282:	d903      	bls.n	800128c <__aeabi_dmul+0x22c>
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	0249      	lsls	r1, r1, #9
 8001288:	468c      	mov	ip, r1
 800128a:	4467      	add	r7, ip
 800128c:	0c29      	lsrs	r1, r5, #16
 800128e:	468c      	mov	ip, r1
 8001290:	0039      	movs	r1, r7
 8001292:	0400      	lsls	r0, r0, #16
 8001294:	0c00      	lsrs	r0, r0, #16
 8001296:	042d      	lsls	r5, r5, #16
 8001298:	182d      	adds	r5, r5, r0
 800129a:	4461      	add	r1, ip
 800129c:	44ab      	add	fp, r5
 800129e:	9105      	str	r1, [sp, #20]
 80012a0:	4659      	mov	r1, fp
 80012a2:	9104      	str	r1, [sp, #16]
 80012a4:	9901      	ldr	r1, [sp, #4]
 80012a6:	040f      	lsls	r7, r1, #16
 80012a8:	0c3f      	lsrs	r7, r7, #16
 80012aa:	0c08      	lsrs	r0, r1, #16
 80012ac:	0039      	movs	r1, r7
 80012ae:	4351      	muls	r1, r2
 80012b0:	4342      	muls	r2, r0
 80012b2:	4690      	mov	r8, r2
 80012b4:	0002      	movs	r2, r0
 80012b6:	468c      	mov	ip, r1
 80012b8:	0c09      	lsrs	r1, r1, #16
 80012ba:	468b      	mov	fp, r1
 80012bc:	4362      	muls	r2, r4
 80012be:	437c      	muls	r4, r7
 80012c0:	4444      	add	r4, r8
 80012c2:	445c      	add	r4, fp
 80012c4:	45a0      	cmp	r8, r4
 80012c6:	d903      	bls.n	80012d0 <__aeabi_dmul+0x270>
 80012c8:	2180      	movs	r1, #128	; 0x80
 80012ca:	0249      	lsls	r1, r1, #9
 80012cc:	4688      	mov	r8, r1
 80012ce:	4442      	add	r2, r8
 80012d0:	0c21      	lsrs	r1, r4, #16
 80012d2:	4688      	mov	r8, r1
 80012d4:	4661      	mov	r1, ip
 80012d6:	0409      	lsls	r1, r1, #16
 80012d8:	0c09      	lsrs	r1, r1, #16
 80012da:	468c      	mov	ip, r1
 80012dc:	0039      	movs	r1, r7
 80012de:	4359      	muls	r1, r3
 80012e0:	4343      	muls	r3, r0
 80012e2:	4370      	muls	r0, r6
 80012e4:	437e      	muls	r6, r7
 80012e6:	0c0f      	lsrs	r7, r1, #16
 80012e8:	18f6      	adds	r6, r6, r3
 80012ea:	0424      	lsls	r4, r4, #16
 80012ec:	19be      	adds	r6, r7, r6
 80012ee:	4464      	add	r4, ip
 80012f0:	4442      	add	r2, r8
 80012f2:	468c      	mov	ip, r1
 80012f4:	42b3      	cmp	r3, r6
 80012f6:	d903      	bls.n	8001300 <__aeabi_dmul+0x2a0>
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	025b      	lsls	r3, r3, #9
 80012fc:	4698      	mov	r8, r3
 80012fe:	4440      	add	r0, r8
 8001300:	9b02      	ldr	r3, [sp, #8]
 8001302:	4661      	mov	r1, ip
 8001304:	4698      	mov	r8, r3
 8001306:	9b04      	ldr	r3, [sp, #16]
 8001308:	0437      	lsls	r7, r6, #16
 800130a:	4443      	add	r3, r8
 800130c:	469b      	mov	fp, r3
 800130e:	45ab      	cmp	fp, r5
 8001310:	41ad      	sbcs	r5, r5
 8001312:	426b      	negs	r3, r5
 8001314:	040d      	lsls	r5, r1, #16
 8001316:	9905      	ldr	r1, [sp, #20]
 8001318:	0c2d      	lsrs	r5, r5, #16
 800131a:	468c      	mov	ip, r1
 800131c:	197f      	adds	r7, r7, r5
 800131e:	4467      	add	r7, ip
 8001320:	18fd      	adds	r5, r7, r3
 8001322:	46a8      	mov	r8, r5
 8001324:	465d      	mov	r5, fp
 8001326:	192d      	adds	r5, r5, r4
 8001328:	42a5      	cmp	r5, r4
 800132a:	41a4      	sbcs	r4, r4
 800132c:	4693      	mov	fp, r2
 800132e:	4264      	negs	r4, r4
 8001330:	46a4      	mov	ip, r4
 8001332:	44c3      	add	fp, r8
 8001334:	44dc      	add	ip, fp
 8001336:	428f      	cmp	r7, r1
 8001338:	41bf      	sbcs	r7, r7
 800133a:	4598      	cmp	r8, r3
 800133c:	419b      	sbcs	r3, r3
 800133e:	4593      	cmp	fp, r2
 8001340:	4192      	sbcs	r2, r2
 8001342:	45a4      	cmp	ip, r4
 8001344:	41a4      	sbcs	r4, r4
 8001346:	425b      	negs	r3, r3
 8001348:	427f      	negs	r7, r7
 800134a:	431f      	orrs	r7, r3
 800134c:	0c36      	lsrs	r6, r6, #16
 800134e:	4252      	negs	r2, r2
 8001350:	4264      	negs	r4, r4
 8001352:	19bf      	adds	r7, r7, r6
 8001354:	4322      	orrs	r2, r4
 8001356:	18bf      	adds	r7, r7, r2
 8001358:	4662      	mov	r2, ip
 800135a:	1838      	adds	r0, r7, r0
 800135c:	0243      	lsls	r3, r0, #9
 800135e:	0dd2      	lsrs	r2, r2, #23
 8001360:	9903      	ldr	r1, [sp, #12]
 8001362:	4313      	orrs	r3, r2
 8001364:	026a      	lsls	r2, r5, #9
 8001366:	430a      	orrs	r2, r1
 8001368:	1e50      	subs	r0, r2, #1
 800136a:	4182      	sbcs	r2, r0
 800136c:	4661      	mov	r1, ip
 800136e:	0ded      	lsrs	r5, r5, #23
 8001370:	432a      	orrs	r2, r5
 8001372:	024e      	lsls	r6, r1, #9
 8001374:	4332      	orrs	r2, r6
 8001376:	01d9      	lsls	r1, r3, #7
 8001378:	d400      	bmi.n	800137c <__aeabi_dmul+0x31c>
 800137a:	e0b3      	b.n	80014e4 <__aeabi_dmul+0x484>
 800137c:	2601      	movs	r6, #1
 800137e:	0850      	lsrs	r0, r2, #1
 8001380:	4032      	ands	r2, r6
 8001382:	4302      	orrs	r2, r0
 8001384:	07de      	lsls	r6, r3, #31
 8001386:	4332      	orrs	r2, r6
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	4c22      	ldr	r4, [pc, #136]	; (8001414 <__aeabi_dmul+0x3b4>)
 800138c:	4454      	add	r4, sl
 800138e:	2c00      	cmp	r4, #0
 8001390:	dd62      	ble.n	8001458 <__aeabi_dmul+0x3f8>
 8001392:	0751      	lsls	r1, r2, #29
 8001394:	d009      	beq.n	80013aa <__aeabi_dmul+0x34a>
 8001396:	200f      	movs	r0, #15
 8001398:	4010      	ands	r0, r2
 800139a:	2804      	cmp	r0, #4
 800139c:	d005      	beq.n	80013aa <__aeabi_dmul+0x34a>
 800139e:	1d10      	adds	r0, r2, #4
 80013a0:	4290      	cmp	r0, r2
 80013a2:	4192      	sbcs	r2, r2
 80013a4:	4252      	negs	r2, r2
 80013a6:	189b      	adds	r3, r3, r2
 80013a8:	0002      	movs	r2, r0
 80013aa:	01d9      	lsls	r1, r3, #7
 80013ac:	d504      	bpl.n	80013b8 <__aeabi_dmul+0x358>
 80013ae:	2480      	movs	r4, #128	; 0x80
 80013b0:	4819      	ldr	r0, [pc, #100]	; (8001418 <__aeabi_dmul+0x3b8>)
 80013b2:	00e4      	lsls	r4, r4, #3
 80013b4:	4003      	ands	r3, r0
 80013b6:	4454      	add	r4, sl
 80013b8:	4818      	ldr	r0, [pc, #96]	; (800141c <__aeabi_dmul+0x3bc>)
 80013ba:	4284      	cmp	r4, r0
 80013bc:	dd00      	ble.n	80013c0 <__aeabi_dmul+0x360>
 80013be:	e727      	b.n	8001210 <__aeabi_dmul+0x1b0>
 80013c0:	075e      	lsls	r6, r3, #29
 80013c2:	025b      	lsls	r3, r3, #9
 80013c4:	08d2      	lsrs	r2, r2, #3
 80013c6:	0b1f      	lsrs	r7, r3, #12
 80013c8:	0563      	lsls	r3, r4, #21
 80013ca:	4316      	orrs	r6, r2
 80013cc:	0d5b      	lsrs	r3, r3, #21
 80013ce:	e6b2      	b.n	8001136 <__aeabi_dmul+0xd6>
 80013d0:	2300      	movs	r3, #0
 80013d2:	4699      	mov	r9, r3
 80013d4:	3301      	adds	r3, #1
 80013d6:	2704      	movs	r7, #4
 80013d8:	2600      	movs	r6, #0
 80013da:	469b      	mov	fp, r3
 80013dc:	e664      	b.n	80010a8 <__aeabi_dmul+0x48>
 80013de:	2303      	movs	r3, #3
 80013e0:	9701      	str	r7, [sp, #4]
 80013e2:	4681      	mov	r9, r0
 80013e4:	270c      	movs	r7, #12
 80013e6:	469b      	mov	fp, r3
 80013e8:	e65e      	b.n	80010a8 <__aeabi_dmul+0x48>
 80013ea:	2201      	movs	r2, #1
 80013ec:	2001      	movs	r0, #1
 80013ee:	4317      	orrs	r7, r2
 80013f0:	2200      	movs	r2, #0
 80013f2:	e676      	b.n	80010e2 <__aeabi_dmul+0x82>
 80013f4:	2303      	movs	r3, #3
 80013f6:	2003      	movs	r0, #3
 80013f8:	431f      	orrs	r7, r3
 80013fa:	4643      	mov	r3, r8
 80013fc:	e671      	b.n	80010e2 <__aeabi_dmul+0x82>
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	000007ff 	.word	0x000007ff
 8001404:	fffffc01 	.word	0xfffffc01
 8001408:	08006dbc 	.word	0x08006dbc
 800140c:	800fffff 	.word	0x800fffff
 8001410:	fffffc0d 	.word	0xfffffc0d
 8001414:	000003ff 	.word	0x000003ff
 8001418:	feffffff 	.word	0xfeffffff
 800141c:	000007fe 	.word	0x000007fe
 8001420:	2300      	movs	r3, #0
 8001422:	2780      	movs	r7, #128	; 0x80
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	033f      	lsls	r7, r7, #12
 8001428:	2600      	movs	r6, #0
 800142a:	4b43      	ldr	r3, [pc, #268]	; (8001538 <__aeabi_dmul+0x4d8>)
 800142c:	e683      	b.n	8001136 <__aeabi_dmul+0xd6>
 800142e:	9b01      	ldr	r3, [sp, #4]
 8001430:	0032      	movs	r2, r6
 8001432:	46a4      	mov	ip, r4
 8001434:	4658      	mov	r0, fp
 8001436:	e670      	b.n	800111a <__aeabi_dmul+0xba>
 8001438:	46ac      	mov	ip, r5
 800143a:	e66e      	b.n	800111a <__aeabi_dmul+0xba>
 800143c:	2780      	movs	r7, #128	; 0x80
 800143e:	9901      	ldr	r1, [sp, #4]
 8001440:	033f      	lsls	r7, r7, #12
 8001442:	4239      	tst	r1, r7
 8001444:	d02d      	beq.n	80014a2 <__aeabi_dmul+0x442>
 8001446:	423b      	tst	r3, r7
 8001448:	d12b      	bne.n	80014a2 <__aeabi_dmul+0x442>
 800144a:	431f      	orrs	r7, r3
 800144c:	033f      	lsls	r7, r7, #12
 800144e:	0b3f      	lsrs	r7, r7, #12
 8001450:	9500      	str	r5, [sp, #0]
 8001452:	0016      	movs	r6, r2
 8001454:	4b38      	ldr	r3, [pc, #224]	; (8001538 <__aeabi_dmul+0x4d8>)
 8001456:	e66e      	b.n	8001136 <__aeabi_dmul+0xd6>
 8001458:	2501      	movs	r5, #1
 800145a:	1b2d      	subs	r5, r5, r4
 800145c:	2d38      	cmp	r5, #56	; 0x38
 800145e:	dd00      	ble.n	8001462 <__aeabi_dmul+0x402>
 8001460:	e666      	b.n	8001130 <__aeabi_dmul+0xd0>
 8001462:	2d1f      	cmp	r5, #31
 8001464:	dc40      	bgt.n	80014e8 <__aeabi_dmul+0x488>
 8001466:	4835      	ldr	r0, [pc, #212]	; (800153c <__aeabi_dmul+0x4dc>)
 8001468:	001c      	movs	r4, r3
 800146a:	4450      	add	r0, sl
 800146c:	0016      	movs	r6, r2
 800146e:	4082      	lsls	r2, r0
 8001470:	4084      	lsls	r4, r0
 8001472:	40ee      	lsrs	r6, r5
 8001474:	1e50      	subs	r0, r2, #1
 8001476:	4182      	sbcs	r2, r0
 8001478:	4334      	orrs	r4, r6
 800147a:	4314      	orrs	r4, r2
 800147c:	40eb      	lsrs	r3, r5
 800147e:	0762      	lsls	r2, r4, #29
 8001480:	d009      	beq.n	8001496 <__aeabi_dmul+0x436>
 8001482:	220f      	movs	r2, #15
 8001484:	4022      	ands	r2, r4
 8001486:	2a04      	cmp	r2, #4
 8001488:	d005      	beq.n	8001496 <__aeabi_dmul+0x436>
 800148a:	0022      	movs	r2, r4
 800148c:	1d14      	adds	r4, r2, #4
 800148e:	4294      	cmp	r4, r2
 8001490:	4180      	sbcs	r0, r0
 8001492:	4240      	negs	r0, r0
 8001494:	181b      	adds	r3, r3, r0
 8001496:	021a      	lsls	r2, r3, #8
 8001498:	d53e      	bpl.n	8001518 <__aeabi_dmul+0x4b8>
 800149a:	2301      	movs	r3, #1
 800149c:	2700      	movs	r7, #0
 800149e:	2600      	movs	r6, #0
 80014a0:	e649      	b.n	8001136 <__aeabi_dmul+0xd6>
 80014a2:	2780      	movs	r7, #128	; 0x80
 80014a4:	9b01      	ldr	r3, [sp, #4]
 80014a6:	033f      	lsls	r7, r7, #12
 80014a8:	431f      	orrs	r7, r3
 80014aa:	033f      	lsls	r7, r7, #12
 80014ac:	0b3f      	lsrs	r7, r7, #12
 80014ae:	9400      	str	r4, [sp, #0]
 80014b0:	4b21      	ldr	r3, [pc, #132]	; (8001538 <__aeabi_dmul+0x4d8>)
 80014b2:	e640      	b.n	8001136 <__aeabi_dmul+0xd6>
 80014b4:	0003      	movs	r3, r0
 80014b6:	465a      	mov	r2, fp
 80014b8:	3b28      	subs	r3, #40	; 0x28
 80014ba:	409a      	lsls	r2, r3
 80014bc:	2600      	movs	r6, #0
 80014be:	9201      	str	r2, [sp, #4]
 80014c0:	e66d      	b.n	800119e <__aeabi_dmul+0x13e>
 80014c2:	4658      	mov	r0, fp
 80014c4:	f000 f9b6 	bl	8001834 <__clzsi2>
 80014c8:	3020      	adds	r0, #32
 80014ca:	e657      	b.n	800117c <__aeabi_dmul+0x11c>
 80014cc:	0003      	movs	r3, r0
 80014ce:	4652      	mov	r2, sl
 80014d0:	3b28      	subs	r3, #40	; 0x28
 80014d2:	409a      	lsls	r2, r3
 80014d4:	0013      	movs	r3, r2
 80014d6:	2200      	movs	r2, #0
 80014d8:	e693      	b.n	8001202 <__aeabi_dmul+0x1a2>
 80014da:	4650      	mov	r0, sl
 80014dc:	f000 f9aa 	bl	8001834 <__clzsi2>
 80014e0:	3020      	adds	r0, #32
 80014e2:	e67b      	b.n	80011dc <__aeabi_dmul+0x17c>
 80014e4:	46ca      	mov	sl, r9
 80014e6:	e750      	b.n	800138a <__aeabi_dmul+0x32a>
 80014e8:	201f      	movs	r0, #31
 80014ea:	001e      	movs	r6, r3
 80014ec:	4240      	negs	r0, r0
 80014ee:	1b04      	subs	r4, r0, r4
 80014f0:	40e6      	lsrs	r6, r4
 80014f2:	2d20      	cmp	r5, #32
 80014f4:	d003      	beq.n	80014fe <__aeabi_dmul+0x49e>
 80014f6:	4c12      	ldr	r4, [pc, #72]	; (8001540 <__aeabi_dmul+0x4e0>)
 80014f8:	4454      	add	r4, sl
 80014fa:	40a3      	lsls	r3, r4
 80014fc:	431a      	orrs	r2, r3
 80014fe:	1e50      	subs	r0, r2, #1
 8001500:	4182      	sbcs	r2, r0
 8001502:	4332      	orrs	r2, r6
 8001504:	2607      	movs	r6, #7
 8001506:	2700      	movs	r7, #0
 8001508:	4016      	ands	r6, r2
 800150a:	d009      	beq.n	8001520 <__aeabi_dmul+0x4c0>
 800150c:	200f      	movs	r0, #15
 800150e:	2300      	movs	r3, #0
 8001510:	4010      	ands	r0, r2
 8001512:	0014      	movs	r4, r2
 8001514:	2804      	cmp	r0, #4
 8001516:	d1b9      	bne.n	800148c <__aeabi_dmul+0x42c>
 8001518:	0022      	movs	r2, r4
 800151a:	075e      	lsls	r6, r3, #29
 800151c:	025b      	lsls	r3, r3, #9
 800151e:	0b1f      	lsrs	r7, r3, #12
 8001520:	08d2      	lsrs	r2, r2, #3
 8001522:	4316      	orrs	r6, r2
 8001524:	2300      	movs	r3, #0
 8001526:	e606      	b.n	8001136 <__aeabi_dmul+0xd6>
 8001528:	2780      	movs	r7, #128	; 0x80
 800152a:	033f      	lsls	r7, r7, #12
 800152c:	431f      	orrs	r7, r3
 800152e:	033f      	lsls	r7, r7, #12
 8001530:	0b3f      	lsrs	r7, r7, #12
 8001532:	0016      	movs	r6, r2
 8001534:	4b00      	ldr	r3, [pc, #0]	; (8001538 <__aeabi_dmul+0x4d8>)
 8001536:	e5fe      	b.n	8001136 <__aeabi_dmul+0xd6>
 8001538:	000007ff 	.word	0x000007ff
 800153c:	0000041e 	.word	0x0000041e
 8001540:	0000043e 	.word	0x0000043e

08001544 <__aeabi_d2iz>:
 8001544:	b530      	push	{r4, r5, lr}
 8001546:	4d14      	ldr	r5, [pc, #80]	; (8001598 <__aeabi_d2iz+0x54>)
 8001548:	030a      	lsls	r2, r1, #12
 800154a:	004b      	lsls	r3, r1, #1
 800154c:	0b12      	lsrs	r2, r2, #12
 800154e:	0d5b      	lsrs	r3, r3, #21
 8001550:	0fc9      	lsrs	r1, r1, #31
 8001552:	2400      	movs	r4, #0
 8001554:	42ab      	cmp	r3, r5
 8001556:	dd11      	ble.n	800157c <__aeabi_d2iz+0x38>
 8001558:	4c10      	ldr	r4, [pc, #64]	; (800159c <__aeabi_d2iz+0x58>)
 800155a:	42a3      	cmp	r3, r4
 800155c:	dc10      	bgt.n	8001580 <__aeabi_d2iz+0x3c>
 800155e:	2480      	movs	r4, #128	; 0x80
 8001560:	0364      	lsls	r4, r4, #13
 8001562:	4322      	orrs	r2, r4
 8001564:	4c0e      	ldr	r4, [pc, #56]	; (80015a0 <__aeabi_d2iz+0x5c>)
 8001566:	1ae4      	subs	r4, r4, r3
 8001568:	2c1f      	cmp	r4, #31
 800156a:	dd0c      	ble.n	8001586 <__aeabi_d2iz+0x42>
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <__aeabi_d2iz+0x60>)
 800156e:	1ac3      	subs	r3, r0, r3
 8001570:	40da      	lsrs	r2, r3
 8001572:	0013      	movs	r3, r2
 8001574:	425c      	negs	r4, r3
 8001576:	2900      	cmp	r1, #0
 8001578:	d100      	bne.n	800157c <__aeabi_d2iz+0x38>
 800157a:	001c      	movs	r4, r3
 800157c:	0020      	movs	r0, r4
 800157e:	bd30      	pop	{r4, r5, pc}
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <__aeabi_d2iz+0x64>)
 8001582:	18cc      	adds	r4, r1, r3
 8001584:	e7fa      	b.n	800157c <__aeabi_d2iz+0x38>
 8001586:	4d09      	ldr	r5, [pc, #36]	; (80015ac <__aeabi_d2iz+0x68>)
 8001588:	40e0      	lsrs	r0, r4
 800158a:	46ac      	mov	ip, r5
 800158c:	4463      	add	r3, ip
 800158e:	409a      	lsls	r2, r3
 8001590:	0013      	movs	r3, r2
 8001592:	4303      	orrs	r3, r0
 8001594:	e7ee      	b.n	8001574 <__aeabi_d2iz+0x30>
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	000003fe 	.word	0x000003fe
 800159c:	0000041d 	.word	0x0000041d
 80015a0:	00000433 	.word	0x00000433
 80015a4:	00000413 	.word	0x00000413
 80015a8:	7fffffff 	.word	0x7fffffff
 80015ac:	fffffbed 	.word	0xfffffbed

080015b0 <__aeabi_i2d>:
 80015b0:	b570      	push	{r4, r5, r6, lr}
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d02d      	beq.n	8001612 <__aeabi_i2d+0x62>
 80015b6:	17c3      	asrs	r3, r0, #31
 80015b8:	18c5      	adds	r5, r0, r3
 80015ba:	405d      	eors	r5, r3
 80015bc:	0fc4      	lsrs	r4, r0, #31
 80015be:	0028      	movs	r0, r5
 80015c0:	f000 f938 	bl	8001834 <__clzsi2>
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <__aeabi_i2d+0x6c>)
 80015c6:	1a1b      	subs	r3, r3, r0
 80015c8:	055b      	lsls	r3, r3, #21
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	280a      	cmp	r0, #10
 80015ce:	dd15      	ble.n	80015fc <__aeabi_i2d+0x4c>
 80015d0:	380b      	subs	r0, #11
 80015d2:	4085      	lsls	r5, r0
 80015d4:	2200      	movs	r2, #0
 80015d6:	032d      	lsls	r5, r5, #12
 80015d8:	0b2d      	lsrs	r5, r5, #12
 80015da:	2100      	movs	r1, #0
 80015dc:	0010      	movs	r0, r2
 80015de:	032d      	lsls	r5, r5, #12
 80015e0:	0d0a      	lsrs	r2, r1, #20
 80015e2:	0b2d      	lsrs	r5, r5, #12
 80015e4:	0512      	lsls	r2, r2, #20
 80015e6:	432a      	orrs	r2, r5
 80015e8:	4d0d      	ldr	r5, [pc, #52]	; (8001620 <__aeabi_i2d+0x70>)
 80015ea:	051b      	lsls	r3, r3, #20
 80015ec:	402a      	ands	r2, r5
 80015ee:	4313      	orrs	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	07e4      	lsls	r4, r4, #31
 80015f4:	085b      	lsrs	r3, r3, #1
 80015f6:	4323      	orrs	r3, r4
 80015f8:	0019      	movs	r1, r3
 80015fa:	bd70      	pop	{r4, r5, r6, pc}
 80015fc:	0002      	movs	r2, r0
 80015fe:	0029      	movs	r1, r5
 8001600:	3215      	adds	r2, #21
 8001602:	4091      	lsls	r1, r2
 8001604:	000a      	movs	r2, r1
 8001606:	210b      	movs	r1, #11
 8001608:	1a08      	subs	r0, r1, r0
 800160a:	40c5      	lsrs	r5, r0
 800160c:	032d      	lsls	r5, r5, #12
 800160e:	0b2d      	lsrs	r5, r5, #12
 8001610:	e7e3      	b.n	80015da <__aeabi_i2d+0x2a>
 8001612:	2400      	movs	r4, #0
 8001614:	2300      	movs	r3, #0
 8001616:	2500      	movs	r5, #0
 8001618:	2200      	movs	r2, #0
 800161a:	e7de      	b.n	80015da <__aeabi_i2d+0x2a>
 800161c:	0000041e 	.word	0x0000041e
 8001620:	800fffff 	.word	0x800fffff

08001624 <__aeabi_ui2d>:
 8001624:	b510      	push	{r4, lr}
 8001626:	1e04      	subs	r4, r0, #0
 8001628:	d025      	beq.n	8001676 <__aeabi_ui2d+0x52>
 800162a:	f000 f903 	bl	8001834 <__clzsi2>
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <__aeabi_ui2d+0x5c>)
 8001630:	1a1b      	subs	r3, r3, r0
 8001632:	055b      	lsls	r3, r3, #21
 8001634:	0d5b      	lsrs	r3, r3, #21
 8001636:	280a      	cmp	r0, #10
 8001638:	dd12      	ble.n	8001660 <__aeabi_ui2d+0x3c>
 800163a:	380b      	subs	r0, #11
 800163c:	4084      	lsls	r4, r0
 800163e:	2200      	movs	r2, #0
 8001640:	0324      	lsls	r4, r4, #12
 8001642:	0b24      	lsrs	r4, r4, #12
 8001644:	2100      	movs	r1, #0
 8001646:	0010      	movs	r0, r2
 8001648:	0324      	lsls	r4, r4, #12
 800164a:	0d0a      	lsrs	r2, r1, #20
 800164c:	0b24      	lsrs	r4, r4, #12
 800164e:	0512      	lsls	r2, r2, #20
 8001650:	4322      	orrs	r2, r4
 8001652:	4c0c      	ldr	r4, [pc, #48]	; (8001684 <__aeabi_ui2d+0x60>)
 8001654:	051b      	lsls	r3, r3, #20
 8001656:	4022      	ands	r2, r4
 8001658:	4313      	orrs	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	0859      	lsrs	r1, r3, #1
 800165e:	bd10      	pop	{r4, pc}
 8001660:	0002      	movs	r2, r0
 8001662:	0021      	movs	r1, r4
 8001664:	3215      	adds	r2, #21
 8001666:	4091      	lsls	r1, r2
 8001668:	000a      	movs	r2, r1
 800166a:	210b      	movs	r1, #11
 800166c:	1a08      	subs	r0, r1, r0
 800166e:	40c4      	lsrs	r4, r0
 8001670:	0324      	lsls	r4, r4, #12
 8001672:	0b24      	lsrs	r4, r4, #12
 8001674:	e7e6      	b.n	8001644 <__aeabi_ui2d+0x20>
 8001676:	2300      	movs	r3, #0
 8001678:	2400      	movs	r4, #0
 800167a:	2200      	movs	r2, #0
 800167c:	e7e2      	b.n	8001644 <__aeabi_ui2d+0x20>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	0000041e 	.word	0x0000041e
 8001684:	800fffff 	.word	0x800fffff

08001688 <__aeabi_f2d>:
 8001688:	0041      	lsls	r1, r0, #1
 800168a:	0e09      	lsrs	r1, r1, #24
 800168c:	1c4b      	adds	r3, r1, #1
 800168e:	b570      	push	{r4, r5, r6, lr}
 8001690:	b2db      	uxtb	r3, r3
 8001692:	0246      	lsls	r6, r0, #9
 8001694:	0a75      	lsrs	r5, r6, #9
 8001696:	0fc4      	lsrs	r4, r0, #31
 8001698:	2b01      	cmp	r3, #1
 800169a:	dd14      	ble.n	80016c6 <__aeabi_f2d+0x3e>
 800169c:	23e0      	movs	r3, #224	; 0xe0
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	076d      	lsls	r5, r5, #29
 80016a2:	0b36      	lsrs	r6, r6, #12
 80016a4:	18cb      	adds	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	0d0a      	lsrs	r2, r1, #20
 80016aa:	0028      	movs	r0, r5
 80016ac:	0512      	lsls	r2, r2, #20
 80016ae:	4d1c      	ldr	r5, [pc, #112]	; (8001720 <__aeabi_f2d+0x98>)
 80016b0:	4332      	orrs	r2, r6
 80016b2:	055b      	lsls	r3, r3, #21
 80016b4:	402a      	ands	r2, r5
 80016b6:	085b      	lsrs	r3, r3, #1
 80016b8:	4313      	orrs	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	07e4      	lsls	r4, r4, #31
 80016be:	085b      	lsrs	r3, r3, #1
 80016c0:	4323      	orrs	r3, r4
 80016c2:	0019      	movs	r1, r3
 80016c4:	bd70      	pop	{r4, r5, r6, pc}
 80016c6:	2900      	cmp	r1, #0
 80016c8:	d114      	bne.n	80016f4 <__aeabi_f2d+0x6c>
 80016ca:	2d00      	cmp	r5, #0
 80016cc:	d01e      	beq.n	800170c <__aeabi_f2d+0x84>
 80016ce:	0028      	movs	r0, r5
 80016d0:	f000 f8b0 	bl	8001834 <__clzsi2>
 80016d4:	280a      	cmp	r0, #10
 80016d6:	dc1c      	bgt.n	8001712 <__aeabi_f2d+0x8a>
 80016d8:	230b      	movs	r3, #11
 80016da:	002a      	movs	r2, r5
 80016dc:	1a1b      	subs	r3, r3, r0
 80016de:	40da      	lsrs	r2, r3
 80016e0:	0003      	movs	r3, r0
 80016e2:	3315      	adds	r3, #21
 80016e4:	409d      	lsls	r5, r3
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <__aeabi_f2d+0x9c>)
 80016e8:	0312      	lsls	r2, r2, #12
 80016ea:	1a1b      	subs	r3, r3, r0
 80016ec:	055b      	lsls	r3, r3, #21
 80016ee:	0b16      	lsrs	r6, r2, #12
 80016f0:	0d5b      	lsrs	r3, r3, #21
 80016f2:	e7d8      	b.n	80016a6 <__aeabi_f2d+0x1e>
 80016f4:	2d00      	cmp	r5, #0
 80016f6:	d006      	beq.n	8001706 <__aeabi_f2d+0x7e>
 80016f8:	0b32      	lsrs	r2, r6, #12
 80016fa:	2680      	movs	r6, #128	; 0x80
 80016fc:	0336      	lsls	r6, r6, #12
 80016fe:	076d      	lsls	r5, r5, #29
 8001700:	4316      	orrs	r6, r2
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <__aeabi_f2d+0xa0>)
 8001704:	e7cf      	b.n	80016a6 <__aeabi_f2d+0x1e>
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <__aeabi_f2d+0xa0>)
 8001708:	2600      	movs	r6, #0
 800170a:	e7cc      	b.n	80016a6 <__aeabi_f2d+0x1e>
 800170c:	2300      	movs	r3, #0
 800170e:	2600      	movs	r6, #0
 8001710:	e7c9      	b.n	80016a6 <__aeabi_f2d+0x1e>
 8001712:	0003      	movs	r3, r0
 8001714:	002a      	movs	r2, r5
 8001716:	3b0b      	subs	r3, #11
 8001718:	409a      	lsls	r2, r3
 800171a:	2500      	movs	r5, #0
 800171c:	e7e3      	b.n	80016e6 <__aeabi_f2d+0x5e>
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	800fffff 	.word	0x800fffff
 8001724:	00000389 	.word	0x00000389
 8001728:	000007ff 	.word	0x000007ff

0800172c <__aeabi_d2f>:
 800172c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172e:	004c      	lsls	r4, r1, #1
 8001730:	0d64      	lsrs	r4, r4, #21
 8001732:	030b      	lsls	r3, r1, #12
 8001734:	1c62      	adds	r2, r4, #1
 8001736:	0a5b      	lsrs	r3, r3, #9
 8001738:	0f46      	lsrs	r6, r0, #29
 800173a:	0552      	lsls	r2, r2, #21
 800173c:	0fc9      	lsrs	r1, r1, #31
 800173e:	431e      	orrs	r6, r3
 8001740:	00c5      	lsls	r5, r0, #3
 8001742:	0d52      	lsrs	r2, r2, #21
 8001744:	2a01      	cmp	r2, #1
 8001746:	dd29      	ble.n	800179c <__aeabi_d2f+0x70>
 8001748:	4b37      	ldr	r3, [pc, #220]	; (8001828 <__aeabi_d2f+0xfc>)
 800174a:	18e7      	adds	r7, r4, r3
 800174c:	2ffe      	cmp	r7, #254	; 0xfe
 800174e:	dc1c      	bgt.n	800178a <__aeabi_d2f+0x5e>
 8001750:	2f00      	cmp	r7, #0
 8001752:	dd3b      	ble.n	80017cc <__aeabi_d2f+0xa0>
 8001754:	0180      	lsls	r0, r0, #6
 8001756:	1e43      	subs	r3, r0, #1
 8001758:	4198      	sbcs	r0, r3
 800175a:	2207      	movs	r2, #7
 800175c:	00f3      	lsls	r3, r6, #3
 800175e:	0f6d      	lsrs	r5, r5, #29
 8001760:	4303      	orrs	r3, r0
 8001762:	432b      	orrs	r3, r5
 8001764:	401a      	ands	r2, r3
 8001766:	2a00      	cmp	r2, #0
 8001768:	d004      	beq.n	8001774 <__aeabi_d2f+0x48>
 800176a:	220f      	movs	r2, #15
 800176c:	401a      	ands	r2, r3
 800176e:	2a04      	cmp	r2, #4
 8001770:	d000      	beq.n	8001774 <__aeabi_d2f+0x48>
 8001772:	3304      	adds	r3, #4
 8001774:	2280      	movs	r2, #128	; 0x80
 8001776:	04d2      	lsls	r2, r2, #19
 8001778:	401a      	ands	r2, r3
 800177a:	d024      	beq.n	80017c6 <__aeabi_d2f+0x9a>
 800177c:	3701      	adds	r7, #1
 800177e:	b2fa      	uxtb	r2, r7
 8001780:	2fff      	cmp	r7, #255	; 0xff
 8001782:	d002      	beq.n	800178a <__aeabi_d2f+0x5e>
 8001784:	019b      	lsls	r3, r3, #6
 8001786:	0a58      	lsrs	r0, r3, #9
 8001788:	e001      	b.n	800178e <__aeabi_d2f+0x62>
 800178a:	22ff      	movs	r2, #255	; 0xff
 800178c:	2000      	movs	r0, #0
 800178e:	0240      	lsls	r0, r0, #9
 8001790:	05d2      	lsls	r2, r2, #23
 8001792:	0a40      	lsrs	r0, r0, #9
 8001794:	07c9      	lsls	r1, r1, #31
 8001796:	4310      	orrs	r0, r2
 8001798:	4308      	orrs	r0, r1
 800179a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800179c:	4335      	orrs	r5, r6
 800179e:	2c00      	cmp	r4, #0
 80017a0:	d104      	bne.n	80017ac <__aeabi_d2f+0x80>
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d10a      	bne.n	80017bc <__aeabi_d2f+0x90>
 80017a6:	2200      	movs	r2, #0
 80017a8:	2000      	movs	r0, #0
 80017aa:	e7f0      	b.n	800178e <__aeabi_d2f+0x62>
 80017ac:	2d00      	cmp	r5, #0
 80017ae:	d0ec      	beq.n	800178a <__aeabi_d2f+0x5e>
 80017b0:	2080      	movs	r0, #128	; 0x80
 80017b2:	03c0      	lsls	r0, r0, #15
 80017b4:	4330      	orrs	r0, r6
 80017b6:	22ff      	movs	r2, #255	; 0xff
 80017b8:	e7e9      	b.n	800178e <__aeabi_d2f+0x62>
 80017ba:	2400      	movs	r4, #0
 80017bc:	2300      	movs	r3, #0
 80017be:	025b      	lsls	r3, r3, #9
 80017c0:	0a58      	lsrs	r0, r3, #9
 80017c2:	b2e2      	uxtb	r2, r4
 80017c4:	e7e3      	b.n	800178e <__aeabi_d2f+0x62>
 80017c6:	08db      	lsrs	r3, r3, #3
 80017c8:	003c      	movs	r4, r7
 80017ca:	e7f8      	b.n	80017be <__aeabi_d2f+0x92>
 80017cc:	003b      	movs	r3, r7
 80017ce:	3317      	adds	r3, #23
 80017d0:	dbf3      	blt.n	80017ba <__aeabi_d2f+0x8e>
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	041b      	lsls	r3, r3, #16
 80017d6:	4333      	orrs	r3, r6
 80017d8:	261e      	movs	r6, #30
 80017da:	1bf6      	subs	r6, r6, r7
 80017dc:	2e1f      	cmp	r6, #31
 80017de:	dd14      	ble.n	800180a <__aeabi_d2f+0xde>
 80017e0:	2202      	movs	r2, #2
 80017e2:	4252      	negs	r2, r2
 80017e4:	1bd7      	subs	r7, r2, r7
 80017e6:	001a      	movs	r2, r3
 80017e8:	40fa      	lsrs	r2, r7
 80017ea:	0017      	movs	r7, r2
 80017ec:	2e20      	cmp	r6, #32
 80017ee:	d004      	beq.n	80017fa <__aeabi_d2f+0xce>
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <__aeabi_d2f+0x100>)
 80017f2:	4694      	mov	ip, r2
 80017f4:	4464      	add	r4, ip
 80017f6:	40a3      	lsls	r3, r4
 80017f8:	431d      	orrs	r5, r3
 80017fa:	002b      	movs	r3, r5
 80017fc:	1e5d      	subs	r5, r3, #1
 80017fe:	41ab      	sbcs	r3, r5
 8001800:	2207      	movs	r2, #7
 8001802:	433b      	orrs	r3, r7
 8001804:	401a      	ands	r2, r3
 8001806:	2700      	movs	r7, #0
 8001808:	e7ad      	b.n	8001766 <__aeabi_d2f+0x3a>
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <__aeabi_d2f+0x104>)
 800180c:	0028      	movs	r0, r5
 800180e:	18a2      	adds	r2, r4, r2
 8001810:	4095      	lsls	r5, r2
 8001812:	4093      	lsls	r3, r2
 8001814:	1e6c      	subs	r4, r5, #1
 8001816:	41a5      	sbcs	r5, r4
 8001818:	40f0      	lsrs	r0, r6
 800181a:	2207      	movs	r2, #7
 800181c:	432b      	orrs	r3, r5
 800181e:	4303      	orrs	r3, r0
 8001820:	401a      	ands	r2, r3
 8001822:	2700      	movs	r7, #0
 8001824:	e79f      	b.n	8001766 <__aeabi_d2f+0x3a>
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	fffffc80 	.word	0xfffffc80
 800182c:	fffffca2 	.word	0xfffffca2
 8001830:	fffffc82 	.word	0xfffffc82

08001834 <__clzsi2>:
 8001834:	211c      	movs	r1, #28
 8001836:	2301      	movs	r3, #1
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	4298      	cmp	r0, r3
 800183c:	d301      	bcc.n	8001842 <__clzsi2+0xe>
 800183e:	0c00      	lsrs	r0, r0, #16
 8001840:	3910      	subs	r1, #16
 8001842:	0a1b      	lsrs	r3, r3, #8
 8001844:	4298      	cmp	r0, r3
 8001846:	d301      	bcc.n	800184c <__clzsi2+0x18>
 8001848:	0a00      	lsrs	r0, r0, #8
 800184a:	3908      	subs	r1, #8
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	4298      	cmp	r0, r3
 8001850:	d301      	bcc.n	8001856 <__clzsi2+0x22>
 8001852:	0900      	lsrs	r0, r0, #4
 8001854:	3904      	subs	r1, #4
 8001856:	a202      	add	r2, pc, #8	; (adr r2, 8001860 <__clzsi2+0x2c>)
 8001858:	5c10      	ldrb	r0, [r2, r0]
 800185a:	1840      	adds	r0, r0, r1
 800185c:	4770      	bx	lr
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	02020304 	.word	0x02020304
 8001864:	01010101 	.word	0x01010101
	...

08001870 <__clzdi2>:
 8001870:	b510      	push	{r4, lr}
 8001872:	2900      	cmp	r1, #0
 8001874:	d103      	bne.n	800187e <__clzdi2+0xe>
 8001876:	f7ff ffdd 	bl	8001834 <__clzsi2>
 800187a:	3020      	adds	r0, #32
 800187c:	e002      	b.n	8001884 <__clzdi2+0x14>
 800187e:	1c08      	adds	r0, r1, #0
 8001880:	f7ff ffd8 	bl	8001834 <__clzsi2>
 8001884:	bd10      	pop	{r4, pc}
 8001886:	46c0      	nop			; (mov r8, r8)

08001888 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800188e:	1dfb      	adds	r3, r7, #7
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_Init+0x3c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_Init+0x3c>)
 800189a:	2140      	movs	r1, #64	; 0x40
 800189c:	430a      	orrs	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018a0:	2000      	movs	r0, #0
 80018a2:	f000 f811 	bl	80018c8 <HAL_InitTick>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80018aa:	1dfb      	adds	r3, r7, #7
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
 80018b0:	e001      	b.n	80018b6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018b2:	f005 f873 	bl	800699c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	781b      	ldrb	r3, [r3, #0]
}
 80018ba:	0018      	movs	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	b002      	add	sp, #8
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	40022000 	.word	0x40022000

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018d0:	230f      	movs	r3, #15
 80018d2:	18fb      	adds	r3, r7, r3
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_InitTick+0x50>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	23fa      	movs	r3, #250	; 0xfa
 80018de:	0099      	lsls	r1, r3, #2
 80018e0:	0010      	movs	r0, r2
 80018e2:	f7fe fc11 	bl	8000108 <__udivsi3>
 80018e6:	0003      	movs	r3, r0
 80018e8:	0018      	movs	r0, r3
 80018ea:	f000 f8f2 	bl	8001ad2 <HAL_SYSTICK_Config>
 80018ee:	1e03      	subs	r3, r0, #0
 80018f0:	d004      	beq.n	80018fc <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80018f2:	230f      	movs	r3, #15
 80018f4:	18fb      	adds	r3, r7, r3
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	e006      	b.n	800190a <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	2301      	movs	r3, #1
 8001900:	425b      	negs	r3, r3
 8001902:	2200      	movs	r2, #0
 8001904:	0018      	movs	r0, r3
 8001906:	f000 f8cf 	bl	8001aa8 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800190a:	230f      	movs	r3, #15
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	781b      	ldrb	r3, [r3, #0]
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b004      	add	sp, #16
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000000 	.word	0x20000000

0800191c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  uwTick++;
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_IncTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	4b02      	ldr	r3, [pc, #8]	; (8001930 <HAL_IncTick+0x14>)
 8001928:	601a      	str	r2, [r3, #0]
}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000090 	.word	0x20000090

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b02      	ldr	r3, [pc, #8]	; (8001944 <HAL_GetTick+0x10>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	20000090 	.word	0x20000090

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff fff0 	bl	8001934 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3301      	adds	r3, #1
 8001960:	d002      	beq.n	8001968 <HAL_Delay+0x20>
  {
    wait++;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3301      	adds	r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001968:	46c0      	nop			; (mov r8, r8)
 800196a:	f7ff ffe3 	bl	8001934 <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	429a      	cmp	r2, r3
 8001978:	d8f7      	bhi.n	800196a <HAL_Delay+0x22>
  {
  }
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b004      	add	sp, #16
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	0002      	movs	r2, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b7f      	cmp	r3, #127	; 0x7f
 8001998:	d932      	bls.n	8001a00 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800199a:	4a2f      	ldr	r2, [pc, #188]	; (8001a58 <NVIC_SetPriority+0xd4>)
 800199c:	1dfb      	adds	r3, r7, #7
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	0019      	movs	r1, r3
 80019a2:	230f      	movs	r3, #15
 80019a4:	400b      	ands	r3, r1
 80019a6:	3b08      	subs	r3, #8
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	3306      	adds	r3, #6
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	18d3      	adds	r3, r2, r3
 80019b0:	3304      	adds	r3, #4
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	1dfa      	adds	r2, r7, #7
 80019b6:	7812      	ldrb	r2, [r2, #0]
 80019b8:	0011      	movs	r1, r2
 80019ba:	2203      	movs	r2, #3
 80019bc:	400a      	ands	r2, r1
 80019be:	00d2      	lsls	r2, r2, #3
 80019c0:	21ff      	movs	r1, #255	; 0xff
 80019c2:	4091      	lsls	r1, r2
 80019c4:	000a      	movs	r2, r1
 80019c6:	43d2      	mvns	r2, r2
 80019c8:	401a      	ands	r2, r3
 80019ca:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	019b      	lsls	r3, r3, #6
 80019d0:	22ff      	movs	r2, #255	; 0xff
 80019d2:	401a      	ands	r2, r3
 80019d4:	1dfb      	adds	r3, r7, #7
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	0018      	movs	r0, r3
 80019da:	2303      	movs	r3, #3
 80019dc:	4003      	ands	r3, r0
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019e2:	481d      	ldr	r0, [pc, #116]	; (8001a58 <NVIC_SetPriority+0xd4>)
 80019e4:	1dfb      	adds	r3, r7, #7
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	001c      	movs	r4, r3
 80019ea:	230f      	movs	r3, #15
 80019ec:	4023      	ands	r3, r4
 80019ee:	3b08      	subs	r3, #8
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	430a      	orrs	r2, r1
 80019f4:	3306      	adds	r3, #6
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	18c3      	adds	r3, r0, r3
 80019fa:	3304      	adds	r3, #4
 80019fc:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019fe:	e027      	b.n	8001a50 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a00:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <NVIC_SetPriority+0xd8>)
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	33c0      	adds	r3, #192	; 0xc0
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	589b      	ldr	r3, [r3, r2]
 8001a10:	1dfa      	adds	r2, r7, #7
 8001a12:	7812      	ldrb	r2, [r2, #0]
 8001a14:	0011      	movs	r1, r2
 8001a16:	2203      	movs	r2, #3
 8001a18:	400a      	ands	r2, r1
 8001a1a:	00d2      	lsls	r2, r2, #3
 8001a1c:	21ff      	movs	r1, #255	; 0xff
 8001a1e:	4091      	lsls	r1, r2
 8001a20:	000a      	movs	r2, r1
 8001a22:	43d2      	mvns	r2, r2
 8001a24:	401a      	ands	r2, r3
 8001a26:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	019b      	lsls	r3, r3, #6
 8001a2c:	22ff      	movs	r2, #255	; 0xff
 8001a2e:	401a      	ands	r2, r3
 8001a30:	1dfb      	adds	r3, r7, #7
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	0018      	movs	r0, r3
 8001a36:	2303      	movs	r3, #3
 8001a38:	4003      	ands	r3, r0
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a3e:	4807      	ldr	r0, [pc, #28]	; (8001a5c <NVIC_SetPriority+0xd8>)
 8001a40:	1dfb      	adds	r3, r7, #7
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	33c0      	adds	r3, #192	; 0xc0
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	501a      	str	r2, [r3, r0]
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b003      	add	sp, #12
 8001a56:	bd90      	pop	{r4, r7, pc}
 8001a58:	e000ed00 	.word	0xe000ed00
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	4a0c      	ldr	r2, [pc, #48]	; (8001aa0 <SysTick_Config+0x40>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e010      	b.n	8001a98 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <SysTick_Config+0x44>)
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	2301      	movs	r3, #1
 8001a80:	425b      	negs	r3, r3
 8001a82:	2103      	movs	r1, #3
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff ff7d 	bl	8001984 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <SysTick_Config+0x44>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <SysTick_Config+0x44>)
 8001a92:	2207      	movs	r2, #7
 8001a94:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	0018      	movs	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b002      	add	sp, #8
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	00ffffff 	.word	0x00ffffff
 8001aa4:	e000e010 	.word	0xe000e010

08001aa8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	1c02      	adds	r2, r0, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f7ff ff5d 	bl	8001984 <NVIC_SetPriority>
}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b004      	add	sp, #16
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7ff ffbf 	bl	8001a60 <SysTick_Config>
 8001ae2:	0003      	movs	r3, r0
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d106      	bne.n	8001b08 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8001b00:	2104      	movs	r1, #4
 8001b02:	430a      	orrs	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001b06:	e005      	b.n	8001b14 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8001b0e:	2104      	movs	r1, #4
 8001b10:	438a      	bics	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
}
 8001b14:	46c0      	nop			; (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b002      	add	sp, #8
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b36:	e14f      	b.n	8001dd8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4091      	lsls	r1, r2
 8001b42:	000a      	movs	r2, r1
 8001b44:	4013      	ands	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d100      	bne.n	8001b50 <HAL_GPIO_Init+0x30>
 8001b4e:	e140      	b.n	8001dd2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x40>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b12      	cmp	r3, #18
 8001b5e:	d123      	bne.n	8001ba8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	08da      	lsrs	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3208      	adds	r2, #8
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	58d3      	ldr	r3, [r2, r3]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2207      	movs	r2, #7
 8001b72:	4013      	ands	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	220f      	movs	r2, #15
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	0013      	movs	r3, r2
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2107      	movs	r1, #7
 8001b8c:	400b      	ands	r3, r1
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	409a      	lsls	r2, r3
 8001b92:	0013      	movs	r3, r2
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	0092      	lsls	r2, r2, #2
 8001ba4:	6939      	ldr	r1, [r7, #16]
 8001ba6:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d00b      	beq.n	8001bc8 <HAL_GPIO_Init+0xa8>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d007      	beq.n	8001bc8 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bbc:	2b11      	cmp	r3, #17
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b12      	cmp	r3, #18
 8001bc6:	d130      	bne.n	8001c2a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	0013      	movs	r3, r2
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	409a      	lsls	r2, r3
 8001bea:	0013      	movs	r3, r2
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bfe:	2201      	movs	r2, #1
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
 8001c04:	0013      	movs	r3, r2
 8001c06:	43da      	mvns	r2, r3
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	2201      	movs	r2, #1
 8001c16:	401a      	ands	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	0013      	movs	r3, r2
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	409a      	lsls	r2, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2203      	movs	r2, #3
 8001c48:	401a      	ands	r2, r3
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	0013      	movs	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	0013      	movs	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	055b      	lsls	r3, r3, #21
 8001c96:	4013      	ands	r3, r2
 8001c98:	d100      	bne.n	8001c9c <HAL_GPIO_Init+0x17c>
 8001c9a:	e09a      	b.n	8001dd2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9c:	4b54      	ldr	r3, [pc, #336]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca0:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001ca8:	4a52      	ldr	r2, [pc, #328]	; (8001df4 <HAL_GPIO_Init+0x2d4>)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	589b      	ldr	r3, [r3, r2]
 8001cb4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	4013      	ands	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	220f      	movs	r2, #15
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	0013      	movs	r3, r2
 8001cc4:	43da      	mvns	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	23a0      	movs	r3, #160	; 0xa0
 8001cd0:	05db      	lsls	r3, r3, #23
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d019      	beq.n	8001d0a <HAL_GPIO_Init+0x1ea>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a47      	ldr	r2, [pc, #284]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0x1e6>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a46      	ldr	r2, [pc, #280]	; (8001dfc <HAL_GPIO_Init+0x2dc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00d      	beq.n	8001d02 <HAL_GPIO_Init+0x1e2>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a45      	ldr	r2, [pc, #276]	; (8001e00 <HAL_GPIO_Init+0x2e0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d007      	beq.n	8001cfe <HAL_GPIO_Init+0x1de>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a44      	ldr	r2, [pc, #272]	; (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_GPIO_Init+0x1da>
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	e008      	b.n	8001d0c <HAL_GPIO_Init+0x1ec>
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x1ec>
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x1ec>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x1ec>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x1ec>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	2103      	movs	r1, #3
 8001d10:	400a      	ands	r2, r1
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	4093      	lsls	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d1c:	4935      	ldr	r1, [pc, #212]	; (8001df4 <HAL_GPIO_Init+0x2d4>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2a:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43da      	mvns	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	025b      	lsls	r3, r3, #9
 8001d42:	4013      	ands	r3, r2
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d4e:	4b2e      	ldr	r3, [pc, #184]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d54:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43da      	mvns	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	029b      	lsls	r3, r3, #10
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43da      	mvns	r2, r3
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	035b      	lsls	r3, r3, #13
 8001d96:	4013      	ands	r3, r2
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001da2:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	43da      	mvns	r2, r3
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	039b      	lsls	r3, r3, #14
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	40da      	lsrs	r2, r3
 8001de0:	1e13      	subs	r3, r2, #0
 8001de2:	d000      	beq.n	8001de6 <HAL_GPIO_Init+0x2c6>
 8001de4:	e6a8      	b.n	8001b38 <HAL_GPIO_Init+0x18>
  }
}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b006      	add	sp, #24
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40010000 	.word	0x40010000
 8001df8:	50000400 	.word	0x50000400
 8001dfc:	50000800 	.word	0x50000800
 8001e00:	50000c00 	.word	0x50000c00
 8001e04:	50001c00 	.word	0x50001c00
 8001e08:	40010400 	.word	0x40010400

08001e0c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	000a      	movs	r2, r1
 8001e16:	1cbb      	adds	r3, r7, #2
 8001e18:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	1cba      	adds	r2, r7, #2
 8001e20:	8812      	ldrh	r2, [r2, #0]
 8001e22:	4013      	ands	r3, r2
 8001e24:	d004      	beq.n	8001e30 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001e26:	230f      	movs	r3, #15
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	e003      	b.n	8001e38 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e30:	230f      	movs	r3, #15
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001e38:	230f      	movs	r3, #15
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	781b      	ldrb	r3, [r3, #0]
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b004      	add	sp, #16
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	0008      	movs	r0, r1
 8001e50:	0011      	movs	r1, r2
 8001e52:	1cbb      	adds	r3, r7, #2
 8001e54:	1c02      	adds	r2, r0, #0
 8001e56:	801a      	strh	r2, [r3, #0]
 8001e58:	1c7b      	adds	r3, r7, #1
 8001e5a:	1c0a      	adds	r2, r1, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001e5e:	1c7b      	adds	r3, r7, #1
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d004      	beq.n	8001e70 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e66:	1cbb      	adds	r3, r7, #2
 8001e68:	881a      	ldrh	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001e6e:	e003      	b.n	8001e78 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001e70:	1cbb      	adds	r3, r7, #2
 8001e72:	881a      	ldrh	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e78:	46c0      	nop			; (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b002      	add	sp, #8
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e082      	b.n	8001f98 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2241      	movs	r2, #65	; 0x41
 8001e96:	5c9b      	ldrb	r3, [r3, r2]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d107      	bne.n	8001eae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2240      	movs	r2, #64	; 0x40
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f004 f81d 	bl	8005ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2241      	movs	r2, #65	; 0x41
 8001eb2:	2124      	movs	r1, #36	; 0x24
 8001eb4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	438a      	bics	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4934      	ldr	r1, [pc, #208]	; (8001fa0 <HAL_I2C_Init+0x120>)
 8001ed0:	400a      	ands	r2, r1
 8001ed2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4931      	ldr	r1, [pc, #196]	; (8001fa4 <HAL_I2C_Init+0x124>)
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d108      	bne.n	8001efe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2180      	movs	r1, #128	; 0x80
 8001ef6:	0209      	lsls	r1, r1, #8
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	e007      	b.n	8001f0e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2184      	movs	r1, #132	; 0x84
 8001f08:	0209      	lsls	r1, r1, #8
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d104      	bne.n	8001f20 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2280      	movs	r2, #128	; 0x80
 8001f1c:	0112      	lsls	r2, r2, #4
 8001f1e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	491f      	ldr	r1, [pc, #124]	; (8001fa8 <HAL_I2C_Init+0x128>)
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	491a      	ldr	r1, [pc, #104]	; (8001fa4 <HAL_I2C_Init+0x124>)
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	0011      	movs	r1, r2
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	021a      	lsls	r2, r3, #8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69d9      	ldr	r1, [r3, #28]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1a      	ldr	r2, [r3, #32]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2101      	movs	r1, #1
 8001f76:	430a      	orrs	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2241      	movs	r2, #65	; 0x41
 8001f84:	2120      	movs	r1, #32
 8001f86:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2242      	movs	r2, #66	; 0x42
 8001f92:	2100      	movs	r1, #0
 8001f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	f0ffffff 	.word	0xf0ffffff
 8001fa4:	ffff7fff 	.word	0xffff7fff
 8001fa8:	02008000 	.word	0x02008000

08001fac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	0008      	movs	r0, r1
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	0019      	movs	r1, r3
 8001fba:	230a      	movs	r3, #10
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	1c02      	adds	r2, r0, #0
 8001fc0:	801a      	strh	r2, [r3, #0]
 8001fc2:	2308      	movs	r3, #8
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	1c0a      	adds	r2, r1, #0
 8001fc8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2241      	movs	r2, #65	; 0x41
 8001fce:	5c9b      	ldrb	r3, [r3, r2]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b20      	cmp	r3, #32
 8001fd4:	d000      	beq.n	8001fd8 <HAL_I2C_Master_Transmit+0x2c>
 8001fd6:	e0e7      	b.n	80021a8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	5c9b      	ldrb	r3, [r3, r2]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_I2C_Master_Transmit+0x3a>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e0e1      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1fe>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2240      	movs	r2, #64	; 0x40
 8001fea:	2101      	movs	r1, #1
 8001fec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fee:	f7ff fca1 	bl	8001934 <HAL_GetTick>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	0219      	lsls	r1, r3, #8
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2319      	movs	r3, #25
 8002002:	2201      	movs	r2, #1
 8002004:	f000 fa04 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 8002008:	1e03      	subs	r3, r0, #0
 800200a:	d001      	beq.n	8002010 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0cc      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2241      	movs	r2, #65	; 0x41
 8002014:	2121      	movs	r1, #33	; 0x21
 8002016:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2242      	movs	r2, #66	; 0x42
 800201c:	2110      	movs	r1, #16
 800201e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2208      	movs	r2, #8
 8002030:	18ba      	adds	r2, r7, r2
 8002032:	8812      	ldrh	r2, [r2, #0]
 8002034:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002040:	b29b      	uxth	r3, r3
 8002042:	2bff      	cmp	r3, #255	; 0xff
 8002044:	d911      	bls.n	800206a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	22ff      	movs	r2, #255	; 0xff
 800204a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	b2da      	uxtb	r2, r3
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	045c      	lsls	r4, r3, #17
 8002056:	230a      	movs	r3, #10
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	8819      	ldrh	r1, [r3, #0]
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	4b55      	ldr	r3, [pc, #340]	; (80021b4 <HAL_I2C_Master_Transmit+0x208>)
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	0023      	movs	r3, r4
 8002064:	f000 fb60 	bl	8002728 <I2C_TransferConfig>
 8002068:	e075      	b.n	8002156 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002078:	b2da      	uxtb	r2, r3
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	049c      	lsls	r4, r3, #18
 800207e:	230a      	movs	r3, #10
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	8819      	ldrh	r1, [r3, #0]
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	4b4b      	ldr	r3, [pc, #300]	; (80021b4 <HAL_I2C_Master_Transmit+0x208>)
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	0023      	movs	r3, r4
 800208c:	f000 fb4c 	bl	8002728 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002090:	e061      	b.n	8002156 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	0018      	movs	r0, r3
 800209a:	f000 f9f8 	bl	800248e <I2C_WaitOnTXISFlagUntilTimeout>
 800209e:	1e03      	subs	r3, r0, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e081      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	781a      	ldrb	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d03a      	beq.n	8002156 <HAL_I2C_Master_Transmit+0x1aa>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d136      	bne.n	8002156 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	0013      	movs	r3, r2
 80020f2:	2200      	movs	r2, #0
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	f000 f98b 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 80020fa:	1e03      	subs	r3, r0, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e053      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	2bff      	cmp	r3, #255	; 0xff
 800210a:	d911      	bls.n	8002130 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	22ff      	movs	r2, #255	; 0xff
 8002110:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002116:	b2da      	uxtb	r2, r3
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	045c      	lsls	r4, r3, #17
 800211c:	230a      	movs	r3, #10
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	8819      	ldrh	r1, [r3, #0]
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	2300      	movs	r3, #0
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	0023      	movs	r3, r4
 800212a:	f000 fafd 	bl	8002728 <I2C_TransferConfig>
 800212e:	e012      	b.n	8002156 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	b2da      	uxtb	r2, r3
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	049c      	lsls	r4, r3, #18
 8002144:	230a      	movs	r3, #10
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	8819      	ldrh	r1, [r3, #0]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	2300      	movs	r3, #0
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	0023      	movs	r3, r4
 8002152:	f000 fae9 	bl	8002728 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d198      	bne.n	8002092 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	0018      	movs	r0, r3
 8002168:	f000 f9d0 	bl	800250c <I2C_WaitOnSTOPFlagUntilTimeout>
 800216c:	1e03      	subs	r3, r0, #0
 800216e:	d001      	beq.n	8002174 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e01a      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2220      	movs	r2, #32
 800217a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	490c      	ldr	r1, [pc, #48]	; (80021b8 <HAL_I2C_Master_Transmit+0x20c>)
 8002188:	400a      	ands	r2, r1
 800218a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2241      	movs	r2, #65	; 0x41
 8002190:	2120      	movs	r1, #32
 8002192:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2242      	movs	r2, #66	; 0x42
 8002198:	2100      	movs	r1, #0
 800219a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2240      	movs	r2, #64	; 0x40
 80021a0:	2100      	movs	r1, #0
 80021a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e000      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80021a8:	2302      	movs	r3, #2
  }
}
 80021aa:	0018      	movs	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b007      	add	sp, #28
 80021b0:	bd90      	pop	{r4, r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	80002000 	.word	0x80002000
 80021b8:	fe00e800 	.word	0xfe00e800

080021bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	0008      	movs	r0, r1
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	0019      	movs	r1, r3
 80021ca:	230a      	movs	r3, #10
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	1c02      	adds	r2, r0, #0
 80021d0:	801a      	strh	r2, [r3, #0]
 80021d2:	2308      	movs	r3, #8
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	1c0a      	adds	r2, r1, #0
 80021d8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2241      	movs	r2, #65	; 0x41
 80021de:	5c9b      	ldrb	r3, [r3, r2]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b20      	cmp	r3, #32
 80021e4:	d000      	beq.n	80021e8 <HAL_I2C_Master_Receive+0x2c>
 80021e6:	e0e8      	b.n	80023ba <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	5c9b      	ldrb	r3, [r3, r2]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_I2C_Master_Receive+0x3a>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e0e2      	b.n	80023bc <HAL_I2C_Master_Receive+0x200>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2240      	movs	r2, #64	; 0x40
 80021fa:	2101      	movs	r1, #1
 80021fc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021fe:	f7ff fb99 	bl	8001934 <HAL_GetTick>
 8002202:	0003      	movs	r3, r0
 8002204:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	0219      	lsls	r1, r3, #8
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2319      	movs	r3, #25
 8002212:	2201      	movs	r2, #1
 8002214:	f000 f8fc 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 8002218:	1e03      	subs	r3, r0, #0
 800221a:	d001      	beq.n	8002220 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0cd      	b.n	80023bc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2241      	movs	r2, #65	; 0x41
 8002224:	2122      	movs	r1, #34	; 0x22
 8002226:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2242      	movs	r2, #66	; 0x42
 800222c:	2110      	movs	r1, #16
 800222e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2208      	movs	r2, #8
 8002240:	18ba      	adds	r2, r7, r2
 8002242:	8812      	ldrh	r2, [r2, #0]
 8002244:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	2bff      	cmp	r3, #255	; 0xff
 8002254:	d911      	bls.n	800227a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	22ff      	movs	r2, #255	; 0xff
 800225a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	b2da      	uxtb	r2, r3
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	045c      	lsls	r4, r3, #17
 8002266:	230a      	movs	r3, #10
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	8819      	ldrh	r1, [r3, #0]
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	4b55      	ldr	r3, [pc, #340]	; (80023c4 <HAL_I2C_Master_Receive+0x208>)
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	0023      	movs	r3, r4
 8002274:	f000 fa58 	bl	8002728 <I2C_TransferConfig>
 8002278:	e076      	b.n	8002368 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002288:	b2da      	uxtb	r2, r3
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	049c      	lsls	r4, r3, #18
 800228e:	230a      	movs	r3, #10
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	8819      	ldrh	r1, [r3, #0]
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	4b4b      	ldr	r3, [pc, #300]	; (80023c4 <HAL_I2C_Master_Receive+0x208>)
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	0023      	movs	r3, r4
 800229c:	f000 fa44 	bl	8002728 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80022a0:	e062      	b.n	8002368 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	0018      	movs	r0, r3
 80022aa:	f000 f96b 	bl	8002584 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022ae:	1e03      	subs	r3, r0, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e082      	b.n	80023bc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d03a      	beq.n	8002368 <HAL_I2C_Master_Receive+0x1ac>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d136      	bne.n	8002368 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	0013      	movs	r3, r2
 8002304:	2200      	movs	r2, #0
 8002306:	2180      	movs	r1, #128	; 0x80
 8002308:	f000 f882 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 800230c:	1e03      	subs	r3, r0, #0
 800230e:	d001      	beq.n	8002314 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e053      	b.n	80023bc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002318:	b29b      	uxth	r3, r3
 800231a:	2bff      	cmp	r3, #255	; 0xff
 800231c:	d911      	bls.n	8002342 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	22ff      	movs	r2, #255	; 0xff
 8002322:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002328:	b2da      	uxtb	r2, r3
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	045c      	lsls	r4, r3, #17
 800232e:	230a      	movs	r3, #10
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	8819      	ldrh	r1, [r3, #0]
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	2300      	movs	r3, #0
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	0023      	movs	r3, r4
 800233c:	f000 f9f4 	bl	8002728 <I2C_TransferConfig>
 8002340:	e012      	b.n	8002368 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	b2da      	uxtb	r2, r3
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	049c      	lsls	r4, r3, #18
 8002356:	230a      	movs	r3, #10
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	8819      	ldrh	r1, [r3, #0]
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	2300      	movs	r3, #0
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	0023      	movs	r3, r4
 8002364:	f000 f9e0 	bl	8002728 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d197      	bne.n	80022a2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	0018      	movs	r0, r3
 800237a:	f000 f8c7 	bl	800250c <I2C_WaitOnSTOPFlagUntilTimeout>
 800237e:	1e03      	subs	r3, r0, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e01a      	b.n	80023bc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2220      	movs	r2, #32
 800238c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	490b      	ldr	r1, [pc, #44]	; (80023c8 <HAL_I2C_Master_Receive+0x20c>)
 800239a:	400a      	ands	r2, r1
 800239c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2241      	movs	r2, #65	; 0x41
 80023a2:	2120      	movs	r1, #32
 80023a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2242      	movs	r2, #66	; 0x42
 80023aa:	2100      	movs	r1, #0
 80023ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2240      	movs	r2, #64	; 0x40
 80023b2:	2100      	movs	r1, #0
 80023b4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80023ba:	2302      	movs	r3, #2
  }
}
 80023bc:	0018      	movs	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	b007      	add	sp, #28
 80023c2:	bd90      	pop	{r4, r7, pc}
 80023c4:	80002400 	.word	0x80002400
 80023c8:	fe00e800 	.word	0xfe00e800

080023cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2202      	movs	r2, #2
 80023dc:	4013      	ands	r3, r2
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d103      	bne.n	80023ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2200      	movs	r2, #0
 80023e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2201      	movs	r2, #1
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d007      	beq.n	8002408 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2101      	movs	r1, #1
 8002404:	430a      	orrs	r2, r1
 8002406:	619a      	str	r2, [r3, #24]
  }
}
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b002      	add	sp, #8
 800240e:	bd80      	pop	{r7, pc}

08002410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	1dfb      	adds	r3, r7, #7
 800241e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002420:	e021      	b.n	8002466 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	d01e      	beq.n	8002466 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002428:	f7ff fa84 	bl	8001934 <HAL_GetTick>
 800242c:	0002      	movs	r2, r0
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d302      	bcc.n	800243e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d113      	bne.n	8002466 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	2220      	movs	r2, #32
 8002444:	431a      	orrs	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2241      	movs	r2, #65	; 0x41
 800244e:	2120      	movs	r1, #32
 8002450:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2242      	movs	r2, #66	; 0x42
 8002456:	2100      	movs	r1, #0
 8002458:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2240      	movs	r2, #64	; 0x40
 800245e:	2100      	movs	r1, #0
 8002460:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	4013      	ands	r3, r2
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	425a      	negs	r2, r3
 8002476:	4153      	adcs	r3, r2
 8002478:	b2db      	uxtb	r3, r3
 800247a:	001a      	movs	r2, r3
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d0ce      	beq.n	8002422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	0018      	movs	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	b004      	add	sp, #16
 800248c:	bd80      	pop	{r7, pc}

0800248e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800249a:	e02b      	b.n	80024f4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 f8da 	bl	800265c <I2C_IsAcknowledgeFailed>
 80024a8:	1e03      	subs	r3, r0, #0
 80024aa:	d001      	beq.n	80024b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e029      	b.n	8002504 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	3301      	adds	r3, #1
 80024b4:	d01e      	beq.n	80024f4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b6:	f7ff fa3d 	bl	8001934 <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d302      	bcc.n	80024cc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d113      	bne.n	80024f4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	2220      	movs	r2, #32
 80024d2:	431a      	orrs	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2241      	movs	r2, #65	; 0x41
 80024dc:	2120      	movs	r1, #32
 80024de:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2242      	movs	r2, #66	; 0x42
 80024e4:	2100      	movs	r1, #0
 80024e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2240      	movs	r2, #64	; 0x40
 80024ec:	2100      	movs	r1, #0
 80024ee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e007      	b.n	8002504 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2202      	movs	r2, #2
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d1cc      	bne.n	800249c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b004      	add	sp, #16
 800250a:	bd80      	pop	{r7, pc}

0800250c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002518:	e028      	b.n	800256c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	0018      	movs	r0, r3
 8002522:	f000 f89b 	bl	800265c <I2C_IsAcknowledgeFailed>
 8002526:	1e03      	subs	r3, r0, #0
 8002528:	d001      	beq.n	800252e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e026      	b.n	800257c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252e:	f7ff fa01 	bl	8001934 <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	429a      	cmp	r2, r3
 800253c:	d302      	bcc.n	8002544 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d113      	bne.n	800256c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002548:	2220      	movs	r2, #32
 800254a:	431a      	orrs	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2241      	movs	r2, #65	; 0x41
 8002554:	2120      	movs	r1, #32
 8002556:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2242      	movs	r2, #66	; 0x42
 800255c:	2100      	movs	r1, #0
 800255e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2240      	movs	r2, #64	; 0x40
 8002564:	2100      	movs	r1, #0
 8002566:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e007      	b.n	800257c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2220      	movs	r2, #32
 8002574:	4013      	ands	r3, r2
 8002576:	2b20      	cmp	r3, #32
 8002578:	d1cf      	bne.n	800251a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b004      	add	sp, #16
 8002582:	bd80      	pop	{r7, pc}

08002584 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002590:	e055      	b.n	800263e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	0018      	movs	r0, r3
 800259a:	f000 f85f 	bl	800265c <I2C_IsAcknowledgeFailed>
 800259e:	1e03      	subs	r3, r0, #0
 80025a0:	d001      	beq.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e053      	b.n	800264e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2220      	movs	r2, #32
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d129      	bne.n	8002608 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2204      	movs	r2, #4
 80025bc:	4013      	ands	r3, r2
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d105      	bne.n	80025ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e03f      	b.n	800264e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2220      	movs	r2, #32
 80025d4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	491d      	ldr	r1, [pc, #116]	; (8002658 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80025e2:	400a      	ands	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2241      	movs	r2, #65	; 0x41
 80025f0:	2120      	movs	r1, #32
 80025f2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2242      	movs	r2, #66	; 0x42
 80025f8:	2100      	movs	r1, #0
 80025fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2240      	movs	r2, #64	; 0x40
 8002600:	2100      	movs	r1, #0
 8002602:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e022      	b.n	800264e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002608:	f7ff f994 	bl	8001934 <HAL_GetTick>
 800260c:	0002      	movs	r2, r0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	429a      	cmp	r2, r3
 8002616:	d302      	bcc.n	800261e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10f      	bne.n	800263e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	2220      	movs	r2, #32
 8002624:	431a      	orrs	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2241      	movs	r2, #65	; 0x41
 800262e:	2120      	movs	r1, #32
 8002630:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2240      	movs	r2, #64	; 0x40
 8002636:	2100      	movs	r1, #0
 8002638:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e007      	b.n	800264e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2204      	movs	r2, #4
 8002646:	4013      	ands	r3, r2
 8002648:	2b04      	cmp	r3, #4
 800264a:	d1a2      	bne.n	8002592 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	b004      	add	sp, #16
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	fe00e800 	.word	0xfe00e800

0800265c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2210      	movs	r2, #16
 8002670:	4013      	ands	r3, r2
 8002672:	2b10      	cmp	r3, #16
 8002674:	d151      	bne.n	800271a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002676:	e021      	b.n	80026bc <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	3301      	adds	r3, #1
 800267c:	d01e      	beq.n	80026bc <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267e:	f7ff f959 	bl	8001934 <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	429a      	cmp	r2, r3
 800268c:	d302      	bcc.n	8002694 <I2C_IsAcknowledgeFailed+0x38>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d113      	bne.n	80026bc <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	2220      	movs	r2, #32
 800269a:	431a      	orrs	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2241      	movs	r2, #65	; 0x41
 80026a4:	2120      	movs	r1, #32
 80026a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2242      	movs	r2, #66	; 0x42
 80026ac:	2100      	movs	r1, #0
 80026ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2240      	movs	r2, #64	; 0x40
 80026b4:	2100      	movs	r1, #0
 80026b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e02f      	b.n	800271c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2220      	movs	r2, #32
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	d1d6      	bne.n	8002678 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2210      	movs	r2, #16
 80026d0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2220      	movs	r2, #32
 80026d8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	0018      	movs	r0, r3
 80026de:	f7ff fe75 	bl	80023cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	490d      	ldr	r1, [pc, #52]	; (8002724 <I2C_IsAcknowledgeFailed+0xc8>)
 80026ee:	400a      	ands	r2, r1
 80026f0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	2204      	movs	r2, #4
 80026f8:	431a      	orrs	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2241      	movs	r2, #65	; 0x41
 8002702:	2120      	movs	r1, #32
 8002704:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2242      	movs	r2, #66	; 0x42
 800270a:	2100      	movs	r1, #0
 800270c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2240      	movs	r2, #64	; 0x40
 8002712:	2100      	movs	r1, #0
 8002714:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	b004      	add	sp, #16
 8002722:	bd80      	pop	{r7, pc}
 8002724:	fe00e800 	.word	0xfe00e800

08002728 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	0008      	movs	r0, r1
 8002732:	0011      	movs	r1, r2
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	240a      	movs	r4, #10
 8002738:	193b      	adds	r3, r7, r4
 800273a:	1c02      	adds	r2, r0, #0
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	2009      	movs	r0, #9
 8002740:	183b      	adds	r3, r7, r0
 8002742:	1c0a      	adds	r2, r1, #0
 8002744:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	6a3a      	ldr	r2, [r7, #32]
 800274e:	0d51      	lsrs	r1, r2, #21
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	00d2      	lsls	r2, r2, #3
 8002754:	400a      	ands	r2, r1
 8002756:	490e      	ldr	r1, [pc, #56]	; (8002790 <I2C_TransferConfig+0x68>)
 8002758:	430a      	orrs	r2, r1
 800275a:	43d2      	mvns	r2, r2
 800275c:	401a      	ands	r2, r3
 800275e:	0011      	movs	r1, r2
 8002760:	193b      	adds	r3, r7, r4
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	059b      	lsls	r3, r3, #22
 8002766:	0d9a      	lsrs	r2, r3, #22
 8002768:	183b      	adds	r3, r7, r0
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	0418      	lsls	r0, r3, #16
 800276e:	23ff      	movs	r3, #255	; 0xff
 8002770:	041b      	lsls	r3, r3, #16
 8002772:	4003      	ands	r3, r0
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	431a      	orrs	r2, r3
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	431a      	orrs	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	b005      	add	sp, #20
 800278c:	bd90      	pop	{r4, r7, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	03ff63ff 	.word	0x03ff63ff

08002794 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2241      	movs	r2, #65	; 0x41
 80027a2:	5c9b      	ldrb	r3, [r3, r2]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	d138      	bne.n	800281c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2240      	movs	r2, #64	; 0x40
 80027ae:	5c9b      	ldrb	r3, [r3, r2]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e032      	b.n	800281e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2240      	movs	r2, #64	; 0x40
 80027bc:	2101      	movs	r1, #1
 80027be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2241      	movs	r2, #65	; 0x41
 80027c4:	2124      	movs	r1, #36	; 0x24
 80027c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2101      	movs	r1, #1
 80027d4:	438a      	bics	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4911      	ldr	r1, [pc, #68]	; (8002828 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80027e4:	400a      	ands	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2101      	movs	r1, #1
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2241      	movs	r2, #65	; 0x41
 800280c:	2120      	movs	r1, #32
 800280e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2240      	movs	r2, #64	; 0x40
 8002814:	2100      	movs	r1, #0
 8002816:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	e000      	b.n	800281e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800281c:	2302      	movs	r3, #2
  }
}
 800281e:	0018      	movs	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	b002      	add	sp, #8
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	ffffefff 	.word	0xffffefff

0800282c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2241      	movs	r2, #65	; 0x41
 800283a:	5c9b      	ldrb	r3, [r3, r2]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b20      	cmp	r3, #32
 8002840:	d139      	bne.n	80028b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2240      	movs	r2, #64	; 0x40
 8002846:	5c9b      	ldrb	r3, [r3, r2]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800284c:	2302      	movs	r3, #2
 800284e:	e033      	b.n	80028b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2240      	movs	r2, #64	; 0x40
 8002854:	2101      	movs	r1, #1
 8002856:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2241      	movs	r2, #65	; 0x41
 800285c:	2124      	movs	r1, #36	; 0x24
 800285e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2101      	movs	r1, #1
 800286c:	438a      	bics	r2, r1
 800286e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800287c:	4013      	ands	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2101      	movs	r1, #1
 800289e:	430a      	orrs	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2241      	movs	r2, #65	; 0x41
 80028a6:	2120      	movs	r1, #32
 80028a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2240      	movs	r2, #64	; 0x40
 80028ae:	2100      	movs	r1, #0
 80028b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e000      	b.n	80028b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
  }
}
 80028b8:	0018      	movs	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b004      	add	sp, #16
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	fffff0ff 	.word	0xfffff0ff

080028c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c4:	b5b0      	push	{r4, r5, r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d102      	bne.n	80028d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	f000 fbab 	bl	800302e <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d8:	4bce      	ldr	r3, [pc, #824]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	220c      	movs	r2, #12
 80028de:	4013      	ands	r3, r2
 80028e0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e2:	4bcc      	ldr	r3, [pc, #816]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	025b      	lsls	r3, r3, #9
 80028ea:	4013      	ands	r3, r2
 80028ec:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2201      	movs	r2, #1
 80028f4:	4013      	ands	r3, r2
 80028f6:	d100      	bne.n	80028fa <HAL_RCC_OscConfig+0x36>
 80028f8:	e07e      	b.n	80029f8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d007      	beq.n	8002910 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d112      	bne.n	800292c <HAL_RCC_OscConfig+0x68>
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	025b      	lsls	r3, r3, #9
 800290c:	429a      	cmp	r2, r3
 800290e:	d10d      	bne.n	800292c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	4bc0      	ldr	r3, [pc, #768]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	029b      	lsls	r3, r3, #10
 8002918:	4013      	ands	r3, r2
 800291a:	d100      	bne.n	800291e <HAL_RCC_OscConfig+0x5a>
 800291c:	e06b      	b.n	80029f6 <HAL_RCC_OscConfig+0x132>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d167      	bne.n	80029f6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	f000 fb81 	bl	800302e <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	025b      	lsls	r3, r3, #9
 8002934:	429a      	cmp	r2, r3
 8002936:	d107      	bne.n	8002948 <HAL_RCC_OscConfig+0x84>
 8002938:	4bb6      	ldr	r3, [pc, #728]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4bb5      	ldr	r3, [pc, #724]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 800293e:	2180      	movs	r1, #128	; 0x80
 8002940:	0249      	lsls	r1, r1, #9
 8002942:	430a      	orrs	r2, r1
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e027      	b.n	8002998 <HAL_RCC_OscConfig+0xd4>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	23a0      	movs	r3, #160	; 0xa0
 800294e:	02db      	lsls	r3, r3, #11
 8002950:	429a      	cmp	r2, r3
 8002952:	d10e      	bne.n	8002972 <HAL_RCC_OscConfig+0xae>
 8002954:	4baf      	ldr	r3, [pc, #700]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4bae      	ldr	r3, [pc, #696]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 800295a:	2180      	movs	r1, #128	; 0x80
 800295c:	02c9      	lsls	r1, r1, #11
 800295e:	430a      	orrs	r2, r1
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	4bac      	ldr	r3, [pc, #688]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4bab      	ldr	r3, [pc, #684]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002968:	2180      	movs	r1, #128	; 0x80
 800296a:	0249      	lsls	r1, r1, #9
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e012      	b.n	8002998 <HAL_RCC_OscConfig+0xd4>
 8002972:	4ba8      	ldr	r3, [pc, #672]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4ba7      	ldr	r3, [pc, #668]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002978:	49a7      	ldr	r1, [pc, #668]	; (8002c18 <HAL_RCC_OscConfig+0x354>)
 800297a:	400a      	ands	r2, r1
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	4ba5      	ldr	r3, [pc, #660]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	025b      	lsls	r3, r3, #9
 8002986:	4013      	ands	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4ba1      	ldr	r3, [pc, #644]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4ba0      	ldr	r3, [pc, #640]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002992:	49a2      	ldr	r1, [pc, #648]	; (8002c1c <HAL_RCC_OscConfig+0x358>)
 8002994:	400a      	ands	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d015      	beq.n	80029cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe ffc8 	bl	8001934 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029a8:	e009      	b.n	80029be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029aa:	f7fe ffc3 	bl	8001934 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b64      	cmp	r3, #100	; 0x64
 80029b6:	d902      	bls.n	80029be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	f000 fb38 	bl	800302e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029be:	4b95      	ldr	r3, [pc, #596]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	029b      	lsls	r3, r3, #10
 80029c6:	4013      	ands	r3, r2
 80029c8:	d0ef      	beq.n	80029aa <HAL_RCC_OscConfig+0xe6>
 80029ca:	e015      	b.n	80029f8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe ffb2 	bl	8001934 <HAL_GetTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d6:	f7fe ffad 	bl	8001934 <HAL_GetTick>
 80029da:	0002      	movs	r2, r0
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b64      	cmp	r3, #100	; 0x64
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e322      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029e8:	4b8a      	ldr	r3, [pc, #552]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	029b      	lsls	r3, r3, #10
 80029f0:	4013      	ands	r3, r2
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x112>
 80029f4:	e000      	b.n	80029f8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2202      	movs	r2, #2
 80029fe:	4013      	ands	r3, r2
 8002a00:	d100      	bne.n	8002a04 <HAL_RCC_OscConfig+0x140>
 8002a02:	e08a      	b.n	8002b1a <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	2b0c      	cmp	r3, #12
 8002a14:	d13d      	bne.n	8002a92 <HAL_RCC_OscConfig+0x1ce>
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d13a      	bne.n	8002a92 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002a1c:	4b7d      	ldr	r3, [pc, #500]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2204      	movs	r2, #4
 8002a22:	4013      	ands	r3, r2
 8002a24:	d004      	beq.n	8002a30 <HAL_RCC_OscConfig+0x16c>
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e2fe      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4b78      	ldr	r3, [pc, #480]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a7a      	ldr	r2, [pc, #488]	; (8002c20 <HAL_RCC_OscConfig+0x35c>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	0019      	movs	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	021a      	lsls	r2, r3, #8
 8002a40:	4b74      	ldr	r3, [pc, #464]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002a46:	4b73      	ldr	r3, [pc, #460]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2209      	movs	r2, #9
 8002a4c:	4393      	bics	r3, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	4b70      	ldr	r3, [pc, #448]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a58:	f000 fc1e 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8002a5c:	0001      	movs	r1, r0
 8002a5e:	4b6d      	ldr	r3, [pc, #436]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	220f      	movs	r2, #15
 8002a66:	4013      	ands	r3, r2
 8002a68:	4a6e      	ldr	r2, [pc, #440]	; (8002c24 <HAL_RCC_OscConfig+0x360>)
 8002a6a:	5cd3      	ldrb	r3, [r2, r3]
 8002a6c:	000a      	movs	r2, r1
 8002a6e:	40da      	lsrs	r2, r3
 8002a70:	4b6d      	ldr	r3, [pc, #436]	; (8002c28 <HAL_RCC_OscConfig+0x364>)
 8002a72:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002a74:	2513      	movs	r5, #19
 8002a76:	197c      	adds	r4, r7, r5
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7fe ff25 	bl	80018c8 <HAL_InitTick>
 8002a7e:	0003      	movs	r3, r0
 8002a80:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002a82:	197b      	adds	r3, r7, r5
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d047      	beq.n	8002b1a <HAL_RCC_OscConfig+0x256>
      {
        return status;
 8002a8a:	2313      	movs	r3, #19
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	e2cd      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d027      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002a98:	4b5e      	ldr	r3, [pc, #376]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2209      	movs	r2, #9
 8002a9e:	4393      	bics	r3, r2
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	4b5c      	ldr	r3, [pc, #368]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fe ff43 	bl	8001934 <HAL_GetTick>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab4:	f7fe ff3e 	bl	8001934 <HAL_GetTick>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e2b3      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ac6:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2204      	movs	r2, #4
 8002acc:	4013      	ands	r3, r2
 8002ace:	d0f1      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a52      	ldr	r2, [pc, #328]	; (8002c20 <HAL_RCC_OscConfig+0x35c>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	0019      	movs	r1, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	021a      	lsls	r2, r3, #8
 8002ae0:	4b4c      	ldr	r3, [pc, #304]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	e018      	b.n	8002b1a <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae8:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4b49      	ldr	r3, [pc, #292]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002aee:	2101      	movs	r1, #1
 8002af0:	438a      	bics	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7fe ff1e 	bl	8001934 <HAL_GetTick>
 8002af8:	0003      	movs	r3, r0
 8002afa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afe:	f7fe ff19 	bl	8001934 <HAL_GetTick>
 8002b02:	0002      	movs	r2, r0
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e28e      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b10:	4b40      	ldr	r3, [pc, #256]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2204      	movs	r2, #4
 8002b16:	4013      	ands	r3, r2
 8002b18:	d1f1      	bne.n	8002afe <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2210      	movs	r2, #16
 8002b20:	4013      	ands	r3, r2
 8002b22:	d100      	bne.n	8002b26 <HAL_RCC_OscConfig+0x262>
 8002b24:	e09e      	b.n	8002c64 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d13f      	bne.n	8002bac <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b2c:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4013      	ands	r3, r2
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_OscConfig+0x280>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e274      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b44:	4b33      	ldr	r3, [pc, #204]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a38      	ldr	r2, [pc, #224]	; (8002c2c <HAL_RCC_OscConfig+0x368>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b52:	4b30      	ldr	r3, [pc, #192]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002b54:	430a      	orrs	r2, r1
 8002b56:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b58:	4b2e      	ldr	r3, [pc, #184]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	0a19      	lsrs	r1, r3, #8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	061a      	lsls	r2, r3, #24
 8002b66:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	0b5b      	lsrs	r3, r3, #13
 8002b72:	3301      	adds	r3, #1
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	0212      	lsls	r2, r2, #8
 8002b78:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b7a:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	210f      	movs	r1, #15
 8002b82:	400b      	ands	r3, r1
 8002b84:	4927      	ldr	r1, [pc, #156]	; (8002c24 <HAL_RCC_OscConfig+0x360>)
 8002b86:	5ccb      	ldrb	r3, [r1, r3]
 8002b88:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b8a:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <HAL_RCC_OscConfig+0x364>)
 8002b8c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002b8e:	2513      	movs	r5, #19
 8002b90:	197c      	adds	r4, r7, r5
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7fe fe98 	bl	80018c8 <HAL_InitTick>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002b9c:	197b      	adds	r3, r7, r5
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d05f      	beq.n	8002c64 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8002ba4:	2313      	movs	r3, #19
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	e240      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d03d      	beq.n	8002c30 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002bba:	2180      	movs	r1, #128	; 0x80
 8002bbc:	0049      	lsls	r1, r1, #1
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7fe feb7 	bl	8001934 <HAL_GetTick>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bcc:	f7fe feb2 	bl	8001934 <HAL_GetTick>
 8002bd0:	0002      	movs	r2, r0
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e227      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4013      	ands	r3, r2
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bea:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <HAL_RCC_OscConfig+0x368>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	0a19      	lsrs	r1, r3, #8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	061a      	lsls	r2, r3, #24
 8002c0c:	4b01      	ldr	r3, [pc, #4]	; (8002c14 <HAL_RCC_OscConfig+0x350>)
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	e027      	b.n	8002c64 <HAL_RCC_OscConfig+0x3a0>
 8002c14:	40021000 	.word	0x40021000
 8002c18:	fffeffff 	.word	0xfffeffff
 8002c1c:	fffbffff 	.word	0xfffbffff
 8002c20:	ffffe0ff 	.word	0xffffe0ff
 8002c24:	08006e44 	.word	0x08006e44
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c30:	4bbd      	ldr	r3, [pc, #756]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4bbc      	ldr	r3, [pc, #752]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002c36:	49bd      	ldr	r1, [pc, #756]	; (8002f2c <HAL_RCC_OscConfig+0x668>)
 8002c38:	400a      	ands	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fe7a 	bl	8001934 <HAL_GetTick>
 8002c40:	0003      	movs	r3, r0
 8002c42:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c46:	f7fe fe75 	bl	8001934 <HAL_GetTick>
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e1ea      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c58:	4bb3      	ldr	r3, [pc, #716]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4013      	ands	r3, r2
 8002c62:	d1f0      	bne.n	8002c46 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d036      	beq.n	8002cdc <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d019      	beq.n	8002caa <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c76:	4bac      	ldr	r3, [pc, #688]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c7a:	4bab      	ldr	r3, [pc, #684]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c82:	f7fe fe57 	bl	8001934 <HAL_GetTick>
 8002c86:	0003      	movs	r3, r0
 8002c88:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fe52 	bl	8001934 <HAL_GetTick>
 8002c90:	0002      	movs	r2, r0
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e1c7      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c9e:	4ba2      	ldr	r3, [pc, #648]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d0f1      	beq.n	8002c8c <HAL_RCC_OscConfig+0x3c8>
 8002ca8:	e018      	b.n	8002cdc <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002caa:	4b9f      	ldr	r3, [pc, #636]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002cac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cae:	4b9e      	ldr	r3, [pc, #632]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	438a      	bics	r2, r1
 8002cb4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fe3d 	bl	8001934 <HAL_GetTick>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc0:	f7fe fe38 	bl	8001934 <HAL_GetTick>
 8002cc4:	0002      	movs	r2, r0
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e1ad      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cd2:	4b95      	ldr	r3, [pc, #596]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d1f1      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d100      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x424>
 8002ce6:	e0af      	b.n	8002e48 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce8:	2327      	movs	r3, #39	; 0x27
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf0:	4b8d      	ldr	r3, [pc, #564]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	055b      	lsls	r3, r3, #21
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d10a      	bne.n	8002d12 <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfc:	4b8a      	ldr	r3, [pc, #552]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d00:	4b89      	ldr	r3, [pc, #548]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	0549      	lsls	r1, r1, #21
 8002d06:	430a      	orrs	r2, r1
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002d0a:	2327      	movs	r3, #39	; 0x27
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d12:	4b87      	ldr	r3, [pc, #540]	; (8002f30 <HAL_RCC_OscConfig+0x66c>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d11a      	bne.n	8002d54 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d1e:	4b84      	ldr	r3, [pc, #528]	; (8002f30 <HAL_RCC_OscConfig+0x66c>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4b83      	ldr	r3, [pc, #524]	; (8002f30 <HAL_RCC_OscConfig+0x66c>)
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	0049      	lsls	r1, r1, #1
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fe02 	bl	8001934 <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d36:	f7fe fdfd 	bl	8001934 <HAL_GetTick>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b64      	cmp	r3, #100	; 0x64
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e172      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	4b79      	ldr	r3, [pc, #484]	; (8002f30 <HAL_RCC_OscConfig+0x66c>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4013      	ands	r3, r2
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4ac>
 8002d60:	4b71      	ldr	r3, [pc, #452]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002d62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d64:	4b70      	ldr	r3, [pc, #448]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	0049      	lsls	r1, r1, #1
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	651a      	str	r2, [r3, #80]	; 0x50
 8002d6e:	e031      	b.n	8002dd4 <HAL_RCC_OscConfig+0x510>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10c      	bne.n	8002d92 <HAL_RCC_OscConfig+0x4ce>
 8002d78:	4b6b      	ldr	r3, [pc, #428]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002d7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d7c:	4b6a      	ldr	r3, [pc, #424]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002d7e:	496b      	ldr	r1, [pc, #428]	; (8002f2c <HAL_RCC_OscConfig+0x668>)
 8002d80:	400a      	ands	r2, r1
 8002d82:	651a      	str	r2, [r3, #80]	; 0x50
 8002d84:	4b68      	ldr	r3, [pc, #416]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002d86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d88:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002d8a:	496a      	ldr	r1, [pc, #424]	; (8002f34 <HAL_RCC_OscConfig+0x670>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	651a      	str	r2, [r3, #80]	; 0x50
 8002d90:	e020      	b.n	8002dd4 <HAL_RCC_OscConfig+0x510>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	23a0      	movs	r3, #160	; 0xa0
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d10e      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
 8002d9e:	4b62      	ldr	r3, [pc, #392]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002da0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002da2:	4b61      	ldr	r3, [pc, #388]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	00c9      	lsls	r1, r1, #3
 8002da8:	430a      	orrs	r2, r1
 8002daa:	651a      	str	r2, [r3, #80]	; 0x50
 8002dac:	4b5e      	ldr	r3, [pc, #376]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002dae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002db0:	4b5d      	ldr	r3, [pc, #372]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002db2:	2180      	movs	r1, #128	; 0x80
 8002db4:	0049      	lsls	r1, r1, #1
 8002db6:	430a      	orrs	r2, r1
 8002db8:	651a      	str	r2, [r3, #80]	; 0x50
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0x510>
 8002dbc:	4b5a      	ldr	r3, [pc, #360]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002dbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dc0:	4b59      	ldr	r3, [pc, #356]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002dc2:	495a      	ldr	r1, [pc, #360]	; (8002f2c <HAL_RCC_OscConfig+0x668>)
 8002dc4:	400a      	ands	r2, r1
 8002dc6:	651a      	str	r2, [r3, #80]	; 0x50
 8002dc8:	4b57      	ldr	r3, [pc, #348]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002dca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dcc:	4b56      	ldr	r3, [pc, #344]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002dce:	4959      	ldr	r1, [pc, #356]	; (8002f34 <HAL_RCC_OscConfig+0x670>)
 8002dd0:	400a      	ands	r2, r1
 8002dd2:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d015      	beq.n	8002e08 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ddc:	f7fe fdaa 	bl	8001934 <HAL_GetTick>
 8002de0:	0003      	movs	r3, r0
 8002de2:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002de4:	e009      	b.n	8002dfa <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de6:	f7fe fda5 	bl	8001934 <HAL_GetTick>
 8002dea:	0002      	movs	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	4a51      	ldr	r2, [pc, #324]	; (8002f38 <HAL_RCC_OscConfig+0x674>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e119      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dfa:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002dfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4013      	ands	r3, r2
 8002e04:	d0ef      	beq.n	8002de6 <HAL_RCC_OscConfig+0x522>
 8002e06:	e014      	b.n	8002e32 <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e08:	f7fe fd94 	bl	8001934 <HAL_GetTick>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e10:	e009      	b.n	8002e26 <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7fe fd8f 	bl	8001934 <HAL_GetTick>
 8002e16:	0002      	movs	r2, r0
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	4a46      	ldr	r2, [pc, #280]	; (8002f38 <HAL_RCC_OscConfig+0x674>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e103      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e26:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002e28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d1ef      	bne.n	8002e12 <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e32:	2327      	movs	r3, #39	; 0x27
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d105      	bne.n	8002e48 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3c:	4b3a      	ldr	r3, [pc, #232]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e40:	4b39      	ldr	r3, [pc, #228]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002e42:	493e      	ldr	r1, [pc, #248]	; (8002f3c <HAL_RCC_OscConfig+0x678>)
 8002e44:	400a      	ands	r2, r1
 8002e46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d049      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d026      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002e5a:	4b33      	ldr	r3, [pc, #204]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	4b32      	ldr	r3, [pc, #200]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002e60:	2101      	movs	r1, #1
 8002e62:	430a      	orrs	r2, r1
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34
 8002e72:	4b33      	ldr	r3, [pc, #204]	; (8002f40 <HAL_RCC_OscConfig+0x67c>)
 8002e74:	6a1a      	ldr	r2, [r3, #32]
 8002e76:	4b32      	ldr	r3, [pc, #200]	; (8002f40 <HAL_RCC_OscConfig+0x67c>)
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	0189      	lsls	r1, r1, #6
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe fd58 	bl	8001934 <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e8a:	f7fe fd53 	bl	8001934 <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0c8      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d0f1      	beq.n	8002e8a <HAL_RCC_OscConfig+0x5c6>
 8002ea6:	e01e      	b.n	8002ee6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_RCC_OscConfig+0x67c>)
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <HAL_RCC_OscConfig+0x67c>)
 8002eba:	4922      	ldr	r1, [pc, #136]	; (8002f44 <HAL_RCC_OscConfig+0x680>)
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fd38 	bl	8001934 <HAL_GetTick>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eca:	f7fe fd33 	bl	8001934 <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0a8      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002edc:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d1f1      	bne.n	8002eca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d100      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x62c>
 8002eee:	e09d      	b.n	800302c <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d100      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x634>
 8002ef6:	e076      	b.n	8002fe6 <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d157      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <HAL_RCC_OscConfig+0x664>)
 8002f06:	4910      	ldr	r1, [pc, #64]	; (8002f48 <HAL_RCC_OscConfig+0x684>)
 8002f08:	400a      	ands	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fd12 	bl	8001934 <HAL_GetTick>
 8002f10:	0003      	movs	r3, r0
 8002f12:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f14:	e01a      	b.n	8002f4c <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fe fd0d 	bl	8001934 <HAL_GetTick>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d913      	bls.n	8002f4c <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e082      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	fffffeff 	.word	0xfffffeff
 8002f30:	40007000 	.word	0x40007000
 8002f34:	fffffbff 	.word	0xfffffbff
 8002f38:	00001388 	.word	0x00001388
 8002f3c:	efffffff 	.word	0xefffffff
 8002f40:	40010000 	.word	0x40010000
 8002f44:	ffffdfff 	.word	0xffffdfff
 8002f48:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f4c:	4b3a      	ldr	r3, [pc, #232]	; (8003038 <HAL_RCC_OscConfig+0x774>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	049b      	lsls	r3, r3, #18
 8002f54:	4013      	ands	r3, r2
 8002f56:	d1de      	bne.n	8002f16 <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f58:	4b37      	ldr	r3, [pc, #220]	; (8003038 <HAL_RCC_OscConfig+0x774>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4a37      	ldr	r2, [pc, #220]	; (800303c <HAL_RCC_OscConfig+0x778>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	0019      	movs	r1, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f70:	431a      	orrs	r2, r3
 8002f72:	4b31      	ldr	r3, [pc, #196]	; (8003038 <HAL_RCC_OscConfig+0x774>)
 8002f74:	430a      	orrs	r2, r1
 8002f76:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f78:	4b2f      	ldr	r3, [pc, #188]	; (8003038 <HAL_RCC_OscConfig+0x774>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b2e      	ldr	r3, [pc, #184]	; (8003038 <HAL_RCC_OscConfig+0x774>)
 8002f7e:	2180      	movs	r1, #128	; 0x80
 8002f80:	0449      	lsls	r1, r1, #17
 8002f82:	430a      	orrs	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fe fcd5 	bl	8001934 <HAL_GetTick>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe fcd0 	bl	8001934 <HAL_GetTick>
 8002f94:	0002      	movs	r2, r0
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e045      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002fa2:	4b25      	ldr	r3, [pc, #148]	; (8003038 <HAL_RCC_OscConfig+0x774>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	049b      	lsls	r3, r3, #18
 8002faa:	4013      	ands	r3, r2
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x6cc>
 8002fae:	e03d      	b.n	800302c <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb0:	4b21      	ldr	r3, [pc, #132]	; (8003038 <HAL_RCC_OscConfig+0x774>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4b20      	ldr	r3, [pc, #128]	; (8003038 <HAL_RCC_OscConfig+0x774>)
 8002fb6:	4922      	ldr	r1, [pc, #136]	; (8003040 <HAL_RCC_OscConfig+0x77c>)
 8002fb8:	400a      	ands	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fcba 	bl	8001934 <HAL_GetTick>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7fe fcb5 	bl	8001934 <HAL_GetTick>
 8002fca:	0002      	movs	r2, r0
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e02a      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fd8:	4b17      	ldr	r3, [pc, #92]	; (8003038 <HAL_RCC_OscConfig+0x774>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	049b      	lsls	r3, r3, #18
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d1f0      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x702>
 8002fe4:	e022      	b.n	800302c <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e01d      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ff2:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HAL_RCC_OscConfig+0x774>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	025b      	lsls	r3, r3, #9
 8002ffe:	401a      	ands	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	429a      	cmp	r2, r3
 8003006:	d10f      	bne.n	8003028 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	23f0      	movs	r3, #240	; 0xf0
 800300c:	039b      	lsls	r3, r3, #14
 800300e:	401a      	ands	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d107      	bne.n	8003028 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	23c0      	movs	r3, #192	; 0xc0
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	401a      	ands	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	0018      	movs	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	b00a      	add	sp, #40	; 0x28
 8003034:	bdb0      	pop	{r4, r5, r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	40021000 	.word	0x40021000
 800303c:	ff02ffff 	.word	0xff02ffff
 8003040:	feffffff 	.word	0xfeffffff

08003044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003044:	b5b0      	push	{r4, r5, r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e10d      	b.n	8003274 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003058:	4b88      	ldr	r3, [pc, #544]	; (800327c <HAL_RCC_ClockConfig+0x238>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2201      	movs	r2, #1
 800305e:	4013      	ands	r3, r2
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d911      	bls.n	800308a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b85      	ldr	r3, [pc, #532]	; (800327c <HAL_RCC_ClockConfig+0x238>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2201      	movs	r2, #1
 800306c:	4393      	bics	r3, r2
 800306e:	0019      	movs	r1, r3
 8003070:	4b82      	ldr	r3, [pc, #520]	; (800327c <HAL_RCC_ClockConfig+0x238>)
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003078:	4b80      	ldr	r3, [pc, #512]	; (800327c <HAL_RCC_ClockConfig+0x238>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2201      	movs	r2, #1
 800307e:	4013      	ands	r3, r2
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d001      	beq.n	800308a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0f4      	b.n	8003274 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2202      	movs	r2, #2
 8003090:	4013      	ands	r3, r2
 8003092:	d009      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003094:	4b7a      	ldr	r3, [pc, #488]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	22f0      	movs	r2, #240	; 0xf0
 800309a:	4393      	bics	r3, r2
 800309c:	0019      	movs	r1, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	4b77      	ldr	r3, [pc, #476]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 80030a4:	430a      	orrs	r2, r1
 80030a6:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2201      	movs	r2, #1
 80030ae:	4013      	ands	r3, r2
 80030b0:	d100      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x70>
 80030b2:	e089      	b.n	80031c8 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d107      	bne.n	80030cc <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030bc:	4b70      	ldr	r3, [pc, #448]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	029b      	lsls	r3, r3, #10
 80030c4:	4013      	ands	r3, r2
 80030c6:	d120      	bne.n	800310a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0d3      	b.n	8003274 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030d4:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	049b      	lsls	r3, r3, #18
 80030dc:	4013      	ands	r3, r2
 80030de:	d114      	bne.n	800310a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0c7      	b.n	8003274 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030ec:	4b64      	ldr	r3, [pc, #400]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2204      	movs	r2, #4
 80030f2:	4013      	ands	r3, r2
 80030f4:	d109      	bne.n	800310a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e0bc      	b.n	8003274 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030fa:	4b61      	ldr	r3, [pc, #388]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4013      	ands	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0b4      	b.n	8003274 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310a:	4b5d      	ldr	r3, [pc, #372]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2203      	movs	r2, #3
 8003110:	4393      	bics	r3, r2
 8003112:	0019      	movs	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4b59      	ldr	r3, [pc, #356]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 800311a:	430a      	orrs	r2, r1
 800311c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800311e:	f7fe fc09 	bl	8001934 <HAL_GetTick>
 8003122:	0003      	movs	r3, r0
 8003124:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d111      	bne.n	8003152 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800312e:	e009      	b.n	8003144 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003130:	f7fe fc00 	bl	8001934 <HAL_GetTick>
 8003134:	0002      	movs	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	4a52      	ldr	r2, [pc, #328]	; (8003284 <HAL_RCC_ClockConfig+0x240>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e097      	b.n	8003274 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003144:	4b4e      	ldr	r3, [pc, #312]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	220c      	movs	r2, #12
 800314a:	4013      	ands	r3, r2
 800314c:	2b08      	cmp	r3, #8
 800314e:	d1ef      	bne.n	8003130 <HAL_RCC_ClockConfig+0xec>
 8003150:	e03a      	b.n	80031c8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d111      	bne.n	800317e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800315a:	e009      	b.n	8003170 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800315c:	f7fe fbea 	bl	8001934 <HAL_GetTick>
 8003160:	0002      	movs	r2, r0
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	4a47      	ldr	r2, [pc, #284]	; (8003284 <HAL_RCC_ClockConfig+0x240>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e081      	b.n	8003274 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003170:	4b43      	ldr	r3, [pc, #268]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	220c      	movs	r2, #12
 8003176:	4013      	ands	r3, r2
 8003178:	2b0c      	cmp	r3, #12
 800317a:	d1ef      	bne.n	800315c <HAL_RCC_ClockConfig+0x118>
 800317c:	e024      	b.n	80031c8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d11b      	bne.n	80031be <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003186:	e009      	b.n	800319c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003188:	f7fe fbd4 	bl	8001934 <HAL_GetTick>
 800318c:	0002      	movs	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	4a3c      	ldr	r2, [pc, #240]	; (8003284 <HAL_RCC_ClockConfig+0x240>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e06b      	b.n	8003274 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800319c:	4b38      	ldr	r3, [pc, #224]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	220c      	movs	r2, #12
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d1ef      	bne.n	8003188 <HAL_RCC_ClockConfig+0x144>
 80031a8:	e00e      	b.n	80031c8 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031aa:	f7fe fbc3 	bl	8001934 <HAL_GetTick>
 80031ae:	0002      	movs	r2, r0
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	4a33      	ldr	r2, [pc, #204]	; (8003284 <HAL_RCC_ClockConfig+0x240>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e05a      	b.n	8003274 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80031be:	4b30      	ldr	r3, [pc, #192]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	220c      	movs	r2, #12
 80031c4:	4013      	ands	r3, r2
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c8:	4b2c      	ldr	r3, [pc, #176]	; (800327c <HAL_RCC_ClockConfig+0x238>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2201      	movs	r2, #1
 80031ce:	4013      	ands	r3, r2
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d211      	bcs.n	80031fa <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b29      	ldr	r3, [pc, #164]	; (800327c <HAL_RCC_ClockConfig+0x238>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2201      	movs	r2, #1
 80031dc:	4393      	bics	r3, r2
 80031de:	0019      	movs	r1, r3
 80031e0:	4b26      	ldr	r3, [pc, #152]	; (800327c <HAL_RCC_ClockConfig+0x238>)
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e8:	4b24      	ldr	r3, [pc, #144]	; (800327c <HAL_RCC_ClockConfig+0x238>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2201      	movs	r2, #1
 80031ee:	4013      	ands	r3, r2
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d001      	beq.n	80031fa <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e03c      	b.n	8003274 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2204      	movs	r2, #4
 8003200:	4013      	ands	r3, r2
 8003202:	d009      	beq.n	8003218 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003204:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a1f      	ldr	r2, [pc, #124]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 800320a:	4013      	ands	r3, r2
 800320c:	0019      	movs	r1, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 8003214:	430a      	orrs	r2, r1
 8003216:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2208      	movs	r2, #8
 800321e:	4013      	ands	r3, r2
 8003220:	d00a      	beq.n	8003238 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003222:	4b17      	ldr	r3, [pc, #92]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	4a19      	ldr	r2, [pc, #100]	; (800328c <HAL_RCC_ClockConfig+0x248>)
 8003228:	4013      	ands	r3, r2
 800322a:	0019      	movs	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	00da      	lsls	r2, r3, #3
 8003232:	4b13      	ldr	r3, [pc, #76]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 8003234:	430a      	orrs	r2, r1
 8003236:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003238:	f000 f82e 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 800323c:	0001      	movs	r1, r0
 800323e:	4b10      	ldr	r3, [pc, #64]	; (8003280 <HAL_RCC_ClockConfig+0x23c>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	220f      	movs	r2, #15
 8003246:	4013      	ands	r3, r2
 8003248:	4a11      	ldr	r2, [pc, #68]	; (8003290 <HAL_RCC_ClockConfig+0x24c>)
 800324a:	5cd3      	ldrb	r3, [r2, r3]
 800324c:	000a      	movs	r2, r1
 800324e:	40da      	lsrs	r2, r3
 8003250:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_RCC_ClockConfig+0x250>)
 8003252:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8003254:	250b      	movs	r5, #11
 8003256:	197c      	adds	r4, r7, r5
 8003258:	2000      	movs	r0, #0
 800325a:	f7fe fb35 	bl	80018c8 <HAL_InitTick>
 800325e:	0003      	movs	r3, r0
 8003260:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003262:	197b      	adds	r3, r7, r5
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800326a:	230b      	movs	r3, #11
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	e000      	b.n	8003274 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	b004      	add	sp, #16
 800327a:	bdb0      	pop	{r4, r5, r7, pc}
 800327c:	40022000 	.word	0x40022000
 8003280:	40021000 	.word	0x40021000
 8003284:	00001388 	.word	0x00001388
 8003288:	fffff8ff 	.word	0xfffff8ff
 800328c:	ffffc7ff 	.word	0xffffc7ff
 8003290:	08006e44 	.word	0x08006e44
 8003294:	20000000 	.word	0x20000000

08003298 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800329e:	4b3b      	ldr	r3, [pc, #236]	; (800338c <HAL_RCC_GetSysClockFreq+0xf4>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	220c      	movs	r2, #12
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d00e      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x34>
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d00f      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d157      	bne.n	8003366 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80032b6:	4b35      	ldr	r3, [pc, #212]	; (800338c <HAL_RCC_GetSysClockFreq+0xf4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2210      	movs	r2, #16
 80032bc:	4013      	ands	r3, r2
 80032be:	d002      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80032c0:	4b33      	ldr	r3, [pc, #204]	; (8003390 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032c2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80032c4:	e05d      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80032c6:	4b33      	ldr	r3, [pc, #204]	; (8003394 <HAL_RCC_GetSysClockFreq+0xfc>)
 80032c8:	613b      	str	r3, [r7, #16]
      break;
 80032ca:	e05a      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032cc:	4b32      	ldr	r3, [pc, #200]	; (8003398 <HAL_RCC_GetSysClockFreq+0x100>)
 80032ce:	613b      	str	r3, [r7, #16]
      break;
 80032d0:	e057      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	0c9b      	lsrs	r3, r3, #18
 80032d6:	220f      	movs	r2, #15
 80032d8:	4013      	ands	r3, r2
 80032da:	4a30      	ldr	r2, [pc, #192]	; (800339c <HAL_RCC_GetSysClockFreq+0x104>)
 80032dc:	5cd3      	ldrb	r3, [r2, r3]
 80032de:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	0d9b      	lsrs	r3, r3, #22
 80032e4:	2203      	movs	r2, #3
 80032e6:	4013      	ands	r3, r2
 80032e8:	3301      	adds	r3, #1
 80032ea:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ec:	4b27      	ldr	r3, [pc, #156]	; (800338c <HAL_RCC_GetSysClockFreq+0xf4>)
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	025b      	lsls	r3, r3, #9
 80032f4:	4013      	ands	r3, r2
 80032f6:	d00f      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	000a      	movs	r2, r1
 80032fc:	0152      	lsls	r2, r2, #5
 80032fe:	1a52      	subs	r2, r2, r1
 8003300:	0193      	lsls	r3, r2, #6
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	185b      	adds	r3, r3, r1
 8003308:	025b      	lsls	r3, r3, #9
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	0018      	movs	r0, r3
 800330e:	f7fc fefb 	bl	8000108 <__udivsi3>
 8003312:	0003      	movs	r3, r0
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	e023      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003318:	4b1c      	ldr	r3, [pc, #112]	; (800338c <HAL_RCC_GetSysClockFreq+0xf4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2210      	movs	r2, #16
 800331e:	4013      	ands	r3, r2
 8003320:	d00f      	beq.n	8003342 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	000a      	movs	r2, r1
 8003326:	0152      	lsls	r2, r2, #5
 8003328:	1a52      	subs	r2, r2, r1
 800332a:	0193      	lsls	r3, r2, #6
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	185b      	adds	r3, r3, r1
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	0018      	movs	r0, r3
 8003338:	f7fc fee6 	bl	8000108 <__udivsi3>
 800333c:	0003      	movs	r3, r0
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	e00e      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	000a      	movs	r2, r1
 8003346:	0152      	lsls	r2, r2, #5
 8003348:	1a52      	subs	r2, r2, r1
 800334a:	0193      	lsls	r3, r2, #6
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	185b      	adds	r3, r3, r1
 8003352:	029b      	lsls	r3, r3, #10
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	0018      	movs	r0, r3
 8003358:	f7fc fed6 	bl	8000108 <__udivsi3>
 800335c:	0003      	movs	r3, r0
 800335e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	613b      	str	r3, [r7, #16]
      break;
 8003364:	e00d      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_RCC_GetSysClockFreq+0xf4>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	0b5b      	lsrs	r3, r3, #13
 800336c:	2207      	movs	r2, #7
 800336e:	4013      	ands	r3, r2
 8003370:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	3301      	adds	r3, #1
 8003376:	2280      	movs	r2, #128	; 0x80
 8003378:	0212      	lsls	r2, r2, #8
 800337a:	409a      	lsls	r2, r3
 800337c:	0013      	movs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
      break;
 8003380:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003382:	693b      	ldr	r3, [r7, #16]
}
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	b006      	add	sp, #24
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40021000 	.word	0x40021000
 8003390:	003d0900 	.word	0x003d0900
 8003394:	00f42400 	.word	0x00f42400
 8003398:	007a1200 	.word	0x007a1200
 800339c:	08006e5c 	.word	0x08006e5c

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a4:	4b02      	ldr	r3, [pc, #8]	; (80033b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	20000000 	.word	0x20000000

080033b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033b8:	f7ff fff2 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033bc:	0001      	movs	r1, r0
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	2207      	movs	r2, #7
 80033c6:	4013      	ands	r3, r2
 80033c8:	4a04      	ldr	r2, [pc, #16]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ca:	5cd3      	ldrb	r3, [r2, r3]
 80033cc:	40d9      	lsrs	r1, r3
 80033ce:	000b      	movs	r3, r1
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	40021000 	.word	0x40021000
 80033dc:	08006e54 	.word	0x08006e54

080033e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033e4:	f7ff ffdc 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033e8:	0001      	movs	r1, r0
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	0adb      	lsrs	r3, r3, #11
 80033f0:	2207      	movs	r2, #7
 80033f2:	4013      	ands	r3, r2
 80033f4:	4a04      	ldr	r2, [pc, #16]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	40d9      	lsrs	r1, r3
 80033fa:	000b      	movs	r3, r1
}
 80033fc:	0018      	movs	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	40021000 	.word	0x40021000
 8003408:	08006e54 	.word	0x08006e54

0800340c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2220      	movs	r2, #32
 800341a:	4013      	ands	r3, r2
 800341c:	d100      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x14>
 800341e:	e0c7      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8003420:	2317      	movs	r3, #23
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003428:	4b91      	ldr	r3, [pc, #580]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800342a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	055b      	lsls	r3, r3, #21
 8003430:	4013      	ands	r3, r2
 8003432:	d10a      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003434:	4b8e      	ldr	r3, [pc, #568]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003438:	4b8d      	ldr	r3, [pc, #564]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800343a:	2180      	movs	r1, #128	; 0x80
 800343c:	0549      	lsls	r1, r1, #21
 800343e:	430a      	orrs	r2, r1
 8003440:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003442:	2317      	movs	r3, #23
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	2201      	movs	r2, #1
 8003448:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	4b8a      	ldr	r3, [pc, #552]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	2380      	movs	r3, #128	; 0x80
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4013      	ands	r3, r2
 8003454:	d11a      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003456:	4b87      	ldr	r3, [pc, #540]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	4b86      	ldr	r3, [pc, #536]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	0049      	lsls	r1, r1, #1
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003464:	f7fe fa66 	bl	8001934 <HAL_GetTick>
 8003468:	0003      	movs	r3, r0
 800346a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	e008      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346e:	f7fe fa61 	bl	8001934 <HAL_GetTick>
 8003472:	0002      	movs	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b64      	cmp	r3, #100	; 0x64
 800347a:	d901      	bls.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e0f2      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003480:	4b7c      	ldr	r3, [pc, #496]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	2380      	movs	r3, #128	; 0x80
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4013      	ands	r3, r2
 800348a:	d0f0      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800348c:	4b78      	ldr	r3, [pc, #480]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	23c0      	movs	r3, #192	; 0xc0
 8003492:	039b      	lsls	r3, r3, #14
 8003494:	4013      	ands	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	23c0      	movs	r3, #192	; 0xc0
 800349e:	039b      	lsls	r3, r3, #14
 80034a0:	4013      	ands	r3, r2
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d013      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	23c0      	movs	r3, #192	; 0xc0
 80034ae:	029b      	lsls	r3, r3, #10
 80034b0:	401a      	ands	r2, r3
 80034b2:	23c0      	movs	r3, #192	; 0xc0
 80034b4:	029b      	lsls	r3, r3, #10
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d10a      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80034ba:	4b6d      	ldr	r3, [pc, #436]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	029b      	lsls	r3, r3, #10
 80034c2:	401a      	ands	r2, r3
 80034c4:	2380      	movs	r3, #128	; 0x80
 80034c6:	029b      	lsls	r3, r3, #10
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d101      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0ca      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80034d0:	4b67      	ldr	r3, [pc, #412]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034d4:	23c0      	movs	r3, #192	; 0xc0
 80034d6:	029b      	lsls	r3, r3, #10
 80034d8:	4013      	ands	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d03b      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	23c0      	movs	r3, #192	; 0xc0
 80034e8:	029b      	lsls	r3, r3, #10
 80034ea:	4013      	ands	r3, r2
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d033      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2220      	movs	r2, #32
 80034f8:	4013      	ands	r3, r2
 80034fa:	d02e      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80034fc:	4b5c      	ldr	r3, [pc, #368]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003500:	4a5d      	ldr	r2, [pc, #372]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003502:	4013      	ands	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003506:	4b5a      	ldr	r3, [pc, #360]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800350a:	4b59      	ldr	r3, [pc, #356]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800350c:	2180      	movs	r1, #128	; 0x80
 800350e:	0309      	lsls	r1, r1, #12
 8003510:	430a      	orrs	r2, r1
 8003512:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003514:	4b56      	ldr	r3, [pc, #344]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003516:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003518:	4b55      	ldr	r3, [pc, #340]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800351a:	4958      	ldr	r1, [pc, #352]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800351c:	400a      	ands	r2, r1
 800351e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003520:	4b53      	ldr	r3, [pc, #332]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	4013      	ands	r3, r2
 800352e:	d014      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fe fa00 	bl	8001934 <HAL_GetTick>
 8003534:	0003      	movs	r3, r0
 8003536:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003538:	e009      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800353a:	f7fe f9fb 	bl	8001934 <HAL_GetTick>
 800353e:	0002      	movs	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	4a4e      	ldr	r2, [pc, #312]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e08b      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800354e:	4b48      	ldr	r3, [pc, #288]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4013      	ands	r3, r2
 8003558:	d0ef      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	23c0      	movs	r3, #192	; 0xc0
 8003560:	029b      	lsls	r3, r3, #10
 8003562:	401a      	ands	r2, r3
 8003564:	23c0      	movs	r3, #192	; 0xc0
 8003566:	029b      	lsls	r3, r3, #10
 8003568:	429a      	cmp	r2, r3
 800356a:	d10c      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800356c:	4b40      	ldr	r3, [pc, #256]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a44      	ldr	r2, [pc, #272]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003572:	4013      	ands	r3, r2
 8003574:	0019      	movs	r1, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	23c0      	movs	r3, #192	; 0xc0
 800357c:	039b      	lsls	r3, r3, #14
 800357e:	401a      	ands	r2, r3
 8003580:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003582:	430a      	orrs	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	4b3a      	ldr	r3, [pc, #232]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003588:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	23c0      	movs	r3, #192	; 0xc0
 8003590:	029b      	lsls	r3, r3, #10
 8003592:	401a      	ands	r2, r3
 8003594:	4b36      	ldr	r3, [pc, #216]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003596:	430a      	orrs	r2, r1
 8003598:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800359a:	2317      	movs	r3, #23
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d105      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a4:	4b32      	ldr	r3, [pc, #200]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a8:	4b31      	ldr	r3, [pc, #196]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035aa:	4937      	ldr	r1, [pc, #220]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80035ac:	400a      	ands	r2, r1
 80035ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2201      	movs	r2, #1
 80035b6:	4013      	ands	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035ba:	4b2d      	ldr	r3, [pc, #180]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035be:	2203      	movs	r2, #3
 80035c0:	4393      	bics	r3, r2
 80035c2:	0019      	movs	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	4b29      	ldr	r3, [pc, #164]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035ca:	430a      	orrs	r2, r1
 80035cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2202      	movs	r2, #2
 80035d4:	4013      	ands	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035dc:	220c      	movs	r2, #12
 80035de:	4393      	bics	r3, r2
 80035e0:	0019      	movs	r1, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	4b22      	ldr	r3, [pc, #136]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035e8:	430a      	orrs	r2, r1
 80035ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2204      	movs	r2, #4
 80035f2:	4013      	ands	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035f6:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fa:	4a24      	ldr	r2, [pc, #144]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	0019      	movs	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003606:	430a      	orrs	r2, r1
 8003608:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2208      	movs	r2, #8
 8003610:	4013      	ands	r3, r2
 8003612:	d009      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003614:	4b16      	ldr	r3, [pc, #88]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003618:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800361a:	4013      	ands	r3, r2
 800361c:	0019      	movs	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	4b13      	ldr	r3, [pc, #76]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003624:	430a      	orrs	r2, r1
 8003626:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2240      	movs	r2, #64	; 0x40
 800362e:	4013      	ands	r3, r2
 8003630:	d009      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003632:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003636:	4a17      	ldr	r2, [pc, #92]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003638:	4013      	ands	r3, r2
 800363a:	0019      	movs	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003642:	430a      	orrs	r2, r1
 8003644:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2280      	movs	r2, #128	; 0x80
 800364c:	4013      	ands	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003650:	4b07      	ldr	r3, [pc, #28]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003654:	4a10      	ldr	r2, [pc, #64]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003656:	4013      	ands	r3, r2
 8003658:	0019      	movs	r1, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	4b04      	ldr	r3, [pc, #16]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003660:	430a      	orrs	r2, r1
 8003662:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	0018      	movs	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	b006      	add	sp, #24
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	40021000 	.word	0x40021000
 8003674:	40007000 	.word	0x40007000
 8003678:	fffcffff 	.word	0xfffcffff
 800367c:	fff7ffff 	.word	0xfff7ffff
 8003680:	00001388 	.word	0x00001388
 8003684:	ffcfffff 	.word	0xffcfffff
 8003688:	efffffff 	.word	0xefffffff
 800368c:	fffff3ff 	.word	0xfffff3ff
 8003690:	ffffcfff 	.word	0xffffcfff
 8003694:	fbffffff 	.word	0xfbffffff
 8003698:	fff3ffff 	.word	0xfff3ffff

0800369c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e01d      	b.n	80036ea <HAL_RNG_Init+0x4e>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	795b      	ldrb	r3, [r3, #5]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d106      	bne.n	80036c6 <HAL_RNG_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f003 f8cf 	bl	8006864 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2104      	movs	r1, #4
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b002      	add	sp, #8
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;    
  HAL_StatusTypeDef status = HAL_OK;
 80036fc:	230f      	movs	r3, #15
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	791b      	ldrb	r3, [r3, #4]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_RNG_GenerateRandomNumber+0x1e>
 800370c:	2302      	movs	r3, #2
 800370e:	e042      	b.n	8003796 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	795b      	ldrb	r3, [r3, #5]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d130      	bne.n	8003782 <HAL_RNG_GenerateRandomNumber+0x90>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003726:	f7fe f905 	bl	8001934 <HAL_GetTick>
 800372a:	0003      	movs	r3, r0
 800372c:	60bb      	str	r3, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800372e:	e014      	b.n	800375a <HAL_RNG_GenerateRandomNumber+0x68>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003730:	f7fe f900 	bl	8001934 <HAL_GetTick>
 8003734:	0002      	movs	r2, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d90d      	bls.n	800375a <HAL_RNG_GenerateRandomNumber+0x68>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2202      	movs	r2, #2
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e01d      	b.n	8003796 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	4013      	ands	r3, r2
 8003764:	2b01      	cmp	r3, #1
 8003766:	d1e3      	bne.n	8003730 <HAL_RNG_GenerateRandomNumber+0x3e>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	715a      	strb	r2, [r3, #5]
 8003780:	e003      	b.n	800378a <HAL_RNG_GenerateRandomNumber+0x98>
  }
  else
  {
    status = HAL_ERROR;
 8003782:	230f      	movs	r3, #15
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	2201      	movs	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	711a      	strb	r2, [r3, #4]

  return status;
 8003790:	230f      	movs	r3, #15
 8003792:	18fb      	adds	r3, r7, r3
 8003794:	781b      	ldrb	r3, [r3, #0]
}
 8003796:	0018      	movs	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	b004      	add	sp, #16
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	330c      	adds	r3, #12
 80037aa:	001a      	movs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	0011      	movs	r1, r2
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7ff ff9e 	bl	80036f2 <HAL_RNG_GenerateRandomNumber>
 80037b6:	1e03      	subs	r3, r0, #0
 80037b8:	d102      	bne.n	80037c0 <HAL_RNG_GetRandomNumber+0x22>
  {
    return hrng->RandomNumber; 
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	e000      	b.n	80037c2 <HAL_RNG_GetRandomNumber+0x24>
  }
  else
  {
    return 0U;
 80037c0:	2300      	movs	r3, #0
  }
}
 80037c2:	0018      	movs	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b002      	add	sp, #8
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e059      	b.n	8003892 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2251      	movs	r2, #81	; 0x51
 80037e8:	5c9b      	ldrb	r3, [r3, r2]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d107      	bne.n	8003800 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2250      	movs	r2, #80	; 0x50
 80037f4:	2100      	movs	r1, #0
 80037f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f003 f88a 	bl	8006914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2251      	movs	r2, #81	; 0x51
 8003804:	2102      	movs	r1, #2
 8003806:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2140      	movs	r1, #64	; 0x40
 8003814:	438a      	bics	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6999      	ldr	r1, [r3, #24]
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	400b      	ands	r3, r1
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	431a      	orrs	r2, r3
 800384c:	0011      	movs	r1, r2
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	0c1b      	lsrs	r3, r3, #16
 8003860:	2204      	movs	r2, #4
 8003862:	4013      	ands	r3, r2
 8003864:	0019      	movs	r1, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4907      	ldr	r1, [pc, #28]	; (800389c <HAL_SPI_Init+0xd0>)
 800387e:	400a      	ands	r2, r1
 8003880:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2251      	movs	r2, #81	; 0x51
 800388c:	2101      	movs	r1, #1
 800388e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	0018      	movs	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	b002      	add	sp, #8
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	fffff7ff 	.word	0xfffff7ff

080038a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	1dbb      	adds	r3, r7, #6
 80038ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038b0:	231f      	movs	r3, #31
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2250      	movs	r2, #80	; 0x50
 80038bc:	5c9b      	ldrb	r3, [r3, r2]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_SPI_Transmit+0x26>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e136      	b.n	8003b34 <HAL_SPI_Transmit+0x294>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2250      	movs	r2, #80	; 0x50
 80038ca:	2101      	movs	r1, #1
 80038cc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038ce:	f7fe f831 	bl	8001934 <HAL_GetTick>
 80038d2:	0003      	movs	r3, r0
 80038d4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80038d6:	2316      	movs	r3, #22
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	1dba      	adds	r2, r7, #6
 80038dc:	8812      	ldrh	r2, [r2, #0]
 80038de:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2251      	movs	r2, #81	; 0x51
 80038e4:	5c9b      	ldrb	r3, [r3, r2]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d004      	beq.n	80038f6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80038ec:	231f      	movs	r3, #31
 80038ee:	18fb      	adds	r3, r7, r3
 80038f0:	2202      	movs	r2, #2
 80038f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80038f4:	e113      	b.n	8003b1e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_SPI_Transmit+0x64>
 80038fc:	1dbb      	adds	r3, r7, #6
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d104      	bne.n	800390e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003904:	231f      	movs	r3, #31
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
    goto error;
 800390c:	e107      	b.n	8003b1e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2251      	movs	r2, #81	; 0x51
 8003912:	2103      	movs	r1, #3
 8003914:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1dba      	adds	r2, r7, #6
 8003926:	8812      	ldrh	r2, [r2, #0]
 8003928:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1dba      	adds	r2, r7, #6
 800392e:	8812      	ldrh	r2, [r2, #0]
 8003930:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	2380      	movs	r3, #128	; 0x80
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	429a      	cmp	r2, r3
 800395a:	d108      	bne.n	800396e <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2180      	movs	r1, #128	; 0x80
 8003968:	01c9      	lsls	r1, r1, #7
 800396a:	430a      	orrs	r2, r1
 800396c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2240      	movs	r2, #64	; 0x40
 8003976:	4013      	ands	r3, r2
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d007      	beq.n	800398c <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2140      	movs	r1, #64	; 0x40
 8003988:	430a      	orrs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	429a      	cmp	r2, r3
 8003996:	d14e      	bne.n	8003a36 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d004      	beq.n	80039aa <HAL_SPI_Transmit+0x10a>
 80039a0:	2316      	movs	r3, #22
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d13f      	bne.n	8003a2a <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	881a      	ldrh	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	1c9a      	adds	r2, r3, #2
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039ce:	e02c      	b.n	8003a2a <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2202      	movs	r2, #2
 80039d8:	4013      	ands	r3, r2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d112      	bne.n	8003a04 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	881a      	ldrh	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	1c9a      	adds	r2, r3, #2
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a02:	e012      	b.n	8003a2a <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a04:	f7fd ff96 	bl	8001934 <HAL_GetTick>
 8003a08:	0002      	movs	r2, r0
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d802      	bhi.n	8003a1a <HAL_SPI_Transmit+0x17a>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	3301      	adds	r3, #1
 8003a18:	d102      	bne.n	8003a20 <HAL_SPI_Transmit+0x180>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8003a20:	231f      	movs	r3, #31
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	2203      	movs	r2, #3
 8003a26:	701a      	strb	r2, [r3, #0]
          goto error;
 8003a28:	e079      	b.n	8003b1e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1cd      	bne.n	80039d0 <HAL_SPI_Transmit+0x130>
 8003a34:	e04f      	b.n	8003ad6 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <HAL_SPI_Transmit+0x1a8>
 8003a3e:	2316      	movs	r3, #22
 8003a40:	18fb      	adds	r3, r7, r3
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d141      	bne.n	8003acc <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	330c      	adds	r3, #12
 8003a52:	7812      	ldrb	r2, [r2, #0]
 8003a54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a6e:	e02d      	b.n	8003acc <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2202      	movs	r2, #2
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d113      	bne.n	8003aa6 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	330c      	adds	r3, #12
 8003a88:	7812      	ldrb	r2, [r2, #0]
 8003a8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003aa4:	e012      	b.n	8003acc <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aa6:	f7fd ff45 	bl	8001934 <HAL_GetTick>
 8003aaa:	0002      	movs	r2, r0
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d802      	bhi.n	8003abc <HAL_SPI_Transmit+0x21c>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	d102      	bne.n	8003ac2 <HAL_SPI_Transmit+0x222>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8003ac2:	231f      	movs	r3, #31
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	701a      	strb	r2, [r3, #0]
          goto error;
 8003aca:	e028      	b.n	8003b1e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1cc      	bne.n	8003a70 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	6839      	ldr	r1, [r7, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f000 f8a9 	bl	8003c34 <SPI_EndRxTxTransaction>
 8003ae2:	1e03      	subs	r3, r0, #0
 8003ae4:	d002      	beq.n	8003aec <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003af4:	2300      	movs	r3, #0
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d004      	beq.n	8003b1c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8003b12:	231f      	movs	r3, #31
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e000      	b.n	8003b1e <HAL_SPI_Transmit+0x27e>
  }

error:
 8003b1c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2251      	movs	r2, #81	; 0x51
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2250      	movs	r2, #80	; 0x50
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003b2e:	231f      	movs	r3, #31
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	781b      	ldrb	r3, [r3, #0]
}
 8003b34:	0018      	movs	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b008      	add	sp, #32
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2251      	movs	r2, #81	; 0x51
 8003b48:	5c9b      	ldrb	r3, [r3, r2]
 8003b4a:	b2db      	uxtb	r3, r3
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b002      	add	sp, #8
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	1dfb      	adds	r3, r7, #7
 8003b62:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b64:	e050      	b.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	d04d      	beq.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003b6c:	f7fd fee2 	bl	8001934 <HAL_GetTick>
 8003b70:	0002      	movs	r2, r0
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d902      	bls.n	8003b82 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d142      	bne.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	21e0      	movs	r1, #224	; 0xe0
 8003b8e:	438a      	bics	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	2382      	movs	r3, #130	; 0x82
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d113      	bne.n	8003bc6 <SPI_WaitFlagStateUntilTimeout+0x72>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	2380      	movs	r3, #128	; 0x80
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d005      	beq.n	8003bb6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	2380      	movs	r3, #128	; 0x80
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d107      	bne.n	8003bc6 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2140      	movs	r1, #64	; 0x40
 8003bc2:	438a      	bics	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	019b      	lsls	r3, r3, #6
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d110      	bne.n	8003bf4 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4914      	ldr	r1, [pc, #80]	; (8003c30 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8003bde:	400a      	ands	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2180      	movs	r1, #128	; 0x80
 8003bee:	0189      	lsls	r1, r1, #6
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2251      	movs	r2, #81	; 0x51
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2250      	movs	r2, #80	; 0x50
 8003c00:	2100      	movs	r1, #0
 8003c02:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e00f      	b.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	4013      	ands	r3, r2
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	425a      	negs	r2, r3
 8003c18:	4153      	adcs	r3, r2
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	001a      	movs	r2, r3
 8003c1e:	1dfb      	adds	r3, r7, #7
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d19f      	bne.n	8003b66 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b004      	add	sp, #16
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	ffffdfff 	.word	0xffffdfff

08003c34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	2382      	movs	r3, #130	; 0x82
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d112      	bne.n	8003c72 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	0013      	movs	r3, r2
 8003c56:	2200      	movs	r2, #0
 8003c58:	2180      	movs	r1, #128	; 0x80
 8003c5a:	f7ff ff7b 	bl	8003b54 <SPI_WaitFlagStateUntilTimeout>
 8003c5e:	1e03      	subs	r3, r0, #0
 8003c60:	d020      	beq.n	8003ca4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c66:	2220      	movs	r2, #32
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e019      	b.n	8003ca6 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2251      	movs	r2, #81	; 0x51
 8003c76:	5c9b      	ldrb	r3, [r3, r2]
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d112      	bne.n	8003ca4 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	0013      	movs	r3, r2
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	f7ff ff62 	bl	8003b54 <SPI_WaitFlagStateUntilTimeout>
 8003c90:	1e03      	subs	r3, r0, #0
 8003c92:	d007      	beq.n	8003ca4 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c98:	2220      	movs	r2, #32
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e000      	b.n	8003ca6 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b004      	add	sp, #16
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e044      	b.n	8003d4c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d107      	bne.n	8003cda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2270      	movs	r2, #112	; 0x70
 8003cce:	2100      	movs	r1, #0
 8003cd0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f002 ff29 	bl	8006b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2224      	movs	r2, #36	; 0x24
 8003cde:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2101      	movs	r1, #1
 8003cec:	438a      	bics	r2, r1
 8003cee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f000 f8d8 	bl	8003ea8 <UART_SetConfig>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e024      	b.n	8003d4c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f000 fbe3 	bl	80044d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	490d      	ldr	r1, [pc, #52]	; (8003d54 <HAL_UART_Init+0xa4>)
 8003d1e:	400a      	ands	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	212a      	movs	r1, #42	; 0x2a
 8003d2e:	438a      	bics	r2, r1
 8003d30:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	0018      	movs	r0, r3
 8003d46:	f000 fc7b 	bl	8004640 <UART_CheckIdleState>
 8003d4a:	0003      	movs	r3, r0
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b002      	add	sp, #8
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	ffffb7ff 	.word	0xffffb7ff

08003d58 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	1dbb      	adds	r3, r7, #6
 8003d66:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6c:	2b20      	cmp	r3, #32
 8003d6e:	d000      	beq.n	8003d72 <HAL_UART_Transmit+0x1a>
 8003d70:	e094      	b.n	8003e9c <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_UART_Transmit+0x28>
 8003d78:	1dbb      	adds	r3, r7, #6
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e08c      	b.n	8003e9e <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	015b      	lsls	r3, r3, #5
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d109      	bne.n	8003da4 <HAL_UART_Transmit+0x4c>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d105      	bne.n	8003da4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d001      	beq.n	8003da4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e07c      	b.n	8003e9e <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2270      	movs	r2, #112	; 0x70
 8003da8:	5c9b      	ldrb	r3, [r3, r2]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Transmit+0x5a>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e075      	b.n	8003e9e <HAL_UART_Transmit+0x146>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2270      	movs	r2, #112	; 0x70
 8003db6:	2101      	movs	r1, #1
 8003db8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2221      	movs	r2, #33	; 0x21
 8003dc4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003dc6:	f7fd fdb5 	bl	8001934 <HAL_GetTick>
 8003dca:	0003      	movs	r3, r0
 8003dcc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1dba      	adds	r2, r7, #6
 8003dd2:	2150      	movs	r1, #80	; 0x50
 8003dd4:	8812      	ldrh	r2, [r2, #0]
 8003dd6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1dba      	adds	r2, r7, #6
 8003ddc:	2152      	movs	r1, #82	; 0x52
 8003dde:	8812      	ldrh	r2, [r2, #0]
 8003de0:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	015b      	lsls	r3, r3, #5
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d108      	bne.n	8003e00 <HAL_UART_Transmit+0xa8>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d104      	bne.n	8003e00 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	61bb      	str	r3, [r7, #24]
 8003dfe:	e003      	b.n	8003e08 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e08:	e02c      	b.n	8003e64 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	0013      	movs	r3, r2
 8003e14:	2200      	movs	r2, #0
 8003e16:	2180      	movs	r1, #128	; 0x80
 8003e18:	f000 fc58 	bl	80046cc <UART_WaitOnFlagUntilTimeout>
 8003e1c:	1e03      	subs	r3, r0, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e03c      	b.n	8003e9e <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	001a      	movs	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	05d2      	lsls	r2, r2, #23
 8003e36:	0dd2      	lsrs	r2, r2, #23
 8003e38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	3302      	adds	r3, #2
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	e007      	b.n	8003e52 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2252      	movs	r2, #82	; 0x52
 8003e56:	5a9b      	ldrh	r3, [r3, r2]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b299      	uxth	r1, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2252      	movs	r2, #82	; 0x52
 8003e62:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2252      	movs	r2, #82	; 0x52
 8003e68:	5a9b      	ldrh	r3, [r3, r2]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1cc      	bne.n	8003e0a <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	0013      	movs	r3, r2
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2140      	movs	r1, #64	; 0x40
 8003e7e:	f000 fc25 	bl	80046cc <UART_WaitOnFlagUntilTimeout>
 8003e82:	1e03      	subs	r3, r0, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e009      	b.n	8003e9e <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2270      	movs	r2, #112	; 0x70
 8003e94:	2100      	movs	r1, #0
 8003e96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b008      	add	sp, #32
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea8:	b5b0      	push	{r4, r5, r7, lr}
 8003eaa:	b08e      	sub	sp, #56	; 0x38
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003eb0:	231b      	movs	r3, #27
 8003eb2:	2218      	movs	r2, #24
 8003eb4:	4694      	mov	ip, r2
 8003eb6:	44bc      	add	ip, r7
 8003eb8:	4463      	add	r3, ip
 8003eba:	2210      	movs	r2, #16
 8003ebc:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ec2:	2313      	movs	r3, #19
 8003ec4:	2218      	movs	r2, #24
 8003ec6:	4694      	mov	ip, r2
 8003ec8:	44bc      	add	ip, r7
 8003eca:	4463      	add	r3, ip
 8003ecc:	2200      	movs	r2, #0
 8003ece:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	431a      	orrs	r2, r3
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4ac8      	ldr	r2, [pc, #800]	; (8004214 <UART_SetConfig+0x36c>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003efe:	430a      	orrs	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4ac3      	ldr	r2, [pc, #780]	; (8004218 <UART_SetConfig+0x370>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	0019      	movs	r1, r3
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4abd      	ldr	r2, [pc, #756]	; (800421c <UART_SetConfig+0x374>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d004      	beq.n	8003f34 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f30:	4313      	orrs	r3, r2
 8003f32:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	4ab9      	ldr	r2, [pc, #740]	; (8004220 <UART_SetConfig+0x378>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	0019      	movs	r1, r3
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f46:	430a      	orrs	r2, r1
 8003f48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4ab5      	ldr	r2, [pc, #724]	; (8004224 <UART_SetConfig+0x37c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d134      	bne.n	8003fbe <UART_SetConfig+0x116>
 8003f54:	4bb4      	ldr	r3, [pc, #720]	; (8004228 <UART_SetConfig+0x380>)
 8003f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f58:	2203      	movs	r2, #3
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d015      	beq.n	8003f8c <UART_SetConfig+0xe4>
 8003f60:	d304      	bcc.n	8003f6c <UART_SetConfig+0xc4>
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d00a      	beq.n	8003f7c <UART_SetConfig+0xd4>
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d018      	beq.n	8003f9c <UART_SetConfig+0xf4>
 8003f6a:	e01f      	b.n	8003fac <UART_SetConfig+0x104>
 8003f6c:	231b      	movs	r3, #27
 8003f6e:	2218      	movs	r2, #24
 8003f70:	4694      	mov	ip, r2
 8003f72:	44bc      	add	ip, r7
 8003f74:	4463      	add	r3, ip
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	e0ab      	b.n	80040d4 <UART_SetConfig+0x22c>
 8003f7c:	231b      	movs	r3, #27
 8003f7e:	2218      	movs	r2, #24
 8003f80:	4694      	mov	ip, r2
 8003f82:	44bc      	add	ip, r7
 8003f84:	4463      	add	r3, ip
 8003f86:	2202      	movs	r2, #2
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e0a3      	b.n	80040d4 <UART_SetConfig+0x22c>
 8003f8c:	231b      	movs	r3, #27
 8003f8e:	2218      	movs	r2, #24
 8003f90:	4694      	mov	ip, r2
 8003f92:	44bc      	add	ip, r7
 8003f94:	4463      	add	r3, ip
 8003f96:	2204      	movs	r2, #4
 8003f98:	701a      	strb	r2, [r3, #0]
 8003f9a:	e09b      	b.n	80040d4 <UART_SetConfig+0x22c>
 8003f9c:	231b      	movs	r3, #27
 8003f9e:	2218      	movs	r2, #24
 8003fa0:	4694      	mov	ip, r2
 8003fa2:	44bc      	add	ip, r7
 8003fa4:	4463      	add	r3, ip
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	e093      	b.n	80040d4 <UART_SetConfig+0x22c>
 8003fac:	231b      	movs	r3, #27
 8003fae:	2218      	movs	r2, #24
 8003fb0:	4694      	mov	ip, r2
 8003fb2:	44bc      	add	ip, r7
 8003fb4:	4463      	add	r3, ip
 8003fb6:	2210      	movs	r2, #16
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	e08a      	b.n	80040d4 <UART_SetConfig+0x22c>
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a9a      	ldr	r2, [pc, #616]	; (800422c <UART_SetConfig+0x384>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d137      	bne.n	8004038 <UART_SetConfig+0x190>
 8003fc8:	4b97      	ldr	r3, [pc, #604]	; (8004228 <UART_SetConfig+0x380>)
 8003fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fcc:	220c      	movs	r2, #12
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d018      	beq.n	8004006 <UART_SetConfig+0x15e>
 8003fd4:	d802      	bhi.n	8003fdc <UART_SetConfig+0x134>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d005      	beq.n	8003fe6 <UART_SetConfig+0x13e>
 8003fda:	e024      	b.n	8004026 <UART_SetConfig+0x17e>
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d00a      	beq.n	8003ff6 <UART_SetConfig+0x14e>
 8003fe0:	2b0c      	cmp	r3, #12
 8003fe2:	d018      	beq.n	8004016 <UART_SetConfig+0x16e>
 8003fe4:	e01f      	b.n	8004026 <UART_SetConfig+0x17e>
 8003fe6:	231b      	movs	r3, #27
 8003fe8:	2218      	movs	r2, #24
 8003fea:	4694      	mov	ip, r2
 8003fec:	44bc      	add	ip, r7
 8003fee:	4463      	add	r3, ip
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
 8003ff4:	e06e      	b.n	80040d4 <UART_SetConfig+0x22c>
 8003ff6:	231b      	movs	r3, #27
 8003ff8:	2218      	movs	r2, #24
 8003ffa:	4694      	mov	ip, r2
 8003ffc:	44bc      	add	ip, r7
 8003ffe:	4463      	add	r3, ip
 8004000:	2202      	movs	r2, #2
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	e066      	b.n	80040d4 <UART_SetConfig+0x22c>
 8004006:	231b      	movs	r3, #27
 8004008:	2218      	movs	r2, #24
 800400a:	4694      	mov	ip, r2
 800400c:	44bc      	add	ip, r7
 800400e:	4463      	add	r3, ip
 8004010:	2204      	movs	r2, #4
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e05e      	b.n	80040d4 <UART_SetConfig+0x22c>
 8004016:	231b      	movs	r3, #27
 8004018:	2218      	movs	r2, #24
 800401a:	4694      	mov	ip, r2
 800401c:	44bc      	add	ip, r7
 800401e:	4463      	add	r3, ip
 8004020:	2208      	movs	r2, #8
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	e056      	b.n	80040d4 <UART_SetConfig+0x22c>
 8004026:	231b      	movs	r3, #27
 8004028:	2218      	movs	r2, #24
 800402a:	4694      	mov	ip, r2
 800402c:	44bc      	add	ip, r7
 800402e:	4463      	add	r3, ip
 8004030:	2210      	movs	r2, #16
 8004032:	701a      	strb	r2, [r3, #0]
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	e04d      	b.n	80040d4 <UART_SetConfig+0x22c>
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a77      	ldr	r2, [pc, #476]	; (800421c <UART_SetConfig+0x374>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d141      	bne.n	80040c6 <UART_SetConfig+0x21e>
 8004042:	4b79      	ldr	r3, [pc, #484]	; (8004228 <UART_SetConfig+0x380>)
 8004044:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004046:	23c0      	movs	r3, #192	; 0xc0
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	4013      	ands	r3, r2
 800404c:	2280      	movs	r2, #128	; 0x80
 800404e:	00d2      	lsls	r2, r2, #3
 8004050:	4293      	cmp	r3, r2
 8004052:	d01f      	beq.n	8004094 <UART_SetConfig+0x1ec>
 8004054:	2280      	movs	r2, #128	; 0x80
 8004056:	00d2      	lsls	r2, r2, #3
 8004058:	4293      	cmp	r3, r2
 800405a:	d802      	bhi.n	8004062 <UART_SetConfig+0x1ba>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d009      	beq.n	8004074 <UART_SetConfig+0x1cc>
 8004060:	e028      	b.n	80040b4 <UART_SetConfig+0x20c>
 8004062:	2280      	movs	r2, #128	; 0x80
 8004064:	0112      	lsls	r2, r2, #4
 8004066:	4293      	cmp	r3, r2
 8004068:	d00c      	beq.n	8004084 <UART_SetConfig+0x1dc>
 800406a:	22c0      	movs	r2, #192	; 0xc0
 800406c:	0112      	lsls	r2, r2, #4
 800406e:	4293      	cmp	r3, r2
 8004070:	d018      	beq.n	80040a4 <UART_SetConfig+0x1fc>
 8004072:	e01f      	b.n	80040b4 <UART_SetConfig+0x20c>
 8004074:	231b      	movs	r3, #27
 8004076:	2218      	movs	r2, #24
 8004078:	4694      	mov	ip, r2
 800407a:	44bc      	add	ip, r7
 800407c:	4463      	add	r3, ip
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	e027      	b.n	80040d4 <UART_SetConfig+0x22c>
 8004084:	231b      	movs	r3, #27
 8004086:	2218      	movs	r2, #24
 8004088:	4694      	mov	ip, r2
 800408a:	44bc      	add	ip, r7
 800408c:	4463      	add	r3, ip
 800408e:	2202      	movs	r2, #2
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	e01f      	b.n	80040d4 <UART_SetConfig+0x22c>
 8004094:	231b      	movs	r3, #27
 8004096:	2218      	movs	r2, #24
 8004098:	4694      	mov	ip, r2
 800409a:	44bc      	add	ip, r7
 800409c:	4463      	add	r3, ip
 800409e:	2204      	movs	r2, #4
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	e017      	b.n	80040d4 <UART_SetConfig+0x22c>
 80040a4:	231b      	movs	r3, #27
 80040a6:	2218      	movs	r2, #24
 80040a8:	4694      	mov	ip, r2
 80040aa:	44bc      	add	ip, r7
 80040ac:	4463      	add	r3, ip
 80040ae:	2208      	movs	r2, #8
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	e00f      	b.n	80040d4 <UART_SetConfig+0x22c>
 80040b4:	231b      	movs	r3, #27
 80040b6:	2218      	movs	r2, #24
 80040b8:	4694      	mov	ip, r2
 80040ba:	44bc      	add	ip, r7
 80040bc:	4463      	add	r3, ip
 80040be:	2210      	movs	r2, #16
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	e006      	b.n	80040d4 <UART_SetConfig+0x22c>
 80040c6:	231b      	movs	r3, #27
 80040c8:	2218      	movs	r2, #24
 80040ca:	4694      	mov	ip, r2
 80040cc:	44bc      	add	ip, r7
 80040ce:	4463      	add	r3, ip
 80040d0:	2210      	movs	r2, #16
 80040d2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a50      	ldr	r2, [pc, #320]	; (800421c <UART_SetConfig+0x374>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d000      	beq.n	80040e0 <UART_SetConfig+0x238>
 80040de:	e083      	b.n	80041e8 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040e0:	231b      	movs	r3, #27
 80040e2:	2218      	movs	r2, #24
 80040e4:	4694      	mov	ip, r2
 80040e6:	44bc      	add	ip, r7
 80040e8:	4463      	add	r3, ip
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d00d      	beq.n	800410c <UART_SetConfig+0x264>
 80040f0:	dc02      	bgt.n	80040f8 <UART_SetConfig+0x250>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <UART_SetConfig+0x25a>
 80040f6:	e01d      	b.n	8004134 <UART_SetConfig+0x28c>
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d012      	beq.n	8004122 <UART_SetConfig+0x27a>
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d015      	beq.n	800412c <UART_SetConfig+0x284>
 8004100:	e018      	b.n	8004134 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004102:	f7ff f957 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 8004106:	0003      	movs	r3, r0
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800410a:	e01b      	b.n	8004144 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800410c:	4b46      	ldr	r3, [pc, #280]	; (8004228 <UART_SetConfig+0x380>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2210      	movs	r2, #16
 8004112:	4013      	ands	r3, r2
 8004114:	d002      	beq.n	800411c <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8004116:	4b46      	ldr	r3, [pc, #280]	; (8004230 <UART_SetConfig+0x388>)
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800411a:	e013      	b.n	8004144 <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800411c:	4b45      	ldr	r3, [pc, #276]	; (8004234 <UART_SetConfig+0x38c>)
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004120:	e010      	b.n	8004144 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004122:	f7ff f8b9 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8004126:	0003      	movs	r3, r0
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800412a:	e00b      	b.n	8004144 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004132:	e007      	b.n	8004144 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004134:	2313      	movs	r3, #19
 8004136:	2218      	movs	r2, #24
 8004138:	4694      	mov	ip, r2
 800413a:	44bc      	add	ip, r7
 800413c:	4463      	add	r3, ip
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]
        break;
 8004142:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	2b00      	cmp	r3, #0
 8004148:	d100      	bne.n	800414c <UART_SetConfig+0x2a4>
 800414a:	e1a6      	b.n	800449a <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	0013      	movs	r3, r2
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	189b      	adds	r3, r3, r2
 8004156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004158:	429a      	cmp	r2, r3
 800415a:	d305      	bcc.n	8004168 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004164:	429a      	cmp	r2, r3
 8004166:	d907      	bls.n	8004178 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 8004168:	2313      	movs	r3, #19
 800416a:	2218      	movs	r2, #24
 800416c:	4694      	mov	ip, r2
 800416e:	44bc      	add	ip, r7
 8004170:	4463      	add	r3, ip
 8004172:	2201      	movs	r2, #1
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	e190      	b.n	800449a <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	6939      	ldr	r1, [r7, #16]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	000b      	movs	r3, r1
 8004186:	0e1b      	lsrs	r3, r3, #24
 8004188:	0010      	movs	r0, r2
 800418a:	0205      	lsls	r5, r0, #8
 800418c:	431d      	orrs	r5, r3
 800418e:	000b      	movs	r3, r1
 8004190:	021c      	lsls	r4, r3, #8
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	68b8      	ldr	r0, [r7, #8]
 80041a0:	68f9      	ldr	r1, [r7, #12]
 80041a2:	1900      	adds	r0, r0, r4
 80041a4:	4169      	adcs	r1, r5
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	2300      	movs	r3, #0
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f7fc f86e 	bl	8000294 <__aeabi_uldivmod>
 80041b8:	0003      	movs	r3, r0
 80041ba:	000c      	movs	r4, r1
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c0:	4a1d      	ldr	r2, [pc, #116]	; (8004238 <UART_SetConfig+0x390>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d908      	bls.n	80041d8 <UART_SetConfig+0x330>
 80041c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c8:	4a1c      	ldr	r2, [pc, #112]	; (800423c <UART_SetConfig+0x394>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d804      	bhi.n	80041d8 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d4:	60da      	str	r2, [r3, #12]
 80041d6:	e160      	b.n	800449a <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 80041d8:	2313      	movs	r3, #19
 80041da:	2218      	movs	r2, #24
 80041dc:	4694      	mov	ip, r2
 80041de:	44bc      	add	ip, r7
 80041e0:	4463      	add	r3, ip
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
 80041e6:	e158      	b.n	800449a <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d000      	beq.n	80041f6 <UART_SetConfig+0x34e>
 80041f4:	e0c3      	b.n	800437e <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 80041f6:	231b      	movs	r3, #27
 80041f8:	2218      	movs	r2, #24
 80041fa:	4694      	mov	ip, r2
 80041fc:	44bc      	add	ip, r7
 80041fe:	4463      	add	r3, ip
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b08      	cmp	r3, #8
 8004204:	d900      	bls.n	8004208 <UART_SetConfig+0x360>
 8004206:	e086      	b.n	8004316 <UART_SetConfig+0x46e>
 8004208:	009a      	lsls	r2, r3, #2
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <UART_SetConfig+0x398>)
 800420c:	18d3      	adds	r3, r2, r3
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	469f      	mov	pc, r3
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	efff69f3 	.word	0xefff69f3
 8004218:	ffffcfff 	.word	0xffffcfff
 800421c:	40004800 	.word	0x40004800
 8004220:	fffff4ff 	.word	0xfffff4ff
 8004224:	40013800 	.word	0x40013800
 8004228:	40021000 	.word	0x40021000
 800422c:	40004400 	.word	0x40004400
 8004230:	003d0900 	.word	0x003d0900
 8004234:	00f42400 	.word	0x00f42400
 8004238:	000002ff 	.word	0x000002ff
 800423c:	000fffff 	.word	0x000fffff
 8004240:	08006dfc 	.word	0x08006dfc
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004244:	f7ff f8b6 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 8004248:	0003      	movs	r3, r0
 800424a:	005a      	lsls	r2, r3, #1
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	18d2      	adds	r2, r2, r3
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	0019      	movs	r1, r3
 800425a:	0010      	movs	r0, r2
 800425c:	f7fb ff54 	bl	8000108 <__udivsi3>
 8004260:	0003      	movs	r3, r0
 8004262:	b29b      	uxth	r3, r3
 8004264:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004266:	e05e      	b.n	8004326 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004268:	f7ff f8ba 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
 800426c:	0003      	movs	r3, r0
 800426e:	005a      	lsls	r2, r3, #1
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	18d2      	adds	r2, r2, r3
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	0019      	movs	r1, r3
 800427e:	0010      	movs	r0, r2
 8004280:	f7fb ff42 	bl	8000108 <__udivsi3>
 8004284:	0003      	movs	r3, r0
 8004286:	b29b      	uxth	r3, r3
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800428a:	e04c      	b.n	8004326 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800428c:	4b8b      	ldr	r3, [pc, #556]	; (80044bc <UART_SetConfig+0x614>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2210      	movs	r2, #16
 8004292:	4013      	ands	r3, r2
 8004294:	d00e      	beq.n	80042b4 <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	4a88      	ldr	r2, [pc, #544]	; (80044c0 <UART_SetConfig+0x618>)
 800429e:	189a      	adds	r2, r3, r2
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	0019      	movs	r1, r3
 80042a6:	0010      	movs	r0, r2
 80042a8:	f7fb ff2e 	bl	8000108 <__udivsi3>
 80042ac:	0003      	movs	r3, r0
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80042b2:	e038      	b.n	8004326 <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	085b      	lsrs	r3, r3, #1
 80042ba:	4a82      	ldr	r2, [pc, #520]	; (80044c4 <UART_SetConfig+0x61c>)
 80042bc:	189a      	adds	r2, r3, r2
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	0019      	movs	r1, r3
 80042c4:	0010      	movs	r0, r2
 80042c6:	f7fb ff1f 	bl	8000108 <__udivsi3>
 80042ca:	0003      	movs	r3, r0
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042d0:	e029      	b.n	8004326 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80042d2:	f7fe ffe1 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 80042d6:	0003      	movs	r3, r0
 80042d8:	005a      	lsls	r2, r3, #1
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	085b      	lsrs	r3, r3, #1
 80042e0:	18d2      	adds	r2, r2, r3
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	0019      	movs	r1, r3
 80042e8:	0010      	movs	r0, r2
 80042ea:	f7fb ff0d 	bl	8000108 <__udivsi3>
 80042ee:	0003      	movs	r3, r0
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042f4:	e017      	b.n	8004326 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	2280      	movs	r2, #128	; 0x80
 80042fe:	0252      	lsls	r2, r2, #9
 8004300:	189a      	adds	r2, r3, r2
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	0019      	movs	r1, r3
 8004308:	0010      	movs	r0, r2
 800430a:	f7fb fefd 	bl	8000108 <__udivsi3>
 800430e:	0003      	movs	r3, r0
 8004310:	b29b      	uxth	r3, r3
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004314:	e007      	b.n	8004326 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004316:	2313      	movs	r3, #19
 8004318:	2218      	movs	r2, #24
 800431a:	4694      	mov	ip, r2
 800431c:	44bc      	add	ip, r7
 800431e:	4463      	add	r3, ip
 8004320:	2201      	movs	r2, #1
 8004322:	701a      	strb	r2, [r3, #0]
        break;
 8004324:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	2b0f      	cmp	r3, #15
 800432a:	d920      	bls.n	800436e <UART_SetConfig+0x4c6>
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432e:	4a66      	ldr	r2, [pc, #408]	; (80044c8 <UART_SetConfig+0x620>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d81c      	bhi.n	800436e <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004336:	b29a      	uxth	r2, r3
 8004338:	200a      	movs	r0, #10
 800433a:	2418      	movs	r4, #24
 800433c:	193b      	adds	r3, r7, r4
 800433e:	181b      	adds	r3, r3, r0
 8004340:	210f      	movs	r1, #15
 8004342:	438a      	bics	r2, r1
 8004344:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	085b      	lsrs	r3, r3, #1
 800434a:	b29b      	uxth	r3, r3
 800434c:	2207      	movs	r2, #7
 800434e:	4013      	ands	r3, r2
 8004350:	b299      	uxth	r1, r3
 8004352:	193b      	adds	r3, r7, r4
 8004354:	181b      	adds	r3, r3, r0
 8004356:	193a      	adds	r2, r7, r4
 8004358:	1812      	adds	r2, r2, r0
 800435a:	8812      	ldrh	r2, [r2, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	193a      	adds	r2, r7, r4
 8004366:	1812      	adds	r2, r2, r0
 8004368:	8812      	ldrh	r2, [r2, #0]
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	e095      	b.n	800449a <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 800436e:	2313      	movs	r3, #19
 8004370:	2218      	movs	r2, #24
 8004372:	4694      	mov	ip, r2
 8004374:	44bc      	add	ip, r7
 8004376:	4463      	add	r3, ip
 8004378:	2201      	movs	r2, #1
 800437a:	701a      	strb	r2, [r3, #0]
 800437c:	e08d      	b.n	800449a <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 800437e:	231b      	movs	r3, #27
 8004380:	2218      	movs	r2, #24
 8004382:	4694      	mov	ip, r2
 8004384:	44bc      	add	ip, r7
 8004386:	4463      	add	r3, ip
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b08      	cmp	r3, #8
 800438c:	d86a      	bhi.n	8004464 <UART_SetConfig+0x5bc>
 800438e:	009a      	lsls	r2, r3, #2
 8004390:	4b4e      	ldr	r3, [pc, #312]	; (80044cc <UART_SetConfig+0x624>)
 8004392:	18d3      	adds	r3, r2, r3
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004398:	f7ff f80c 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 800439c:	0002      	movs	r2, r0
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	18d2      	adds	r2, r2, r3
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	0019      	movs	r1, r3
 80043ac:	0010      	movs	r0, r2
 80043ae:	f7fb feab 	bl	8000108 <__udivsi3>
 80043b2:	0003      	movs	r3, r0
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043b8:	e05c      	b.n	8004474 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80043ba:	f7ff f811 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
 80043be:	0002      	movs	r2, r0
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	18d2      	adds	r2, r2, r3
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	0019      	movs	r1, r3
 80043ce:	0010      	movs	r0, r2
 80043d0:	f7fb fe9a 	bl	8000108 <__udivsi3>
 80043d4:	0003      	movs	r3, r0
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043da:	e04b      	b.n	8004474 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043dc:	4b37      	ldr	r3, [pc, #220]	; (80044bc <UART_SetConfig+0x614>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2210      	movs	r2, #16
 80043e2:	4013      	ands	r3, r2
 80043e4:	d00e      	beq.n	8004404 <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	085b      	lsrs	r3, r3, #1
 80043ec:	4a38      	ldr	r2, [pc, #224]	; (80044d0 <UART_SetConfig+0x628>)
 80043ee:	189a      	adds	r2, r3, r2
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	0019      	movs	r1, r3
 80043f6:	0010      	movs	r0, r2
 80043f8:	f7fb fe86 	bl	8000108 <__udivsi3>
 80043fc:	0003      	movs	r3, r0
 80043fe:	b29b      	uxth	r3, r3
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004402:	e037      	b.n	8004474 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	4a32      	ldr	r2, [pc, #200]	; (80044d4 <UART_SetConfig+0x62c>)
 800440c:	189a      	adds	r2, r3, r2
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	0019      	movs	r1, r3
 8004414:	0010      	movs	r0, r2
 8004416:	f7fb fe77 	bl	8000108 <__udivsi3>
 800441a:	0003      	movs	r3, r0
 800441c:	b29b      	uxth	r3, r3
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004420:	e028      	b.n	8004474 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004422:	f7fe ff39 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8004426:	0002      	movs	r2, r0
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	085b      	lsrs	r3, r3, #1
 800442e:	18d2      	adds	r2, r2, r3
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	0019      	movs	r1, r3
 8004436:	0010      	movs	r0, r2
 8004438:	f7fb fe66 	bl	8000108 <__udivsi3>
 800443c:	0003      	movs	r3, r0
 800443e:	b29b      	uxth	r3, r3
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004442:	e017      	b.n	8004474 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	2280      	movs	r2, #128	; 0x80
 800444c:	0212      	lsls	r2, r2, #8
 800444e:	189a      	adds	r2, r3, r2
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	0019      	movs	r1, r3
 8004456:	0010      	movs	r0, r2
 8004458:	f7fb fe56 	bl	8000108 <__udivsi3>
 800445c:	0003      	movs	r3, r0
 800445e:	b29b      	uxth	r3, r3
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004462:	e007      	b.n	8004474 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004464:	2313      	movs	r3, #19
 8004466:	2218      	movs	r2, #24
 8004468:	4694      	mov	ip, r2
 800446a:	44bc      	add	ip, r7
 800446c:	4463      	add	r3, ip
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
        break;
 8004472:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004476:	2b0f      	cmp	r3, #15
 8004478:	d908      	bls.n	800448c <UART_SetConfig+0x5e4>
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <UART_SetConfig+0x620>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d804      	bhi.n	800448c <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	e006      	b.n	800449a <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 800448c:	2313      	movs	r3, #19
 800448e:	2218      	movs	r2, #24
 8004490:	4694      	mov	ip, r2
 8004492:	44bc      	add	ip, r7
 8004494:	4463      	add	r3, ip
 8004496:	2201      	movs	r2, #1
 8004498:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	2200      	movs	r2, #0
 800449e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2200      	movs	r2, #0
 80044a4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80044a6:	2313      	movs	r3, #19
 80044a8:	2218      	movs	r2, #24
 80044aa:	4694      	mov	ip, r2
 80044ac:	44bc      	add	ip, r7
 80044ae:	4463      	add	r3, ip
 80044b0:	781b      	ldrb	r3, [r3, #0]
}
 80044b2:	0018      	movs	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b00e      	add	sp, #56	; 0x38
 80044b8:	bdb0      	pop	{r4, r5, r7, pc}
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	40021000 	.word	0x40021000
 80044c0:	007a1200 	.word	0x007a1200
 80044c4:	01e84800 	.word	0x01e84800
 80044c8:	0000ffff 	.word	0x0000ffff
 80044cc:	08006e20 	.word	0x08006e20
 80044d0:	003d0900 	.word	0x003d0900
 80044d4:	00f42400 	.word	0x00f42400

080044d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	2201      	movs	r2, #1
 80044e6:	4013      	ands	r3, r2
 80044e8:	d00b      	beq.n	8004502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4a4a      	ldr	r2, [pc, #296]	; (800461c <UART_AdvFeatureConfig+0x144>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	0019      	movs	r1, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	2202      	movs	r2, #2
 8004508:	4013      	ands	r3, r2
 800450a:	d00b      	beq.n	8004524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	4a43      	ldr	r2, [pc, #268]	; (8004620 <UART_AdvFeatureConfig+0x148>)
 8004514:	4013      	ands	r3, r2
 8004516:	0019      	movs	r1, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	2204      	movs	r2, #4
 800452a:	4013      	ands	r3, r2
 800452c:	d00b      	beq.n	8004546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	4a3b      	ldr	r2, [pc, #236]	; (8004624 <UART_AdvFeatureConfig+0x14c>)
 8004536:	4013      	ands	r3, r2
 8004538:	0019      	movs	r1, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2208      	movs	r2, #8
 800454c:	4013      	ands	r3, r2
 800454e:	d00b      	beq.n	8004568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4a34      	ldr	r2, [pc, #208]	; (8004628 <UART_AdvFeatureConfig+0x150>)
 8004558:	4013      	ands	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	2210      	movs	r2, #16
 800456e:	4013      	ands	r3, r2
 8004570:	d00b      	beq.n	800458a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4a2c      	ldr	r2, [pc, #176]	; (800462c <UART_AdvFeatureConfig+0x154>)
 800457a:	4013      	ands	r3, r2
 800457c:	0019      	movs	r1, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	2220      	movs	r2, #32
 8004590:	4013      	ands	r3, r2
 8004592:	d00b      	beq.n	80045ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	4a25      	ldr	r2, [pc, #148]	; (8004630 <UART_AdvFeatureConfig+0x158>)
 800459c:	4013      	ands	r3, r2
 800459e:	0019      	movs	r1, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	2240      	movs	r2, #64	; 0x40
 80045b2:	4013      	ands	r3, r2
 80045b4:	d01d      	beq.n	80045f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4a1d      	ldr	r2, [pc, #116]	; (8004634 <UART_AdvFeatureConfig+0x15c>)
 80045be:	4013      	ands	r3, r2
 80045c0:	0019      	movs	r1, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045d2:	2380      	movs	r3, #128	; 0x80
 80045d4:	035b      	lsls	r3, r3, #13
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d10b      	bne.n	80045f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4a15      	ldr	r2, [pc, #84]	; (8004638 <UART_AdvFeatureConfig+0x160>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	0019      	movs	r1, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	2280      	movs	r2, #128	; 0x80
 80045f8:	4013      	ands	r3, r2
 80045fa:	d00b      	beq.n	8004614 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	4a0e      	ldr	r2, [pc, #56]	; (800463c <UART_AdvFeatureConfig+0x164>)
 8004604:	4013      	ands	r3, r2
 8004606:	0019      	movs	r1, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
  }
}
 8004614:	46c0      	nop			; (mov r8, r8)
 8004616:	46bd      	mov	sp, r7
 8004618:	b002      	add	sp, #8
 800461a:	bd80      	pop	{r7, pc}
 800461c:	fffdffff 	.word	0xfffdffff
 8004620:	fffeffff 	.word	0xfffeffff
 8004624:	fffbffff 	.word	0xfffbffff
 8004628:	ffff7fff 	.word	0xffff7fff
 800462c:	ffffefff 	.word	0xffffefff
 8004630:	ffffdfff 	.word	0xffffdfff
 8004634:	ffefffff 	.word	0xffefffff
 8004638:	ff9fffff 	.word	0xff9fffff
 800463c:	fff7ffff 	.word	0xfff7ffff

08004640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af02      	add	r7, sp, #8
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800464e:	f7fd f971 	bl	8001934 <HAL_GetTick>
 8004652:	0003      	movs	r3, r0
 8004654:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2208      	movs	r2, #8
 800465e:	4013      	ands	r3, r2
 8004660:	2b08      	cmp	r3, #8
 8004662:	d10d      	bne.n	8004680 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	2380      	movs	r3, #128	; 0x80
 8004668:	0399      	lsls	r1, r3, #14
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	4b16      	ldr	r3, [pc, #88]	; (80046c8 <UART_CheckIdleState+0x88>)
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	0013      	movs	r3, r2
 8004672:	2200      	movs	r2, #0
 8004674:	f000 f82a 	bl	80046cc <UART_WaitOnFlagUntilTimeout>
 8004678:	1e03      	subs	r3, r0, #0
 800467a:	d001      	beq.n	8004680 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e01f      	b.n	80046c0 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2204      	movs	r2, #4
 8004688:	4013      	ands	r3, r2
 800468a:	2b04      	cmp	r3, #4
 800468c:	d10d      	bne.n	80046aa <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	03d9      	lsls	r1, r3, #15
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <UART_CheckIdleState+0x88>)
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	0013      	movs	r3, r2
 800469c:	2200      	movs	r2, #0
 800469e:	f000 f815 	bl	80046cc <UART_WaitOnFlagUntilTimeout>
 80046a2:	1e03      	subs	r3, r0, #0
 80046a4:	d001      	beq.n	80046aa <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e00a      	b.n	80046c0 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2270      	movs	r2, #112	; 0x70
 80046ba:	2100      	movs	r1, #0
 80046bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b004      	add	sp, #16
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	01ffffff 	.word	0x01ffffff

080046cc <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	1dfb      	adds	r3, r7, #7
 80046da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046dc:	e029      	b.n	8004732 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	3301      	adds	r3, #1
 80046e2:	d026      	beq.n	8004732 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e4:	f7fd f926 	bl	8001934 <HAL_GetTick>
 80046e8:	0002      	movs	r2, r0
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d302      	bcc.n	80046fa <UART_WaitOnFlagUntilTimeout+0x2e>
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d11b      	bne.n	8004732 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4915      	ldr	r1, [pc, #84]	; (800475c <UART_WaitOnFlagUntilTimeout+0x90>)
 8004706:	400a      	ands	r2, r1
 8004708:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2101      	movs	r1, #1
 8004716:	438a      	bics	r2, r1
 8004718:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2270      	movs	r2, #112	; 0x70
 800472a:	2100      	movs	r1, #0
 800472c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e00f      	b.n	8004752 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	4013      	ands	r3, r2
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	425a      	negs	r2, r3
 8004742:	4153      	adcs	r3, r2
 8004744:	b2db      	uxtb	r3, r3
 8004746:	001a      	movs	r2, r3
 8004748:	1dfb      	adds	r3, r7, #7
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d0c6      	beq.n	80046de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	0018      	movs	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	b004      	add	sp, #16
 8004758:	bd80      	pop	{r7, pc}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	fffffe5f 	.word	0xfffffe5f

08004760 <_ZN8APDS99606enable3getEv>:
    uint8_t PIEN : 1;

    // gesture enable
    uint8_t GEN : 1;

    uint8_t get() {
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
      return (GEN << 6) | (PIEN << 5) | (AIEN << 4) | (WEN << 3) | (PEN << 2) |
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	065b      	lsls	r3, r3, #25
 800476e:	0fdb      	lsrs	r3, r3, #31
 8004770:	b2db      	uxtb	r3, r3
 8004772:	019b      	lsls	r3, r3, #6
 8004774:	b25a      	sxtb	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	069b      	lsls	r3, r3, #26
 800477c:	0fdb      	lsrs	r3, r3, #31
 800477e:	b2db      	uxtb	r3, r3
 8004780:	015b      	lsls	r3, r3, #5
 8004782:	b25b      	sxtb	r3, r3
 8004784:	4313      	orrs	r3, r2
 8004786:	b25a      	sxtb	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	06db      	lsls	r3, r3, #27
 800478e:	0fdb      	lsrs	r3, r3, #31
 8004790:	b2db      	uxtb	r3, r3
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	b25b      	sxtb	r3, r3
 8004796:	4313      	orrs	r3, r2
 8004798:	b25a      	sxtb	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	071b      	lsls	r3, r3, #28
 80047a0:	0fdb      	lsrs	r3, r3, #31
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	b25b      	sxtb	r3, r3
 80047a8:	4313      	orrs	r3, r2
 80047aa:	b25a      	sxtb	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	075b      	lsls	r3, r3, #29
 80047b2:	0fdb      	lsrs	r3, r3, #31
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	b25b      	sxtb	r3, r3
 80047ba:	4313      	orrs	r3, r2
 80047bc:	b25a      	sxtb	r2, r3
             (AEN << 1) | PON;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	079b      	lsls	r3, r3, #30
 80047c4:	0fdb      	lsrs	r3, r3, #31
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	005b      	lsls	r3, r3, #1
      return (GEN << 6) | (PIEN << 5) | (AIEN << 4) | (WEN << 3) | (PEN << 2) |
 80047ca:	b25b      	sxtb	r3, r3
 80047cc:	4313      	orrs	r3, r2
 80047ce:	b25a      	sxtb	r2, r3
             (AEN << 1) | PON;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	07db      	lsls	r3, r3, #31
 80047d6:	0fdb      	lsrs	r3, r3, #31
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	b25b      	sxtb	r3, r3
 80047dc:	4313      	orrs	r3, r2
 80047de:	b25b      	sxtb	r3, r3
 80047e0:	b2db      	uxtb	r3, r3
    };
 80047e2:	0018      	movs	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b002      	add	sp, #8
 80047e8:	bd80      	pop	{r7, pc}

080047ea <_ZN8APDS99607control3getEv>:
    uint8_t PGAIN : 2;

    // led drive strength
    uint8_t LDRIVE : 2;

    uint8_t get() { return (LDRIVE << 6) | (PGAIN << 2) | AGAIN; }
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b082      	sub	sp, #8
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	069b      	lsls	r3, r3, #26
 80047f8:	0f9b      	lsrs	r3, r3, #30
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	019b      	lsls	r3, r3, #6
 80047fe:	b25a      	sxtb	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	071b      	lsls	r3, r3, #28
 8004806:	0f9b      	lsrs	r3, r3, #30
 8004808:	b2db      	uxtb	r3, r3
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	b25b      	sxtb	r3, r3
 800480e:	4313      	orrs	r3, r2
 8004810:	b25a      	sxtb	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	079b      	lsls	r3, r3, #30
 8004818:	0f9b      	lsrs	r3, r3, #30
 800481a:	b2db      	uxtb	r3, r3
 800481c:	b25b      	sxtb	r3, r3
 800481e:	4313      	orrs	r3, r2
 8004820:	b25b      	sxtb	r3, r3
 8004822:	b2db      	uxtb	r3, r3
 8004824:	0018      	movs	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	b002      	add	sp, #8
 800482a:	bd80      	pop	{r7, pc}

0800482c <_ZN8APDS99606gconf13getEv>:
    /* Gesture FIFO Threshold. This value is compared with the FIFO Level (i.e.
    the number of UDLR datasets) to generate an interrupt (if enabled).
    */
    uint8_t GFIFOTH : 2;

    uint8_t get() { return (GFIFOTH << 6) | (GEXMSK << 2) | GEXPERS; }
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	061b      	lsls	r3, r3, #24
 800483a:	0f9b      	lsrs	r3, r3, #30
 800483c:	b2db      	uxtb	r3, r3
 800483e:	019b      	lsls	r3, r3, #6
 8004840:	b25a      	sxtb	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	069b      	lsls	r3, r3, #26
 8004848:	0f1b      	lsrs	r3, r3, #28
 800484a:	b2db      	uxtb	r3, r3
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	b25b      	sxtb	r3, r3
 8004850:	4313      	orrs	r3, r2
 8004852:	b25a      	sxtb	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	079b      	lsls	r3, r3, #30
 800485a:	0f9b      	lsrs	r3, r3, #30
 800485c:	b2db      	uxtb	r3, r3
 800485e:	b25b      	sxtb	r3, r3
 8004860:	4313      	orrs	r3, r2
 8004862:	b25b      	sxtb	r3, r3
 8004864:	b2db      	uxtb	r3, r3
 8004866:	0018      	movs	r0, r3
 8004868:	46bd      	mov	sp, r7
 800486a:	b002      	add	sp, #8
 800486c:	bd80      	pop	{r7, pc}

0800486e <_ZN8APDS99606gconf23getEv>:

    // Gesture Gain Control. Sets the gain of the proximity receiver in gesture
    // mode.
    uint8_t GGAIN : 2;

    uint8_t get() { return (GGAIN << 5) | (GLDRIVE << 3) | GWTIME; }
 800486e:	b580      	push	{r7, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	065b      	lsls	r3, r3, #25
 800487c:	0f9b      	lsrs	r3, r3, #30
 800487e:	b2db      	uxtb	r3, r3
 8004880:	015b      	lsls	r3, r3, #5
 8004882:	b25a      	sxtb	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	06db      	lsls	r3, r3, #27
 800488a:	0f9b      	lsrs	r3, r3, #30
 800488c:	b2db      	uxtb	r3, r3
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	b25b      	sxtb	r3, r3
 8004892:	4313      	orrs	r3, r2
 8004894:	b25a      	sxtb	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	075b      	lsls	r3, r3, #29
 800489c:	0f5b      	lsrs	r3, r3, #29
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	b25b      	sxtb	r3, r3
 80048a2:	4313      	orrs	r3, r2
 80048a4:	b25b      	sxtb	r3, r3
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	0018      	movs	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b002      	add	sp, #8
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <_ZN8APDS99606gpulse3getEv>:

    // Gesture Pulse Length. Sets the LED_ON pulse width during a Gesture LDR
    // Pulse.
    uint8_t GPLEN : 2;

    uint8_t get() { return (GPLEN << 6) | GPULSE; }
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	061b      	lsls	r3, r3, #24
 80048be:	0f9b      	lsrs	r3, r3, #30
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	019b      	lsls	r3, r3, #6
 80048c4:	b25a      	sxtb	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	069b      	lsls	r3, r3, #26
 80048cc:	0e9b      	lsrs	r3, r3, #26
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	b25b      	sxtb	r3, r3
 80048d2:	4313      	orrs	r3, r2
 80048d4:	b25b      	sxtb	r3, r3
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	0018      	movs	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	b002      	add	sp, #8
 80048de:	bd80      	pop	{r7, pc}

080048e0 <_ZN8APDS99606gconf33getEv>:
    /* Gesture Dimension Select. Selects which gesture photodiode pairs are
    enabled to gather results during gesture.
    */
    uint8_t GDIMS : 2;

    uint8_t get() { return GDIMS; }
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	079b      	lsls	r3, r3, #30
 80048ee:	0f9b      	lsrs	r3, r3, #30
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	0018      	movs	r0, r3
 80048f4:	46bd      	mov	sp, r7
 80048f6:	b002      	add	sp, #8
 80048f8:	bd80      	pop	{r7, pc}

080048fa <_ZN8APDS99606gconf43getEv>:
    /* Gesture interrupt enable. Gesture Interrupt Enable. When asserted, all
    gesture related interrupts are unmasked.
    */
    uint8_t GIEN : 2;

    uint8_t get() { return (GIEN << 1) | GMODE; }
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	075b      	lsls	r3, r3, #29
 8004908:	0f9b      	lsrs	r3, r3, #30
 800490a:	b2db      	uxtb	r3, r3
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	b25a      	sxtb	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	07db      	lsls	r3, r3, #31
 8004916:	0fdb      	lsrs	r3, r3, #31
 8004918:	b2db      	uxtb	r3, r3
 800491a:	b25b      	sxtb	r3, r3
 800491c:	4313      	orrs	r3, r2
 800491e:	b25b      	sxtb	r3, r3
 8004920:	b2db      	uxtb	r3, r3
 8004922:	0018      	movs	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	b002      	add	sp, #8
 8004928:	bd80      	pop	{r7, pc}

0800492a <_ZN8APDS99606enableEb>:
 *  @brief  Enables the device
 *          Disables the device (putting it in lower power sleep mode)
 *  @param  en
 *          Enable (True/False)
 */
void APDS9960::enable(bool en) {
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	000a      	movs	r2, r1
 8004934:	1cfb      	adds	r3, r7, #3
 8004936:	701a      	strb	r2, [r3, #0]
  _enable.PON = en;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	1cfa      	adds	r2, r7, #3
 800493c:	7812      	ldrb	r2, [r2, #0]
 800493e:	2101      	movs	r1, #1
 8004940:	0010      	movs	r0, r2
 8004942:	4008      	ands	r0, r1
 8004944:	7a9a      	ldrb	r2, [r3, #10]
 8004946:	2101      	movs	r1, #1
 8004948:	438a      	bics	r2, r1
 800494a:	1c11      	adds	r1, r2, #0
 800494c:	1c02      	adds	r2, r0, #0
 800494e:	430a      	orrs	r2, r1
 8004950:	729a      	strb	r2, [r3, #10]
  this->write8(APDS9960_ENABLE, _enable.get());
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	330a      	adds	r3, #10
 8004956:	0018      	movs	r0, r3
 8004958:	f7ff ff02 	bl	8004760 <_ZN8APDS99606enable3getEv>
 800495c:	0003      	movs	r3, r0
 800495e:	001a      	movs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2180      	movs	r1, #128	; 0x80
 8004964:	0018      	movs	r0, r3
 8004966:	f000 faaf 	bl	8004ec8 <_ZN8APDS99606write8Ehh>
}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	46bd      	mov	sp, r7
 800496e:	b002      	add	sp, #8
 8004970:	bd80      	pop	{r7, pc}

08004972 <_ZN8APDS99605beginEt15apds9960AGain_th>:
 *  @param  *theWire
 *          Wire object
 *  @return True if initialization was successful, otherwise false.
 */
bool APDS9960::begin(uint16_t iTimeMS, apds9960AGain_t aGain,
                                 uint8_t addr) {
 8004972:	b5b0      	push	{r4, r5, r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	000c      	movs	r4, r1
 800497c:	0010      	movs	r0, r2
 800497e:	0019      	movs	r1, r3
 8004980:	1cbb      	adds	r3, r7, #2
 8004982:	1c22      	adds	r2, r4, #0
 8004984:	801a      	strh	r2, [r3, #0]
 8004986:	1c7b      	adds	r3, r7, #1
 8004988:	1c02      	adds	r2, r0, #0
 800498a:	701a      	strb	r2, [r3, #0]
 800498c:	003b      	movs	r3, r7
 800498e:	1c0a      	adds	r2, r1, #0
 8004990:	701a      	strb	r2, [r3, #0]
  _i2caddr = addr;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	003a      	movs	r2, r7
 8004996:	7812      	ldrb	r2, [r2, #0]
 8004998:	701a      	strb	r2, [r3, #0]

  /* Make sure we're actually connected */
  uint8_t x = read8(APDS9960_ID);
 800499a:	250e      	movs	r5, #14
 800499c:	197c      	adds	r4, r7, r5
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2192      	movs	r1, #146	; 0x92
 80049a2:	0018      	movs	r0, r3
 80049a4:	f000 faa8 	bl	8004ef8 <_ZN8APDS99605read8Eh>
 80049a8:	0003      	movs	r3, r0
 80049aa:	7023      	strb	r3, [r4, #0]
  if (x != 0xAB) {
 80049ac:	197b      	adds	r3, r7, r5
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2bab      	cmp	r3, #171	; 0xab
 80049b2:	d001      	beq.n	80049b8 <_ZN8APDS99605beginEt15apds9960AGain_th+0x46>
    return false;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e081      	b.n	8004abc <_ZN8APDS99605beginEt15apds9960AGain_th+0x14a>
  }

  /* Set default integration time and gain */
  setADCIntegrationTime(iTimeMS);
 80049b8:	1cbb      	adds	r3, r7, #2
 80049ba:	881a      	ldrh	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	0011      	movs	r1, r2
 80049c0:	0018      	movs	r0, r3
 80049c2:	f000 f87f 	bl	8004ac4 <_ZN8APDS996021setADCIntegrationTimeEt>
  setADCGain(aGain);
 80049c6:	1c7b      	adds	r3, r7, #1
 80049c8:	781a      	ldrb	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	0011      	movs	r1, r2
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 f8c0 	bl	8004b54 <_ZN8APDS996010setADCGainE15apds9960AGain_t>

  // disable everything to start
  enableGesture(false);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2100      	movs	r1, #0
 80049d8:	0018      	movs	r0, r3
 80049da:	f000 f9a4 	bl	8004d26 <_ZN8APDS996013enableGestureEb>
  enableProximity(false);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2100      	movs	r1, #0
 80049e2:	0018      	movs	r0, r3
 80049e4:	f000 f8dd 	bl	8004ba2 <_ZN8APDS996015enableProximityEb>
  enableColor(false);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2100      	movs	r1, #0
 80049ec:	0018      	movs	r0, r3
 80049ee:	f000 f9f1 	bl	8004dd4 <_ZN8APDS996011enableColorEb>

  disableColorInterrupt();
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f000 fa40 	bl	8004e7a <_ZN8APDS996021disableColorInterruptEv>
  disableProximityInterrupt();
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f000 f8f4 	bl	8004bea <_ZN8APDS996025disableProximityInterruptEv>
  clearInterrupt();
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	0018      	movs	r0, r3
 8004a06:	f000 fa51 	bl	8004eac <_ZN8APDS996014clearInterruptEv>

  /* Note: by default, the device is in power down mode on bootup */
  enable(false);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f7ff ff8b 	bl	800492a <_ZN8APDS99606enableEb>
  HAL_Delay(10);
 8004a14:	200a      	movs	r0, #10
 8004a16:	f7fc ff97 	bl	8001948 <HAL_Delay>
  enable(true);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f7ff ff83 	bl	800492a <_ZN8APDS99606enableEb>
  HAL_Delay(10);
 8004a24:	200a      	movs	r0, #10
 8004a26:	f7fc ff8f 	bl	8001948 <HAL_Delay>

  // default to all gesture dimensions
  setGestureDimensions(APDS9960_DIMENSIONS_ALL);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f000 f8f4 	bl	8004c1c <_ZN8APDS996020setGestureDimensionsEh>
  setGestureFIFOThreshold(APDS9960_GFIFO_4);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2101      	movs	r1, #1
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f000 f916 	bl	8004c6a <_ZN8APDS996023setGestureFIFOThresholdEh>
  setGestureGain(APDS9960_GGAIN_4);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2102      	movs	r1, #2
 8004a42:	0018      	movs	r0, r3
 8004a44:	f000 f936 	bl	8004cb4 <_ZN8APDS996014setGestureGainEh>
  setGestureProximityThreshold(50);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2132      	movs	r1, #50	; 0x32
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f000 f958 	bl	8004d02 <_ZN8APDS996028setGestureProximityThresholdEh>
  resetCounts();
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 f9a6 	bl	8004da6 <_ZN8APDS996011resetCountsEv>

  _gpulse.GPLEN = APDS9960_GPULSE_32US;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	7d1a      	ldrb	r2, [r3, #20]
 8004a5e:	2140      	movs	r1, #64	; 0x40
 8004a60:	4249      	negs	r1, r1
 8004a62:	430a      	orrs	r2, r1
 8004a64:	751a      	strb	r2, [r3, #20]
  _gpulse.GPULSE = 9; // 10 pulses
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	7d1a      	ldrb	r2, [r3, #20]
 8004a6a:	213f      	movs	r1, #63	; 0x3f
 8004a6c:	438a      	bics	r2, r1
 8004a6e:	1c11      	adds	r1, r2, #0
 8004a70:	2209      	movs	r2, #9
 8004a72:	430a      	orrs	r2, r1
 8004a74:	751a      	strb	r2, [r3, #20]
  this->write8(APDS9960_GPULSE, _gpulse.get());
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3314      	adds	r3, #20
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f7ff ff18 	bl	80048b0 <_ZN8APDS99606gpulse3getEv>
 8004a80:	0003      	movs	r3, r0
 8004a82:	001a      	movs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	21a6      	movs	r1, #166	; 0xa6
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f000 fa1d 	bl	8004ec8 <_ZN8APDS99606write8Ehh>

  for (uint8_t i=0; i<len_color_filt; i++) {
 8004a8e:	230f      	movs	r3, #15
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	2200      	movs	r2, #0
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	230f      	movs	r3, #15
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d80c      	bhi.n	8004aba <_ZN8APDS99605beginEt15apds9960AGain_th+0x148>
    color_filt[i] = UNKNOWN;
 8004aa0:	210f      	movs	r1, #15
 8004aa2:	187b      	adds	r3, r7, r1
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	18d3      	adds	r3, r2, r3
 8004aaa:	22ff      	movs	r2, #255	; 0xff
 8004aac:	761a      	strb	r2, [r3, #24]
  for (uint8_t i=0; i<len_color_filt; i++) {
 8004aae:	187b      	adds	r3, r7, r1
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	187b      	adds	r3, r7, r1
 8004ab4:	3201      	adds	r2, #1
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	e7ed      	b.n	8004a96 <_ZN8APDS99605beginEt15apds9960AGain_th+0x124>
  }

  return true;
 8004aba:	2301      	movs	r3, #1
}
 8004abc:	0018      	movs	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b004      	add	sp, #16
 8004ac2:	bdb0      	pop	{r4, r5, r7, pc}

08004ac4 <_ZN8APDS996021setADCIntegrationTimeEt>:
/*!
 *  @brief  Sets the integration time for the ADC of the APDS9960, in millis
 *  @param  iTimeMS
 *          Integration time
 */
void APDS9960::setADCIntegrationTime(uint16_t iTimeMS) {
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	000a      	movs	r2, r1
 8004ace:	1cbb      	adds	r3, r7, #2
 8004ad0:	801a      	strh	r2, [r3, #0]
  float temp;

  // convert ms into 2.78ms increments
  temp = iTimeMS;
 8004ad2:	1cbb      	adds	r3, r7, #2
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f7fb ff80 	bl	80009dc <__aeabi_ui2f>
 8004adc:	1c03      	adds	r3, r0, #0
 8004ade:	60fb      	str	r3, [r7, #12]
  temp /= 2.78;
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f7fc fdd1 	bl	8001688 <__aeabi_f2d>
 8004ae6:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <_ZN8APDS996021setADCIntegrationTimeEt+0x84>)
 8004ae8:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <_ZN8APDS996021setADCIntegrationTimeEt+0x88>)
 8004aea:	f7fb ffb7 	bl	8000a5c <__aeabi_ddiv>
 8004aee:	0003      	movs	r3, r0
 8004af0:	000c      	movs	r4, r1
 8004af2:	0018      	movs	r0, r3
 8004af4:	0021      	movs	r1, r4
 8004af6:	f7fc fe19 	bl	800172c <__aeabi_d2f>
 8004afa:	1c03      	adds	r3, r0, #0
 8004afc:	60fb      	str	r3, [r7, #12]
  temp = 256 - temp;
 8004afe:	68f9      	ldr	r1, [r7, #12]
 8004b00:	2087      	movs	r0, #135	; 0x87
 8004b02:	05c0      	lsls	r0, r0, #23
 8004b04:	f7fb fd86 	bl	8000614 <__aeabi_fsub>
 8004b08:	1c03      	adds	r3, r0, #0
 8004b0a:	60fb      	str	r3, [r7, #12]
  if (temp > 255)
 8004b0c:	4910      	ldr	r1, [pc, #64]	; (8004b50 <_ZN8APDS996021setADCIntegrationTimeEt+0x8c>)
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f7fb fbac 	bl	800026c <__aeabi_fcmpgt>
 8004b14:	1e03      	subs	r3, r0, #0
 8004b16:	d001      	beq.n	8004b1c <_ZN8APDS996021setADCIntegrationTimeEt+0x58>
    temp = 255;
 8004b18:	4b0d      	ldr	r3, [pc, #52]	; (8004b50 <_ZN8APDS996021setADCIntegrationTimeEt+0x8c>)
 8004b1a:	60fb      	str	r3, [r7, #12]
  if (temp < 0)
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f7fb fb90 	bl	8000244 <__aeabi_fcmplt>
 8004b24:	1e03      	subs	r3, r0, #0
 8004b26:	d001      	beq.n	8004b2c <_ZN8APDS996021setADCIntegrationTimeEt+0x68>
    temp = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Update the timing register */
  write8(APDS9960_ATIME, (uint8_t)temp);
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f7fb fbd1 	bl	80002d4 <__aeabi_f2uiz>
 8004b32:	0003      	movs	r3, r0
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2181      	movs	r1, #129	; 0x81
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f000 f9c4 	bl	8004ec8 <_ZN8APDS99606write8Ehh>
}
 8004b40:	46c0      	nop			; (mov r8, r8)
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b005      	add	sp, #20
 8004b46:	bd90      	pop	{r4, r7, pc}
 8004b48:	a3d70a3d 	.word	0xa3d70a3d
 8004b4c:	40063d70 	.word	0x40063d70
 8004b50:	437f0000 	.word	0x437f0000

08004b54 <_ZN8APDS996010setADCGainE15apds9960AGain_t>:
 *  @brief  Adjusts the color/ALS gain on the APDS9960 (adjusts the sensitivity
 *          to light)
 *  @param  aGain
 *          Gain
 */
void APDS9960::setADCGain(apds9960AGain_t aGain) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	000a      	movs	r2, r1
 8004b5e:	1cfb      	adds	r3, r7, #3
 8004b60:	701a      	strb	r2, [r3, #0]
  _control.AGAIN = aGain;
 8004b62:	1cfb      	adds	r3, r7, #3
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2203      	movs	r2, #3
 8004b68:	4013      	ands	r3, r2
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2103      	movs	r1, #3
 8004b70:	400a      	ands	r2, r1
 8004b72:	0010      	movs	r0, r2
 8004b74:	7b9a      	ldrb	r2, [r3, #14]
 8004b76:	2103      	movs	r1, #3
 8004b78:	438a      	bics	r2, r1
 8004b7a:	1c11      	adds	r1, r2, #0
 8004b7c:	1c02      	adds	r2, r0, #0
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	739a      	strb	r2, [r3, #14]

  /* Update the timing register */
  write8(APDS9960_CONTROL, _control.get());
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	330e      	adds	r3, #14
 8004b86:	0018      	movs	r0, r3
 8004b88:	f7ff fe2f 	bl	80047ea <_ZN8APDS99607control3getEv>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	001a      	movs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	218f      	movs	r1, #143	; 0x8f
 8004b94:	0018      	movs	r0, r3
 8004b96:	f000 f997 	bl	8004ec8 <_ZN8APDS99606write8Ehh>
}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b002      	add	sp, #8
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <_ZN8APDS996015enableProximityEb>:
/*!
 *  @brief  Enable proximity readings on APDS9960
 *  @param  en
 *          Enable (True/False)
 */
void APDS9960::enableProximity(bool en) {
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	000a      	movs	r2, r1
 8004bac:	1cfb      	adds	r3, r7, #3
 8004bae:	701a      	strb	r2, [r3, #0]
  _enable.PEN = en;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	1cfa      	adds	r2, r7, #3
 8004bb4:	7812      	ldrb	r2, [r2, #0]
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	400a      	ands	r2, r1
 8004bba:	0090      	lsls	r0, r2, #2
 8004bbc:	7a9a      	ldrb	r2, [r3, #10]
 8004bbe:	2104      	movs	r1, #4
 8004bc0:	438a      	bics	r2, r1
 8004bc2:	1c11      	adds	r1, r2, #0
 8004bc4:	1c02      	adds	r2, r0, #0
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	729a      	strb	r2, [r3, #10]

  write8(APDS9960_ENABLE, _enable.get());
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	330a      	adds	r3, #10
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f7ff fdc6 	bl	8004760 <_ZN8APDS99606enable3getEv>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2180      	movs	r1, #128	; 0x80
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f000 f973 	bl	8004ec8 <_ZN8APDS99606write8Ehh>
}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b002      	add	sp, #8
 8004be8:	bd80      	pop	{r7, pc}

08004bea <_ZN8APDS996025disableProximityInterruptEv>:
}

/*!
 *  @brief  Disable proximity interrupts
 */
void APDS9960::disableProximityInterrupt() {
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  _enable.PIEN = 0;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	7a9a      	ldrb	r2, [r3, #10]
 8004bf6:	2120      	movs	r1, #32
 8004bf8:	438a      	bics	r2, r1
 8004bfa:	729a      	strb	r2, [r3, #10]
  write8(APDS9960_ENABLE, _enable.get());
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	330a      	adds	r3, #10
 8004c00:	0018      	movs	r0, r3
 8004c02:	f7ff fdad 	bl	8004760 <_ZN8APDS99606enable3getEv>
 8004c06:	0003      	movs	r3, r0
 8004c08:	001a      	movs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2180      	movs	r1, #128	; 0x80
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f000 f95a 	bl	8004ec8 <_ZN8APDS99606write8Ehh>
}
 8004c14:	46c0      	nop			; (mov r8, r8)
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b002      	add	sp, #8
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <_ZN8APDS996020setGestureDimensionsEh>:
 *  @brief  Sets gesture dimensions
 *  @param  dims
 *          Dimensions (APDS9960_DIMENSIONS_ALL, APDS9960_DIMENSIONS_UP_DOWM,
 *          APDS9960_DIMENSIONS_UP_DOWN, APGS9960_DIMENSIONS_LEFT_RIGHT)
 */
void APDS9960::setGestureDimensions(uint8_t dims) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	000a      	movs	r2, r1
 8004c26:	1cfb      	adds	r3, r7, #3
 8004c28:	701a      	strb	r2, [r3, #0]
  _gconf3.GDIMS = dims;
 8004c2a:	1cfb      	adds	r3, r7, #3
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2203      	movs	r2, #3
 8004c30:	4013      	ands	r3, r2
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2103      	movs	r1, #3
 8004c38:	400a      	ands	r2, r1
 8004c3a:	0010      	movs	r0, r2
 8004c3c:	7d5a      	ldrb	r2, [r3, #21]
 8004c3e:	2103      	movs	r1, #3
 8004c40:	438a      	bics	r2, r1
 8004c42:	1c11      	adds	r1, r2, #0
 8004c44:	1c02      	adds	r2, r0, #0
 8004c46:	430a      	orrs	r2, r1
 8004c48:	755a      	strb	r2, [r3, #21]
  this->write8(APDS9960_GCONF3, _gconf3.get());
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3315      	adds	r3, #21
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f7ff fe46 	bl	80048e0 <_ZN8APDS99606gconf33getEv>
 8004c54:	0003      	movs	r3, r0
 8004c56:	001a      	movs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	21aa      	movs	r1, #170	; 0xaa
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f000 f933 	bl	8004ec8 <_ZN8APDS99606write8Ehh>
}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b002      	add	sp, #8
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <_ZN8APDS996023setGestureFIFOThresholdEh>:
 *  @brief  Sets gesture FIFO Threshold
 *  @param  thresh
 *          Threshold (APDS9960_GFIFO_1, APDS9960_GFIFO_4, APDS9960_GFIFO_8,
 *          APDS9960_GFIFO_16)
 */
void APDS9960::setGestureFIFOThreshold(uint8_t thresh) {
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b082      	sub	sp, #8
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	000a      	movs	r2, r1
 8004c74:	1cfb      	adds	r3, r7, #3
 8004c76:	701a      	strb	r2, [r3, #0]
  _gconf1.GFIFOTH = thresh;
 8004c78:	1cfb      	adds	r3, r7, #3
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	4013      	ands	r3, r2
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	0190      	lsls	r0, r2, #6
 8004c86:	7c9a      	ldrb	r2, [r3, #18]
 8004c88:	213f      	movs	r1, #63	; 0x3f
 8004c8a:	400a      	ands	r2, r1
 8004c8c:	1c11      	adds	r1, r2, #0
 8004c8e:	1c02      	adds	r2, r0, #0
 8004c90:	430a      	orrs	r2, r1
 8004c92:	749a      	strb	r2, [r3, #18]
  this->write8(APDS9960_GCONF1, _gconf1.get());
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3312      	adds	r3, #18
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7ff fdc7 	bl	800482c <_ZN8APDS99606gconf13getEv>
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	001a      	movs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	21a2      	movs	r1, #162	; 0xa2
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f000 f90e 	bl	8004ec8 <_ZN8APDS99606write8Ehh>
}
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b002      	add	sp, #8
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <_ZN8APDS996014setGestureGainEh>:
 *  @brief  Sets gesture sensor gain
 *  @param  gain
 *          Gain (APDS9960_GAIN_1, APDS9960_GAIN_2, APDS9960_GAIN_4,
 *          APDS9960_GAIN_8)
 */
void APDS9960::setGestureGain(uint8_t gain) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	000a      	movs	r2, r1
 8004cbe:	1cfb      	adds	r3, r7, #3
 8004cc0:	701a      	strb	r2, [r3, #0]
  _gconf2.GGAIN = gain;
 8004cc2:	1cfb      	adds	r3, r7, #3
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	4013      	ands	r3, r2
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2103      	movs	r1, #3
 8004cd0:	400a      	ands	r2, r1
 8004cd2:	0150      	lsls	r0, r2, #5
 8004cd4:	7cda      	ldrb	r2, [r3, #19]
 8004cd6:	2160      	movs	r1, #96	; 0x60
 8004cd8:	438a      	bics	r2, r1
 8004cda:	1c11      	adds	r1, r2, #0
 8004cdc:	1c02      	adds	r2, r0, #0
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	74da      	strb	r2, [r3, #19]
  this->write8(APDS9960_GCONF2, _gconf2.get());
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3313      	adds	r3, #19
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f7ff fdc1 	bl	800486e <_ZN8APDS99606gconf23getEv>
 8004cec:	0003      	movs	r3, r0
 8004cee:	001a      	movs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	21a3      	movs	r1, #163	; 0xa3
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f000 f8e7 	bl	8004ec8 <_ZN8APDS99606write8Ehh>
}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b002      	add	sp, #8
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <_ZN8APDS996028setGestureProximityThresholdEh>:
/*!
 *  @brief  Sets gesture sensor threshold
 *  @param  thresh
 *          Threshold
 */
void APDS9960::setGestureProximityThreshold(uint8_t thresh) {
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	000a      	movs	r2, r1
 8004d0c:	1cfb      	adds	r3, r7, #3
 8004d0e:	701a      	strb	r2, [r3, #0]
  this->write8(APDS9960_GPENTH, thresh);
 8004d10:	1cfb      	adds	r3, r7, #3
 8004d12:	781a      	ldrb	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	21a0      	movs	r1, #160	; 0xa0
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f000 f8d5 	bl	8004ec8 <_ZN8APDS99606write8Ehh>
}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	46bd      	mov	sp, r7
 8004d22:	b002      	add	sp, #8
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <_ZN8APDS996013enableGestureEb>:
/*!
 *  @brief  Enable gesture readings on APDS9960
 *  @param  en
 *          Enable (True/False)
 */
void APDS9960::enableGesture(bool en) {
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	000a      	movs	r2, r1
 8004d30:	1cfb      	adds	r3, r7, #3
 8004d32:	701a      	strb	r2, [r3, #0]
  if (!en) {
 8004d34:	1cfb      	adds	r3, r7, #3
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	4053      	eors	r3, r2
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d010      	beq.n	8004d64 <_ZN8APDS996013enableGestureEb+0x3e>
    _gconf4.GMODE = 0;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	7d9a      	ldrb	r2, [r3, #22]
 8004d46:	2101      	movs	r1, #1
 8004d48:	438a      	bics	r2, r1
 8004d4a:	759a      	strb	r2, [r3, #22]
    write8(APDS9960_GCONF4, _gconf4.get());
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3316      	adds	r3, #22
 8004d50:	0018      	movs	r0, r3
 8004d52:	f7ff fdd2 	bl	80048fa <_ZN8APDS99606gconf43getEv>
 8004d56:	0003      	movs	r3, r0
 8004d58:	001a      	movs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	21ab      	movs	r1, #171	; 0xab
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f000 f8b2 	bl	8004ec8 <_ZN8APDS99606write8Ehh>
  }
  _enable.GEN = en;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	1cfa      	adds	r2, r7, #3
 8004d68:	7812      	ldrb	r2, [r2, #0]
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	400a      	ands	r2, r1
 8004d6e:	0190      	lsls	r0, r2, #6
 8004d70:	7a9a      	ldrb	r2, [r3, #10]
 8004d72:	2140      	movs	r1, #64	; 0x40
 8004d74:	438a      	bics	r2, r1
 8004d76:	1c11      	adds	r1, r2, #0
 8004d78:	1c02      	adds	r2, r0, #0
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	729a      	strb	r2, [r3, #10]
  write8(APDS9960_ENABLE, _enable.get());
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	330a      	adds	r3, #10
 8004d82:	0018      	movs	r0, r3
 8004d84:	f7ff fcec 	bl	8004760 <_ZN8APDS99606enable3getEv>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	001a      	movs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2180      	movs	r1, #128	; 0x80
 8004d90:	0018      	movs	r0, r3
 8004d92:	f000 f899 	bl	8004ec8 <_ZN8APDS99606write8Ehh>
  resetCounts();
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f000 f804 	bl	8004da6 <_ZN8APDS996011resetCountsEv>
}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b002      	add	sp, #8
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <_ZN8APDS996011resetCountsEv>:

/*!
 *  @brief  Resets gesture counts
 */
void APDS9960::resetCounts() {
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  gestCnt = 0;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	715a      	strb	r2, [r3, #5]
  UCount = 0;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	719a      	strb	r2, [r3, #6]
  DCount = 0;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	71da      	strb	r2, [r3, #7]
  LCount = 0;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	721a      	strb	r2, [r3, #8]
  RCount = 0;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	725a      	strb	r2, [r3, #9]
}
 8004dcc:	46c0      	nop			; (mov r8, r8)
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b002      	add	sp, #8
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <_ZN8APDS996011enableColorEb>:
/*!
 *  @brief  Enable proximity readings on APDS9960
 *  @param  en
 *          Enable (True/False)
 */
void APDS9960::enableColor(bool en) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	000a      	movs	r2, r1
 8004dde:	1cfb      	adds	r3, r7, #3
 8004de0:	701a      	strb	r2, [r3, #0]
  _enable.AEN = en;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	1cfa      	adds	r2, r7, #3
 8004de6:	7812      	ldrb	r2, [r2, #0]
 8004de8:	2101      	movs	r1, #1
 8004dea:	400a      	ands	r2, r1
 8004dec:	1890      	adds	r0, r2, r2
 8004dee:	7a9a      	ldrb	r2, [r3, #10]
 8004df0:	2102      	movs	r1, #2
 8004df2:	438a      	bics	r2, r1
 8004df4:	1c11      	adds	r1, r2, #0
 8004df6:	1c02      	adds	r2, r0, #0
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	729a      	strb	r2, [r3, #10]
  write8(APDS9960_ENABLE, _enable.get());
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	330a      	adds	r3, #10
 8004e00:	0018      	movs	r0, r3
 8004e02:	f7ff fcad 	bl	8004760 <_ZN8APDS99606enable3getEv>
 8004e06:	0003      	movs	r3, r0
 8004e08:	001a      	movs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2180      	movs	r1, #128	; 0x80
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f000 f85a 	bl	8004ec8 <_ZN8APDS99606write8Ehh>
}
 8004e14:	46c0      	nop			; (mov r8, r8)
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b002      	add	sp, #8
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <_ZN8APDS996012getColorDataEPtS0_S0_S0_>:
 *          Blue value
 *  @param  *c
 *          Clear channel value
 */
void APDS9960::getColorData(uint16_t *r, uint16_t *g, uint16_t *b,
                                     uint16_t *c) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]

  *c = read16R(APDS9960_CDATAL);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2194      	movs	r1, #148	; 0x94
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f000 f877 	bl	8004f22 <_ZN8APDS99607read16REh>
 8004e34:	0003      	movs	r3, r0
 8004e36:	001a      	movs	r2, r3
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	801a      	strh	r2, [r3, #0]
  *r = read16R(APDS9960_RDATAL);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2196      	movs	r1, #150	; 0x96
 8004e40:	0018      	movs	r0, r3
 8004e42:	f000 f86e 	bl	8004f22 <_ZN8APDS99607read16REh>
 8004e46:	0003      	movs	r3, r0
 8004e48:	001a      	movs	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	801a      	strh	r2, [r3, #0]
  *g = read16R(APDS9960_GDATAL);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2198      	movs	r1, #152	; 0x98
 8004e52:	0018      	movs	r0, r3
 8004e54:	f000 f865 	bl	8004f22 <_ZN8APDS99607read16REh>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	001a      	movs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	801a      	strh	r2, [r3, #0]
  *b = read16R(APDS9960_BDATAL);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	219a      	movs	r1, #154	; 0x9a
 8004e64:	0018      	movs	r0, r3
 8004e66:	f000 f85c 	bl	8004f22 <_ZN8APDS99607read16REh>
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	001a      	movs	r2, r3
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	801a      	strh	r2, [r3, #0]
}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b004      	add	sp, #16
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <_ZN8APDS996021disableColorInterruptEv>:
}

/*!
 *  @brief  Disables color interrupt
 */
void APDS9960::disableColorInterrupt() {
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b082      	sub	sp, #8
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  _enable.AIEN = 0;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	7a9a      	ldrb	r2, [r3, #10]
 8004e86:	2110      	movs	r1, #16
 8004e88:	438a      	bics	r2, r1
 8004e8a:	729a      	strb	r2, [r3, #10]
  write8(APDS9960_ENABLE, _enable.get());
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	330a      	adds	r3, #10
 8004e90:	0018      	movs	r0, r3
 8004e92:	f7ff fc65 	bl	8004760 <_ZN8APDS99606enable3getEv>
 8004e96:	0003      	movs	r3, r0
 8004e98:	001a      	movs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2180      	movs	r1, #128	; 0x80
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f000 f812 	bl	8004ec8 <_ZN8APDS99606write8Ehh>
}
 8004ea4:	46c0      	nop			; (mov r8, r8)
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	b002      	add	sp, #8
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <_ZN8APDS996014clearInterruptEv>:

/*!
 *  @brief  Clears interrupt
 */
void APDS9960::clearInterrupt() {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  this->write(APDS9960_AICLEAR, 0, 1);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	2200      	movs	r2, #0
 8004eba:	21e7      	movs	r1, #231	; 0xe7
 8004ebc:	f000 f89e 	bl	8004ffc <_ZN8APDS99605writeEhhh>
}
 8004ec0:	46c0      	nop			; (mov r8, r8)
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b002      	add	sp, #8
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <_ZN8APDS99606write8Ehh>:
 *  @param  reg
 *          Register to write to
 *  @param  value
 *          Value to write
 */
void APDS9960::write8(uint8_t reg, uint8_t value) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	0008      	movs	r0, r1
 8004ed2:	0011      	movs	r1, r2
 8004ed4:	1cfb      	adds	r3, r7, #3
 8004ed6:	1c02      	adds	r2, r0, #0
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	1cbb      	adds	r3, r7, #2
 8004edc:	1c0a      	adds	r2, r1, #0
 8004ede:	701a      	strb	r2, [r3, #0]
  this->write(reg, value, 2);
 8004ee0:	1cbb      	adds	r3, r7, #2
 8004ee2:	781a      	ldrb	r2, [r3, #0]
 8004ee4:	1cfb      	adds	r3, r7, #3
 8004ee6:	7819      	ldrb	r1, [r3, #0]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	2302      	movs	r3, #2
 8004eec:	f000 f886 	bl	8004ffc <_ZN8APDS99605writeEhhh>
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b002      	add	sp, #8
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <_ZN8APDS99605read8Eh>:
 *  @brief  Reads 8 bits from specified register
 *  @param  reg
 *          Register to write to
 *  @return Value in register
 */
uint8_t APDS9960::read8(uint8_t reg) {
 8004ef8:	b590      	push	{r4, r7, lr}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	000a      	movs	r2, r1
 8004f02:	1cfb      	adds	r3, r7, #3
 8004f04:	701a      	strb	r2, [r3, #0]
  uint8_t ret;
  this->read(reg, &ret, 1);
 8004f06:	240f      	movs	r4, #15
 8004f08:	193a      	adds	r2, r7, r4
 8004f0a:	1cfb      	adds	r3, r7, #3
 8004f0c:	7819      	ldrb	r1, [r3, #0]
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	2301      	movs	r3, #1
 8004f12:	f000 f825 	bl	8004f60 <_ZN8APDS99604readEhPhh>

  return ret;
 8004f16:	193b      	adds	r3, r7, r4
 8004f18:	781b      	ldrb	r3, [r3, #0]
}
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	b005      	add	sp, #20
 8004f20:	bd90      	pop	{r4, r7, pc}

08004f22 <_ZN8APDS99607read16REh>:
 *  @brief  Reads 16 bites from specified register
 *  @param  reg
 *          Register to write to
 *  @return Value in register
 */
uint16_t APDS9960::read16R(uint8_t reg) {
 8004f22:	b590      	push	{r4, r7, lr}
 8004f24:	b085      	sub	sp, #20
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	000a      	movs	r2, r1
 8004f2c:	1cfb      	adds	r3, r7, #3
 8004f2e:	701a      	strb	r2, [r3, #0]
  uint8_t ret[2];
  this->read(reg, ret, 2);
 8004f30:	210c      	movs	r1, #12
 8004f32:	000c      	movs	r4, r1
 8004f34:	187a      	adds	r2, r7, r1
 8004f36:	1cfb      	adds	r3, r7, #3
 8004f38:	7819      	ldrb	r1, [r3, #0]
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	f000 f80f 	bl	8004f60 <_ZN8APDS99604readEhPhh>

  return (ret[1] << 8) | ret[0];
 8004f42:	0021      	movs	r1, r4
 8004f44:	187b      	adds	r3, r7, r1
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	021b      	lsls	r3, r3, #8
 8004f4a:	b21a      	sxth	r2, r3
 8004f4c:	187b      	adds	r3, r7, r1
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b21b      	sxth	r3, r3
 8004f52:	4313      	orrs	r3, r2
 8004f54:	b21b      	sxth	r3, r3
 8004f56:	b29b      	uxth	r3, r3
}
 8004f58:	0018      	movs	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	b005      	add	sp, #20
 8004f5e:	bd90      	pop	{r4, r7, pc}

08004f60 <_ZN8APDS99604readEhPhh>:
 *          Buffer
 *  @param  num
 *          Number of bytes
 *  @return Position after reading
 */
void APDS9960::read(uint8_t reg, uint8_t *buf, uint8_t num) {
 8004f60:	b5b0      	push	{r4, r5, r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	0008      	movs	r0, r1
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	0019      	movs	r1, r3
 8004f6e:	240b      	movs	r4, #11
 8004f70:	193b      	adds	r3, r7, r4
 8004f72:	1c02      	adds	r2, r0, #0
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	250a      	movs	r5, #10
 8004f78:	197b      	adds	r3, r7, r5
 8004f7a:	1c0a      	adds	r2, r1, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, APDS9960_ADDRESS, &reg, 1, HAL_MAX_DELAY);
 8004f7e:	193a      	adds	r2, r7, r4
 8004f80:	481d      	ldr	r0, [pc, #116]	; (8004ff8 <_ZN8APDS99604readEhPhh+0x98>)
 8004f82:	2301      	movs	r3, #1
 8004f84:	425b      	negs	r3, r3
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	2301      	movs	r3, #1
 8004f8a:	2172      	movs	r1, #114	; 0x72
 8004f8c:	f7fd f80e 	bl	8001fac <HAL_I2C_Master_Transmit>
    HAL_Delay(5);
 8004f90:	2005      	movs	r0, #5
 8004f92:	f7fc fcd9 	bl	8001948 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, APDS9960_ADDRESS, &tempbuf[0], num, HAL_MAX_DELAY);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	197b      	adds	r3, r7, r5
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	b299      	uxth	r1, r3
 8004fa0:	4815      	ldr	r0, [pc, #84]	; (8004ff8 <_ZN8APDS99604readEhPhh+0x98>)
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	425b      	negs	r3, r3
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	000b      	movs	r3, r1
 8004faa:	2172      	movs	r1, #114	; 0x72
 8004fac:	f7fd f906 	bl	80021bc <HAL_I2C_Master_Receive>
    for (uint8_t i=0; i<num; i++) {
 8004fb0:	2317      	movs	r3, #23
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	2317      	movs	r3, #23
 8004fba:	18fa      	adds	r2, r7, r3
 8004fbc:	230a      	movs	r3, #10
 8004fbe:	18fb      	adds	r3, r7, r3
 8004fc0:	7812      	ldrb	r2, [r2, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d210      	bcs.n	8004fea <_ZN8APDS99604readEhPhh+0x8a>
      buf[i] = tempbuf[i];
 8004fc8:	2017      	movs	r0, #23
 8004fca:	183b      	adds	r3, r7, r0
 8004fcc:	781a      	ldrb	r2, [r3, #0]
 8004fce:	183b      	adds	r3, r7, r0
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	18cb      	adds	r3, r1, r3
 8004fd6:	68f9      	ldr	r1, [r7, #12]
 8004fd8:	188a      	adds	r2, r1, r2
 8004fda:	7852      	ldrb	r2, [r2, #1]
 8004fdc:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i<num; i++) {
 8004fde:	183b      	adds	r3, r7, r0
 8004fe0:	781a      	ldrb	r2, [r3, #0]
 8004fe2:	183b      	adds	r3, r7, r0
 8004fe4:	3201      	adds	r2, #1
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	e7e6      	b.n	8004fb8 <_ZN8APDS99604readEhPhh+0x58>
    }
    HAL_Delay(5);
 8004fea:	2005      	movs	r0, #5
 8004fec:	f7fc fcac 	bl	8001948 <HAL_Delay>
}
 8004ff0:	46c0      	nop			; (mov r8, r8)
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b006      	add	sp, #24
 8004ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ff8:	20000094 	.word	0x20000094

08004ffc <_ZN8APDS99605writeEhhh>:
 *  @param  *buf
 *          Buffer
 *  @param  num
 *          Number of bytes
 */
void APDS9960::write(uint8_t reg, uint8_t value, uint8_t num) {
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af02      	add	r7, sp, #8
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	000c      	movs	r4, r1
 8005006:	0010      	movs	r0, r2
 8005008:	0019      	movs	r1, r3
 800500a:	1cfb      	adds	r3, r7, #3
 800500c:	1c22      	adds	r2, r4, #0
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	1cbb      	adds	r3, r7, #2
 8005012:	1c02      	adds	r2, r0, #0
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	1c7b      	adds	r3, r7, #1
 8005018:	1c0a      	adds	r2, r1, #0
 800501a:	701a      	strb	r2, [r3, #0]
  uint8_t writedata[2] = {reg, value};
 800501c:	200c      	movs	r0, #12
 800501e:	183b      	adds	r3, r7, r0
 8005020:	1cfa      	adds	r2, r7, #3
 8005022:	7812      	ldrb	r2, [r2, #0]
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	183b      	adds	r3, r7, r0
 8005028:	1cba      	adds	r2, r7, #2
 800502a:	7812      	ldrb	r2, [r2, #0]
 800502c:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, APDS9960_ADDRESS, &writedata[0], num, HAL_MAX_DELAY);
 800502e:	1c7b      	adds	r3, r7, #1
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	b299      	uxth	r1, r3
 8005034:	183a      	adds	r2, r7, r0
 8005036:	4806      	ldr	r0, [pc, #24]	; (8005050 <_ZN8APDS99605writeEhhh+0x54>)
 8005038:	2301      	movs	r3, #1
 800503a:	425b      	negs	r3, r3
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	000b      	movs	r3, r1
 8005040:	2172      	movs	r1, #114	; 0x72
 8005042:	f7fc ffb3 	bl	8001fac <HAL_I2C_Master_Transmit>
}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	46bd      	mov	sp, r7
 800504a:	b005      	add	sp, #20
 800504c:	bd90      	pop	{r4, r7, pc}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	20000094 	.word	0x20000094

08005054 <_ZN8APDS99609colorSortEttt>:

color_t APDS9960::colorSort(uint16_t r, uint16_t g, uint16_t b) {
 8005054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005056:	b08b      	sub	sp, #44	; 0x2c
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	000c      	movs	r4, r1
 800505e:	0010      	movs	r0, r2
 8005060:	0019      	movs	r1, r3
 8005062:	250a      	movs	r5, #10
 8005064:	197b      	adds	r3, r7, r5
 8005066:	1c22      	adds	r2, r4, #0
 8005068:	801a      	strh	r2, [r3, #0]
 800506a:	2608      	movs	r6, #8
 800506c:	19bb      	adds	r3, r7, r6
 800506e:	1c02      	adds	r2, r0, #0
 8005070:	801a      	strh	r2, [r3, #0]
 8005072:	1dbb      	adds	r3, r7, #6
 8005074:	1c0a      	adds	r2, r1, #0
 8005076:	801a      	strh	r2, [r3, #0]
  uint32_t total = r + g + b;
 8005078:	0029      	movs	r1, r5
 800507a:	187b      	adds	r3, r7, r1
 800507c:	881a      	ldrh	r2, [r3, #0]
 800507e:	19bb      	adds	r3, r7, r6
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	18d2      	adds	r2, r2, r3
 8005084:	1dbb      	adds	r3, r7, #6
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	18d3      	adds	r3, r2, r3
 800508a:	623b      	str	r3, [r7, #32]
  float rPer = 1.0*r/total*100.0;
 800508c:	187b      	adds	r3, r7, r1
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	0018      	movs	r0, r3
 8005092:	f7fc fa8d 	bl	80015b0 <__aeabi_i2d>
 8005096:	0004      	movs	r4, r0
 8005098:	000d      	movs	r5, r1
 800509a:	6a38      	ldr	r0, [r7, #32]
 800509c:	f7fc fac2 	bl	8001624 <__aeabi_ui2d>
 80050a0:	0002      	movs	r2, r0
 80050a2:	000b      	movs	r3, r1
 80050a4:	0020      	movs	r0, r4
 80050a6:	0029      	movs	r1, r5
 80050a8:	f7fb fcd8 	bl	8000a5c <__aeabi_ddiv>
 80050ac:	0003      	movs	r3, r0
 80050ae:	000c      	movs	r4, r1
 80050b0:	0018      	movs	r0, r3
 80050b2:	0021      	movs	r1, r4
 80050b4:	2200      	movs	r2, #0
 80050b6:	4bb6      	ldr	r3, [pc, #728]	; (8005390 <_ZN8APDS99609colorSortEttt+0x33c>)
 80050b8:	f7fb ffd2 	bl	8001060 <__aeabi_dmul>
 80050bc:	0003      	movs	r3, r0
 80050be:	000c      	movs	r4, r1
 80050c0:	0018      	movs	r0, r3
 80050c2:	0021      	movs	r1, r4
 80050c4:	f7fc fb32 	bl	800172c <__aeabi_d2f>
 80050c8:	1c03      	adds	r3, r0, #0
 80050ca:	61fb      	str	r3, [r7, #28]
  float gPer = 1.0*g/total*100.0;
 80050cc:	19bb      	adds	r3, r7, r6
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	0018      	movs	r0, r3
 80050d2:	f7fc fa6d 	bl	80015b0 <__aeabi_i2d>
 80050d6:	0004      	movs	r4, r0
 80050d8:	000d      	movs	r5, r1
 80050da:	6a38      	ldr	r0, [r7, #32]
 80050dc:	f7fc faa2 	bl	8001624 <__aeabi_ui2d>
 80050e0:	0002      	movs	r2, r0
 80050e2:	000b      	movs	r3, r1
 80050e4:	0020      	movs	r0, r4
 80050e6:	0029      	movs	r1, r5
 80050e8:	f7fb fcb8 	bl	8000a5c <__aeabi_ddiv>
 80050ec:	0003      	movs	r3, r0
 80050ee:	000c      	movs	r4, r1
 80050f0:	0018      	movs	r0, r3
 80050f2:	0021      	movs	r1, r4
 80050f4:	2200      	movs	r2, #0
 80050f6:	4ba6      	ldr	r3, [pc, #664]	; (8005390 <_ZN8APDS99609colorSortEttt+0x33c>)
 80050f8:	f7fb ffb2 	bl	8001060 <__aeabi_dmul>
 80050fc:	0003      	movs	r3, r0
 80050fe:	000c      	movs	r4, r1
 8005100:	0018      	movs	r0, r3
 8005102:	0021      	movs	r1, r4
 8005104:	f7fc fb12 	bl	800172c <__aeabi_d2f>
 8005108:	1c03      	adds	r3, r0, #0
 800510a:	61bb      	str	r3, [r7, #24]
  float bPer = 1.0*b/total*100.0;
 800510c:	1dbb      	adds	r3, r7, #6
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	0018      	movs	r0, r3
 8005112:	f7fc fa4d 	bl	80015b0 <__aeabi_i2d>
 8005116:	0004      	movs	r4, r0
 8005118:	000d      	movs	r5, r1
 800511a:	6a38      	ldr	r0, [r7, #32]
 800511c:	f7fc fa82 	bl	8001624 <__aeabi_ui2d>
 8005120:	0002      	movs	r2, r0
 8005122:	000b      	movs	r3, r1
 8005124:	0020      	movs	r0, r4
 8005126:	0029      	movs	r1, r5
 8005128:	f7fb fc98 	bl	8000a5c <__aeabi_ddiv>
 800512c:	0003      	movs	r3, r0
 800512e:	000c      	movs	r4, r1
 8005130:	0018      	movs	r0, r3
 8005132:	0021      	movs	r1, r4
 8005134:	2200      	movs	r2, #0
 8005136:	4b96      	ldr	r3, [pc, #600]	; (8005390 <_ZN8APDS99609colorSortEttt+0x33c>)
 8005138:	f7fb ff92 	bl	8001060 <__aeabi_dmul>
 800513c:	0003      	movs	r3, r0
 800513e:	000c      	movs	r4, r1
 8005140:	0018      	movs	r0, r3
 8005142:	0021      	movs	r1, r4
 8005144:	f7fc faf2 	bl	800172c <__aeabi_d2f>
 8005148:	1c03      	adds	r3, r0, #0
 800514a:	617b      	str	r3, [r7, #20]
  color_t color;
  if ((rPer > 36.0) & (gPer <= 30.0)) {
 800514c:	2301      	movs	r3, #1
 800514e:	1c1c      	adds	r4, r3, #0
 8005150:	4990      	ldr	r1, [pc, #576]	; (8005394 <_ZN8APDS99609colorSortEttt+0x340>)
 8005152:	69f8      	ldr	r0, [r7, #28]
 8005154:	f7fb f88a 	bl	800026c <__aeabi_fcmpgt>
 8005158:	1e03      	subs	r3, r0, #0
 800515a:	d101      	bne.n	8005160 <_ZN8APDS99609colorSortEttt+0x10c>
 800515c:	2300      	movs	r3, #0
 800515e:	1c1c      	adds	r4, r3, #0
 8005160:	b2e4      	uxtb	r4, r4
 8005162:	2301      	movs	r3, #1
 8005164:	1c1d      	adds	r5, r3, #0
 8005166:	498c      	ldr	r1, [pc, #560]	; (8005398 <_ZN8APDS99609colorSortEttt+0x344>)
 8005168:	69b8      	ldr	r0, [r7, #24]
 800516a:	f7fb f875 	bl	8000258 <__aeabi_fcmple>
 800516e:	1e03      	subs	r3, r0, #0
 8005170:	d101      	bne.n	8005176 <_ZN8APDS99609colorSortEttt+0x122>
 8005172:	2300      	movs	r3, #0
 8005174:	1c1d      	adds	r5, r3, #0
 8005176:	b2eb      	uxtb	r3, r5
 8005178:	4023      	ands	r3, r4
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <_ZN8APDS99609colorSortEttt+0x136>
    color = RED;
 8005180:	2327      	movs	r3, #39	; 0x27
 8005182:	18fb      	adds	r3, r7, r3
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	e0aa      	b.n	80052e0 <_ZN8APDS99609colorSortEttt+0x28c>
  } else if ((rPer > 36.0) & (gPer > 30.0)) {
 800518a:	2301      	movs	r3, #1
 800518c:	1c1c      	adds	r4, r3, #0
 800518e:	4981      	ldr	r1, [pc, #516]	; (8005394 <_ZN8APDS99609colorSortEttt+0x340>)
 8005190:	69f8      	ldr	r0, [r7, #28]
 8005192:	f7fb f86b 	bl	800026c <__aeabi_fcmpgt>
 8005196:	1e03      	subs	r3, r0, #0
 8005198:	d101      	bne.n	800519e <_ZN8APDS99609colorSortEttt+0x14a>
 800519a:	2300      	movs	r3, #0
 800519c:	1c1c      	adds	r4, r3, #0
 800519e:	b2e4      	uxtb	r4, r4
 80051a0:	2301      	movs	r3, #1
 80051a2:	1c1d      	adds	r5, r3, #0
 80051a4:	497c      	ldr	r1, [pc, #496]	; (8005398 <_ZN8APDS99609colorSortEttt+0x344>)
 80051a6:	69b8      	ldr	r0, [r7, #24]
 80051a8:	f7fb f860 	bl	800026c <__aeabi_fcmpgt>
 80051ac:	1e03      	subs	r3, r0, #0
 80051ae:	d101      	bne.n	80051b4 <_ZN8APDS99609colorSortEttt+0x160>
 80051b0:	2300      	movs	r3, #0
 80051b2:	1c1d      	adds	r5, r3, #0
 80051b4:	b2eb      	uxtb	r3, r5
 80051b6:	4023      	ands	r3, r4
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d004      	beq.n	80051c8 <_ZN8APDS99609colorSortEttt+0x174>
    color = ORANGE;
 80051be:	2327      	movs	r3, #39	; 0x27
 80051c0:	18fb      	adds	r3, r7, r3
 80051c2:	2206      	movs	r2, #6
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	e08b      	b.n	80052e0 <_ZN8APDS99609colorSortEttt+0x28c>
  } else if ((bPer > 40.0) & (rPer < 22.0)) {
 80051c8:	2301      	movs	r3, #1
 80051ca:	1c1c      	adds	r4, r3, #0
 80051cc:	4973      	ldr	r1, [pc, #460]	; (800539c <_ZN8APDS99609colorSortEttt+0x348>)
 80051ce:	6978      	ldr	r0, [r7, #20]
 80051d0:	f7fb f84c 	bl	800026c <__aeabi_fcmpgt>
 80051d4:	1e03      	subs	r3, r0, #0
 80051d6:	d101      	bne.n	80051dc <_ZN8APDS99609colorSortEttt+0x188>
 80051d8:	2300      	movs	r3, #0
 80051da:	1c1c      	adds	r4, r3, #0
 80051dc:	b2e4      	uxtb	r4, r4
 80051de:	2301      	movs	r3, #1
 80051e0:	1c1d      	adds	r5, r3, #0
 80051e2:	496f      	ldr	r1, [pc, #444]	; (80053a0 <_ZN8APDS99609colorSortEttt+0x34c>)
 80051e4:	69f8      	ldr	r0, [r7, #28]
 80051e6:	f7fb f82d 	bl	8000244 <__aeabi_fcmplt>
 80051ea:	1e03      	subs	r3, r0, #0
 80051ec:	d101      	bne.n	80051f2 <_ZN8APDS99609colorSortEttt+0x19e>
 80051ee:	2300      	movs	r3, #0
 80051f0:	1c1d      	adds	r5, r3, #0
 80051f2:	b2eb      	uxtb	r3, r5
 80051f4:	4023      	ands	r3, r4
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <_ZN8APDS99609colorSortEttt+0x1b2>
    color = BLUE;
 80051fc:	2327      	movs	r3, #39	; 0x27
 80051fe:	18fb      	adds	r3, r7, r3
 8005200:	2202      	movs	r2, #2
 8005202:	701a      	strb	r2, [r3, #0]
 8005204:	e06c      	b.n	80052e0 <_ZN8APDS99609colorSortEttt+0x28c>
  } else if ((gPer > 34.0) & (rPer > 32.0)) {
 8005206:	2301      	movs	r3, #1
 8005208:	1c1c      	adds	r4, r3, #0
 800520a:	4966      	ldr	r1, [pc, #408]	; (80053a4 <_ZN8APDS99609colorSortEttt+0x350>)
 800520c:	69b8      	ldr	r0, [r7, #24]
 800520e:	f7fb f82d 	bl	800026c <__aeabi_fcmpgt>
 8005212:	1e03      	subs	r3, r0, #0
 8005214:	d101      	bne.n	800521a <_ZN8APDS99609colorSortEttt+0x1c6>
 8005216:	2300      	movs	r3, #0
 8005218:	1c1c      	adds	r4, r3, #0
 800521a:	b2e4      	uxtb	r4, r4
 800521c:	2301      	movs	r3, #1
 800521e:	1c1d      	adds	r5, r3, #0
 8005220:	2184      	movs	r1, #132	; 0x84
 8005222:	05c9      	lsls	r1, r1, #23
 8005224:	69f8      	ldr	r0, [r7, #28]
 8005226:	f7fb f821 	bl	800026c <__aeabi_fcmpgt>
 800522a:	1e03      	subs	r3, r0, #0
 800522c:	d101      	bne.n	8005232 <_ZN8APDS99609colorSortEttt+0x1de>
 800522e:	2300      	movs	r3, #0
 8005230:	1c1d      	adds	r5, r3, #0
 8005232:	b2eb      	uxtb	r3, r5
 8005234:	4023      	ands	r3, r4
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d004      	beq.n	8005246 <_ZN8APDS99609colorSortEttt+0x1f2>
    color = YELLOW;
 800523c:	2327      	movs	r3, #39	; 0x27
 800523e:	18fb      	adds	r3, r7, r3
 8005240:	2203      	movs	r2, #3
 8005242:	701a      	strb	r2, [r3, #0]
 8005244:	e04c      	b.n	80052e0 <_ZN8APDS99609colorSortEttt+0x28c>
  } else if (gPer > 36.0) {
 8005246:	4953      	ldr	r1, [pc, #332]	; (8005394 <_ZN8APDS99609colorSortEttt+0x340>)
 8005248:	69b8      	ldr	r0, [r7, #24]
 800524a:	f7fb f80f 	bl	800026c <__aeabi_fcmpgt>
 800524e:	1e03      	subs	r3, r0, #0
 8005250:	d004      	beq.n	800525c <_ZN8APDS99609colorSortEttt+0x208>
    color = GREEN;
 8005252:	2327      	movs	r3, #39	; 0x27
 8005254:	18fb      	adds	r3, r7, r3
 8005256:	2201      	movs	r2, #1
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e041      	b.n	80052e0 <_ZN8APDS99609colorSortEttt+0x28c>
  } else if ((rPer > 34.0) & (bPer > 35.0)){
 800525c:	2301      	movs	r3, #1
 800525e:	1c1c      	adds	r4, r3, #0
 8005260:	4950      	ldr	r1, [pc, #320]	; (80053a4 <_ZN8APDS99609colorSortEttt+0x350>)
 8005262:	69f8      	ldr	r0, [r7, #28]
 8005264:	f7fb f802 	bl	800026c <__aeabi_fcmpgt>
 8005268:	1e03      	subs	r3, r0, #0
 800526a:	d101      	bne.n	8005270 <_ZN8APDS99609colorSortEttt+0x21c>
 800526c:	2300      	movs	r3, #0
 800526e:	1c1c      	adds	r4, r3, #0
 8005270:	b2e4      	uxtb	r4, r4
 8005272:	2301      	movs	r3, #1
 8005274:	1c1d      	adds	r5, r3, #0
 8005276:	494c      	ldr	r1, [pc, #304]	; (80053a8 <_ZN8APDS99609colorSortEttt+0x354>)
 8005278:	6978      	ldr	r0, [r7, #20]
 800527a:	f7fa fff7 	bl	800026c <__aeabi_fcmpgt>
 800527e:	1e03      	subs	r3, r0, #0
 8005280:	d101      	bne.n	8005286 <_ZN8APDS99609colorSortEttt+0x232>
 8005282:	2300      	movs	r3, #0
 8005284:	1c1d      	adds	r5, r3, #0
 8005286:	b2eb      	uxtb	r3, r5
 8005288:	4023      	ands	r3, r4
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <_ZN8APDS99609colorSortEttt+0x246>
    color = PINK;
 8005290:	2327      	movs	r3, #39	; 0x27
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	2205      	movs	r2, #5
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	e022      	b.n	80052e0 <_ZN8APDS99609colorSortEttt+0x28c>
  } else if ((bPer > 36.0) & (rPer > 22.0)) {
 800529a:	2301      	movs	r3, #1
 800529c:	1c1c      	adds	r4, r3, #0
 800529e:	493d      	ldr	r1, [pc, #244]	; (8005394 <_ZN8APDS99609colorSortEttt+0x340>)
 80052a0:	6978      	ldr	r0, [r7, #20]
 80052a2:	f7fa ffe3 	bl	800026c <__aeabi_fcmpgt>
 80052a6:	1e03      	subs	r3, r0, #0
 80052a8:	d101      	bne.n	80052ae <_ZN8APDS99609colorSortEttt+0x25a>
 80052aa:	2300      	movs	r3, #0
 80052ac:	1c1c      	adds	r4, r3, #0
 80052ae:	b2e4      	uxtb	r4, r4
 80052b0:	2301      	movs	r3, #1
 80052b2:	1c1d      	adds	r5, r3, #0
 80052b4:	493a      	ldr	r1, [pc, #232]	; (80053a0 <_ZN8APDS99609colorSortEttt+0x34c>)
 80052b6:	69f8      	ldr	r0, [r7, #28]
 80052b8:	f7fa ffd8 	bl	800026c <__aeabi_fcmpgt>
 80052bc:	1e03      	subs	r3, r0, #0
 80052be:	d101      	bne.n	80052c4 <_ZN8APDS99609colorSortEttt+0x270>
 80052c0:	2300      	movs	r3, #0
 80052c2:	1c1d      	adds	r5, r3, #0
 80052c4:	b2eb      	uxtb	r3, r5
 80052c6:	4023      	ands	r3, r4
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d004      	beq.n	80052d8 <_ZN8APDS99609colorSortEttt+0x284>
    color = PURPLE;
 80052ce:	2327      	movs	r3, #39	; 0x27
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	2204      	movs	r2, #4
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e003      	b.n	80052e0 <_ZN8APDS99609colorSortEttt+0x28c>
  } else {
    color = UNKNOWN;
 80052d8:	2327      	movs	r3, #39	; 0x27
 80052da:	18fb      	adds	r3, r7, r3
 80052dc:	22ff      	movs	r2, #255	; 0xff
 80052de:	701a      	strb	r2, [r3, #0]
  }

  // shift new value into color filter
  for (uint8_t i = 1; i < len_color_filt; i++) {
 80052e0:	2326      	movs	r3, #38	; 0x26
 80052e2:	18fb      	adds	r3, r7, r3
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	2326      	movs	r3, #38	; 0x26
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d812      	bhi.n	8005318 <_ZN8APDS99609colorSortEttt+0x2c4>
    color_filt[i-1] = color_filt[i];
 80052f2:	2026      	movs	r0, #38	; 0x26
 80052f4:	183b      	adds	r3, r7, r0
 80052f6:	781a      	ldrb	r2, [r3, #0]
 80052f8:	183b      	adds	r3, r7, r0
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	68f9      	ldr	r1, [r7, #12]
 8005300:	188a      	adds	r2, r1, r2
 8005302:	7e11      	ldrb	r1, [r2, #24]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	18d3      	adds	r3, r2, r3
 8005308:	1c0a      	adds	r2, r1, #0
 800530a:	761a      	strb	r2, [r3, #24]
  for (uint8_t i = 1; i < len_color_filt; i++) {
 800530c:	183b      	adds	r3, r7, r0
 800530e:	781a      	ldrb	r2, [r3, #0]
 8005310:	183b      	adds	r3, r7, r0
 8005312:	3201      	adds	r2, #1
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	e7e7      	b.n	80052e8 <_ZN8APDS99609colorSortEttt+0x294>
  }
  color_filt[len_color_filt-1] = color;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2227      	movs	r2, #39	; 0x27
 800531c:	18ba      	adds	r2, r7, r2
 800531e:	7812      	ldrb	r2, [r2, #0]
 8005320:	769a      	strb	r2, [r3, #26]

  // check if all values in filter match
  uint8_t match = 0;
 8005322:	2325      	movs	r3, #37	; 0x25
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	2200      	movs	r2, #0
 8005328:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 1; i < len_color_filt; i++) {
 800532a:	2324      	movs	r3, #36	; 0x24
 800532c:	18fb      	adds	r3, r7, r3
 800532e:	2201      	movs	r2, #1
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	2324      	movs	r3, #36	; 0x24
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d81a      	bhi.n	8005372 <_ZN8APDS99609colorSortEttt+0x31e>
    if (color_filt[i-1] == color_filt[i]) {
 800533c:	2124      	movs	r1, #36	; 0x24
 800533e:	187b      	adds	r3, r7, r1
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	3b01      	subs	r3, #1
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	18d3      	adds	r3, r2, r3
 8005348:	7e1a      	ldrb	r2, [r3, #24]
 800534a:	187b      	adds	r3, r7, r1
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	18cb      	adds	r3, r1, r3
 8005352:	7e1b      	ldrb	r3, [r3, #24]
 8005354:	429a      	cmp	r2, r3
 8005356:	d105      	bne.n	8005364 <_ZN8APDS99609colorSortEttt+0x310>
      match = match + 1;
 8005358:	2225      	movs	r2, #37	; 0x25
 800535a:	18bb      	adds	r3, r7, r2
 800535c:	18ba      	adds	r2, r7, r2
 800535e:	7812      	ldrb	r2, [r2, #0]
 8005360:	3201      	adds	r2, #1
 8005362:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 1; i < len_color_filt; i++) {
 8005364:	2124      	movs	r1, #36	; 0x24
 8005366:	187b      	adds	r3, r7, r1
 8005368:	781a      	ldrb	r2, [r3, #0]
 800536a:	187b      	adds	r3, r7, r1
 800536c:	3201      	adds	r2, #1
 800536e:	701a      	strb	r2, [r3, #0]
 8005370:	e7df      	b.n	8005332 <_ZN8APDS99609colorSortEttt+0x2de>
    }
  }
  if (match == len_color_filt-1) {
 8005372:	2325      	movs	r3, #37	; 0x25
 8005374:	18fb      	adds	r3, r7, r3
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d103      	bne.n	8005384 <_ZN8APDS99609colorSortEttt+0x330>
    return color;
 800537c:	2327      	movs	r3, #39	; 0x27
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	e000      	b.n	8005386 <_ZN8APDS99609colorSortEttt+0x332>
  } else {
    return UNKNOWN;
 8005384:	23ff      	movs	r3, #255	; 0xff
  }
 8005386:	0018      	movs	r0, r3
 8005388:	46bd      	mov	sp, r7
 800538a:	b00b      	add	sp, #44	; 0x2c
 800538c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	40590000 	.word	0x40590000
 8005394:	42100000 	.word	0x42100000
 8005398:	41f00000 	.word	0x41f00000
 800539c:	42200000 	.word	0x42200000
 80053a0:	41b00000 	.word	0x41b00000
 80053a4:	42080000 	.word	0x42080000
 80053a8:	420c0000 	.word	0x420c0000

080053ac <_ZN10LedControlC1Ei>:
#define OP_INTENSITY   10
#define OP_SCANLIMIT   11
#define OP_SHUTDOWN    12
#define OP_DISPLAYTEST 15

LedControl::LedControl(int numDevices) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
    if(numDevices<=0 || numDevices>8 )
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	dd02      	ble.n	80053c2 <_ZN10LedControlC1Ei+0x16>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b08      	cmp	r3, #8
 80053c0:	dd01      	ble.n	80053c6 <_ZN10LedControlC1Ei+0x1a>
        numDevices=8;
 80053c2:	2308      	movs	r3, #8
 80053c4:	603b      	str	r3, [r7, #0]
    maxDevices=numDevices;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	645a      	str	r2, [r3, #68]	; 0x44
    for(int i=0;i<64;i++) 
 80053cc:	2300      	movs	r3, #0
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b3f      	cmp	r3, #63	; 0x3f
 80053d4:	dc09      	bgt.n	80053ea <_ZN10LedControlC1Ei+0x3e>
        status[i]=0x00;
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	18d3      	adds	r3, r2, r3
 80053dc:	3302      	adds	r3, #2
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<64;i++) 
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3301      	adds	r3, #1
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	e7f2      	b.n	80053d0 <_ZN10LedControlC1Ei+0x24>
    for(int i=0;i<maxDevices;i++) {
 80053ea:	2300      	movs	r3, #0
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	da21      	bge.n	800543c <_ZN10LedControlC1Ei+0x90>
        spiTransfer(i,OP_DISPLAYTEST,0);
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	2300      	movs	r3, #0
 80053fe:	220f      	movs	r2, #15
 8005400:	f000 f926 	bl	8005650 <_ZN10LedControl11spiTransferEihh>
        //scanlimit is set to max on startup
        setScanLimit(i,7);
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2207      	movs	r2, #7
 800540a:	0018      	movs	r0, r3
 800540c:	f000 f840 	bl	8005490 <_ZN10LedControl12setScanLimitEii>
        //decode is done in source
        spiTransfer(i,OP_DECODEMODE,0);
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	2300      	movs	r3, #0
 8005416:	2209      	movs	r2, #9
 8005418:	f000 f91a 	bl	8005650 <_ZN10LedControl11spiTransferEihh>
        clearDisplay(i);
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	0011      	movs	r1, r2
 8005422:	0018      	movs	r0, r3
 8005424:	f000 f874 	bl	8005510 <_ZN10LedControl12clearDisplayEi>
        //we go into shutdown-mode on startup
        shutdown(i,true);
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	0018      	movs	r0, r3
 8005430:	f000 f809 	bl	8005446 <_ZN10LedControl8shutdownEib>
    for(int i=0;i<maxDevices;i++) {
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	3301      	adds	r3, #1
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	e7d8      	b.n	80053ee <_ZN10LedControlC1Ei+0x42>
    }
}
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	0018      	movs	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	b004      	add	sp, #16
 8005444:	bd80      	pop	{r7, pc}

08005446 <_ZN10LedControl8shutdownEib>:

int LedControl::getDeviceCount() {
    return maxDevices;
}

void LedControl::shutdown(int addr, bool b) {
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	1dfb      	adds	r3, r7, #7
 8005452:	701a      	strb	r2, [r3, #0]
    if(addr<0 || addr>=maxDevices)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	db16      	blt.n	8005488 <_ZN10LedControl8shutdownEib+0x42>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	429a      	cmp	r2, r3
 8005462:	da11      	bge.n	8005488 <_ZN10LedControl8shutdownEib+0x42>
        return;
    if(b)
 8005464:	1dfb      	adds	r3, r7, #7
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d006      	beq.n	800547a <_ZN10LedControl8shutdownEib+0x34>
        spiTransfer(addr, OP_SHUTDOWN,0);
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	2300      	movs	r3, #0
 8005472:	220c      	movs	r2, #12
 8005474:	f000 f8ec 	bl	8005650 <_ZN10LedControl11spiTransferEihh>
 8005478:	e007      	b.n	800548a <_ZN10LedControl8shutdownEib+0x44>
    else
        spiTransfer(addr, OP_SHUTDOWN,1);
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	2301      	movs	r3, #1
 8005480:	220c      	movs	r2, #12
 8005482:	f000 f8e5 	bl	8005650 <_ZN10LedControl11spiTransferEihh>
 8005486:	e000      	b.n	800548a <_ZN10LedControl8shutdownEib+0x44>
        return;
 8005488:	46c0      	nop			; (mov r8, r8)
}
 800548a:	46bd      	mov	sp, r7
 800548c:	b004      	add	sp, #16
 800548e:	bd80      	pop	{r7, pc}

08005490 <_ZN10LedControl12setScanLimitEii>:

void LedControl::setScanLimit(int addr, int limit) {
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
    if(addr<0 || addr>=maxDevices)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	db12      	blt.n	80054c8 <_ZN10LedControl12setScanLimitEii+0x38>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	da0d      	bge.n	80054c8 <_ZN10LedControl12setScanLimitEii+0x38>
        return;
    if(limit>=0 && limit<8)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	db0b      	blt.n	80054ca <_ZN10LedControl12setScanLimitEii+0x3a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b07      	cmp	r3, #7
 80054b6:	dc08      	bgt.n	80054ca <_ZN10LedControl12setScanLimitEii+0x3a>
        spiTransfer(addr, OP_SCANLIMIT,limit);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	220b      	movs	r2, #11
 80054c2:	f000 f8c5 	bl	8005650 <_ZN10LedControl11spiTransferEihh>
 80054c6:	e000      	b.n	80054ca <_ZN10LedControl12setScanLimitEii+0x3a>
        return;
 80054c8:	46c0      	nop			; (mov r8, r8)
}
 80054ca:	46bd      	mov	sp, r7
 80054cc:	b004      	add	sp, #16
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <_ZN10LedControl12setIntensityEii>:

void LedControl::setIntensity(int addr, int intensity) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
    if(addr<0 || addr>=maxDevices)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	db12      	blt.n	8005508 <_ZN10LedControl12setIntensityEii+0x38>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	da0d      	bge.n	8005508 <_ZN10LedControl12setIntensityEii+0x38>
        return;
    if(intensity>=0 && intensity<16)	
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	db0b      	blt.n	800550a <_ZN10LedControl12setIntensityEii+0x3a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b0f      	cmp	r3, #15
 80054f6:	dc08      	bgt.n	800550a <_ZN10LedControl12setIntensityEii+0x3a>
        spiTransfer(addr, OP_INTENSITY,intensity);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	220a      	movs	r2, #10
 8005502:	f000 f8a5 	bl	8005650 <_ZN10LedControl11spiTransferEihh>
 8005506:	e000      	b.n	800550a <_ZN10LedControl12setIntensityEii+0x3a>
        return;
 8005508:	46c0      	nop			; (mov r8, r8)
}
 800550a:	46bd      	mov	sp, r7
 800550c:	b004      	add	sp, #16
 800550e:	bd80      	pop	{r7, pc}

08005510 <_ZN10LedControl12clearDisplayEi>:

void LedControl::clearDisplay(int addr) {
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
    int offset;

    if(addr<0 || addr>=maxDevices)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	db26      	blt.n	800556e <_ZN10LedControl12clearDisplayEi+0x5e>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	da21      	bge.n	800556e <_ZN10LedControl12clearDisplayEi+0x5e>
        return;
    offset=addr*8;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	60bb      	str	r3, [r7, #8]
    for(int i=0;i<8;i++) {
 8005530:	2300      	movs	r3, #0
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b07      	cmp	r3, #7
 8005538:	dc1a      	bgt.n	8005570 <_ZN10LedControl12clearDisplayEi+0x60>
        status[offset+i]=0;
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	18d3      	adds	r3, r2, r3
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	18d3      	adds	r3, r2, r3
 8005544:	2200      	movs	r2, #0
 8005546:	709a      	strb	r2, [r3, #2]
        spiTransfer(addr, i+1,status[offset+i]);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	3301      	adds	r3, #1
 800554e:	b2dc      	uxtb	r4, r3
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	18d3      	adds	r3, r2, r3
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	18d3      	adds	r3, r2, r3
 800555a:	789b      	ldrb	r3, [r3, #2]
 800555c:	6839      	ldr	r1, [r7, #0]
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	0022      	movs	r2, r4
 8005562:	f000 f875 	bl	8005650 <_ZN10LedControl11spiTransferEihh>
    for(int i=0;i<8;i++) {
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3301      	adds	r3, #1
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	e7e2      	b.n	8005534 <_ZN10LedControl12clearDisplayEi+0x24>
        return;
 800556e:	46c0      	nop			; (mov r8, r8)
    }
}
 8005570:	46bd      	mov	sp, r7
 8005572:	b005      	add	sp, #20
 8005574:	bd90      	pop	{r4, r7, pc}

08005576 <_ZN10LedControl6setLedEiiib>:

void LedControl::setLed(int addr, int row, int column, bool state) {
 8005576:	b590      	push	{r4, r7, lr}
 8005578:	b087      	sub	sp, #28
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	607a      	str	r2, [r7, #4]
 8005582:	603b      	str	r3, [r7, #0]
    int offset;
    uint8_t val=0x00;
 8005584:	2317      	movs	r3, #23
 8005586:	18fb      	adds	r3, r7, r3
 8005588:	2200      	movs	r2, #0
 800558a:	701a      	strb	r2, [r3, #0]

    if(addr<0 || addr>=maxDevices)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	db58      	blt.n	8005644 <_ZN10LedControl6setLedEiiib+0xce>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	429a      	cmp	r2, r3
 800559a:	da53      	bge.n	8005644 <_ZN10LedControl6setLedEiiib+0xce>
        return;
    if(row<0 || row>7 || column<0 || column>7)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	db52      	blt.n	8005648 <_ZN10LedControl6setLedEiiib+0xd2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b07      	cmp	r3, #7
 80055a6:	dc4f      	bgt.n	8005648 <_ZN10LedControl6setLedEiiib+0xd2>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	db4c      	blt.n	8005648 <_ZN10LedControl6setLedEiiib+0xd2>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b07      	cmp	r3, #7
 80055b2:	dc49      	bgt.n	8005648 <_ZN10LedControl6setLedEiiib+0xd2>
        return;
    offset=addr*8;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	613b      	str	r3, [r7, #16]
    val=0b10000000 >> column;
 80055ba:	2280      	movs	r2, #128	; 0x80
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	411a      	asrs	r2, r3
 80055c0:	2317      	movs	r3, #23
 80055c2:	18fb      	adds	r3, r7, r3
 80055c4:	701a      	strb	r2, [r3, #0]
    if(state)
 80055c6:	2328      	movs	r3, #40	; 0x28
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d012      	beq.n	80055f6 <_ZN10LedControl6setLedEiiib+0x80>
        status[offset+row]=status[offset+row]|val;
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	18d3      	adds	r3, r2, r3
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	18d3      	adds	r3, r2, r3
 80055da:	7899      	ldrb	r1, [r3, #2]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	18d3      	adds	r3, r2, r3
 80055e2:	2217      	movs	r2, #23
 80055e4:	18ba      	adds	r2, r7, r2
 80055e6:	7812      	ldrb	r2, [r2, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	b2d1      	uxtb	r1, r2
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	18d3      	adds	r3, r2, r3
 80055f0:	1c0a      	adds	r2, r1, #0
 80055f2:	709a      	strb	r2, [r3, #2]
 80055f4:	e016      	b.n	8005624 <_ZN10LedControl6setLedEiiib+0xae>
    else {
        val=~val;
 80055f6:	2017      	movs	r0, #23
 80055f8:	183b      	adds	r3, r7, r0
 80055fa:	183a      	adds	r2, r7, r0
 80055fc:	7812      	ldrb	r2, [r2, #0]
 80055fe:	43d2      	mvns	r2, r2
 8005600:	701a      	strb	r2, [r3, #0]
        status[offset+row]=status[offset+row]&val;
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	18d3      	adds	r3, r2, r3
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	18d3      	adds	r3, r2, r3
 800560c:	789a      	ldrb	r2, [r3, #2]
 800560e:	6939      	ldr	r1, [r7, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	18cb      	adds	r3, r1, r3
 8005614:	1839      	adds	r1, r7, r0
 8005616:	7809      	ldrb	r1, [r1, #0]
 8005618:	400a      	ands	r2, r1
 800561a:	b2d1      	uxtb	r1, r2
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	18d3      	adds	r3, r2, r3
 8005620:	1c0a      	adds	r2, r1, #0
 8005622:	709a      	strb	r2, [r3, #2]
    }
    spiTransfer(addr, row+1,status[offset+row]);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	b2db      	uxtb	r3, r3
 8005628:	3301      	adds	r3, #1
 800562a:	b2dc      	uxtb	r4, r3
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	18d3      	adds	r3, r2, r3
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	18d3      	adds	r3, r2, r3
 8005636:	789b      	ldrb	r3, [r3, #2]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	0022      	movs	r2, r4
 800563e:	f000 f807 	bl	8005650 <_ZN10LedControl11spiTransferEihh>
 8005642:	e002      	b.n	800564a <_ZN10LedControl6setLedEiiib+0xd4>
        return;
 8005644:	46c0      	nop			; (mov r8, r8)
 8005646:	e000      	b.n	800564a <_ZN10LedControl6setLedEiiib+0xd4>
        return;
 8005648:	46c0      	nop			; (mov r8, r8)
}
 800564a:	46bd      	mov	sp, r7
 800564c:	b007      	add	sp, #28
 800564e:	bd90      	pop	{r4, r7, pc}

08005650 <_ZN10LedControl11spiTransferEihh>:
        setLed(addr,row,col,val);
    }
}


void LedControl::spiTransfer(int addr, uint8_t opcode, uint8_t data) {
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	0019      	movs	r1, r3
 800565c:	1dfb      	adds	r3, r7, #7
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	1dbb      	adds	r3, r7, #6
 8005662:	1c0a      	adds	r2, r1, #0
 8005664:	701a      	strb	r2, [r3, #0]

    //put our device data into the array
    spidata[1]=opcode;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1dfa      	adds	r2, r7, #7
 800566a:	7812      	ldrb	r2, [r2, #0]
 800566c:	705a      	strb	r2, [r3, #1]
    spidata[0]=data;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	1dba      	adds	r2, r7, #6
 8005672:	7812      	ldrb	r2, [r2, #0]
 8005674:	701a      	strb	r2, [r3, #0]

    //Now shift out the data 
    HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8005676:	23a0      	movs	r3, #160	; 0xa0
 8005678:	05db      	lsls	r3, r3, #23
 800567a:	2200      	movs	r2, #0
 800567c:	2110      	movs	r1, #16
 800567e:	0018      	movs	r0, r3
 8005680:	f7fc fbe1 	bl	8001e46 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &spidata[0], 1, 1);
 8005684:	68f9      	ldr	r1, [r7, #12]
 8005686:	480e      	ldr	r0, [pc, #56]	; (80056c0 <_ZN10LedControl11spiTransferEihh+0x70>)
 8005688:	2301      	movs	r3, #1
 800568a:	2201      	movs	r2, #1
 800568c:	f7fe f908 	bl	80038a0 <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8005690:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <_ZN10LedControl11spiTransferEihh+0x70>)
 8005692:	0018      	movs	r0, r3
 8005694:	f7fe fa52 	bl	8003b3c <HAL_SPI_GetState>
 8005698:	0003      	movs	r3, r0
 800569a:	3b01      	subs	r3, #1
 800569c:	1e5a      	subs	r2, r3, #1
 800569e:	4193      	sbcs	r3, r2
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d000      	beq.n	80056a8 <_ZN10LedControl11spiTransferEihh+0x58>
 80056a6:	e7f3      	b.n	8005690 <_ZN10LedControl11spiTransferEihh+0x40>
    HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80056a8:	23a0      	movs	r3, #160	; 0xa0
 80056aa:	05db      	lsls	r3, r3, #23
 80056ac:	2201      	movs	r2, #1
 80056ae:	2110      	movs	r1, #16
 80056b0:	0018      	movs	r0, r3
 80056b2:	f7fc fbc8 	bl	8001e46 <HAL_GPIO_WritePin>
}    
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	46bd      	mov	sp, r7
 80056ba:	b004      	add	sp, #16
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	200000f0 	.word	0x200000f0

080056c4 <_ZN8BarGraphC1Ehh>:
#include "stm32l0xx_hal.h"
#include "spi.h"
#include "math.h"

// Constructor
BarGraph::BarGraph(uint8_t num_switch, uint8_t num_led) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	0008      	movs	r0, r1
 80056ce:	0011      	movs	r1, r2
 80056d0:	1cfb      	adds	r3, r7, #3
 80056d2:	1c02      	adds	r2, r0, #0
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	1cbb      	adds	r3, r7, #2
 80056d8:	1c0a      	adds	r2, r1, #0
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	709a      	strb	r2, [r3, #2]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3304      	adds	r3, #4
 80056e6:	2101      	movs	r1, #1
 80056e8:	0018      	movs	r0, r3
 80056ea:	f7ff fe5f 	bl	80053ac <_ZN10LedControlC1Ei>
  max_switch = num_switch;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	1cfa      	adds	r2, r7, #3
 80056f2:	7812      	ldrb	r2, [r2, #0]
 80056f4:	701a      	strb	r2, [r3, #0]
  max_led = num_led;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	1cba      	adds	r2, r7, #2
 80056fa:	7812      	ldrb	r2, [r2, #0]
 80056fc:	705a      	strb	r2, [r3, #1]
  incr = num_led/num_switch;
 80056fe:	1cba      	adds	r2, r7, #2
 8005700:	1cfb      	adds	r3, r7, #3
 8005702:	7812      	ldrb	r2, [r2, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	0019      	movs	r1, r3
 8005708:	0010      	movs	r0, r2
 800570a:	f7fa fcfd 	bl	8000108 <__udivsi3>
 800570e:	0003      	movs	r3, r0
 8005710:	b2da      	uxtb	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	70da      	strb	r2, [r3, #3]
}
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	0018      	movs	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	b002      	add	sp, #8
 800571e:	bd80      	pop	{r7, pc}

08005720 <_ZN8BarGraph5beginEv>:

void BarGraph::begin() {
 8005720:	b590      	push	{r4, r7, lr}
 8005722:	b087      	sub	sp, #28
 8005724:	af02      	add	r7, sp, #8
 8005726:	6078      	str	r0, [r7, #4]
  /*
   The MAX72XX is in power-saving mode on startup,
   we have to do a wakeup call
   */
  lc.shutdown(0,false);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	2200      	movs	r2, #0
 800572e:	2100      	movs	r1, #0
 8005730:	0018      	movs	r0, r3
 8005732:	f7ff fe88 	bl	8005446 <_ZN10LedControl8shutdownEib>
  /* Set the brightness to a medium values */
  lc.setIntensity(0,8);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3304      	adds	r3, #4
 800573a:	2208      	movs	r2, #8
 800573c:	2100      	movs	r1, #0
 800573e:	0018      	movs	r0, r3
 8005740:	f7ff fec6 	bl	80054d0 <_ZN10LedControl12setIntensityEii>
  /* and clear the display */
  lc.clearDisplay(0);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3304      	adds	r3, #4
 8005748:	2100      	movs	r1, #0
 800574a:	0018      	movs	r0, r3
 800574c:	f7ff fee0 	bl	8005510 <_ZN10LedControl12clearDisplayEi>

  for (uint8_t i=0; i<incr; i++) {
 8005750:	230f      	movs	r3, #15
 8005752:	18fb      	adds	r3, r7, r3
 8005754:	2200      	movs	r2, #0
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	78db      	ldrb	r3, [r3, #3]
 800575c:	220f      	movs	r2, #15
 800575e:	18ba      	adds	r2, r7, r2
 8005760:	7812      	ldrb	r2, [r2, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d212      	bcs.n	800578c <_ZN8BarGraph5beginEv+0x6c>
    lc.setLed(0,i,0,true);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	1d18      	adds	r0, r3, #4
 800576a:	210f      	movs	r1, #15
 800576c:	000c      	movs	r4, r1
 800576e:	187b      	adds	r3, r7, r1
 8005770:	781a      	ldrb	r2, [r3, #0]
 8005772:	2301      	movs	r3, #1
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	2300      	movs	r3, #0
 8005778:	2100      	movs	r1, #0
 800577a:	f7ff fefc 	bl	8005576 <_ZN10LedControl6setLedEiiib>
  for (uint8_t i=0; i<incr; i++) {
 800577e:	0021      	movs	r1, r4
 8005780:	187b      	adds	r3, r7, r1
 8005782:	781a      	ldrb	r2, [r3, #0]
 8005784:	187b      	adds	r3, r7, r1
 8005786:	3201      	adds	r2, #1
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	e7e5      	b.n	8005758 <_ZN8BarGraph5beginEv+0x38>
  }

}
 800578c:	46c0      	nop			; (mov r8, r8)
 800578e:	46bd      	mov	sp, r7
 8005790:	b005      	add	sp, #20
 8005792:	bd90      	pop	{r4, r7, pc}

08005794 <_ZN8BarGraph6updateEPh>:

void BarGraph::update(uint8_t *sw_state) {
 8005794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005796:	b087      	sub	sp, #28
 8005798:	af02      	add	r7, sp, #8
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint8_t cur_switch = 0;
 800579e:	230f      	movs	r3, #15
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	2200      	movs	r2, #0
 80057a4:	701a      	strb	r2, [r3, #0]
  for (uint8_t i=0; i<max_switch; i++) {
 80057a6:	230e      	movs	r3, #14
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	2200      	movs	r2, #0
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	220e      	movs	r2, #14
 80057b4:	18ba      	adds	r2, r7, r2
 80057b6:	7812      	ldrb	r2, [r2, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d215      	bcs.n	80057e8 <_ZN8BarGraph6updateEPh+0x54>
    if (sw_state[i] == 1) {
 80057bc:	230e      	movs	r3, #14
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	18d3      	adds	r3, r2, r3
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d106      	bne.n	80057da <_ZN8BarGraph6updateEPh+0x46>
      cur_switch = i;
 80057cc:	230f      	movs	r3, #15
 80057ce:	18fb      	adds	r3, r7, r3
 80057d0:	220e      	movs	r2, #14
 80057d2:	18ba      	adds	r2, r7, r2
 80057d4:	7812      	ldrb	r2, [r2, #0]
 80057d6:	701a      	strb	r2, [r3, #0]
      break;
 80057d8:	e006      	b.n	80057e8 <_ZN8BarGraph6updateEPh+0x54>
  for (uint8_t i=0; i<max_switch; i++) {
 80057da:	210e      	movs	r1, #14
 80057dc:	187b      	adds	r3, r7, r1
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	187b      	adds	r3, r7, r1
 80057e2:	3201      	adds	r2, #1
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	e7e2      	b.n	80057ae <_ZN8BarGraph6updateEPh+0x1a>
    }
  }
  if (cur_switch != last_switch) {
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	789b      	ldrb	r3, [r3, #2]
 80057ec:	220f      	movs	r2, #15
 80057ee:	18ba      	adds	r2, r7, r2
 80057f0:	7812      	ldrb	r2, [r2, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d047      	beq.n	8005886 <_ZN8BarGraph6updateEPh+0xf2>
    last_switch = cur_switch;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	210f      	movs	r1, #15
 80057fa:	187a      	adds	r2, r7, r1
 80057fc:	7812      	ldrb	r2, [r2, #0]
 80057fe:	709a      	strb	r2, [r3, #2]
    uint8_t num_led = incr*(cur_switch+1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	78da      	ldrb	r2, [r3, #3]
 8005804:	187b      	adds	r3, r7, r1
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	3301      	adds	r3, #1
 800580a:	b2d9      	uxtb	r1, r3
 800580c:	230c      	movs	r3, #12
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	434a      	muls	r2, r1
 8005812:	701a      	strb	r2, [r3, #0]
    lc.clearDisplay(0);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3304      	adds	r3, #4
 8005818:	2100      	movs	r1, #0
 800581a:	0018      	movs	r0, r3
 800581c:	f7ff fe78 	bl	8005510 <_ZN10LedControl12clearDisplayEi>
    for (uint8_t i=0; i<num_led; i++) {
 8005820:	230d      	movs	r3, #13
 8005822:	18fb      	adds	r3, r7, r3
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	230d      	movs	r3, #13
 800582a:	18fa      	adds	r2, r7, r3
 800582c:	230c      	movs	r3, #12
 800582e:	18fb      	adds	r3, r7, r3
 8005830:	7812      	ldrb	r2, [r2, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d226      	bcs.n	8005886 <_ZN8BarGraph6updateEPh+0xf2>
      lc.setLed(0,i%8, floor((i/8)%8), true);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	1d1c      	adds	r4, r3, #4
 800583c:	260d      	movs	r6, #13
 800583e:	19bb      	adds	r3, r7, r6
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2207      	movs	r2, #7
 8005844:	4013      	ands	r3, r2
 8005846:	001d      	movs	r5, r3
 8005848:	19bb      	adds	r3, r7, r6
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	08db      	lsrs	r3, r3, #3
 800584e:	b2db      	uxtb	r3, r3
 8005850:	001a      	movs	r2, r3
 8005852:	2307      	movs	r3, #7
 8005854:	4013      	ands	r3, r2
 8005856:	0018      	movs	r0, r3
 8005858:	f000 f819 	bl	800588e <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800585c:	0002      	movs	r2, r0
 800585e:	000b      	movs	r3, r1
 8005860:	0010      	movs	r0, r2
 8005862:	0019      	movs	r1, r3
 8005864:	f7fb fe6e 	bl	8001544 <__aeabi_d2iz>
 8005868:	0002      	movs	r2, r0
 800586a:	2301      	movs	r3, #1
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	0013      	movs	r3, r2
 8005870:	002a      	movs	r2, r5
 8005872:	2100      	movs	r1, #0
 8005874:	0020      	movs	r0, r4
 8005876:	f7ff fe7e 	bl	8005576 <_ZN10LedControl6setLedEiiib>
    for (uint8_t i=0; i<num_led; i++) {
 800587a:	19bb      	adds	r3, r7, r6
 800587c:	781a      	ldrb	r2, [r3, #0]
 800587e:	19bb      	adds	r3, r7, r6
 8005880:	3201      	adds	r2, #1
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e7d0      	b.n	8005828 <_ZN8BarGraph6updateEPh+0x94>
    }
  }
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	46bd      	mov	sp, r7
 800588a:	b005      	add	sp, #20
 800588c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800588e <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
 800588e:	b590      	push	{r4, r7, lr}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fb fe8a 	bl	80015b0 <__aeabi_i2d>
 800589c:	0003      	movs	r3, r0
 800589e:	000c      	movs	r4, r1
 80058a0:	0018      	movs	r0, r3
 80058a2:	0021      	movs	r1, r4
 80058a4:	46bd      	mov	sp, r7
 80058a6:	b003      	add	sp, #12
 80058a8:	bd90      	pop	{r4, r7, pc}

080058aa <_ZN7DotStarC1Ehh>:
#include "dotstar.hpp"
#include "gpio.h"
#include <stdlib.h>

// Constructor for 'soft' (bitbang) SPI -- any two pins can be used
DotStar::DotStar(uint8_t n, uint8_t o) :
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	0008      	movs	r0, r1
 80058b4:	0011      	movs	r1, r2
 80058b6:	1cfb      	adds	r3, r7, #3
 80058b8:	1c02      	adds	r2, r0, #0
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	1cbb      	adds	r3, r7, #2
 80058be:	1c0a      	adds	r2, r1, #0
 80058c0:	701a      	strb	r2, [r3, #0]
 brightness(0), pixels(NULL), rOffset(o & 3), gOffset((o >> 2) & 3),
 bOffset((o >> 4) & 3)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	705a      	strb	r2, [r3, #1]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	605a      	str	r2, [r3, #4]
 brightness(0), pixels(NULL), rOffset(o & 3), gOffset((o >> 2) & 3),
 80058ce:	1cbb      	adds	r3, r7, #2
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2203      	movs	r2, #3
 80058d4:	4013      	ands	r3, r2
 80058d6:	b2da      	uxtb	r2, r3
 bOffset((o >> 4) & 3)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	721a      	strb	r2, [r3, #8]
 brightness(0), pixels(NULL), rOffset(o & 3), gOffset((o >> 2) & 3),
 80058dc:	1cbb      	adds	r3, r7, #2
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	109b      	asrs	r3, r3, #2
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2203      	movs	r2, #3
 80058e6:	4013      	ands	r3, r2
 80058e8:	b2da      	uxtb	r2, r3
 bOffset((o >> 4) & 3)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	725a      	strb	r2, [r3, #9]
 80058ee:	1cbb      	adds	r3, r7, #2
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	111b      	asrs	r3, r3, #4
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2203      	movs	r2, #3
 80058f8:	4013      	ands	r3, r2
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	729a      	strb	r2, [r3, #10]
{
  updateLength(n);
 8005900:	1cfb      	adds	r3, r7, #3
 8005902:	781a      	ldrb	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	0011      	movs	r1, r2
 8005908:	0018      	movs	r0, r3
 800590a:	f000 f814 	bl	8005936 <_ZN7DotStar12updateLengthEh>
  ringIndex = 0;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	72da      	strb	r2, [r3, #11]
}
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	0018      	movs	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	b002      	add	sp, #8
 800591c:	bd80      	pop	{r7, pc}

0800591e <_ZN7DotStar5beginEv>:

DotStar::~DotStar(void) { // Destructor
  sw_spi_end();
}

void DotStar::begin(void) { // Initialize SPI
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  sw_spi_init();
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	0018      	movs	r0, r3
 800592a:	f000 f83f 	bl	80059ac <_ZN7DotStar11sw_spi_initEv>
}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	46bd      	mov	sp, r7
 8005932:	b002      	add	sp, #8
 8005934:	bd80      	pop	{r7, pc}

08005936 <_ZN7DotStar12updateLengthEh>:

// Length can be changed post-constructor for similar reasons (sketch
// config not hardcoded).  But DON'T use this for "recycling" strip RAM...
// all that reallocation is likely to fragment and eventually fail.
// Instead, set length once to longest strip.
void DotStar::updateLength(uint8_t n) {
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	000a      	movs	r2, r1
 8005940:	1cfb      	adds	r3, r7, #3
 8005942:	701a      	strb	r2, [r3, #0]
	uint16_t bytes = (rOffset == gOffset) ?
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	7a1a      	ldrb	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	7a5b      	ldrb	r3, [r3, #9]
 800594c:	429a      	cmp	r2, r3
 800594e:	d10d      	bne.n	800596c <_ZN7DotStar12updateLengthEh+0x36>
	    n + ((n + 3) / 4) : // MONO: 10 bits/pixel, round up to next byte
 8005950:	1cfb      	adds	r3, r7, #3
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	b29a      	uxth	r2, r3
 8005956:	1cfb      	adds	r3, r7, #3
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	3303      	adds	r3, #3
 800595c:	2b00      	cmp	r3, #0
 800595e:	da00      	bge.n	8005962 <_ZN7DotStar12updateLengthEh+0x2c>
 8005960:	3303      	adds	r3, #3
 8005962:	109b      	asrs	r3, r3, #2
 8005964:	b29b      	uxth	r3, r3
	uint16_t bytes = (rOffset == gOffset) ?
 8005966:	18d3      	adds	r3, r2, r3
 8005968:	b29b      	uxth	r3, r3
 800596a:	e007      	b.n	800597c <_ZN7DotStar12updateLengthEh+0x46>
 800596c:	1cfb      	adds	r3, r7, #3
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	b29b      	uxth	r3, r3
 8005972:	1c1a      	adds	r2, r3, #0
 8005974:	1c13      	adds	r3, r2, #0
 8005976:	18db      	adds	r3, r3, r3
 8005978:	189b      	adds	r3, r3, r2
 800597a:	b29b      	uxth	r3, r3
 800597c:	210e      	movs	r1, #14
 800597e:	187a      	adds	r2, r7, r1
 8005980:	8013      	strh	r3, [r2, #0]
	    n * 3;              // COLOR: 3 bytes/pixel
	pixels = (uint8_t *)malloc(bytes);
 8005982:	187b      	adds	r3, r7, r1
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	0018      	movs	r0, r3
 8005988:	f001 f968 	bl	8006c5c <malloc>
 800598c:	0003      	movs	r3, r0
 800598e:	001a      	movs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	605a      	str	r2, [r3, #4]
	numLEDs = n;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	1cfa      	adds	r2, r7, #3
 8005998:	7812      	ldrb	r2, [r2, #0]
 800599a:	701a      	strb	r2, [r3, #0]
	clear();
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	0018      	movs	r0, r3
 80059a0:	f000 f973 	bl	8005c8a <_ZN7DotStar5clearEv>
}
 80059a4:	46c0      	nop			; (mov r8, r8)
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b004      	add	sp, #16
 80059aa:	bd80      	pop	{r7, pc}

080059ac <_ZN7DotStar11sw_spi_initEv>:

// SPI STUFF ---------------------------------------------------------------

void DotStar::sw_spi_init(void) { // Init 'soft' (bitbang) SPI
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(Data_Port, Data_Pin, GPIO_PIN_RESET);
 80059b4:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <_ZN7DotStar11sw_spi_initEv+0x28>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	2101      	movs	r1, #1
 80059ba:	0018      	movs	r0, r3
 80059bc:	f7fc fa43 	bl	8001e46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Data_Port, Clock_Pin, GPIO_PIN_RESET);
 80059c0:	4b04      	ldr	r3, [pc, #16]	; (80059d4 <_ZN7DotStar11sw_spi_initEv+0x28>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	2102      	movs	r1, #2
 80059c6:	0018      	movs	r0, r3
 80059c8:	f7fc fa3d 	bl	8001e46 <HAL_GPIO_WritePin>
}
 80059cc:	46c0      	nop			; (mov r8, r8)
 80059ce:	46bd      	mov	sp, r7
 80059d0:	b002      	add	sp, #8
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	50000400 	.word	0x50000400

080059d8 <_ZN7DotStar10sw_spi_outEh>:
void DotStar::sw_spi_end() { // Stop 'soft' SPI
  HAL_GPIO_WritePin(Data_Port, Data_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(Clock_Port, Clock_Pin, GPIO_PIN_RESET);
}

void DotStar::sw_spi_out(uint8_t n) { // Bitbang SPI write
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	000a      	movs	r2, r1
 80059e2:	1cfb      	adds	r3, r7, #3
 80059e4:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=8; i--; n <<= 1) {
 80059e6:	230f      	movs	r3, #15
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	2208      	movs	r2, #8
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	220f      	movs	r2, #15
 80059f0:	18bb      	adds	r3, r7, r2
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	18ba      	adds	r2, r7, r2
 80059f6:	1e59      	subs	r1, r3, #1
 80059f8:	7011      	strb	r1, [r2, #0]
 80059fa:	1e5a      	subs	r2, r3, #1
 80059fc:	4193      	sbcs	r3, r2
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d023      	beq.n	8005a4c <_ZN7DotStar10sw_spi_outEh+0x74>
    if(n & 0x80) HAL_GPIO_WritePin(Data_Port, Data_Pin, GPIO_PIN_SET);
 8005a04:	1cfb      	adds	r3, r7, #3
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	b25b      	sxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	da06      	bge.n	8005a1c <_ZN7DotStar10sw_spi_outEh+0x44>
 8005a0e:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <_ZN7DotStar10sw_spi_outEh+0x7c>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	2101      	movs	r1, #1
 8005a14:	0018      	movs	r0, r3
 8005a16:	f7fc fa16 	bl	8001e46 <HAL_GPIO_WritePin>
 8005a1a:	e005      	b.n	8005a28 <_ZN7DotStar10sw_spi_outEh+0x50>
    else         HAL_GPIO_WritePin(Data_Port, Data_Pin, GPIO_PIN_RESET);
 8005a1c:	4b0d      	ldr	r3, [pc, #52]	; (8005a54 <_ZN7DotStar10sw_spi_outEh+0x7c>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2101      	movs	r1, #1
 8005a22:	0018      	movs	r0, r3
 8005a24:	f7fc fa0f 	bl	8001e46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Clock_Port, Clock_Pin, GPIO_PIN_SET);
 8005a28:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <_ZN7DotStar10sw_spi_outEh+0x7c>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	2102      	movs	r1, #2
 8005a2e:	0018      	movs	r0, r3
 8005a30:	f7fc fa09 	bl	8001e46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Clock_Port, Clock_Pin, GPIO_PIN_RESET);
 8005a34:	4b07      	ldr	r3, [pc, #28]	; (8005a54 <_ZN7DotStar10sw_spi_outEh+0x7c>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	2102      	movs	r1, #2
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f7fc fa03 	bl	8001e46 <HAL_GPIO_WritePin>
  for(uint8_t i=8; i--; n <<= 1) {
 8005a40:	1cfa      	adds	r2, r7, #3
 8005a42:	1cfb      	adds	r3, r7, #3
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	18db      	adds	r3, r3, r3
 8005a48:	7013      	strb	r3, [r2, #0]
 8005a4a:	e7d0      	b.n	80059ee <_ZN7DotStar10sw_spi_outEh+0x16>
  }
}
 8005a4c:	46c0      	nop			; (mov r8, r8)
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b004      	add	sp, #16
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	50000400 	.word	0x50000400

08005a58 <_ZN7DotStar4showEv>:
  already handled better in one's sketch code.  If you really can't live
  without this abomination, you can fork the library and add it for your
  own use, but any pull requests for this will NOT be merged, nuh uh!
*/

void DotStar::show(void) {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]

  if(!pixels) return;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d100      	bne.n	8005a6a <_ZN7DotStar4showEv+0x12>
 8005a68:	e0a0      	b.n	8005bac <_ZN7DotStar4showEv+0x154>

  uint8_t *ptr = pixels, i;            // -> LED data
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	60fb      	str	r3, [r7, #12]
  uint8_t n   = numLEDs;              // Counter
 8005a70:	230a      	movs	r3, #10
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	7812      	ldrb	r2, [r2, #0]
 8005a78:	701a      	strb	r2, [r3, #0]
  uint16_t b16 = (uint16_t)brightness; // Type-convert for fixed-point math
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	785a      	ldrb	r2, [r3, #1]
 8005a7e:	2308      	movs	r3, #8
 8005a80:	18fb      	adds	r3, r7, r3
 8005a82:	801a      	strh	r2, [r3, #0]

  for(i=0; i<4; i++) sw_spi_out(0);    // Start-frame marker
 8005a84:	230b      	movs	r3, #11
 8005a86:	18fb      	adds	r3, r7, r3
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	230b      	movs	r3, #11
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d80b      	bhi.n	8005aae <_ZN7DotStar4showEv+0x56>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2100      	movs	r1, #0
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f7ff ff9c 	bl	80059d8 <_ZN7DotStar10sw_spi_outEh>
 8005aa0:	210b      	movs	r1, #11
 8005aa2:	187b      	adds	r3, r7, r1
 8005aa4:	781a      	ldrb	r2, [r3, #0]
 8005aa6:	187b      	adds	r3, r7, r1
 8005aa8:	3201      	adds	r2, #1
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	e7ee      	b.n	8005a8c <_ZN7DotStar4showEv+0x34>
  if(brightness) {                     // Scale pixel brightness on output
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d032      	beq.n	8005b1c <_ZN7DotStar4showEv+0xc4>
    do {                               // For each pixel...
      sw_spi_out(0xFF);                //  Pixel start
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	21ff      	movs	r1, #255	; 0xff
 8005aba:	0018      	movs	r0, r3
 8005abc:	f7ff ff8c 	bl	80059d8 <_ZN7DotStar10sw_spi_outEh>
      for(i=0; i<3; i++) sw_spi_out((*ptr++ * b16) >> 8); // Scale, write
 8005ac0:	230b      	movs	r3, #11
 8005ac2:	18fb      	adds	r3, r7, r3
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	230b      	movs	r3, #11
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d816      	bhi.n	8005b00 <_ZN7DotStar4showEv+0xa8>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	60fa      	str	r2, [r7, #12]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	001a      	movs	r2, r3
 8005adc:	2308      	movs	r3, #8
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	4353      	muls	r3, r2
 8005ae4:	121b      	asrs	r3, r3, #8
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	0011      	movs	r1, r2
 8005aec:	0018      	movs	r0, r3
 8005aee:	f7ff ff73 	bl	80059d8 <_ZN7DotStar10sw_spi_outEh>
 8005af2:	210b      	movs	r1, #11
 8005af4:	187b      	adds	r3, r7, r1
 8005af6:	781a      	ldrb	r2, [r3, #0]
 8005af8:	187b      	adds	r3, r7, r1
 8005afa:	3201      	adds	r2, #1
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	e7e3      	b.n	8005ac8 <_ZN7DotStar4showEv+0x70>
    } while(--n);
 8005b00:	210a      	movs	r1, #10
 8005b02:	187b      	adds	r3, r7, r1
 8005b04:	187a      	adds	r2, r7, r1
 8005b06:	7812      	ldrb	r2, [r2, #0]
 8005b08:	3a01      	subs	r2, #1
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	187b      	adds	r3, r7, r1
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	1e5a      	subs	r2, r3, #1
 8005b12:	4193      	sbcs	r3, r2
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d02c      	beq.n	8005b74 <_ZN7DotStar4showEv+0x11c>
    do {                               // For each pixel...
 8005b1a:	e7cc      	b.n	8005ab6 <_ZN7DotStar4showEv+0x5e>
  } else {                             // Full brightness (no scaling)
    do {                               // For each pixel...
      sw_spi_out(0xFF);                //  Pixel start
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	21ff      	movs	r1, #255	; 0xff
 8005b20:	0018      	movs	r0, r3
 8005b22:	f7ff ff59 	bl	80059d8 <_ZN7DotStar10sw_spi_outEh>
      for(i=0; i<3; i++) sw_spi_out(*ptr++); // R,G,B
 8005b26:	230b      	movs	r3, #11
 8005b28:	18fb      	adds	r3, r7, r3
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	701a      	strb	r2, [r3, #0]
 8005b2e:	230b      	movs	r3, #11
 8005b30:	18fb      	adds	r3, r7, r3
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d80f      	bhi.n	8005b58 <_ZN7DotStar4showEv+0x100>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	60fa      	str	r2, [r7, #12]
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	0011      	movs	r1, r2
 8005b44:	0018      	movs	r0, r3
 8005b46:	f7ff ff47 	bl	80059d8 <_ZN7DotStar10sw_spi_outEh>
 8005b4a:	210b      	movs	r1, #11
 8005b4c:	187b      	adds	r3, r7, r1
 8005b4e:	781a      	ldrb	r2, [r3, #0]
 8005b50:	187b      	adds	r3, r7, r1
 8005b52:	3201      	adds	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	e7ea      	b.n	8005b2e <_ZN7DotStar4showEv+0xd6>
    } while(--n);
 8005b58:	210a      	movs	r1, #10
 8005b5a:	187b      	adds	r3, r7, r1
 8005b5c:	187a      	adds	r2, r7, r1
 8005b5e:	7812      	ldrb	r2, [r2, #0]
 8005b60:	3a01      	subs	r2, #1
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	187b      	adds	r3, r7, r1
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	1e5a      	subs	r2, r3, #1
 8005b6a:	4193      	sbcs	r3, r2
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d000      	beq.n	8005b74 <_ZN7DotStar4showEv+0x11c>
    do {                               // For each pixel...
 8005b72:	e7d3      	b.n	8005b1c <_ZN7DotStar4showEv+0xc4>
  }
  for(i=0; i<((numLEDs + 15) / 16); i++) sw_spi_out(0xFF); // End-frame marker (see note above)
 8005b74:	230b      	movs	r3, #11
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	2200      	movs	r2, #0
 8005b7a:	701a      	strb	r2, [r3, #0]
 8005b7c:	230b      	movs	r3, #11
 8005b7e:	18fb      	adds	r3, r7, r3
 8005b80:	781a      	ldrb	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	330f      	adds	r3, #15
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	da00      	bge.n	8005b8e <_ZN7DotStar4showEv+0x136>
 8005b8c:	330f      	adds	r3, #15
 8005b8e:	111b      	asrs	r3, r3, #4
 8005b90:	429a      	cmp	r2, r3
 8005b92:	da0c      	bge.n	8005bae <_ZN7DotStar4showEv+0x156>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	21ff      	movs	r1, #255	; 0xff
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f7ff ff1d 	bl	80059d8 <_ZN7DotStar10sw_spi_outEh>
 8005b9e:	210b      	movs	r1, #11
 8005ba0:	187b      	adds	r3, r7, r1
 8005ba2:	781a      	ldrb	r2, [r3, #0]
 8005ba4:	187b      	adds	r3, r7, r1
 8005ba6:	3201      	adds	r2, #1
 8005ba8:	701a      	strb	r2, [r3, #0]
 8005baa:	e7e7      	b.n	8005b7c <_ZN7DotStar4showEv+0x124>
  if(!pixels) return;
 8005bac:	46c0      	nop			; (mov r8, r8)
}
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b004      	add	sp, #16
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <_ZN7DotStar8incrRingE8RGB_VALS>:

void DotStar::incrRing(RGB_VALS rgb) {
 8005bb4:	b590      	push	{r4, r7, lr}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	003b      	movs	r3, r7
 8005bbe:	6019      	str	r1, [r3, #0]
  setPixelColor(ringIndex, 0, 0, 0);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	7ad9      	ldrb	r1, [r3, #11]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f000 f864 	bl	8005c9a <_ZN7DotStar13setPixelColorEhhhh>
  if (ringIndex == numLEDs-1) {
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	7adb      	ldrb	r3, [r3, #11]
 8005bd6:	001a      	movs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d103      	bne.n	8005bea <_ZN7DotStar8incrRingE8RGB_VALS+0x36>
    ringIndex = 0;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	72da      	strb	r2, [r3, #11]
 8005be8:	e005      	b.n	8005bf6 <_ZN7DotStar8incrRingE8RGB_VALS+0x42>
  } else {
    ringIndex++;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	7adb      	ldrb	r3, [r3, #11]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	72da      	strb	r2, [r3, #11]
  }
  setPixelColor(ringIndex, rgb.r, rgb.g, rgb.b);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	7ad9      	ldrb	r1, [r3, #11]
 8005bfa:	003b      	movs	r3, r7
 8005bfc:	781a      	ldrb	r2, [r3, #0]
 8005bfe:	003b      	movs	r3, r7
 8005c00:	785c      	ldrb	r4, [r3, #1]
 8005c02:	003b      	movs	r3, r7
 8005c04:	789b      	ldrb	r3, [r3, #2]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	0023      	movs	r3, r4
 8005c0c:	f000 f845 	bl	8005c9a <_ZN7DotStar13setPixelColorEhhhh>
  show();
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	0018      	movs	r0, r3
 8005c14:	f7ff ff20 	bl	8005a58 <_ZN7DotStar4showEv>
}
 8005c18:	46c0      	nop			; (mov r8, r8)
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b003      	add	sp, #12
 8005c1e:	bd90      	pop	{r4, r7, pc}

08005c20 <_ZN7DotStar8decrRingE8RGB_VALS>:

void DotStar::decrRing(RGB_VALS rgb) {
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af02      	add	r7, sp, #8
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	003b      	movs	r3, r7
 8005c2a:	6019      	str	r1, [r3, #0]
  setPixelColor(ringIndex, 0, 0, 0);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	7ad9      	ldrb	r1, [r3, #11]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	2300      	movs	r3, #0
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	2300      	movs	r3, #0
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f000 f82e 	bl	8005c9a <_ZN7DotStar13setPixelColorEhhhh>
  if (ringIndex == 0) {
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	7adb      	ldrb	r3, [r3, #11]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <_ZN7DotStar8decrRingE8RGB_VALS+0x34>
    ringIndex = numLEDs-1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	72da      	strb	r2, [r3, #11]
 8005c52:	e005      	b.n	8005c60 <_ZN7DotStar8decrRingE8RGB_VALS+0x40>
  } else {
    ringIndex--;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	7adb      	ldrb	r3, [r3, #11]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	72da      	strb	r2, [r3, #11]
  }
  setPixelColor(ringIndex, rgb.r, rgb.g, rgb.b);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	7ad9      	ldrb	r1, [r3, #11]
 8005c64:	003b      	movs	r3, r7
 8005c66:	781a      	ldrb	r2, [r3, #0]
 8005c68:	003b      	movs	r3, r7
 8005c6a:	785c      	ldrb	r4, [r3, #1]
 8005c6c:	003b      	movs	r3, r7
 8005c6e:	789b      	ldrb	r3, [r3, #2]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	0023      	movs	r3, r4
 8005c76:	f000 f810 	bl	8005c9a <_ZN7DotStar13setPixelColorEhhhh>
  show();
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f7ff feeb 	bl	8005a58 <_ZN7DotStar4showEv>
}
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	46bd      	mov	sp, r7
 8005c86:	b003      	add	sp, #12
 8005c88:	bd90      	pop	{r4, r7, pc}

08005c8a <_ZN7DotStar5clearEv>:

void DotStar::clear() { // Write 0s (off) to full pixel buffer
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b082      	sub	sp, #8
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  //memset(pixels, 0, (rOffset == gOffset) ?
    //numLEDs + ((numLEDs + 3) / 4) : // MONO: 10 bits/pixel
    //numLEDs * 3);                   // COLOR: 3 bytes/pixel
}
 8005c92:	46c0      	nop			; (mov r8, r8)
 8005c94:	46bd      	mov	sp, r7
 8005c96:	b002      	add	sp, #8
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <_ZN7DotStar13setPixelColorEhhhh>:

// Set pixel color, separate R,G,B values (0-255 ea.)
void DotStar::setPixelColor(
 uint8_t n, uint8_t r, uint8_t g, uint8_t b) {
 8005c9a:	b590      	push	{r4, r7, lr}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	000c      	movs	r4, r1
 8005ca4:	0010      	movs	r0, r2
 8005ca6:	0019      	movs	r1, r3
 8005ca8:	1cfb      	adds	r3, r7, #3
 8005caa:	1c22      	adds	r2, r4, #0
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	1cbb      	adds	r3, r7, #2
 8005cb0:	1c02      	adds	r2, r0, #0
 8005cb2:	701a      	strb	r2, [r3, #0]
 8005cb4:	1c7b      	adds	r3, r7, #1
 8005cb6:	1c0a      	adds	r2, r1, #0
 8005cb8:	701a      	strb	r2, [r3, #0]
  if(n < numLEDs) {
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	1cfa      	adds	r2, r7, #3
 8005cc0:	7812      	ldrb	r2, [r2, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d221      	bcs.n	8005d0a <_ZN7DotStar13setPixelColorEhhhh+0x70>
    uint8_t *p = &pixels[n * 3];
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6859      	ldr	r1, [r3, #4]
 8005cca:	1cfb      	adds	r3, r7, #3
 8005ccc:	781a      	ldrb	r2, [r3, #0]
 8005cce:	0013      	movs	r3, r2
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	189b      	adds	r3, r3, r2
 8005cd4:	18cb      	adds	r3, r1, r3
 8005cd6:	60fb      	str	r3, [r7, #12]
    p[rOffset] = r;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	7a1b      	ldrb	r3, [r3, #8]
 8005cdc:	001a      	movs	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	189b      	adds	r3, r3, r2
 8005ce2:	1cba      	adds	r2, r7, #2
 8005ce4:	7812      	ldrb	r2, [r2, #0]
 8005ce6:	701a      	strb	r2, [r3, #0]
    p[gOffset] = g;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	7a5b      	ldrb	r3, [r3, #9]
 8005cec:	001a      	movs	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	189b      	adds	r3, r3, r2
 8005cf2:	1c7a      	adds	r2, r7, #1
 8005cf4:	7812      	ldrb	r2, [r2, #0]
 8005cf6:	701a      	strb	r2, [r3, #0]
    p[bOffset] = b;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	7a9b      	ldrb	r3, [r3, #10]
 8005cfc:	001a      	movs	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	189b      	adds	r3, r3, r2
 8005d02:	2220      	movs	r2, #32
 8005d04:	18ba      	adds	r2, r7, r2
 8005d06:	7812      	ldrb	r2, [r2, #0]
 8005d08:	701a      	strb	r2, [r3, #0]
  }
}
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	b005      	add	sp, #20
 8005d10:	bd90      	pop	{r4, r7, pc}

08005d12 <_ZN7DotStar9numPixelsEv>:
  return ((uint32_t)p[rOffset] << 16) |
         ((uint32_t)p[gOffset] <<  8) |
          (uint32_t)p[bOffset];
}

uint8_t DotStar::numPixels(void) { // Ret. strip length
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  return numLEDs;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
}
 8005d1e:	0018      	movs	r0, r3
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b002      	add	sp, #8
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <_ZN7DotStar13setBrightnessEh>:
// reasons I think it's better handled in one's sketch, but it's here for
// parity with the NeoPixel library.  Good news is that brightness setting
// in this library is 'non destructive' -- it's applied as color data is
// being issued to the strip, not during setPixel(), and also means that
// getPixelColor() returns the exact value originally stored.
void DotStar::setBrightness(uint8_t b) {
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	000a      	movs	r2, r1
 8005d30:	1cfb      	adds	r3, r7, #3
 8005d32:	701a      	strb	r2, [r3, #0]
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB.  'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  brightness = b + 1;
 8005d34:	1cfb      	adds	r3, r7, #3
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	705a      	strb	r2, [r3, #1]
}
 8005d40:	46c0      	nop			; (mov r8, r8)
 8005d42:	46bd      	mov	sp, r7
 8005d44:	b002      	add	sp, #8
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005d48:	b590      	push	{r4, r7, lr}
 8005d4a:	b089      	sub	sp, #36	; 0x24
 8005d4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d4e:	240c      	movs	r4, #12
 8005d50:	193b      	adds	r3, r7, r4
 8005d52:	0018      	movs	r0, r3
 8005d54:	2314      	movs	r3, #20
 8005d56:	001a      	movs	r2, r3
 8005d58:	2100      	movs	r1, #0
 8005d5a:	f000 ff89 	bl	8006c70 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d5e:	4b3d      	ldr	r3, [pc, #244]	; (8005e54 <MX_GPIO_Init+0x10c>)
 8005d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d62:	4b3c      	ldr	r3, [pc, #240]	; (8005e54 <MX_GPIO_Init+0x10c>)
 8005d64:	2101      	movs	r1, #1
 8005d66:	430a      	orrs	r2, r1
 8005d68:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d6a:	4b3a      	ldr	r3, [pc, #232]	; (8005e54 <MX_GPIO_Init+0x10c>)
 8005d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6e:	2201      	movs	r2, #1
 8005d70:	4013      	ands	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]
 8005d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d76:	4b37      	ldr	r3, [pc, #220]	; (8005e54 <MX_GPIO_Init+0x10c>)
 8005d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7a:	4b36      	ldr	r3, [pc, #216]	; (8005e54 <MX_GPIO_Init+0x10c>)
 8005d7c:	2102      	movs	r1, #2
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d82:	4b34      	ldr	r3, [pc, #208]	; (8005e54 <MX_GPIO_Init+0x10c>)
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	2202      	movs	r2, #2
 8005d88:	4013      	ands	r3, r2
 8005d8a:	607b      	str	r3, [r7, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_0_Pin|LED_1_Pin|LED_2_Pin|TEST_LED_Pin 
 8005d8e:	4932      	ldr	r1, [pc, #200]	; (8005e58 <MX_GPIO_Init+0x110>)
 8005d90:	23a0      	movs	r3, #160	; 0xa0
 8005d92:	05db      	lsls	r3, r3, #23
 8005d94:	2200      	movs	r2, #0
 8005d96:	0018      	movs	r0, r3
 8005d98:	f7fc f855 	bl	8001e46 <HAL_GPIO_WritePin>
                          |LED_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8005d9c:	23a0      	movs	r3, #160	; 0xa0
 8005d9e:	05db      	lsls	r3, r3, #23
 8005da0:	2201      	movs	r2, #1
 8005da2:	2110      	movs	r1, #16
 8005da4:	0018      	movs	r0, r3
 8005da6:	f7fc f84e 	bl	8001e46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DOTSTAR_DATA_Pin|DOTSTAR_CLK_Pin, GPIO_PIN_RESET);
 8005daa:	4b2c      	ldr	r3, [pc, #176]	; (8005e5c <MX_GPIO_Init+0x114>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	2103      	movs	r1, #3
 8005db0:	0018      	movs	r0, r3
 8005db2:	f7fc f848 	bl	8001e46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|SPI_SS_Pin|LED_2_Pin 
 8005db6:	193b      	adds	r3, r7, r4
 8005db8:	4a29      	ldr	r2, [pc, #164]	; (8005e60 <MX_GPIO_Init+0x118>)
 8005dba:	601a      	str	r2, [r3, #0]
                          |TEST_LED_Pin|LED_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dbc:	193b      	adds	r3, r7, r4
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc2:	193b      	adds	r3, r7, r4
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dc8:	193b      	adds	r3, r7, r4
 8005dca:	2200      	movs	r2, #0
 8005dcc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dce:	193a      	adds	r2, r7, r4
 8005dd0:	23a0      	movs	r3, #160	; 0xa0
 8005dd2:	05db      	lsls	r3, r3, #23
 8005dd4:	0011      	movs	r1, r2
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f7fb fea2 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DOTSTAR_DATA_Pin|DOTSTAR_CLK_Pin;
 8005ddc:	0021      	movs	r1, r4
 8005dde:	187b      	adds	r3, r7, r1
 8005de0:	2203      	movs	r2, #3
 8005de2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005de4:	187b      	adds	r3, r7, r1
 8005de6:	2201      	movs	r2, #1
 8005de8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dea:	187b      	adds	r3, r7, r1
 8005dec:	2200      	movs	r2, #0
 8005dee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005df0:	187b      	adds	r3, r7, r1
 8005df2:	2200      	movs	r2, #0
 8005df4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005df6:	000c      	movs	r4, r1
 8005df8:	187b      	adds	r3, r7, r1
 8005dfa:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <MX_GPIO_Init+0x114>)
 8005dfc:	0019      	movs	r1, r3
 8005dfe:	0010      	movs	r0, r2
 8005e00:	f7fb fe8e 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BG_SW_0_Pin|BG_SW_6_Pin|BG_SW_7_Pin|SW_0_Pin 
 8005e04:	0021      	movs	r1, r4
 8005e06:	187b      	adds	r3, r7, r1
 8005e08:	4a16      	ldr	r2, [pc, #88]	; (8005e64 <MX_GPIO_Init+0x11c>)
 8005e0a:	601a      	str	r2, [r3, #0]
                          |SW_1_Pin|SW_2_Pin|SW_3_Pin|BG_SW_1_Pin 
                          |BG_SW_2_Pin|BG_SW_3_Pin|BG_SW_4_Pin|BG_SW_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e0c:	187b      	adds	r3, r7, r1
 8005e0e:	2200      	movs	r2, #0
 8005e10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e12:	187b      	adds	r3, r7, r1
 8005e14:	2200      	movs	r2, #0
 8005e16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e18:	000c      	movs	r4, r1
 8005e1a:	187b      	adds	r3, r7, r1
 8005e1c:	4a0f      	ldr	r2, [pc, #60]	; (8005e5c <MX_GPIO_Init+0x114>)
 8005e1e:	0019      	movs	r1, r3
 8005e20:	0010      	movs	r0, r2
 8005e22:	f7fb fe7d 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COLOR_INT_Pin;
 8005e26:	0021      	movs	r1, r4
 8005e28:	187b      	adds	r3, r7, r1
 8005e2a:	2280      	movs	r2, #128	; 0x80
 8005e2c:	0212      	lsls	r2, r2, #8
 8005e2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e30:	187b      	adds	r3, r7, r1
 8005e32:	2200      	movs	r2, #0
 8005e34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e36:	187b      	adds	r3, r7, r1
 8005e38:	2200      	movs	r2, #0
 8005e3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(COLOR_INT_GPIO_Port, &GPIO_InitStruct);
 8005e3c:	187a      	adds	r2, r7, r1
 8005e3e:	23a0      	movs	r3, #160	; 0xa0
 8005e40:	05db      	lsls	r3, r3, #23
 8005e42:	0011      	movs	r1, r2
 8005e44:	0018      	movs	r0, r3
 8005e46:	f7fb fe6b 	bl	8001b20 <HAL_GPIO_Init>

}
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	b009      	add	sp, #36	; 0x24
 8005e50:	bd90      	pop	{r4, r7, pc}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	40021000 	.word	0x40021000
 8005e58:	00001906 	.word	0x00001906
 8005e5c:	50000400 	.word	0x50000400
 8005e60:	00001916 	.word	0x00001916
 8005e64:	0000ff3c 	.word	0x0000ff3c

08005e68 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8005e6c:	4b1b      	ldr	r3, [pc, #108]	; (8005edc <MX_I2C1_Init+0x74>)
 8005e6e:	4a1c      	ldr	r2, [pc, #112]	; (8005ee0 <MX_I2C1_Init+0x78>)
 8005e70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8005e72:	4b1a      	ldr	r3, [pc, #104]	; (8005edc <MX_I2C1_Init+0x74>)
 8005e74:	4a1b      	ldr	r2, [pc, #108]	; (8005ee4 <MX_I2C1_Init+0x7c>)
 8005e76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005e78:	4b18      	ldr	r3, [pc, #96]	; (8005edc <MX_I2C1_Init+0x74>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005e7e:	4b17      	ldr	r3, [pc, #92]	; (8005edc <MX_I2C1_Init+0x74>)
 8005e80:	2201      	movs	r2, #1
 8005e82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005e84:	4b15      	ldr	r3, [pc, #84]	; (8005edc <MX_I2C1_Init+0x74>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005e8a:	4b14      	ldr	r3, [pc, #80]	; (8005edc <MX_I2C1_Init+0x74>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005e90:	4b12      	ldr	r3, [pc, #72]	; (8005edc <MX_I2C1_Init+0x74>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005e96:	4b11      	ldr	r3, [pc, #68]	; (8005edc <MX_I2C1_Init+0x74>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005e9c:	4b0f      	ldr	r3, [pc, #60]	; (8005edc <MX_I2C1_Init+0x74>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005ea2:	4b0e      	ldr	r3, [pc, #56]	; (8005edc <MX_I2C1_Init+0x74>)
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f7fb ffeb 	bl	8001e80 <HAL_I2C_Init>
 8005eaa:	1e03      	subs	r3, r0, #0
 8005eac:	d001      	beq.n	8005eb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005eae:	f000 fc87 	bl	80067c0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <MX_I2C1_Init+0x74>)
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	f7fc fc6c 	bl	8002794 <HAL_I2CEx_ConfigAnalogFilter>
 8005ebc:	1e03      	subs	r3, r0, #0
 8005ebe:	d001      	beq.n	8005ec4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005ec0:	f000 fc7e 	bl	80067c0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <MX_I2C1_Init+0x74>)
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f7fc fcaf 	bl	800282c <HAL_I2CEx_ConfigDigitalFilter>
 8005ece:	1e03      	subs	r3, r0, #0
 8005ed0:	d001      	beq.n	8005ed6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005ed2:	f000 fc75 	bl	80067c0 <Error_Handler>
  }

}
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20000094 	.word	0x20000094
 8005ee0:	40005400 	.word	0x40005400
 8005ee4:	00707cbb 	.word	0x00707cbb

08005ee8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005ee8:	b590      	push	{r4, r7, lr}
 8005eea:	b089      	sub	sp, #36	; 0x24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef0:	230c      	movs	r3, #12
 8005ef2:	18fb      	adds	r3, r7, r3
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	2314      	movs	r3, #20
 8005ef8:	001a      	movs	r2, r3
 8005efa:	2100      	movs	r1, #0
 8005efc:	f000 feb8 	bl	8006c70 <memset>
  if(i2cHandle->Instance==I2C1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a23      	ldr	r2, [pc, #140]	; (8005f94 <HAL_I2C_MspInit+0xac>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d13f      	bne.n	8005f8a <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f0a:	4b23      	ldr	r3, [pc, #140]	; (8005f98 <HAL_I2C_MspInit+0xb0>)
 8005f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0e:	4b22      	ldr	r3, [pc, #136]	; (8005f98 <HAL_I2C_MspInit+0xb0>)
 8005f10:	2102      	movs	r1, #2
 8005f12:	430a      	orrs	r2, r1
 8005f14:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f16:	4b20      	ldr	r3, [pc, #128]	; (8005f98 <HAL_I2C_MspInit+0xb0>)
 8005f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]
 8005f20:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005f22:	210c      	movs	r1, #12
 8005f24:	187b      	adds	r3, r7, r1
 8005f26:	2240      	movs	r2, #64	; 0x40
 8005f28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f2a:	187b      	adds	r3, r7, r1
 8005f2c:	2212      	movs	r2, #18
 8005f2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f30:	187b      	adds	r3, r7, r1
 8005f32:	2200      	movs	r2, #0
 8005f34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f36:	187b      	adds	r3, r7, r1
 8005f38:	2203      	movs	r2, #3
 8005f3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8005f3c:	187b      	adds	r3, r7, r1
 8005f3e:	2201      	movs	r2, #1
 8005f40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f42:	000c      	movs	r4, r1
 8005f44:	187b      	adds	r3, r7, r1
 8005f46:	4a15      	ldr	r2, [pc, #84]	; (8005f9c <HAL_I2C_MspInit+0xb4>)
 8005f48:	0019      	movs	r1, r3
 8005f4a:	0010      	movs	r0, r2
 8005f4c:	f7fb fde8 	bl	8001b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005f50:	0021      	movs	r1, r4
 8005f52:	187b      	adds	r3, r7, r1
 8005f54:	2280      	movs	r2, #128	; 0x80
 8005f56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f58:	187b      	adds	r3, r7, r1
 8005f5a:	2212      	movs	r2, #18
 8005f5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f5e:	187b      	adds	r3, r7, r1
 8005f60:	2201      	movs	r2, #1
 8005f62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f64:	187b      	adds	r3, r7, r1
 8005f66:	2203      	movs	r2, #3
 8005f68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8005f6a:	187b      	adds	r3, r7, r1
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f70:	187b      	adds	r3, r7, r1
 8005f72:	4a0a      	ldr	r2, [pc, #40]	; (8005f9c <HAL_I2C_MspInit+0xb4>)
 8005f74:	0019      	movs	r1, r3
 8005f76:	0010      	movs	r0, r2
 8005f78:	f7fb fdd2 	bl	8001b20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <HAL_I2C_MspInit+0xb0>)
 8005f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f80:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <HAL_I2C_MspInit+0xb0>)
 8005f82:	2180      	movs	r1, #128	; 0x80
 8005f84:	0389      	lsls	r1, r1, #14
 8005f86:	430a      	orrs	r2, r1
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005f8a:	46c0      	nop			; (mov r8, r8)
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	b009      	add	sp, #36	; 0x24
 8005f90:	bd90      	pop	{r4, r7, pc}
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	40005400 	.word	0x40005400
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	50000400 	.word	0x50000400

08005fa0 <_ZN8APDS9960C1Ev>:
  APDS9960(){};
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	0018      	movs	r0, r3
 8005fac:	46bd      	mov	sp, r7
 8005fae:	b002      	add	sp, #8
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <main>:
  * @brief  The application entry point
  *
  * @retval None
  */
int main(void)
{
 8005fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fb6:	b0b1      	sub	sp, #196	; 0xc4
 8005fb8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick */
  HAL_Init();
 8005fba:	f7fb fc65 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005fbe:	f000 fb81 	bl	80066c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005fc2:	f7ff fec1 	bl	8005d48 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005fc6:	f7ff ff4f 	bl	8005e68 <MX_I2C1_Init>
  MX_SPI1_Init();
 8005fca:	f000 fc6b 	bl	80068a4 <MX_SPI1_Init>
  MX_RNG_Init();
 8005fce:	f000 fc35 	bl	800683c <MX_RNG_Init>
  MX_USART1_UART_Init();
 8005fd2:	f000 fd7b 	bl	8006acc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 8005fd6:	20c8      	movs	r0, #200	; 0xc8
 8005fd8:	f7fb fcb6 	bl	8001948 <HAL_Delay>

  // Remember switch states
  GPIO_PinState sw_states_old[4];
  sw_states_old[0] = HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin);
 8005fdc:	2380      	movs	r3, #128	; 0x80
 8005fde:	015b      	lsls	r3, r3, #5
 8005fe0:	4ad3      	ldr	r2, [pc, #844]	; (8006330 <main+0x37c>)
 8005fe2:	0019      	movs	r1, r3
 8005fe4:	0010      	movs	r0, r2
 8005fe6:	f7fb ff11 	bl	8001e0c <HAL_GPIO_ReadPin>
 8005fea:	0003      	movs	r3, r0
 8005fec:	001a      	movs	r2, r3
 8005fee:	24a0      	movs	r4, #160	; 0xa0
 8005ff0:	193b      	adds	r3, r7, r4
 8005ff2:	701a      	strb	r2, [r3, #0]
  sw_states_old[1] = HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);
 8005ff4:	2380      	movs	r3, #128	; 0x80
 8005ff6:	019b      	lsls	r3, r3, #6
 8005ff8:	4acd      	ldr	r2, [pc, #820]	; (8006330 <main+0x37c>)
 8005ffa:	0019      	movs	r1, r3
 8005ffc:	0010      	movs	r0, r2
 8005ffe:	f7fb ff05 	bl	8001e0c <HAL_GPIO_ReadPin>
 8006002:	0003      	movs	r3, r0
 8006004:	001a      	movs	r2, r3
 8006006:	193b      	adds	r3, r7, r4
 8006008:	705a      	strb	r2, [r3, #1]
  sw_states_old[2] = HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);
 800600a:	2380      	movs	r3, #128	; 0x80
 800600c:	01db      	lsls	r3, r3, #7
 800600e:	4ac8      	ldr	r2, [pc, #800]	; (8006330 <main+0x37c>)
 8006010:	0019      	movs	r1, r3
 8006012:	0010      	movs	r0, r2
 8006014:	f7fb fefa 	bl	8001e0c <HAL_GPIO_ReadPin>
 8006018:	0003      	movs	r3, r0
 800601a:	001a      	movs	r2, r3
 800601c:	193b      	adds	r3, r7, r4
 800601e:	709a      	strb	r2, [r3, #2]
  sw_states_old[3] = HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin);
 8006020:	2380      	movs	r3, #128	; 0x80
 8006022:	021b      	lsls	r3, r3, #8
 8006024:	4ac2      	ldr	r2, [pc, #776]	; (8006330 <main+0x37c>)
 8006026:	0019      	movs	r1, r3
 8006028:	0010      	movs	r0, r2
 800602a:	f7fb feef 	bl	8001e0c <HAL_GPIO_ReadPin>
 800602e:	0003      	movs	r3, r0
 8006030:	001a      	movs	r2, r3
 8006032:	193b      	adds	r3, r7, r4
 8006034:	70da      	strb	r2, [r3, #3]
  GPIO_PinState sw_states_new[4];
  uint8_t uart_holdoff_max = 4;
 8006036:	21b0      	movs	r1, #176	; 0xb0
 8006038:	187b      	adds	r3, r7, r1
 800603a:	2204      	movs	r2, #4
 800603c:	701a      	strb	r2, [r3, #0]
  uint8_t uart_holdoff = uart_holdoff_max;
 800603e:	23b7      	movs	r3, #183	; 0xb7
 8006040:	18fb      	adds	r3, r7, r3
 8006042:	187a      	adds	r2, r7, r1
 8006044:	7812      	ldrb	r2, [r2, #0]
 8006046:	701a      	strb	r2, [r3, #0]
  
  // Setup and initialize Dotstars
  DotStar ring = DotStar(20, DOTSTAR_BGR);
 8006048:	2490      	movs	r4, #144	; 0x90
 800604a:	193b      	adds	r3, r7, r4
 800604c:	2206      	movs	r2, #6
 800604e:	2114      	movs	r1, #20
 8006050:	0018      	movs	r0, r3
 8006052:	f7ff fc2a 	bl	80058aa <_ZN7DotStarC1Ehh>
  ring.begin(); // Initialize pins for output
 8006056:	193b      	adds	r3, r7, r4
 8006058:	0018      	movs	r0, r3
 800605a:	f7ff fc60 	bl	800591e <_ZN7DotStar5beginEv>
  RGB_VALS rgb_off;
  rgb_off.r = 0; rgb_off.g = 0; rgb_off.b = 0;
 800605e:	218c      	movs	r1, #140	; 0x8c
 8006060:	187b      	adds	r3, r7, r1
 8006062:	2200      	movs	r2, #0
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	187b      	adds	r3, r7, r1
 8006068:	2200      	movs	r2, #0
 800606a:	705a      	strb	r2, [r3, #1]
 800606c:	187b      	adds	r3, r7, r1
 800606e:	2200      	movs	r2, #0
 8006070:	709a      	strb	r2, [r3, #2]
  ring_set_all_pixels(ring, rgb_off); // Initialize LEDs to off
 8006072:	187b      	adds	r3, r7, r1
 8006074:	193a      	adds	r2, r7, r4
 8006076:	6819      	ldr	r1, [r3, #0]
 8006078:	0010      	movs	r0, r2
 800607a:	f000 fba6 	bl	80067ca <_Z19ring_set_all_pixelsR7DotStar8RGB_VALS>
  RGB_VALS rgb_default; 
  RGB_VALS rgb_new;
  rgb_default.r = 20; rgb_default.g = 10; rgb_default.b = 180;
 800607e:	2188      	movs	r1, #136	; 0x88
 8006080:	187b      	adds	r3, r7, r1
 8006082:	2214      	movs	r2, #20
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	187b      	adds	r3, r7, r1
 8006088:	220a      	movs	r2, #10
 800608a:	705a      	strb	r2, [r3, #1]
 800608c:	187b      	adds	r3, r7, r1
 800608e:	22b4      	movs	r2, #180	; 0xb4
 8006090:	709a      	strb	r2, [r3, #2]
  ring.setBrightness(200);
 8006092:	193b      	adds	r3, r7, r4
 8006094:	21c8      	movs	r1, #200	; 0xc8
 8006096:	0018      	movs	r0, r3
 8006098:	f7ff fe45 	bl	8005d26 <_ZN7DotStar13setBrightnessEh>
  uint8_t ring_dir = 0;
 800609c:	23b6      	movs	r3, #182	; 0xb6
 800609e:	18fb      	adds	r3, r7, r3
 80060a0:	2200      	movs	r2, #0
 80060a2:	701a      	strb	r2, [r3, #0]

  // Initialize LED driver
  BarGraph bg=BarGraph(8,40);
 80060a4:	2438      	movs	r4, #56	; 0x38
 80060a6:	193b      	adds	r3, r7, r4
 80060a8:	2228      	movs	r2, #40	; 0x28
 80060aa:	2108      	movs	r1, #8
 80060ac:	0018      	movs	r0, r3
 80060ae:	f7ff fb09 	bl	80056c4 <_ZN8BarGraphC1Ehh>
  bg.begin();
 80060b2:	193b      	adds	r3, r7, r4
 80060b4:	0018      	movs	r0, r3
 80060b6:	f7ff fb33 	bl	8005720 <_ZN8BarGraph5beginEv>
  uint8_t bg_sw_old[8];
  uint8_t bg_sw_new[8];
  bg_sw_old[0] = !HAL_GPIO_ReadPin(BG_SW_0_GPIO_Port, BG_SW_0_Pin);
 80060ba:	4b9d      	ldr	r3, [pc, #628]	; (8006330 <main+0x37c>)
 80060bc:	2104      	movs	r1, #4
 80060be:	0018      	movs	r0, r3
 80060c0:	f7fb fea4 	bl	8001e0c <HAL_GPIO_ReadPin>
 80060c4:	0003      	movs	r3, r0
 80060c6:	425a      	negs	r2, r3
 80060c8:	4153      	adcs	r3, r2
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	001a      	movs	r2, r3
 80060ce:	2430      	movs	r4, #48	; 0x30
 80060d0:	193b      	adds	r3, r7, r4
 80060d2:	701a      	strb	r2, [r3, #0]
  bg_sw_old[1] = !HAL_GPIO_ReadPin(BG_SW_1_GPIO_Port, BG_SW_1_Pin);
 80060d4:	4b96      	ldr	r3, [pc, #600]	; (8006330 <main+0x37c>)
 80060d6:	2108      	movs	r1, #8
 80060d8:	0018      	movs	r0, r3
 80060da:	f7fb fe97 	bl	8001e0c <HAL_GPIO_ReadPin>
 80060de:	0003      	movs	r3, r0
 80060e0:	425a      	negs	r2, r3
 80060e2:	4153      	adcs	r3, r2
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	001a      	movs	r2, r3
 80060e8:	193b      	adds	r3, r7, r4
 80060ea:	705a      	strb	r2, [r3, #1]
  bg_sw_old[2] = !HAL_GPIO_ReadPin(BG_SW_2_GPIO_Port, BG_SW_2_Pin);
 80060ec:	4b90      	ldr	r3, [pc, #576]	; (8006330 <main+0x37c>)
 80060ee:	2110      	movs	r1, #16
 80060f0:	0018      	movs	r0, r3
 80060f2:	f7fb fe8b 	bl	8001e0c <HAL_GPIO_ReadPin>
 80060f6:	0003      	movs	r3, r0
 80060f8:	425a      	negs	r2, r3
 80060fa:	4153      	adcs	r3, r2
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	001a      	movs	r2, r3
 8006100:	193b      	adds	r3, r7, r4
 8006102:	709a      	strb	r2, [r3, #2]
  bg_sw_old[3] = !HAL_GPIO_ReadPin(BG_SW_3_GPIO_Port, BG_SW_3_Pin);
 8006104:	4b8a      	ldr	r3, [pc, #552]	; (8006330 <main+0x37c>)
 8006106:	2120      	movs	r1, #32
 8006108:	0018      	movs	r0, r3
 800610a:	f7fb fe7f 	bl	8001e0c <HAL_GPIO_ReadPin>
 800610e:	0003      	movs	r3, r0
 8006110:	425a      	negs	r2, r3
 8006112:	4153      	adcs	r3, r2
 8006114:	b2db      	uxtb	r3, r3
 8006116:	001a      	movs	r2, r3
 8006118:	193b      	adds	r3, r7, r4
 800611a:	70da      	strb	r2, [r3, #3]
  bg_sw_old[4] = !HAL_GPIO_ReadPin(BG_SW_4_GPIO_Port, BG_SW_4_Pin);
 800611c:	2380      	movs	r3, #128	; 0x80
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	4a83      	ldr	r2, [pc, #524]	; (8006330 <main+0x37c>)
 8006122:	0019      	movs	r1, r3
 8006124:	0010      	movs	r0, r2
 8006126:	f7fb fe71 	bl	8001e0c <HAL_GPIO_ReadPin>
 800612a:	0003      	movs	r3, r0
 800612c:	425a      	negs	r2, r3
 800612e:	4153      	adcs	r3, r2
 8006130:	b2db      	uxtb	r3, r3
 8006132:	001a      	movs	r2, r3
 8006134:	193b      	adds	r3, r7, r4
 8006136:	711a      	strb	r2, [r3, #4]
  bg_sw_old[5] = !HAL_GPIO_ReadPin(BG_SW_5_GPIO_Port, BG_SW_5_Pin);
 8006138:	2380      	movs	r3, #128	; 0x80
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4a7c      	ldr	r2, [pc, #496]	; (8006330 <main+0x37c>)
 800613e:	0019      	movs	r1, r3
 8006140:	0010      	movs	r0, r2
 8006142:	f7fb fe63 	bl	8001e0c <HAL_GPIO_ReadPin>
 8006146:	0003      	movs	r3, r0
 8006148:	425a      	negs	r2, r3
 800614a:	4153      	adcs	r3, r2
 800614c:	b2db      	uxtb	r3, r3
 800614e:	001a      	movs	r2, r3
 8006150:	193b      	adds	r3, r7, r4
 8006152:	715a      	strb	r2, [r3, #5]
  bg_sw_old[6] = !HAL_GPIO_ReadPin(BG_SW_6_GPIO_Port, BG_SW_6_Pin);
 8006154:	2380      	movs	r3, #128	; 0x80
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4a75      	ldr	r2, [pc, #468]	; (8006330 <main+0x37c>)
 800615a:	0019      	movs	r1, r3
 800615c:	0010      	movs	r0, r2
 800615e:	f7fb fe55 	bl	8001e0c <HAL_GPIO_ReadPin>
 8006162:	0003      	movs	r3, r0
 8006164:	425a      	negs	r2, r3
 8006166:	4153      	adcs	r3, r2
 8006168:	b2db      	uxtb	r3, r3
 800616a:	001a      	movs	r2, r3
 800616c:	193b      	adds	r3, r7, r4
 800616e:	719a      	strb	r2, [r3, #6]
  bg_sw_old[7] = !HAL_GPIO_ReadPin(BG_SW_7_GPIO_Port, BG_SW_7_Pin);
 8006170:	2380      	movs	r3, #128	; 0x80
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	4a6e      	ldr	r2, [pc, #440]	; (8006330 <main+0x37c>)
 8006176:	0019      	movs	r1, r3
 8006178:	0010      	movs	r0, r2
 800617a:	f7fb fe47 	bl	8001e0c <HAL_GPIO_ReadPin>
 800617e:	0003      	movs	r3, r0
 8006180:	425a      	negs	r2, r3
 8006182:	4153      	adcs	r3, r2
 8006184:	b2db      	uxtb	r3, r3
 8006186:	001a      	movs	r2, r3
 8006188:	193b      	adds	r3, r7, r4
 800618a:	71da      	strb	r2, [r3, #7]

  // Setup Color Sensor
  APDS9960 apds;
 800618c:	240c      	movs	r4, #12
 800618e:	193b      	adds	r3, r7, r4
 8006190:	0018      	movs	r0, r3
 8006192:	f7ff ff05 	bl	8005fa0 <_ZN8APDS9960C1Ev>
  apds.begin();
 8006196:	1938      	adds	r0, r7, r4
 8006198:	2372      	movs	r3, #114	; 0x72
 800619a:	2202      	movs	r2, #2
 800619c:	21c8      	movs	r1, #200	; 0xc8
 800619e:	f7fe fbe8 	bl	8004972 <_ZN8APDS99605beginEt15apds9960AGain_th>
  //enable color sensign mode
  apds.enableColor(true);
 80061a2:	193b      	adds	r3, r7, r4
 80061a4:	2101      	movs	r1, #1
 80061a6:	0018      	movs	r0, r3
 80061a8:	f7fe fe14 	bl	8004dd4 <_ZN8APDS996011enableColorEb>
  uint16_t r; 
  uint16_t g; 
  uint16_t b; 
  uint16_t c;
  //turn on white LED
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80061ac:	2380      	movs	r3, #128	; 0x80
 80061ae:	0159      	lsls	r1, r3, #5
 80061b0:	23a0      	movs	r3, #160	; 0xa0
 80061b2:	05db      	lsls	r3, r3, #23
 80061b4:	2201      	movs	r2, #1
 80061b6:	0018      	movs	r0, r3
 80061b8:	f7fb fe45 	bl	8001e46 <HAL_GPIO_WritePin>
  uint16_t color_find_timer_max = 500;
 80061bc:	21ae      	movs	r1, #174	; 0xae
 80061be:	187b      	adds	r3, r7, r1
 80061c0:	22fa      	movs	r2, #250	; 0xfa
 80061c2:	0052      	lsls	r2, r2, #1
 80061c4:	801a      	strh	r2, [r3, #0]
  uint16_t color_find_timer = color_find_timer_max;
 80061c6:	23b4      	movs	r3, #180	; 0xb4
 80061c8:	18fb      	adds	r3, r7, r3
 80061ca:	187a      	adds	r2, r7, r1
 80061cc:	8812      	ldrh	r2, [r2, #0]
 80061ce:	801a      	strh	r2, [r3, #0]

  HAL_Delay(500);
 80061d0:	23fa      	movs	r3, #250	; 0xfa
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	0018      	movs	r0, r3
 80061d6:	f7fb fbb7 	bl	8001948 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Check Toggle Switches
    sw_states_new[0] = HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin);
 80061da:	2380      	movs	r3, #128	; 0x80
 80061dc:	015b      	lsls	r3, r3, #5
 80061de:	4a54      	ldr	r2, [pc, #336]	; (8006330 <main+0x37c>)
 80061e0:	0019      	movs	r1, r3
 80061e2:	0010      	movs	r0, r2
 80061e4:	f7fb fe12 	bl	8001e0c <HAL_GPIO_ReadPin>
 80061e8:	0003      	movs	r3, r0
 80061ea:	001a      	movs	r2, r3
 80061ec:	249c      	movs	r4, #156	; 0x9c
 80061ee:	193b      	adds	r3, r7, r4
 80061f0:	701a      	strb	r2, [r3, #0]
    sw_states_new[1] = HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);
 80061f2:	2380      	movs	r3, #128	; 0x80
 80061f4:	019b      	lsls	r3, r3, #6
 80061f6:	4a4e      	ldr	r2, [pc, #312]	; (8006330 <main+0x37c>)
 80061f8:	0019      	movs	r1, r3
 80061fa:	0010      	movs	r0, r2
 80061fc:	f7fb fe06 	bl	8001e0c <HAL_GPIO_ReadPin>
 8006200:	0003      	movs	r3, r0
 8006202:	001a      	movs	r2, r3
 8006204:	193b      	adds	r3, r7, r4
 8006206:	705a      	strb	r2, [r3, #1]
    sw_states_new[2] = HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);
 8006208:	2380      	movs	r3, #128	; 0x80
 800620a:	01db      	lsls	r3, r3, #7
 800620c:	4a48      	ldr	r2, [pc, #288]	; (8006330 <main+0x37c>)
 800620e:	0019      	movs	r1, r3
 8006210:	0010      	movs	r0, r2
 8006212:	f7fb fdfb 	bl	8001e0c <HAL_GPIO_ReadPin>
 8006216:	0003      	movs	r3, r0
 8006218:	001a      	movs	r2, r3
 800621a:	193b      	adds	r3, r7, r4
 800621c:	709a      	strb	r2, [r3, #2]
    sw_states_new[3] = HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin);
 800621e:	2380      	movs	r3, #128	; 0x80
 8006220:	021b      	lsls	r3, r3, #8
 8006222:	4a43      	ldr	r2, [pc, #268]	; (8006330 <main+0x37c>)
 8006224:	0019      	movs	r1, r3
 8006226:	0010      	movs	r0, r2
 8006228:	f7fb fdf0 	bl	8001e0c <HAL_GPIO_ReadPin>
 800622c:	0003      	movs	r3, r0
 800622e:	001a      	movs	r2, r3
 8006230:	193b      	adds	r3, r7, r4
 8006232:	70da      	strb	r2, [r3, #3]
    HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, sw_states_new[0]);
 8006234:	193b      	adds	r3, r7, r4
 8006236:	781a      	ldrb	r2, [r3, #0]
 8006238:	23a0      	movs	r3, #160	; 0xa0
 800623a:	05db      	lsls	r3, r3, #23
 800623c:	2102      	movs	r1, #2
 800623e:	0018      	movs	r0, r3
 8006240:	f7fb fe01 	bl	8001e46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, sw_states_new[1]);
 8006244:	193b      	adds	r3, r7, r4
 8006246:	785a      	ldrb	r2, [r3, #1]
 8006248:	23a0      	movs	r3, #160	; 0xa0
 800624a:	05db      	lsls	r3, r3, #23
 800624c:	2104      	movs	r1, #4
 800624e:	0018      	movs	r0, r3
 8006250:	f7fb fdf9 	bl	8001e46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, sw_states_new[2]);
 8006254:	193b      	adds	r3, r7, r4
 8006256:	789a      	ldrb	r2, [r3, #2]
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	0059      	lsls	r1, r3, #1
 800625c:	23a0      	movs	r3, #160	; 0xa0
 800625e:	05db      	lsls	r3, r3, #23
 8006260:	0018      	movs	r0, r3
 8006262:	f7fb fdf0 	bl	8001e46 <HAL_GPIO_WritePin>
    if (uart_holdoff == 0) {
 8006266:	23b7      	movs	r3, #183	; 0xb7
 8006268:	18fb      	adds	r3, r7, r3
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d13c      	bne.n	80062ea <main+0x336>
      for (uint8_t sw_i = 0; sw_i < 4; sw_i++) {
 8006270:	1cfb      	adds	r3, r7, #3
 8006272:	2200      	movs	r2, #0
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	1cfb      	adds	r3, r7, #3
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b03      	cmp	r3, #3
 800627c:	d83d      	bhi.n	80062fa <main+0x346>
        if ((sw_states_new[sw_i] == GPIO_PIN_SET) && (sw_states_old[sw_i] == GPIO_PIN_RESET)) {
 800627e:	1cfb      	adds	r3, r7, #3
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	001a      	movs	r2, r3
 8006284:	239c      	movs	r3, #156	; 0x9c
 8006286:	18fb      	adds	r3, r7, r3
 8006288:	5c9b      	ldrb	r3, [r3, r2]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d126      	bne.n	80062dc <main+0x328>
 800628e:	1cfb      	adds	r3, r7, #3
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	001a      	movs	r2, r3
 8006294:	23a0      	movs	r3, #160	; 0xa0
 8006296:	18fb      	adds	r3, r7, r3
 8006298:	5c9b      	ldrb	r3, [r3, r2]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d11e      	bne.n	80062dc <main+0x328>
          uint8_t uart_data = sw_i;
 800629e:	23ad      	movs	r3, #173	; 0xad
 80062a0:	18fb      	adds	r3, r7, r3
 80062a2:	1cfa      	adds	r2, r7, #3
 80062a4:	7812      	ldrb	r2, [r2, #0]
 80062a6:	701a      	strb	r2, [r3, #0]
          uart_holdoff = uart_holdoff_max;
 80062a8:	23b7      	movs	r3, #183	; 0xb7
 80062aa:	18fb      	adds	r3, r7, r3
 80062ac:	22b0      	movs	r2, #176	; 0xb0
 80062ae:	18ba      	adds	r2, r7, r2
 80062b0:	7812      	ldrb	r2, [r2, #0]
 80062b2:	701a      	strb	r2, [r3, #0]
          HAL_UART_Transmit(&huart1, &sw_i, 1, HAL_MAX_DELAY);
 80062b4:	2301      	movs	r3, #1
 80062b6:	425b      	negs	r3, r3
 80062b8:	1cf9      	adds	r1, r7, #3
 80062ba:	481e      	ldr	r0, [pc, #120]	; (8006334 <main+0x380>)
 80062bc:	2201      	movs	r2, #1
 80062be:	f7fd fd4b 	bl	8003d58 <HAL_UART_Transmit>
          if (sw_i == 3) {
 80062c2:	1cfb      	adds	r3, r7, #3
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d116      	bne.n	80062f8 <main+0x344>
            ring_dir = !ring_dir;
 80062ca:	21b6      	movs	r1, #182	; 0xb6
 80062cc:	187b      	adds	r3, r7, r1
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	425a      	negs	r2, r3
 80062d2:	4153      	adcs	r3, r2
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	187b      	adds	r3, r7, r1
 80062d8:	701a      	strb	r2, [r3, #0]
          }
          break;
 80062da:	e00d      	b.n	80062f8 <main+0x344>
      for (uint8_t sw_i = 0; sw_i < 4; sw_i++) {
 80062dc:	1cfb      	adds	r3, r7, #3
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	3301      	adds	r3, #1
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	1cfb      	adds	r3, r7, #3
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	e7c5      	b.n	8006276 <main+0x2c2>
        }
      }
    } else {
      uart_holdoff--;
 80062ea:	21b7      	movs	r1, #183	; 0xb7
 80062ec:	187b      	adds	r3, r7, r1
 80062ee:	781a      	ldrb	r2, [r3, #0]
 80062f0:	187b      	adds	r3, r7, r1
 80062f2:	3a01      	subs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	e000      	b.n	80062fa <main+0x346>
          break;
 80062f8:	46c0      	nop			; (mov r8, r8)
    }
    for (uint8_t sw_i = 0; sw_i < 4; sw_i++) {
 80062fa:	23b3      	movs	r3, #179	; 0xb3
 80062fc:	18fb      	adds	r3, r7, r3
 80062fe:	2200      	movs	r2, #0
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	23b3      	movs	r3, #179	; 0xb3
 8006304:	18fb      	adds	r3, r7, r3
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b03      	cmp	r3, #3
 800630a:	d815      	bhi.n	8006338 <main+0x384>
      sw_states_old[sw_i] = sw_states_new[sw_i];
 800630c:	20b3      	movs	r0, #179	; 0xb3
 800630e:	183b      	adds	r3, r7, r0
 8006310:	781a      	ldrb	r2, [r3, #0]
 8006312:	183b      	adds	r3, r7, r0
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	219c      	movs	r1, #156	; 0x9c
 8006318:	1879      	adds	r1, r7, r1
 800631a:	5c89      	ldrb	r1, [r1, r2]
 800631c:	22a0      	movs	r2, #160	; 0xa0
 800631e:	18ba      	adds	r2, r7, r2
 8006320:	54d1      	strb	r1, [r2, r3]
    for (uint8_t sw_i = 0; sw_i < 4; sw_i++) {
 8006322:	183b      	adds	r3, r7, r0
 8006324:	781a      	ldrb	r2, [r3, #0]
 8006326:	183b      	adds	r3, r7, r0
 8006328:	3201      	adds	r2, #1
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	e7e9      	b.n	8006302 <main+0x34e>
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	50000400 	.word	0x50000400
 8006334:	20000148 	.word	0x20000148
    } 


    // read bar graph switch inputs and update graph 
    bg_sw_new[0] = !HAL_GPIO_ReadPin(BG_SW_0_GPIO_Port, BG_SW_0_Pin);
 8006338:	4bdc      	ldr	r3, [pc, #880]	; (80066ac <main+0x6f8>)
 800633a:	2104      	movs	r1, #4
 800633c:	0018      	movs	r0, r3
 800633e:	f7fb fd65 	bl	8001e0c <HAL_GPIO_ReadPin>
 8006342:	0003      	movs	r3, r0
 8006344:	425a      	negs	r2, r3
 8006346:	4153      	adcs	r3, r2
 8006348:	b2db      	uxtb	r3, r3
 800634a:	001a      	movs	r2, r3
 800634c:	2428      	movs	r4, #40	; 0x28
 800634e:	193b      	adds	r3, r7, r4
 8006350:	701a      	strb	r2, [r3, #0]
    bg_sw_new[1] = !HAL_GPIO_ReadPin(BG_SW_1_GPIO_Port, BG_SW_1_Pin);
 8006352:	4bd6      	ldr	r3, [pc, #856]	; (80066ac <main+0x6f8>)
 8006354:	2108      	movs	r1, #8
 8006356:	0018      	movs	r0, r3
 8006358:	f7fb fd58 	bl	8001e0c <HAL_GPIO_ReadPin>
 800635c:	0003      	movs	r3, r0
 800635e:	425a      	negs	r2, r3
 8006360:	4153      	adcs	r3, r2
 8006362:	b2db      	uxtb	r3, r3
 8006364:	001a      	movs	r2, r3
 8006366:	193b      	adds	r3, r7, r4
 8006368:	705a      	strb	r2, [r3, #1]
    bg_sw_new[2] = !HAL_GPIO_ReadPin(BG_SW_2_GPIO_Port, BG_SW_2_Pin);
 800636a:	4bd0      	ldr	r3, [pc, #832]	; (80066ac <main+0x6f8>)
 800636c:	2110      	movs	r1, #16
 800636e:	0018      	movs	r0, r3
 8006370:	f7fb fd4c 	bl	8001e0c <HAL_GPIO_ReadPin>
 8006374:	0003      	movs	r3, r0
 8006376:	425a      	negs	r2, r3
 8006378:	4153      	adcs	r3, r2
 800637a:	b2db      	uxtb	r3, r3
 800637c:	001a      	movs	r2, r3
 800637e:	193b      	adds	r3, r7, r4
 8006380:	709a      	strb	r2, [r3, #2]
    bg_sw_new[3] = !HAL_GPIO_ReadPin(BG_SW_3_GPIO_Port, BG_SW_3_Pin);
 8006382:	4bca      	ldr	r3, [pc, #808]	; (80066ac <main+0x6f8>)
 8006384:	2120      	movs	r1, #32
 8006386:	0018      	movs	r0, r3
 8006388:	f7fb fd40 	bl	8001e0c <HAL_GPIO_ReadPin>
 800638c:	0003      	movs	r3, r0
 800638e:	425a      	negs	r2, r3
 8006390:	4153      	adcs	r3, r2
 8006392:	b2db      	uxtb	r3, r3
 8006394:	001a      	movs	r2, r3
 8006396:	193b      	adds	r3, r7, r4
 8006398:	70da      	strb	r2, [r3, #3]
    bg_sw_new[4] = !HAL_GPIO_ReadPin(BG_SW_4_GPIO_Port, BG_SW_4_Pin);
 800639a:	2380      	movs	r3, #128	; 0x80
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	4ac3      	ldr	r2, [pc, #780]	; (80066ac <main+0x6f8>)
 80063a0:	0019      	movs	r1, r3
 80063a2:	0010      	movs	r0, r2
 80063a4:	f7fb fd32 	bl	8001e0c <HAL_GPIO_ReadPin>
 80063a8:	0003      	movs	r3, r0
 80063aa:	425a      	negs	r2, r3
 80063ac:	4153      	adcs	r3, r2
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	001a      	movs	r2, r3
 80063b2:	193b      	adds	r3, r7, r4
 80063b4:	711a      	strb	r2, [r3, #4]
    bg_sw_new[5] = !HAL_GPIO_ReadPin(BG_SW_5_GPIO_Port, BG_SW_5_Pin);
 80063b6:	2380      	movs	r3, #128	; 0x80
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4abc      	ldr	r2, [pc, #752]	; (80066ac <main+0x6f8>)
 80063bc:	0019      	movs	r1, r3
 80063be:	0010      	movs	r0, r2
 80063c0:	f7fb fd24 	bl	8001e0c <HAL_GPIO_ReadPin>
 80063c4:	0003      	movs	r3, r0
 80063c6:	425a      	negs	r2, r3
 80063c8:	4153      	adcs	r3, r2
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	001a      	movs	r2, r3
 80063ce:	193b      	adds	r3, r7, r4
 80063d0:	715a      	strb	r2, [r3, #5]
    bg_sw_new[6] = !HAL_GPIO_ReadPin(BG_SW_6_GPIO_Port, BG_SW_6_Pin);
 80063d2:	2380      	movs	r3, #128	; 0x80
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	4ab5      	ldr	r2, [pc, #724]	; (80066ac <main+0x6f8>)
 80063d8:	0019      	movs	r1, r3
 80063da:	0010      	movs	r0, r2
 80063dc:	f7fb fd16 	bl	8001e0c <HAL_GPIO_ReadPin>
 80063e0:	0003      	movs	r3, r0
 80063e2:	425a      	negs	r2, r3
 80063e4:	4153      	adcs	r3, r2
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	001a      	movs	r2, r3
 80063ea:	193b      	adds	r3, r7, r4
 80063ec:	719a      	strb	r2, [r3, #6]
    bg_sw_new[7] = !HAL_GPIO_ReadPin(BG_SW_7_GPIO_Port, BG_SW_7_Pin);
 80063ee:	2380      	movs	r3, #128	; 0x80
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	4aae      	ldr	r2, [pc, #696]	; (80066ac <main+0x6f8>)
 80063f4:	0019      	movs	r1, r3
 80063f6:	0010      	movs	r0, r2
 80063f8:	f7fb fd08 	bl	8001e0c <HAL_GPIO_ReadPin>
 80063fc:	0003      	movs	r3, r0
 80063fe:	425a      	negs	r2, r3
 8006400:	4153      	adcs	r3, r2
 8006402:	b2db      	uxtb	r3, r3
 8006404:	001a      	movs	r2, r3
 8006406:	193b      	adds	r3, r7, r4
 8006408:	71da      	strb	r2, [r3, #7]
    bg.update(&bg_sw_new[0]);
 800640a:	193a      	adds	r2, r7, r4
 800640c:	2338      	movs	r3, #56	; 0x38
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	0011      	movs	r1, r2
 8006412:	0018      	movs	r0, r3
 8006414:	f7ff f9be 	bl	8005794 <_ZN8BarGraph6updateEPh>
    for (uint8_t i = 0; i < 8; i++) {
 8006418:	23b2      	movs	r3, #178	; 0xb2
 800641a:	18fb      	adds	r3, r7, r3
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	23b2      	movs	r3, #178	; 0xb2
 8006422:	18fb      	adds	r3, r7, r3
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b07      	cmp	r3, #7
 8006428:	d82a      	bhi.n	8006480 <main+0x4cc>
      if (bg_sw_new[i] != bg_sw_old[i]) {
 800642a:	21b2      	movs	r1, #178	; 0xb2
 800642c:	187b      	adds	r3, r7, r1
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2228      	movs	r2, #40	; 0x28
 8006432:	18ba      	adds	r2, r7, r2
 8006434:	5cd2      	ldrb	r2, [r2, r3]
 8006436:	187b      	adds	r3, r7, r1
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2130      	movs	r1, #48	; 0x30
 800643c:	1879      	adds	r1, r7, r1
 800643e:	5ccb      	ldrb	r3, [r1, r3]
 8006440:	429a      	cmp	r2, r3
 8006442:	d015      	beq.n	8006470 <main+0x4bc>
        if (uart_holdoff == 0) {
 8006444:	23b7      	movs	r3, #183	; 0xb7
 8006446:	18fb      	adds	r3, r7, r3
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d117      	bne.n	800647e <main+0x4ca>
          uint8_t send_data = 4;
 800644e:	1cbb      	adds	r3, r7, #2
 8006450:	2204      	movs	r2, #4
 8006452:	701a      	strb	r2, [r3, #0]
          HAL_UART_Transmit(&huart1, &send_data, 1, HAL_MAX_DELAY);
 8006454:	2301      	movs	r3, #1
 8006456:	425b      	negs	r3, r3
 8006458:	1cb9      	adds	r1, r7, #2
 800645a:	4895      	ldr	r0, [pc, #596]	; (80066b0 <main+0x6fc>)
 800645c:	2201      	movs	r2, #1
 800645e:	f7fd fc7b 	bl	8003d58 <HAL_UART_Transmit>
          uart_holdoff = uart_holdoff_max;
 8006462:	23b7      	movs	r3, #183	; 0xb7
 8006464:	18fb      	adds	r3, r7, r3
 8006466:	22b0      	movs	r2, #176	; 0xb0
 8006468:	18ba      	adds	r2, r7, r2
 800646a:	7812      	ldrb	r2, [r2, #0]
 800646c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800646e:	e006      	b.n	800647e <main+0x4ca>
    for (uint8_t i = 0; i < 8; i++) {
 8006470:	21b2      	movs	r1, #178	; 0xb2
 8006472:	187b      	adds	r3, r7, r1
 8006474:	781a      	ldrb	r2, [r3, #0]
 8006476:	187b      	adds	r3, r7, r1
 8006478:	3201      	adds	r2, #1
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	e7d0      	b.n	8006420 <main+0x46c>
        break;
 800647e:	46c0      	nop			; (mov r8, r8)
      } 
    }
    for (uint8_t i = 0; i < 8; i++) {
 8006480:	23b1      	movs	r3, #177	; 0xb1
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	2200      	movs	r2, #0
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	23b1      	movs	r3, #177	; 0xb1
 800648a:	18fb      	adds	r3, r7, r3
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b07      	cmp	r3, #7
 8006490:	d810      	bhi.n	80064b4 <main+0x500>
      bg_sw_old[i] = bg_sw_new[i];
 8006492:	20b1      	movs	r0, #177	; 0xb1
 8006494:	183b      	adds	r3, r7, r0
 8006496:	781a      	ldrb	r2, [r3, #0]
 8006498:	183b      	adds	r3, r7, r0
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2128      	movs	r1, #40	; 0x28
 800649e:	1879      	adds	r1, r7, r1
 80064a0:	5c89      	ldrb	r1, [r1, r2]
 80064a2:	2230      	movs	r2, #48	; 0x30
 80064a4:	18ba      	adds	r2, r7, r2
 80064a6:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < 8; i++) {
 80064a8:	183b      	adds	r3, r7, r0
 80064aa:	781a      	ldrb	r2, [r3, #0]
 80064ac:	183b      	adds	r3, r7, r0
 80064ae:	3201      	adds	r2, #1
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	e7e9      	b.n	8006488 <main+0x4d4>
    }
    
    
    // Get color sensor data
    apds.getColorData(&r, &g, &b, &c);
 80064b4:	1dbc      	adds	r4, r7, #6
 80064b6:	2508      	movs	r5, #8
 80064b8:	197a      	adds	r2, r7, r5
 80064ba:	260a      	movs	r6, #10
 80064bc:	19b9      	adds	r1, r7, r6
 80064be:	230c      	movs	r3, #12
 80064c0:	18f8      	adds	r0, r7, r3
 80064c2:	1d3b      	adds	r3, r7, #4
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	0023      	movs	r3, r4
 80064c8:	f7fe fca8 	bl	8004e1c <_ZN8APDS996012getColorDataEPtS0_S0_S0_>
    uint32_t color_total = r + g + b + c;
 80064cc:	19bb      	adds	r3, r7, r6
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	001a      	movs	r2, r3
 80064d2:	197b      	adds	r3, r7, r5
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	18d3      	adds	r3, r2, r3
 80064d8:	1dba      	adds	r2, r7, #6
 80064da:	8812      	ldrh	r2, [r2, #0]
 80064dc:	189b      	adds	r3, r3, r2
 80064de:	1d3a      	adds	r2, r7, #4
 80064e0:	8812      	ldrh	r2, [r2, #0]
 80064e2:	189b      	adds	r3, r3, r2
 80064e4:	22a8      	movs	r2, #168	; 0xa8
 80064e6:	18b9      	adds	r1, r7, r2
 80064e8:	600b      	str	r3, [r1, #0]
    if (color_total > 39000) {
 80064ea:	18bb      	adds	r3, r7, r2
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a71      	ldr	r2, [pc, #452]	; (80066b4 <main+0x700>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d800      	bhi.n	80064f6 <main+0x542>
 80064f4:	e08d      	b.n	8006612 <main+0x65e>
      g = g - 3500; //Adjust for offset from blue PCB 
 80064f6:	2008      	movs	r0, #8
 80064f8:	183b      	adds	r3, r7, r0
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	4a6e      	ldr	r2, [pc, #440]	; (80066b8 <main+0x704>)
 80064fe:	4694      	mov	ip, r2
 8006500:	4463      	add	r3, ip
 8006502:	b29a      	uxth	r2, r3
 8006504:	183b      	adds	r3, r7, r0
 8006506:	801a      	strh	r2, [r3, #0]
      b = b - 9500; //Adjust for offset from blue PCB
 8006508:	1dbb      	adds	r3, r7, #6
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	4a6b      	ldr	r2, [pc, #428]	; (80066bc <main+0x708>)
 800650e:	4694      	mov	ip, r2
 8006510:	4463      	add	r3, ip
 8006512:	b29a      	uxth	r2, r3
 8006514:	1dbb      	adds	r3, r7, #6
 8006516:	801a      	strh	r2, [r3, #0]
      color_t color;
      color = apds.colorSort(r, g, b);
 8006518:	230a      	movs	r3, #10
 800651a:	18fb      	adds	r3, r7, r3
 800651c:	8819      	ldrh	r1, [r3, #0]
 800651e:	183b      	adds	r3, r7, r0
 8006520:	881a      	ldrh	r2, [r3, #0]
 8006522:	1dbb      	adds	r3, r7, #6
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	25a7      	movs	r5, #167	; 0xa7
 8006528:	197c      	adds	r4, r7, r5
 800652a:	200c      	movs	r0, #12
 800652c:	1838      	adds	r0, r7, r0
 800652e:	f7fe fd91 	bl	8005054 <_ZN8APDS99609colorSortEttt>
 8006532:	0003      	movs	r3, r0
 8006534:	7023      	strb	r3, [r4, #0]
      if (color == RED) {
 8006536:	197b      	adds	r3, r7, r5
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <main+0x5a0>
        rgb_new.r = 180;
 800653e:	2184      	movs	r1, #132	; 0x84
 8006540:	187b      	adds	r3, r7, r1
 8006542:	22b4      	movs	r2, #180	; 0xb4
 8006544:	701a      	strb	r2, [r3, #0]
        rgb_new.g = 0;
 8006546:	187b      	adds	r3, r7, r1
 8006548:	2200      	movs	r2, #0
 800654a:	705a      	strb	r2, [r3, #1]
        rgb_new.b = 0;
 800654c:	187b      	adds	r3, r7, r1
 800654e:	2200      	movs	r2, #0
 8006550:	709a      	strb	r2, [r3, #2]
 8006552:	e05e      	b.n	8006612 <main+0x65e>
      } else if (color == ORANGE) {
 8006554:	23a7      	movs	r3, #167	; 0xa7
 8006556:	18fb      	adds	r3, r7, r3
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b06      	cmp	r3, #6
 800655c:	d10a      	bne.n	8006574 <main+0x5c0>
        rgb_new.r = 180;
 800655e:	2184      	movs	r1, #132	; 0x84
 8006560:	187b      	adds	r3, r7, r1
 8006562:	22b4      	movs	r2, #180	; 0xb4
 8006564:	701a      	strb	r2, [r3, #0]
        rgb_new.g = 100;
 8006566:	187b      	adds	r3, r7, r1
 8006568:	2264      	movs	r2, #100	; 0x64
 800656a:	705a      	strb	r2, [r3, #1]
        rgb_new.b = 0;
 800656c:	187b      	adds	r3, r7, r1
 800656e:	2200      	movs	r2, #0
 8006570:	709a      	strb	r2, [r3, #2]
 8006572:	e04e      	b.n	8006612 <main+0x65e>
      } else if (color == BLUE) {
 8006574:	23a7      	movs	r3, #167	; 0xa7
 8006576:	18fb      	adds	r3, r7, r3
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	2b02      	cmp	r3, #2
 800657c:	d10a      	bne.n	8006594 <main+0x5e0>
        rgb_new.r = 0;
 800657e:	2184      	movs	r1, #132	; 0x84
 8006580:	187b      	adds	r3, r7, r1
 8006582:	2200      	movs	r2, #0
 8006584:	701a      	strb	r2, [r3, #0]
        rgb_new.g = 0;
 8006586:	187b      	adds	r3, r7, r1
 8006588:	2200      	movs	r2, #0
 800658a:	705a      	strb	r2, [r3, #1]
        rgb_new.b = 180;
 800658c:	187b      	adds	r3, r7, r1
 800658e:	22b4      	movs	r2, #180	; 0xb4
 8006590:	709a      	strb	r2, [r3, #2]
 8006592:	e03e      	b.n	8006612 <main+0x65e>
      } else if (color == GREEN) {
 8006594:	23a7      	movs	r3, #167	; 0xa7
 8006596:	18fb      	adds	r3, r7, r3
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d10a      	bne.n	80065b4 <main+0x600>
        rgb_new.r = 0;
 800659e:	2184      	movs	r1, #132	; 0x84
 80065a0:	187b      	adds	r3, r7, r1
 80065a2:	2200      	movs	r2, #0
 80065a4:	701a      	strb	r2, [r3, #0]
        rgb_new.g = 180;
 80065a6:	187b      	adds	r3, r7, r1
 80065a8:	22b4      	movs	r2, #180	; 0xb4
 80065aa:	705a      	strb	r2, [r3, #1]
        rgb_new.b = 0;
 80065ac:	187b      	adds	r3, r7, r1
 80065ae:	2200      	movs	r2, #0
 80065b0:	709a      	strb	r2, [r3, #2]
 80065b2:	e02e      	b.n	8006612 <main+0x65e>
      } else if (color == PINK) {
 80065b4:	23a7      	movs	r3, #167	; 0xa7
 80065b6:	18fb      	adds	r3, r7, r3
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b05      	cmp	r3, #5
 80065bc:	d10a      	bne.n	80065d4 <main+0x620>
        rgb_new.r = 180;
 80065be:	2184      	movs	r1, #132	; 0x84
 80065c0:	187b      	adds	r3, r7, r1
 80065c2:	22b4      	movs	r2, #180	; 0xb4
 80065c4:	701a      	strb	r2, [r3, #0]
        rgb_new.g = 10;
 80065c6:	187b      	adds	r3, r7, r1
 80065c8:	220a      	movs	r2, #10
 80065ca:	705a      	strb	r2, [r3, #1]
        rgb_new.b = 80;
 80065cc:	187b      	adds	r3, r7, r1
 80065ce:	2250      	movs	r2, #80	; 0x50
 80065d0:	709a      	strb	r2, [r3, #2]
 80065d2:	e01e      	b.n	8006612 <main+0x65e>
      } else if (color == PURPLE) {
 80065d4:	23a7      	movs	r3, #167	; 0xa7
 80065d6:	18fb      	adds	r3, r7, r3
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d10a      	bne.n	80065f4 <main+0x640>
        rgb_new.r = 120;
 80065de:	2184      	movs	r1, #132	; 0x84
 80065e0:	187b      	adds	r3, r7, r1
 80065e2:	2278      	movs	r2, #120	; 0x78
 80065e4:	701a      	strb	r2, [r3, #0]
        rgb_new.g = 10;
 80065e6:	187b      	adds	r3, r7, r1
 80065e8:	220a      	movs	r2, #10
 80065ea:	705a      	strb	r2, [r3, #1]
        rgb_new.b = 180;
 80065ec:	187b      	adds	r3, r7, r1
 80065ee:	22b4      	movs	r2, #180	; 0xb4
 80065f0:	709a      	strb	r2, [r3, #2]
 80065f2:	e00e      	b.n	8006612 <main+0x65e>
      } else if (color == YELLOW) {
 80065f4:	23a7      	movs	r3, #167	; 0xa7
 80065f6:	18fb      	adds	r3, r7, r3
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	d109      	bne.n	8006612 <main+0x65e>
        rgb_new.r = 180;
 80065fe:	2184      	movs	r1, #132	; 0x84
 8006600:	187b      	adds	r3, r7, r1
 8006602:	22b4      	movs	r2, #180	; 0xb4
 8006604:	701a      	strb	r2, [r3, #0]
        rgb_new.g = 140;
 8006606:	187b      	adds	r3, r7, r1
 8006608:	228c      	movs	r2, #140	; 0x8c
 800660a:	705a      	strb	r2, [r3, #1]
        rgb_new.b = 0;
 800660c:	187b      	adds	r3, r7, r1
 800660e:	2200      	movs	r2, #0
 8006610:	709a      	strb	r2, [r3, #2]
      }
    }

    // Increment/decrement LED ring
    if (ring_dir == 0) {
 8006612:	23b6      	movs	r3, #182	; 0xb6
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d108      	bne.n	800662e <main+0x67a>
      ring.incrRing(rgb_new);
 800661c:	2384      	movs	r3, #132	; 0x84
 800661e:	18fb      	adds	r3, r7, r3
 8006620:	2290      	movs	r2, #144	; 0x90
 8006622:	18ba      	adds	r2, r7, r2
 8006624:	6819      	ldr	r1, [r3, #0]
 8006626:	0010      	movs	r0, r2
 8006628:	f7ff fac4 	bl	8005bb4 <_ZN7DotStar8incrRingE8RGB_VALS>
 800662c:	e007      	b.n	800663e <main+0x68a>
    } else {
      ring.decrRing(rgb_new);
 800662e:	2384      	movs	r3, #132	; 0x84
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	2290      	movs	r2, #144	; 0x90
 8006634:	18ba      	adds	r2, r7, r2
 8006636:	6819      	ldr	r1, [r3, #0]
 8006638:	0010      	movs	r0, r2
 800663a:	f7ff faf1 	bl	8005c20 <_ZN7DotStar8decrRingE8RGB_VALS>
    }

    if (color_find_timer == 0) {
 800663e:	23b4      	movs	r3, #180	; 0xb4
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d127      	bne.n	8006698 <main+0x6e4>
      if (uart_holdoff == 0) {
 8006648:	23b7      	movs	r3, #183	; 0xb7
 800664a:	18fb      	adds	r3, r7, r3
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d128      	bne.n	80066a4 <main+0x6f0>
        uint8_t color_find = (HAL_RNG_GetRandomNumber(&hrng) % 7) + 5;
 8006652:	4b1b      	ldr	r3, [pc, #108]	; (80066c0 <main+0x70c>)
 8006654:	0018      	movs	r0, r3
 8006656:	f7fd f8a2 	bl	800379e <HAL_RNG_GetRandomNumber>
 800665a:	0003      	movs	r3, r0
 800665c:	2107      	movs	r1, #7
 800665e:	0018      	movs	r0, r3
 8006660:	f7f9 fdd8 	bl	8000214 <__aeabi_uidivmod>
 8006664:	000b      	movs	r3, r1
 8006666:	b2db      	uxtb	r3, r3
 8006668:	3305      	adds	r3, #5
 800666a:	b2da      	uxtb	r2, r3
 800666c:	1c7b      	adds	r3, r7, #1
 800666e:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, &color_find, 1, HAL_MAX_DELAY);
 8006670:	2301      	movs	r3, #1
 8006672:	425b      	negs	r3, r3
 8006674:	1c79      	adds	r1, r7, #1
 8006676:	480e      	ldr	r0, [pc, #56]	; (80066b0 <main+0x6fc>)
 8006678:	2201      	movs	r2, #1
 800667a:	f7fd fb6d 	bl	8003d58 <HAL_UART_Transmit>
        uart_holdoff = uart_holdoff_max;
 800667e:	23b7      	movs	r3, #183	; 0xb7
 8006680:	18fb      	adds	r3, r7, r3
 8006682:	22b0      	movs	r2, #176	; 0xb0
 8006684:	18ba      	adds	r2, r7, r2
 8006686:	7812      	ldrb	r2, [r2, #0]
 8006688:	701a      	strb	r2, [r3, #0]
        color_find_timer = color_find_timer_max;
 800668a:	23b4      	movs	r3, #180	; 0xb4
 800668c:	18fb      	adds	r3, r7, r3
 800668e:	22ae      	movs	r2, #174	; 0xae
 8006690:	18ba      	adds	r2, r7, r2
 8006692:	8812      	ldrh	r2, [r2, #0]
 8006694:	801a      	strh	r2, [r3, #0]
 8006696:	e005      	b.n	80066a4 <main+0x6f0>
      }
    } else {
      color_find_timer--;
 8006698:	21b4      	movs	r1, #180	; 0xb4
 800669a:	187b      	adds	r3, r7, r1
 800669c:	881a      	ldrh	r2, [r3, #0]
 800669e:	187b      	adds	r3, r7, r1
 80066a0:	3a01      	subs	r2, #1
 80066a2:	801a      	strh	r2, [r3, #0]
    }

    HAL_Delay(15);
 80066a4:	200f      	movs	r0, #15
 80066a6:	f7fb f94f 	bl	8001948 <HAL_Delay>
    
  }
 80066aa:	e596      	b.n	80061da <main+0x226>
 80066ac:	50000400 	.word	0x50000400
 80066b0:	20000148 	.word	0x20000148
 80066b4:	00009858 	.word	0x00009858
 80066b8:	fffff254 	.word	0xfffff254
 80066bc:	ffffdae4 	.word	0xffffdae4
 80066c0:	200000e0 	.word	0x200000e0

080066c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b09c      	sub	sp, #112	; 0x70
 80066c8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  
    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80066ca:	4b3b      	ldr	r3, [pc, #236]	; (80067b8 <_Z18SystemClock_Configv+0xf4>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a3b      	ldr	r2, [pc, #236]	; (80067bc <_Z18SystemClock_Configv+0xf8>)
 80066d0:	401a      	ands	r2, r3
 80066d2:	4b39      	ldr	r3, [pc, #228]	; (80067b8 <_Z18SystemClock_Configv+0xf4>)
 80066d4:	2180      	movs	r1, #128	; 0x80
 80066d6:	0109      	lsls	r1, r1, #4
 80066d8:	430a      	orrs	r2, r1
 80066da:	601a      	str	r2, [r3, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80066dc:	2138      	movs	r1, #56	; 0x38
 80066de:	187b      	adds	r3, r7, r1
 80066e0:	2202      	movs	r2, #2
 80066e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80066e4:	187b      	adds	r3, r7, r1
 80066e6:	2201      	movs	r2, #1
 80066e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80066ea:	187b      	adds	r3, r7, r1
 80066ec:	2210      	movs	r2, #16
 80066ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80066f0:	187b      	adds	r3, r7, r1
 80066f2:	2202      	movs	r2, #2
 80066f4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80066f6:	187b      	adds	r3, r7, r1
 80066f8:	2200      	movs	r2, #0
 80066fa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80066fc:	187b      	adds	r3, r7, r1
 80066fe:	2280      	movs	r2, #128	; 0x80
 8006700:	02d2      	lsls	r2, r2, #11
 8006702:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8006704:	187b      	adds	r3, r7, r1
 8006706:	2280      	movs	r2, #128	; 0x80
 8006708:	03d2      	lsls	r2, r2, #15
 800670a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800670c:	187b      	adds	r3, r7, r1
 800670e:	0018      	movs	r0, r3
 8006710:	f7fc f8d8 	bl	80028c4 <HAL_RCC_OscConfig>
 8006714:	0003      	movs	r3, r0
 8006716:	1e5a      	subs	r2, r3, #1
 8006718:	4193      	sbcs	r3, r2
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <_Z18SystemClock_Configv+0x60>
  {
	  Error_Handler();
 8006720:	f000 f84e 	bl	80067c0 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006724:	2124      	movs	r1, #36	; 0x24
 8006726:	187b      	adds	r3, r7, r1
 8006728:	220f      	movs	r2, #15
 800672a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800672c:	187b      	adds	r3, r7, r1
 800672e:	2203      	movs	r2, #3
 8006730:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006732:	187b      	adds	r3, r7, r1
 8006734:	2200      	movs	r2, #0
 8006736:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006738:	187b      	adds	r3, r7, r1
 800673a:	2200      	movs	r2, #0
 800673c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800673e:	187b      	adds	r3, r7, r1
 8006740:	2200      	movs	r2, #0
 8006742:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006744:	187b      	adds	r3, r7, r1
 8006746:	2101      	movs	r1, #1
 8006748:	0018      	movs	r0, r3
 800674a:	f7fc fc7b 	bl	8003044 <HAL_RCC_ClockConfig>
 800674e:	0003      	movs	r3, r0
 8006750:	1e5a      	subs	r2, r3, #1
 8006752:	4193      	sbcs	r3, r2
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <_Z18SystemClock_Configv+0x9a>
  {
	  Error_Handler();
 800675a:	f000 f831 	bl	80067c0 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800675e:	1d3b      	adds	r3, r7, #4
 8006760:	2208      	movs	r2, #8
 8006762:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8006764:	1d3b      	adds	r3, r7, #4
 8006766:	2280      	movs	r2, #128	; 0x80
 8006768:	0192      	lsls	r2, r2, #6
 800676a:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800676c:	1d3b      	adds	r3, r7, #4
 800676e:	0018      	movs	r0, r3
 8006770:	f7fc fe4c 	bl	800340c <HAL_RCCEx_PeriphCLKConfig>
 8006774:	0003      	movs	r3, r0
 8006776:	1e5a      	subs	r2, r3, #1
 8006778:	4193      	sbcs	r3, r2
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <_Z18SystemClock_Configv+0xc0>
  {
	  Error_Handler();
 8006780:	f000 f81e 	bl	80067c0 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8006784:	f7fc fe0c 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 8006788:	0002      	movs	r2, r0
 800678a:	23fa      	movs	r3, #250	; 0xfa
 800678c:	0099      	lsls	r1, r3, #2
 800678e:	0010      	movs	r0, r2
 8006790:	f7f9 fcba 	bl	8000108 <__udivsi3>
 8006794:	0003      	movs	r3, r0
 8006796:	0018      	movs	r0, r3
 8006798:	f7fb f99b 	bl	8001ad2 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800679c:	2004      	movs	r0, #4
 800679e:	f7fb f9a5 	bl	8001aec <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80067a2:	2301      	movs	r3, #1
 80067a4:	425b      	negs	r3, r3
 80067a6:	2200      	movs	r2, #0
 80067a8:	2100      	movs	r1, #0
 80067aa:	0018      	movs	r0, r3
 80067ac:	f7fb f97c 	bl	8001aa8 <HAL_NVIC_SetPriority>
}
 80067b0:	46c0      	nop			; (mov r8, r8)
 80067b2:	46bd      	mov	sp, r7
 80067b4:	b01c      	add	sp, #112	; 0x70
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	40007000 	.word	0x40007000
 80067bc:	ffffe7ff 	.word	0xffffe7ff

080067c0 <Error_Handler>:

/* USER CODE BEGIN 4 */
void Error_Handler(void){
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
}
 80067c4:	46c0      	nop			; (mov r8, r8)
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <_Z19ring_set_all_pixelsR7DotStar8RGB_VALS>:
        }
    }
    return;
}

void ring_set_all_pixels(DotStar& ring, RGB_VALS rgb) {
 80067ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067cc:	b087      	sub	sp, #28
 80067ce:	af02      	add	r7, sp, #8
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	003b      	movs	r3, r7
 80067d4:	6019      	str	r1, [r3, #0]
    uint8_t ring_size = ring.numPixels();
 80067d6:	230e      	movs	r3, #14
 80067d8:	18fc      	adds	r4, r7, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	0018      	movs	r0, r3
 80067de:	f7ff fa98 	bl	8005d12 <_ZN7DotStar9numPixelsEv>
 80067e2:	0003      	movs	r3, r0
 80067e4:	7023      	strb	r3, [r4, #0]
    for (uint8_t j = 0; j < ring_size; j++)
 80067e6:	230f      	movs	r3, #15
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	2200      	movs	r2, #0
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	230f      	movs	r3, #15
 80067f0:	18fa      	adds	r2, r7, r3
 80067f2:	230e      	movs	r3, #14
 80067f4:	18fb      	adds	r3, r7, r3
 80067f6:	7812      	ldrb	r2, [r2, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d216      	bcs.n	800682c <_Z19ring_set_all_pixelsR7DotStar8RGB_VALS+0x62>
    {
        ring.setPixelColor(j, rgb.r, rgb.g, rgb.b);
 80067fe:	003b      	movs	r3, r7
 8006800:	781c      	ldrb	r4, [r3, #0]
 8006802:	003b      	movs	r3, r7
 8006804:	785d      	ldrb	r5, [r3, #1]
 8006806:	003b      	movs	r3, r7
 8006808:	789b      	ldrb	r3, [r3, #2]
 800680a:	210f      	movs	r1, #15
 800680c:	000e      	movs	r6, r1
 800680e:	187a      	adds	r2, r7, r1
 8006810:	7811      	ldrb	r1, [r2, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	002b      	movs	r3, r5
 8006818:	0022      	movs	r2, r4
 800681a:	f7ff fa3e 	bl	8005c9a <_ZN7DotStar13setPixelColorEhhhh>
    for (uint8_t j = 0; j < ring_size; j++)
 800681e:	0031      	movs	r1, r6
 8006820:	187b      	adds	r3, r7, r1
 8006822:	781a      	ldrb	r2, [r3, #0]
 8006824:	187b      	adds	r3, r7, r1
 8006826:	3201      	adds	r2, #1
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	e7e0      	b.n	80067ee <_Z19ring_set_all_pixelsR7DotStar8RGB_VALS+0x24>
    }
    ring.show();
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	0018      	movs	r0, r3
 8006830:	f7ff f912 	bl	8005a58 <_ZN7DotStar4showEv>
}
 8006834:	46c0      	nop			; (mov r8, r8)
 8006836:	46bd      	mov	sp, r7
 8006838:	b005      	add	sp, #20
 800683a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800683c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8006840:	4b06      	ldr	r3, [pc, #24]	; (800685c <MX_RNG_Init+0x20>)
 8006842:	4a07      	ldr	r2, [pc, #28]	; (8006860 <MX_RNG_Init+0x24>)
 8006844:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8006846:	4b05      	ldr	r3, [pc, #20]	; (800685c <MX_RNG_Init+0x20>)
 8006848:	0018      	movs	r0, r3
 800684a:	f7fc ff27 	bl	800369c <HAL_RNG_Init>
 800684e:	1e03      	subs	r3, r0, #0
 8006850:	d001      	beq.n	8006856 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8006852:	f7ff ffb5 	bl	80067c0 <Error_Handler>
  }

}
 8006856:	46c0      	nop			; (mov r8, r8)
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	200000e0 	.word	0x200000e0
 8006860:	40025000 	.word	0x40025000

08006864 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a0a      	ldr	r2, [pc, #40]	; (800689c <HAL_RNG_MspInit+0x38>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d10d      	bne.n	8006892 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8006876:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <HAL_RNG_MspInit+0x3c>)
 8006878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800687a:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <HAL_RNG_MspInit+0x3c>)
 800687c:	2180      	movs	r1, #128	; 0x80
 800687e:	0349      	lsls	r1, r1, #13
 8006880:	430a      	orrs	r2, r1
 8006882:	631a      	str	r2, [r3, #48]	; 0x30
 8006884:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <HAL_RNG_MspInit+0x3c>)
 8006886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006888:	2380      	movs	r3, #128	; 0x80
 800688a:	035b      	lsls	r3, r3, #13
 800688c:	4013      	ands	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8006892:	46c0      	nop			; (mov r8, r8)
 8006894:	46bd      	mov	sp, r7
 8006896:	b004      	add	sp, #16
 8006898:	bd80      	pop	{r7, pc}
 800689a:	46c0      	nop			; (mov r8, r8)
 800689c:	40025000 	.word	0x40025000
 80068a0:	40021000 	.word	0x40021000

080068a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80068a8:	4b18      	ldr	r3, [pc, #96]	; (800690c <MX_SPI1_Init+0x68>)
 80068aa:	4a19      	ldr	r2, [pc, #100]	; (8006910 <MX_SPI1_Init+0x6c>)
 80068ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80068ae:	4b17      	ldr	r3, [pc, #92]	; (800690c <MX_SPI1_Init+0x68>)
 80068b0:	2282      	movs	r2, #130	; 0x82
 80068b2:	0052      	lsls	r2, r2, #1
 80068b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80068b6:	4b15      	ldr	r3, [pc, #84]	; (800690c <MX_SPI1_Init+0x68>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80068bc:	4b13      	ldr	r3, [pc, #76]	; (800690c <MX_SPI1_Init+0x68>)
 80068be:	2280      	movs	r2, #128	; 0x80
 80068c0:	0112      	lsls	r2, r2, #4
 80068c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80068c4:	4b11      	ldr	r3, [pc, #68]	; (800690c <MX_SPI1_Init+0x68>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80068ca:	4b10      	ldr	r3, [pc, #64]	; (800690c <MX_SPI1_Init+0x68>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80068d0:	4b0e      	ldr	r3, [pc, #56]	; (800690c <MX_SPI1_Init+0x68>)
 80068d2:	2280      	movs	r2, #128	; 0x80
 80068d4:	0092      	lsls	r2, r2, #2
 80068d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80068d8:	4b0c      	ldr	r3, [pc, #48]	; (800690c <MX_SPI1_Init+0x68>)
 80068da:	2210      	movs	r2, #16
 80068dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80068de:	4b0b      	ldr	r3, [pc, #44]	; (800690c <MX_SPI1_Init+0x68>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80068e4:	4b09      	ldr	r3, [pc, #36]	; (800690c <MX_SPI1_Init+0x68>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068ea:	4b08      	ldr	r3, [pc, #32]	; (800690c <MX_SPI1_Init+0x68>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80068f0:	4b06      	ldr	r3, [pc, #24]	; (800690c <MX_SPI1_Init+0x68>)
 80068f2:	2207      	movs	r2, #7
 80068f4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80068f6:	4b05      	ldr	r3, [pc, #20]	; (800690c <MX_SPI1_Init+0x68>)
 80068f8:	0018      	movs	r0, r3
 80068fa:	f7fc ff67 	bl	80037cc <HAL_SPI_Init>
 80068fe:	1e03      	subs	r3, r0, #0
 8006900:	d001      	beq.n	8006906 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8006902:	f7ff ff5d 	bl	80067c0 <Error_Handler>
  }

}
 8006906:	46c0      	nop			; (mov r8, r8)
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	200000f0 	.word	0x200000f0
 8006910:	40013000 	.word	0x40013000

08006914 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800691c:	230c      	movs	r3, #12
 800691e:	18fb      	adds	r3, r7, r3
 8006920:	0018      	movs	r0, r3
 8006922:	2314      	movs	r3, #20
 8006924:	001a      	movs	r2, r3
 8006926:	2100      	movs	r1, #0
 8006928:	f000 f9a2 	bl	8006c70 <memset>
  if(spiHandle->Instance==SPI1)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a18      	ldr	r2, [pc, #96]	; (8006994 <HAL_SPI_MspInit+0x80>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d129      	bne.n	800698a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006936:	4b18      	ldr	r3, [pc, #96]	; (8006998 <HAL_SPI_MspInit+0x84>)
 8006938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800693a:	4b17      	ldr	r3, [pc, #92]	; (8006998 <HAL_SPI_MspInit+0x84>)
 800693c:	2180      	movs	r1, #128	; 0x80
 800693e:	0149      	lsls	r1, r1, #5
 8006940:	430a      	orrs	r2, r1
 8006942:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006944:	4b14      	ldr	r3, [pc, #80]	; (8006998 <HAL_SPI_MspInit+0x84>)
 8006946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006948:	4b13      	ldr	r3, [pc, #76]	; (8006998 <HAL_SPI_MspInit+0x84>)
 800694a:	2101      	movs	r1, #1
 800694c:	430a      	orrs	r2, r1
 800694e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006950:	4b11      	ldr	r3, [pc, #68]	; (8006998 <HAL_SPI_MspInit+0x84>)
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	2201      	movs	r2, #1
 8006956:	4013      	ands	r3, r2
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800695c:	210c      	movs	r1, #12
 800695e:	187b      	adds	r3, r7, r1
 8006960:	22e0      	movs	r2, #224	; 0xe0
 8006962:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006964:	187b      	adds	r3, r7, r1
 8006966:	2202      	movs	r2, #2
 8006968:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800696a:	187b      	adds	r3, r7, r1
 800696c:	2200      	movs	r2, #0
 800696e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006970:	187b      	adds	r3, r7, r1
 8006972:	2203      	movs	r2, #3
 8006974:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006976:	187b      	adds	r3, r7, r1
 8006978:	2200      	movs	r2, #0
 800697a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800697c:	187a      	adds	r2, r7, r1
 800697e:	23a0      	movs	r3, #160	; 0xa0
 8006980:	05db      	lsls	r3, r3, #23
 8006982:	0011      	movs	r1, r2
 8006984:	0018      	movs	r0, r3
 8006986:	f7fb f8cb 	bl	8001b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800698a:	46c0      	nop			; (mov r8, r8)
 800698c:	46bd      	mov	sp, r7
 800698e:	b008      	add	sp, #32
 8006990:	bd80      	pop	{r7, pc}
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	40013000 	.word	0x40013000
 8006998:	40021000 	.word	0x40021000

0800699c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069a0:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <HAL_MspInit+0x24>)
 80069a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069a4:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <HAL_MspInit+0x24>)
 80069a6:	2101      	movs	r1, #1
 80069a8:	430a      	orrs	r2, r1
 80069aa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80069ac:	4b04      	ldr	r3, [pc, #16]	; (80069c0 <HAL_MspInit+0x24>)
 80069ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b0:	4b03      	ldr	r3, [pc, #12]	; (80069c0 <HAL_MspInit+0x24>)
 80069b2:	2180      	movs	r1, #128	; 0x80
 80069b4:	0549      	lsls	r1, r1, #21
 80069b6:	430a      	orrs	r2, r1
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40021000 	.word	0x40021000

080069c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80069c8:	46c0      	nop			; (mov r8, r8)
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069d2:	e7fe      	b.n	80069d2 <HardFault_Handler+0x4>

080069d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80069d8:	46c0      	nop			; (mov r8, r8)
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80069ec:	f7fa ff96 	bl	800191c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80069f0:	46c0      	nop			; (mov r8, r8)
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
	...

080069f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006a00:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <_sbrk+0x50>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d102      	bne.n	8006a0e <_sbrk+0x16>
		heap_end = &end;
 8006a08:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <_sbrk+0x50>)
 8006a0a:	4a10      	ldr	r2, [pc, #64]	; (8006a4c <_sbrk+0x54>)
 8006a0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006a0e:	4b0e      	ldr	r3, [pc, #56]	; (8006a48 <_sbrk+0x50>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006a14:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <_sbrk+0x50>)
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	18d3      	adds	r3, r2, r3
 8006a1c:	466a      	mov	r2, sp
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d907      	bls.n	8006a32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006a22:	f000 f8f1 	bl	8006c08 <__errno>
 8006a26:	0003      	movs	r3, r0
 8006a28:	220c      	movs	r2, #12
 8006a2a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	425b      	negs	r3, r3
 8006a30:	e006      	b.n	8006a40 <_sbrk+0x48>
	}

	heap_end += incr;
 8006a32:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <_sbrk+0x50>)
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	18d2      	adds	r2, r2, r3
 8006a3a:	4b03      	ldr	r3, [pc, #12]	; (8006a48 <_sbrk+0x50>)
 8006a3c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
}
 8006a40:	0018      	movs	r0, r3
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b004      	add	sp, #16
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	20000084 	.word	0x20000084
 8006a4c:	200001d0 	.word	0x200001d0

08006a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8006a54:	4b17      	ldr	r3, [pc, #92]	; (8006ab4 <SystemInit+0x64>)
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	4b16      	ldr	r3, [pc, #88]	; (8006ab4 <SystemInit+0x64>)
 8006a5a:	2180      	movs	r1, #128	; 0x80
 8006a5c:	0049      	lsls	r1, r1, #1
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8006a62:	4b14      	ldr	r3, [pc, #80]	; (8006ab4 <SystemInit+0x64>)
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	4b13      	ldr	r3, [pc, #76]	; (8006ab4 <SystemInit+0x64>)
 8006a68:	4913      	ldr	r1, [pc, #76]	; (8006ab8 <SystemInit+0x68>)
 8006a6a:	400a      	ands	r2, r1
 8006a6c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8006a6e:	4b11      	ldr	r3, [pc, #68]	; (8006ab4 <SystemInit+0x64>)
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	4b10      	ldr	r3, [pc, #64]	; (8006ab4 <SystemInit+0x64>)
 8006a74:	4911      	ldr	r1, [pc, #68]	; (8006abc <SystemInit+0x6c>)
 8006a76:	400a      	ands	r2, r1
 8006a78:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006a7a:	4b0e      	ldr	r3, [pc, #56]	; (8006ab4 <SystemInit+0x64>)
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	; (8006ab4 <SystemInit+0x64>)
 8006a80:	2101      	movs	r1, #1
 8006a82:	438a      	bics	r2, r1
 8006a84:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006a86:	4b0b      	ldr	r3, [pc, #44]	; (8006ab4 <SystemInit+0x64>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <SystemInit+0x64>)
 8006a8c:	490c      	ldr	r1, [pc, #48]	; (8006ac0 <SystemInit+0x70>)
 8006a8e:	400a      	ands	r2, r1
 8006a90:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8006a92:	4b08      	ldr	r3, [pc, #32]	; (8006ab4 <SystemInit+0x64>)
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <SystemInit+0x64>)
 8006a98:	490a      	ldr	r1, [pc, #40]	; (8006ac4 <SystemInit+0x74>)
 8006a9a:	400a      	ands	r2, r1
 8006a9c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006a9e:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <SystemInit+0x64>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006aa4:	4b08      	ldr	r3, [pc, #32]	; (8006ac8 <SystemInit+0x78>)
 8006aa6:	2280      	movs	r2, #128	; 0x80
 8006aa8:	0512      	lsls	r2, r2, #20
 8006aaa:	609a      	str	r2, [r3, #8]
#endif
}
 8006aac:	46c0      	nop			; (mov r8, r8)
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	88ff400c 	.word	0x88ff400c
 8006abc:	fef6fff6 	.word	0xfef6fff6
 8006ac0:	fffbffff 	.word	0xfffbffff
 8006ac4:	ff02ffff 	.word	0xff02ffff
 8006ac8:	e000ed00 	.word	0xe000ed00

08006acc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006ad0:	4b14      	ldr	r3, [pc, #80]	; (8006b24 <MX_USART1_UART_Init+0x58>)
 8006ad2:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <MX_USART1_UART_Init+0x5c>)
 8006ad4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006ad6:	4b13      	ldr	r3, [pc, #76]	; (8006b24 <MX_USART1_UART_Init+0x58>)
 8006ad8:	22e1      	movs	r2, #225	; 0xe1
 8006ada:	0252      	lsls	r2, r2, #9
 8006adc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006ade:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <MX_USART1_UART_Init+0x58>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006ae4:	4b0f      	ldr	r3, [pc, #60]	; (8006b24 <MX_USART1_UART_Init+0x58>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006aea:	4b0e      	ldr	r3, [pc, #56]	; (8006b24 <MX_USART1_UART_Init+0x58>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006af0:	4b0c      	ldr	r3, [pc, #48]	; (8006b24 <MX_USART1_UART_Init+0x58>)
 8006af2:	220c      	movs	r2, #12
 8006af4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006af6:	4b0b      	ldr	r3, [pc, #44]	; (8006b24 <MX_USART1_UART_Init+0x58>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006afc:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <MX_USART1_UART_Init+0x58>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b02:	4b08      	ldr	r3, [pc, #32]	; (8006b24 <MX_USART1_UART_Init+0x58>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006b08:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <MX_USART1_UART_Init+0x58>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006b0e:	4b05      	ldr	r3, [pc, #20]	; (8006b24 <MX_USART1_UART_Init+0x58>)
 8006b10:	0018      	movs	r0, r3
 8006b12:	f7fd f8cd 	bl	8003cb0 <HAL_UART_Init>
 8006b16:	1e03      	subs	r3, r0, #0
 8006b18:	d001      	beq.n	8006b1e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006b1a:	f7ff fe51 	bl	80067c0 <Error_Handler>
  }

}
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20000148 	.word	0x20000148
 8006b28:	40013800 	.word	0x40013800

08006b2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b34:	230c      	movs	r3, #12
 8006b36:	18fb      	adds	r3, r7, r3
 8006b38:	0018      	movs	r0, r3
 8006b3a:	2314      	movs	r3, #20
 8006b3c:	001a      	movs	r2, r3
 8006b3e:	2100      	movs	r1, #0
 8006b40:	f000 f896 	bl	8006c70 <memset>
  if(uartHandle->Instance==USART1)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a18      	ldr	r2, [pc, #96]	; (8006bac <HAL_UART_MspInit+0x80>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d12a      	bne.n	8006ba4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006b4e:	4b18      	ldr	r3, [pc, #96]	; (8006bb0 <HAL_UART_MspInit+0x84>)
 8006b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b52:	4b17      	ldr	r3, [pc, #92]	; (8006bb0 <HAL_UART_MspInit+0x84>)
 8006b54:	2180      	movs	r1, #128	; 0x80
 8006b56:	01c9      	lsls	r1, r1, #7
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b5c:	4b14      	ldr	r3, [pc, #80]	; (8006bb0 <HAL_UART_MspInit+0x84>)
 8006b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b60:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <HAL_UART_MspInit+0x84>)
 8006b62:	2101      	movs	r1, #1
 8006b64:	430a      	orrs	r2, r1
 8006b66:	62da      	str	r2, [r3, #44]	; 0x2c
 8006b68:	4b11      	ldr	r3, [pc, #68]	; (8006bb0 <HAL_UART_MspInit+0x84>)
 8006b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	4013      	ands	r3, r2
 8006b70:	60bb      	str	r3, [r7, #8]
 8006b72:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006b74:	210c      	movs	r1, #12
 8006b76:	187b      	adds	r3, r7, r1
 8006b78:	22c0      	movs	r2, #192	; 0xc0
 8006b7a:	00d2      	lsls	r2, r2, #3
 8006b7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b7e:	187b      	adds	r3, r7, r1
 8006b80:	2202      	movs	r2, #2
 8006b82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b84:	187b      	adds	r3, r7, r1
 8006b86:	2200      	movs	r2, #0
 8006b88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b8a:	187b      	adds	r3, r7, r1
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006b90:	187b      	adds	r3, r7, r1
 8006b92:	2204      	movs	r2, #4
 8006b94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b96:	187a      	adds	r2, r7, r1
 8006b98:	23a0      	movs	r3, #160	; 0xa0
 8006b9a:	05db      	lsls	r3, r3, #23
 8006b9c:	0011      	movs	r1, r2
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f7fa ffbe 	bl	8001b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006ba4:	46c0      	nop			; (mov r8, r8)
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	b008      	add	sp, #32
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	40013800 	.word	0x40013800
 8006bb0:	40021000 	.word	0x40021000

08006bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006bb4:	480d      	ldr	r0, [pc, #52]	; (8006bec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8006bb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8006bb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006bba:	e003      	b.n	8006bc4 <LoopCopyDataInit>

08006bbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006bbc:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8006bbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006bc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006bc2:	3104      	adds	r1, #4

08006bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8006bc4:	480b      	ldr	r0, [pc, #44]	; (8006bf4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8006bc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006bca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006bcc:	d3f6      	bcc.n	8006bbc <CopyDataInit>
  ldr  r2, =_sbss
 8006bce:	4a0b      	ldr	r2, [pc, #44]	; (8006bfc <LoopForever+0x12>)
  b  LoopFillZerobss
 8006bd0:	e002      	b.n	8006bd8 <LoopFillZerobss>

08006bd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8006bd2:	2300      	movs	r3, #0
  str  r3, [r2]
 8006bd4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006bd6:	3204      	adds	r2, #4

08006bd8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8006bd8:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <LoopForever+0x16>)
  cmp  r2, r3
 8006bda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006bdc:	d3f9      	bcc.n	8006bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006bde:	f7ff ff37 	bl	8006a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006be2:	f000 f817 	bl	8006c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006be6:	f7ff f9e5 	bl	8005fb4 <main>

08006bea <LoopForever>:

LoopForever:
    b LoopForever
 8006bea:	e7fe      	b.n	8006bea <LoopForever>
   ldr   r0, =_estack
 8006bec:	20001fff 	.word	0x20001fff
  ldr  r3, =_sidata
 8006bf0:	08006e78 	.word	0x08006e78
  ldr  r0, =_sdata
 8006bf4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006bf8:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8006bfc:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8006c00:	200001cc 	.word	0x200001cc

08006c04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c04:	e7fe      	b.n	8006c04 <ADC1_COMP_IRQHandler>
	...

08006c08 <__errno>:
 8006c08:	4b01      	ldr	r3, [pc, #4]	; (8006c10 <__errno+0x8>)
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	4770      	bx	lr
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	20000004 	.word	0x20000004

08006c14 <__libc_init_array>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	2600      	movs	r6, #0
 8006c18:	4d0c      	ldr	r5, [pc, #48]	; (8006c4c <__libc_init_array+0x38>)
 8006c1a:	4c0d      	ldr	r4, [pc, #52]	; (8006c50 <__libc_init_array+0x3c>)
 8006c1c:	1b64      	subs	r4, r4, r5
 8006c1e:	10a4      	asrs	r4, r4, #2
 8006c20:	42a6      	cmp	r6, r4
 8006c22:	d109      	bne.n	8006c38 <__libc_init_array+0x24>
 8006c24:	2600      	movs	r6, #0
 8006c26:	f000 f89d 	bl	8006d64 <_init>
 8006c2a:	4d0a      	ldr	r5, [pc, #40]	; (8006c54 <__libc_init_array+0x40>)
 8006c2c:	4c0a      	ldr	r4, [pc, #40]	; (8006c58 <__libc_init_array+0x44>)
 8006c2e:	1b64      	subs	r4, r4, r5
 8006c30:	10a4      	asrs	r4, r4, #2
 8006c32:	42a6      	cmp	r6, r4
 8006c34:	d105      	bne.n	8006c42 <__libc_init_array+0x2e>
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	00b3      	lsls	r3, r6, #2
 8006c3a:	58eb      	ldr	r3, [r5, r3]
 8006c3c:	4798      	blx	r3
 8006c3e:	3601      	adds	r6, #1
 8006c40:	e7ee      	b.n	8006c20 <__libc_init_array+0xc>
 8006c42:	00b3      	lsls	r3, r6, #2
 8006c44:	58eb      	ldr	r3, [r5, r3]
 8006c46:	4798      	blx	r3
 8006c48:	3601      	adds	r6, #1
 8006c4a:	e7f2      	b.n	8006c32 <__libc_init_array+0x1e>
 8006c4c:	08006e70 	.word	0x08006e70
 8006c50:	08006e70 	.word	0x08006e70
 8006c54:	08006e70 	.word	0x08006e70
 8006c58:	08006e74 	.word	0x08006e74

08006c5c <malloc>:
 8006c5c:	b510      	push	{r4, lr}
 8006c5e:	4b03      	ldr	r3, [pc, #12]	; (8006c6c <malloc+0x10>)
 8006c60:	0001      	movs	r1, r0
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	f000 f80c 	bl	8006c80 <_malloc_r>
 8006c68:	bd10      	pop	{r4, pc}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	20000004 	.word	0x20000004

08006c70 <memset>:
 8006c70:	0003      	movs	r3, r0
 8006c72:	1812      	adds	r2, r2, r0
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d100      	bne.n	8006c7a <memset+0xa>
 8006c78:	4770      	bx	lr
 8006c7a:	7019      	strb	r1, [r3, #0]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	e7f9      	b.n	8006c74 <memset+0x4>

08006c80 <_malloc_r>:
 8006c80:	2303      	movs	r3, #3
 8006c82:	b570      	push	{r4, r5, r6, lr}
 8006c84:	1ccd      	adds	r5, r1, #3
 8006c86:	439d      	bics	r5, r3
 8006c88:	3508      	adds	r5, #8
 8006c8a:	0006      	movs	r6, r0
 8006c8c:	2d0c      	cmp	r5, #12
 8006c8e:	d21e      	bcs.n	8006cce <_malloc_r+0x4e>
 8006c90:	250c      	movs	r5, #12
 8006c92:	42a9      	cmp	r1, r5
 8006c94:	d81d      	bhi.n	8006cd2 <_malloc_r+0x52>
 8006c96:	0030      	movs	r0, r6
 8006c98:	f000 f862 	bl	8006d60 <__malloc_lock>
 8006c9c:	4a25      	ldr	r2, [pc, #148]	; (8006d34 <_malloc_r+0xb4>)
 8006c9e:	6814      	ldr	r4, [r2, #0]
 8006ca0:	0021      	movs	r1, r4
 8006ca2:	2900      	cmp	r1, #0
 8006ca4:	d119      	bne.n	8006cda <_malloc_r+0x5a>
 8006ca6:	4c24      	ldr	r4, [pc, #144]	; (8006d38 <_malloc_r+0xb8>)
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d103      	bne.n	8006cb6 <_malloc_r+0x36>
 8006cae:	0030      	movs	r0, r6
 8006cb0:	f000 f844 	bl	8006d3c <_sbrk_r>
 8006cb4:	6020      	str	r0, [r4, #0]
 8006cb6:	0029      	movs	r1, r5
 8006cb8:	0030      	movs	r0, r6
 8006cba:	f000 f83f 	bl	8006d3c <_sbrk_r>
 8006cbe:	1c43      	adds	r3, r0, #1
 8006cc0:	d12b      	bne.n	8006d1a <_malloc_r+0x9a>
 8006cc2:	230c      	movs	r3, #12
 8006cc4:	0030      	movs	r0, r6
 8006cc6:	6033      	str	r3, [r6, #0]
 8006cc8:	f000 f84b 	bl	8006d62 <__malloc_unlock>
 8006ccc:	e003      	b.n	8006cd6 <_malloc_r+0x56>
 8006cce:	2d00      	cmp	r5, #0
 8006cd0:	dadf      	bge.n	8006c92 <_malloc_r+0x12>
 8006cd2:	230c      	movs	r3, #12
 8006cd4:	6033      	str	r3, [r6, #0]
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	bd70      	pop	{r4, r5, r6, pc}
 8006cda:	680b      	ldr	r3, [r1, #0]
 8006cdc:	1b5b      	subs	r3, r3, r5
 8006cde:	d419      	bmi.n	8006d14 <_malloc_r+0x94>
 8006ce0:	2b0b      	cmp	r3, #11
 8006ce2:	d903      	bls.n	8006cec <_malloc_r+0x6c>
 8006ce4:	600b      	str	r3, [r1, #0]
 8006ce6:	18cc      	adds	r4, r1, r3
 8006ce8:	6025      	str	r5, [r4, #0]
 8006cea:	e003      	b.n	8006cf4 <_malloc_r+0x74>
 8006cec:	684b      	ldr	r3, [r1, #4]
 8006cee:	428c      	cmp	r4, r1
 8006cf0:	d10d      	bne.n	8006d0e <_malloc_r+0x8e>
 8006cf2:	6013      	str	r3, [r2, #0]
 8006cf4:	0030      	movs	r0, r6
 8006cf6:	f000 f834 	bl	8006d62 <__malloc_unlock>
 8006cfa:	0020      	movs	r0, r4
 8006cfc:	2207      	movs	r2, #7
 8006cfe:	300b      	adds	r0, #11
 8006d00:	1d23      	adds	r3, r4, #4
 8006d02:	4390      	bics	r0, r2
 8006d04:	1ac3      	subs	r3, r0, r3
 8006d06:	d0e7      	beq.n	8006cd8 <_malloc_r+0x58>
 8006d08:	425a      	negs	r2, r3
 8006d0a:	50e2      	str	r2, [r4, r3]
 8006d0c:	e7e4      	b.n	8006cd8 <_malloc_r+0x58>
 8006d0e:	6063      	str	r3, [r4, #4]
 8006d10:	000c      	movs	r4, r1
 8006d12:	e7ef      	b.n	8006cf4 <_malloc_r+0x74>
 8006d14:	000c      	movs	r4, r1
 8006d16:	6849      	ldr	r1, [r1, #4]
 8006d18:	e7c3      	b.n	8006ca2 <_malloc_r+0x22>
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	1cc4      	adds	r4, r0, #3
 8006d1e:	439c      	bics	r4, r3
 8006d20:	42a0      	cmp	r0, r4
 8006d22:	d0e1      	beq.n	8006ce8 <_malloc_r+0x68>
 8006d24:	1a21      	subs	r1, r4, r0
 8006d26:	0030      	movs	r0, r6
 8006d28:	f000 f808 	bl	8006d3c <_sbrk_r>
 8006d2c:	1c43      	adds	r3, r0, #1
 8006d2e:	d1db      	bne.n	8006ce8 <_malloc_r+0x68>
 8006d30:	e7c7      	b.n	8006cc2 <_malloc_r+0x42>
 8006d32:	46c0      	nop			; (mov r8, r8)
 8006d34:	20000088 	.word	0x20000088
 8006d38:	2000008c 	.word	0x2000008c

08006d3c <_sbrk_r>:
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	b570      	push	{r4, r5, r6, lr}
 8006d40:	4c06      	ldr	r4, [pc, #24]	; (8006d5c <_sbrk_r+0x20>)
 8006d42:	0005      	movs	r5, r0
 8006d44:	0008      	movs	r0, r1
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	f7ff fe56 	bl	80069f8 <_sbrk>
 8006d4c:	1c43      	adds	r3, r0, #1
 8006d4e:	d103      	bne.n	8006d58 <_sbrk_r+0x1c>
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d000      	beq.n	8006d58 <_sbrk_r+0x1c>
 8006d56:	602b      	str	r3, [r5, #0]
 8006d58:	bd70      	pop	{r4, r5, r6, pc}
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	200001c8 	.word	0x200001c8

08006d60 <__malloc_lock>:
 8006d60:	4770      	bx	lr

08006d62 <__malloc_unlock>:
 8006d62:	4770      	bx	lr

08006d64 <_init>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	46c0      	nop			; (mov r8, r8)
 8006d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6a:	bc08      	pop	{r3}
 8006d6c:	469e      	mov	lr, r3
 8006d6e:	4770      	bx	lr

08006d70 <_fini>:
 8006d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d72:	46c0      	nop			; (mov r8, r8)
 8006d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d76:	bc08      	pop	{r3}
 8006d78:	469e      	mov	lr, r3
 8006d7a:	4770      	bx	lr
