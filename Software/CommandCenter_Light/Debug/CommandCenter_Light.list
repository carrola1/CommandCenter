
CommandCenter_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008144  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08008204  08008204  00018204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800831c  0800831c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800831c  0800831c  0001831c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008324  08008324  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008324  08008324  00018324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800832c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000006c  08008398  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08008398  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017dca  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b32  00000000  00000000  00037e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001128  00000000  00000000  0003b990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  0003cab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001756e  00000000  00000000  0003da18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000113ad  00000000  00000000  00054f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007cf27  00000000  00000000  00066333  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e325a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f58  00000000  00000000  000e32d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080081ec 	.word	0x080081ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080081ec 	.word	0x080081ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fb3d 	bl	80008a8 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fabf 	bl	80007bc <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb2f 	bl	80008a8 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb25 	bl	80008a8 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 facd 	bl	800080c <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fac3 	bl	800080c <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_uldivmod>:
 8000294:	2b00      	cmp	r3, #0
 8000296:	d111      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 8000298:	2a00      	cmp	r2, #0
 800029a:	d10f      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 800029c:	2900      	cmp	r1, #0
 800029e:	d100      	bne.n	80002a2 <__aeabi_uldivmod+0xe>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d002      	beq.n	80002aa <__aeabi_uldivmod+0x16>
 80002a4:	2100      	movs	r1, #0
 80002a6:	43c9      	mvns	r1, r1
 80002a8:	1c08      	adds	r0, r1, #0
 80002aa:	b407      	push	{r0, r1, r2}
 80002ac:	4802      	ldr	r0, [pc, #8]	; (80002b8 <__aeabi_uldivmod+0x24>)
 80002ae:	a102      	add	r1, pc, #8	; (adr r1, 80002b8 <__aeabi_uldivmod+0x24>)
 80002b0:	1840      	adds	r0, r0, r1
 80002b2:	9002      	str	r0, [sp, #8]
 80002b4:	bd03      	pop	{r0, r1, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	ffffff65 	.word	0xffffff65
 80002bc:	b403      	push	{r0, r1}
 80002be:	4668      	mov	r0, sp
 80002c0:	b501      	push	{r0, lr}
 80002c2:	9802      	ldr	r0, [sp, #8]
 80002c4:	f000 f81e 	bl	8000304 <__udivmoddi4>
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	469e      	mov	lr, r3
 80002cc:	b002      	add	sp, #8
 80002ce:	bc0c      	pop	{r2, r3}
 80002d0:	4770      	bx	lr
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_f2uiz>:
 80002d4:	219e      	movs	r1, #158	; 0x9e
 80002d6:	b510      	push	{r4, lr}
 80002d8:	05c9      	lsls	r1, r1, #23
 80002da:	1c04      	adds	r4, r0, #0
 80002dc:	f7ff ffd0 	bl	8000280 <__aeabi_fcmpge>
 80002e0:	2800      	cmp	r0, #0
 80002e2:	d103      	bne.n	80002ec <__aeabi_f2uiz+0x18>
 80002e4:	1c20      	adds	r0, r4, #0
 80002e6:	f000 fcf3 	bl	8000cd0 <__aeabi_f2iz>
 80002ea:	bd10      	pop	{r4, pc}
 80002ec:	219e      	movs	r1, #158	; 0x9e
 80002ee:	1c20      	adds	r0, r4, #0
 80002f0:	05c9      	lsls	r1, r1, #23
 80002f2:	f000 fb29 	bl	8000948 <__aeabi_fsub>
 80002f6:	f000 fceb 	bl	8000cd0 <__aeabi_f2iz>
 80002fa:	2380      	movs	r3, #128	; 0x80
 80002fc:	061b      	lsls	r3, r3, #24
 80002fe:	469c      	mov	ip, r3
 8000300:	4460      	add	r0, ip
 8000302:	e7f2      	b.n	80002ea <__aeabi_f2uiz+0x16>

08000304 <__udivmoddi4>:
 8000304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000306:	464f      	mov	r7, r9
 8000308:	4646      	mov	r6, r8
 800030a:	46d6      	mov	lr, sl
 800030c:	b5c0      	push	{r6, r7, lr}
 800030e:	0004      	movs	r4, r0
 8000310:	b082      	sub	sp, #8
 8000312:	000d      	movs	r5, r1
 8000314:	4691      	mov	r9, r2
 8000316:	4698      	mov	r8, r3
 8000318:	428b      	cmp	r3, r1
 800031a:	d82f      	bhi.n	800037c <__udivmoddi4+0x78>
 800031c:	d02c      	beq.n	8000378 <__udivmoddi4+0x74>
 800031e:	4641      	mov	r1, r8
 8000320:	4648      	mov	r0, r9
 8000322:	f001 fc3f 	bl	8001ba4 <__clzdi2>
 8000326:	0029      	movs	r1, r5
 8000328:	0006      	movs	r6, r0
 800032a:	0020      	movs	r0, r4
 800032c:	f001 fc3a 	bl	8001ba4 <__clzdi2>
 8000330:	1a33      	subs	r3, r6, r0
 8000332:	469c      	mov	ip, r3
 8000334:	3b20      	subs	r3, #32
 8000336:	469a      	mov	sl, r3
 8000338:	d500      	bpl.n	800033c <__udivmoddi4+0x38>
 800033a:	e076      	b.n	800042a <__udivmoddi4+0x126>
 800033c:	464b      	mov	r3, r9
 800033e:	4652      	mov	r2, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001f      	movs	r7, r3
 8000344:	464b      	mov	r3, r9
 8000346:	4662      	mov	r2, ip
 8000348:	4093      	lsls	r3, r2
 800034a:	001e      	movs	r6, r3
 800034c:	42af      	cmp	r7, r5
 800034e:	d828      	bhi.n	80003a2 <__udivmoddi4+0x9e>
 8000350:	d025      	beq.n	800039e <__udivmoddi4+0x9a>
 8000352:	4653      	mov	r3, sl
 8000354:	1ba4      	subs	r4, r4, r6
 8000356:	41bd      	sbcs	r5, r7
 8000358:	2b00      	cmp	r3, #0
 800035a:	da00      	bge.n	800035e <__udivmoddi4+0x5a>
 800035c:	e07b      	b.n	8000456 <__udivmoddi4+0x152>
 800035e:	2200      	movs	r2, #0
 8000360:	2300      	movs	r3, #0
 8000362:	9200      	str	r2, [sp, #0]
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	4652      	mov	r2, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	2301      	movs	r3, #1
 8000370:	4662      	mov	r2, ip
 8000372:	4093      	lsls	r3, r2
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	e018      	b.n	80003aa <__udivmoddi4+0xa6>
 8000378:	4282      	cmp	r2, r0
 800037a:	d9d0      	bls.n	800031e <__udivmoddi4+0x1a>
 800037c:	2200      	movs	r2, #0
 800037e:	2300      	movs	r3, #0
 8000380:	9200      	str	r2, [sp, #0]
 8000382:	9301      	str	r3, [sp, #4]
 8000384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <__udivmoddi4+0x8a>
 800038a:	601c      	str	r4, [r3, #0]
 800038c:	605d      	str	r5, [r3, #4]
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	b002      	add	sp, #8
 8000394:	bc1c      	pop	{r2, r3, r4}
 8000396:	4690      	mov	r8, r2
 8000398:	4699      	mov	r9, r3
 800039a:	46a2      	mov	sl, r4
 800039c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800039e:	42a3      	cmp	r3, r4
 80003a0:	d9d7      	bls.n	8000352 <__udivmoddi4+0x4e>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4663      	mov	r3, ip
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0e9      	beq.n	8000384 <__udivmoddi4+0x80>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	4698      	mov	r8, r3
 80003b4:	4641      	mov	r1, r8
 80003b6:	0872      	lsrs	r2, r6, #1
 80003b8:	430a      	orrs	r2, r1
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	4666      	mov	r6, ip
 80003be:	e00e      	b.n	80003de <__udivmoddi4+0xda>
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d101      	bne.n	80003c8 <__udivmoddi4+0xc4>
 80003c4:	42a2      	cmp	r2, r4
 80003c6:	d80c      	bhi.n	80003e2 <__udivmoddi4+0xde>
 80003c8:	1aa4      	subs	r4, r4, r2
 80003ca:	419d      	sbcs	r5, r3
 80003cc:	2001      	movs	r0, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	3e01      	subs	r6, #1
 80003d6:	1824      	adds	r4, r4, r0
 80003d8:	414d      	adcs	r5, r1
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d006      	beq.n	80003ec <__udivmoddi4+0xe8>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d9ee      	bls.n	80003c0 <__udivmoddi4+0xbc>
 80003e2:	3e01      	subs	r6, #1
 80003e4:	1924      	adds	r4, r4, r4
 80003e6:	416d      	adcs	r5, r5
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d1f8      	bne.n	80003de <__udivmoddi4+0xda>
 80003ec:	9800      	ldr	r0, [sp, #0]
 80003ee:	9901      	ldr	r1, [sp, #4]
 80003f0:	4653      	mov	r3, sl
 80003f2:	1900      	adds	r0, r0, r4
 80003f4:	4169      	adcs	r1, r5
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db23      	blt.n	8000442 <__udivmoddi4+0x13e>
 80003fa:	002b      	movs	r3, r5
 80003fc:	4652      	mov	r2, sl
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	4664      	mov	r4, ip
 8000404:	40e2      	lsrs	r2, r4
 8000406:	001c      	movs	r4, r3
 8000408:	4653      	mov	r3, sl
 800040a:	0015      	movs	r5, r2
 800040c:	2b00      	cmp	r3, #0
 800040e:	db2d      	blt.n	800046c <__udivmoddi4+0x168>
 8000410:	0026      	movs	r6, r4
 8000412:	4657      	mov	r7, sl
 8000414:	40be      	lsls	r6, r7
 8000416:	0033      	movs	r3, r6
 8000418:	0026      	movs	r6, r4
 800041a:	4667      	mov	r7, ip
 800041c:	40be      	lsls	r6, r7
 800041e:	0032      	movs	r2, r6
 8000420:	1a80      	subs	r0, r0, r2
 8000422:	4199      	sbcs	r1, r3
 8000424:	9000      	str	r0, [sp, #0]
 8000426:	9101      	str	r1, [sp, #4]
 8000428:	e7ac      	b.n	8000384 <__udivmoddi4+0x80>
 800042a:	4662      	mov	r2, ip
 800042c:	2320      	movs	r3, #32
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	464a      	mov	r2, r9
 8000432:	40da      	lsrs	r2, r3
 8000434:	4661      	mov	r1, ip
 8000436:	0013      	movs	r3, r2
 8000438:	4642      	mov	r2, r8
 800043a:	408a      	lsls	r2, r1
 800043c:	0017      	movs	r7, r2
 800043e:	431f      	orrs	r7, r3
 8000440:	e780      	b.n	8000344 <__udivmoddi4+0x40>
 8000442:	4662      	mov	r2, ip
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4666      	mov	r6, ip
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4313      	orrs	r3, r2
 8000454:	e7d4      	b.n	8000400 <__udivmoddi4+0xfc>
 8000456:	4662      	mov	r2, ip
 8000458:	2320      	movs	r3, #32
 800045a:	2100      	movs	r1, #0
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	2200      	movs	r2, #0
 8000460:	9100      	str	r1, [sp, #0]
 8000462:	9201      	str	r2, [sp, #4]
 8000464:	2201      	movs	r2, #1
 8000466:	40da      	lsrs	r2, r3
 8000468:	9201      	str	r2, [sp, #4]
 800046a:	e780      	b.n	800036e <__udivmoddi4+0x6a>
 800046c:	2320      	movs	r3, #32
 800046e:	4662      	mov	r2, ip
 8000470:	0026      	movs	r6, r4
 8000472:	1a9b      	subs	r3, r3, r2
 8000474:	40de      	lsrs	r6, r3
 8000476:	002f      	movs	r7, r5
 8000478:	46b0      	mov	r8, r6
 800047a:	4666      	mov	r6, ip
 800047c:	40b7      	lsls	r7, r6
 800047e:	4646      	mov	r6, r8
 8000480:	003b      	movs	r3, r7
 8000482:	4333      	orrs	r3, r6
 8000484:	e7c8      	b.n	8000418 <__udivmoddi4+0x114>
 8000486:	46c0      	nop			; (mov r8, r8)

08000488 <__aeabi_fadd>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	4647      	mov	r7, r8
 800048c:	46ce      	mov	lr, r9
 800048e:	0243      	lsls	r3, r0, #9
 8000490:	0a5b      	lsrs	r3, r3, #9
 8000492:	0044      	lsls	r4, r0, #1
 8000494:	0fc2      	lsrs	r2, r0, #31
 8000496:	469c      	mov	ip, r3
 8000498:	0048      	lsls	r0, r1, #1
 800049a:	00dd      	lsls	r5, r3, #3
 800049c:	024b      	lsls	r3, r1, #9
 800049e:	0e24      	lsrs	r4, r4, #24
 80004a0:	0a5b      	lsrs	r3, r3, #9
 80004a2:	0e00      	lsrs	r0, r0, #24
 80004a4:	b580      	push	{r7, lr}
 80004a6:	4698      	mov	r8, r3
 80004a8:	0026      	movs	r6, r4
 80004aa:	4691      	mov	r9, r2
 80004ac:	0fc9      	lsrs	r1, r1, #31
 80004ae:	00db      	lsls	r3, r3, #3
 80004b0:	1a27      	subs	r7, r4, r0
 80004b2:	428a      	cmp	r2, r1
 80004b4:	d029      	beq.n	800050a <__aeabi_fadd+0x82>
 80004b6:	2f00      	cmp	r7, #0
 80004b8:	dd15      	ble.n	80004e6 <__aeabi_fadd+0x5e>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	d14a      	bne.n	8000554 <__aeabi_fadd+0xcc>
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d000      	beq.n	80004c4 <__aeabi_fadd+0x3c>
 80004c2:	e095      	b.n	80005f0 <__aeabi_fadd+0x168>
 80004c4:	08ed      	lsrs	r5, r5, #3
 80004c6:	2cff      	cmp	r4, #255	; 0xff
 80004c8:	d100      	bne.n	80004cc <__aeabi_fadd+0x44>
 80004ca:	e088      	b.n	80005de <__aeabi_fadd+0x156>
 80004cc:	026b      	lsls	r3, r5, #9
 80004ce:	0a5b      	lsrs	r3, r3, #9
 80004d0:	b2e6      	uxtb	r6, r4
 80004d2:	025b      	lsls	r3, r3, #9
 80004d4:	05f6      	lsls	r6, r6, #23
 80004d6:	0a58      	lsrs	r0, r3, #9
 80004d8:	4330      	orrs	r0, r6
 80004da:	07d2      	lsls	r2, r2, #31
 80004dc:	4310      	orrs	r0, r2
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4690      	mov	r8, r2
 80004e2:	4699      	mov	r9, r3
 80004e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004e6:	2f00      	cmp	r7, #0
 80004e8:	d000      	beq.n	80004ec <__aeabi_fadd+0x64>
 80004ea:	e087      	b.n	80005fc <__aeabi_fadd+0x174>
 80004ec:	1c60      	adds	r0, r4, #1
 80004ee:	b2c0      	uxtb	r0, r0
 80004f0:	2801      	cmp	r0, #1
 80004f2:	dc00      	bgt.n	80004f6 <__aeabi_fadd+0x6e>
 80004f4:	e0b6      	b.n	8000664 <__aeabi_fadd+0x1dc>
 80004f6:	1aee      	subs	r6, r5, r3
 80004f8:	0172      	lsls	r2, r6, #5
 80004fa:	d500      	bpl.n	80004fe <__aeabi_fadd+0x76>
 80004fc:	e0c5      	b.n	800068a <__aeabi_fadd+0x202>
 80004fe:	2e00      	cmp	r6, #0
 8000500:	d13d      	bne.n	800057e <__aeabi_fadd+0xf6>
 8000502:	2200      	movs	r2, #0
 8000504:	2600      	movs	r6, #0
 8000506:	2300      	movs	r3, #0
 8000508:	e7e3      	b.n	80004d2 <__aeabi_fadd+0x4a>
 800050a:	2f00      	cmp	r7, #0
 800050c:	dc00      	bgt.n	8000510 <__aeabi_fadd+0x88>
 800050e:	e096      	b.n	800063e <__aeabi_fadd+0x1b6>
 8000510:	2800      	cmp	r0, #0
 8000512:	d05d      	beq.n	80005d0 <__aeabi_fadd+0x148>
 8000514:	2cff      	cmp	r4, #255	; 0xff
 8000516:	d060      	beq.n	80005da <__aeabi_fadd+0x152>
 8000518:	2280      	movs	r2, #128	; 0x80
 800051a:	04d2      	lsls	r2, r2, #19
 800051c:	4313      	orrs	r3, r2
 800051e:	2f1b      	cmp	r7, #27
 8000520:	dd00      	ble.n	8000524 <__aeabi_fadd+0x9c>
 8000522:	e0ec      	b.n	80006fe <__aeabi_fadd+0x276>
 8000524:	2220      	movs	r2, #32
 8000526:	1bd2      	subs	r2, r2, r7
 8000528:	0018      	movs	r0, r3
 800052a:	4093      	lsls	r3, r2
 800052c:	40f8      	lsrs	r0, r7
 800052e:	1e5a      	subs	r2, r3, #1
 8000530:	4193      	sbcs	r3, r2
 8000532:	4303      	orrs	r3, r0
 8000534:	18ed      	adds	r5, r5, r3
 8000536:	016b      	lsls	r3, r5, #5
 8000538:	d57b      	bpl.n	8000632 <__aeabi_fadd+0x1aa>
 800053a:	3401      	adds	r4, #1
 800053c:	2cff      	cmp	r4, #255	; 0xff
 800053e:	d100      	bne.n	8000542 <__aeabi_fadd+0xba>
 8000540:	e0b7      	b.n	80006b2 <__aeabi_fadd+0x22a>
 8000542:	2201      	movs	r2, #1
 8000544:	2607      	movs	r6, #7
 8000546:	402a      	ands	r2, r5
 8000548:	086b      	lsrs	r3, r5, #1
 800054a:	4d9a      	ldr	r5, [pc, #616]	; (80007b4 <__aeabi_fadd+0x32c>)
 800054c:	401d      	ands	r5, r3
 800054e:	4315      	orrs	r5, r2
 8000550:	402e      	ands	r6, r5
 8000552:	e029      	b.n	80005a8 <__aeabi_fadd+0x120>
 8000554:	2cff      	cmp	r4, #255	; 0xff
 8000556:	d0b5      	beq.n	80004c4 <__aeabi_fadd+0x3c>
 8000558:	2280      	movs	r2, #128	; 0x80
 800055a:	04d2      	lsls	r2, r2, #19
 800055c:	4313      	orrs	r3, r2
 800055e:	2f1b      	cmp	r7, #27
 8000560:	dd00      	ble.n	8000564 <__aeabi_fadd+0xdc>
 8000562:	e0b2      	b.n	80006ca <__aeabi_fadd+0x242>
 8000564:	2220      	movs	r2, #32
 8000566:	1bd2      	subs	r2, r2, r7
 8000568:	0019      	movs	r1, r3
 800056a:	4093      	lsls	r3, r2
 800056c:	40f9      	lsrs	r1, r7
 800056e:	1e5a      	subs	r2, r3, #1
 8000570:	4193      	sbcs	r3, r2
 8000572:	430b      	orrs	r3, r1
 8000574:	1aed      	subs	r5, r5, r3
 8000576:	016b      	lsls	r3, r5, #5
 8000578:	d55b      	bpl.n	8000632 <__aeabi_fadd+0x1aa>
 800057a:	01ad      	lsls	r5, r5, #6
 800057c:	09ae      	lsrs	r6, r5, #6
 800057e:	0030      	movs	r0, r6
 8000580:	f001 faf2 	bl	8001b68 <__clzsi2>
 8000584:	3805      	subs	r0, #5
 8000586:	4086      	lsls	r6, r0
 8000588:	4284      	cmp	r4, r0
 800058a:	dc65      	bgt.n	8000658 <__aeabi_fadd+0x1d0>
 800058c:	1b04      	subs	r4, r0, r4
 800058e:	0033      	movs	r3, r6
 8000590:	2020      	movs	r0, #32
 8000592:	3401      	adds	r4, #1
 8000594:	40e3      	lsrs	r3, r4
 8000596:	1b04      	subs	r4, r0, r4
 8000598:	40a6      	lsls	r6, r4
 800059a:	1e75      	subs	r5, r6, #1
 800059c:	41ae      	sbcs	r6, r5
 800059e:	4333      	orrs	r3, r6
 80005a0:	2607      	movs	r6, #7
 80005a2:	001d      	movs	r5, r3
 80005a4:	2400      	movs	r4, #0
 80005a6:	401e      	ands	r6, r3
 80005a8:	2201      	movs	r2, #1
 80005aa:	464b      	mov	r3, r9
 80005ac:	401a      	ands	r2, r3
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d004      	beq.n	80005bc <__aeabi_fadd+0x134>
 80005b2:	230f      	movs	r3, #15
 80005b4:	402b      	ands	r3, r5
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d000      	beq.n	80005bc <__aeabi_fadd+0x134>
 80005ba:	3504      	adds	r5, #4
 80005bc:	016b      	lsls	r3, r5, #5
 80005be:	d400      	bmi.n	80005c2 <__aeabi_fadd+0x13a>
 80005c0:	e780      	b.n	80004c4 <__aeabi_fadd+0x3c>
 80005c2:	3401      	adds	r4, #1
 80005c4:	b2e6      	uxtb	r6, r4
 80005c6:	2cff      	cmp	r4, #255	; 0xff
 80005c8:	d12f      	bne.n	800062a <__aeabi_fadd+0x1a2>
 80005ca:	26ff      	movs	r6, #255	; 0xff
 80005cc:	2300      	movs	r3, #0
 80005ce:	e780      	b.n	80004d2 <__aeabi_fadd+0x4a>
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d152      	bne.n	800067a <__aeabi_fadd+0x1f2>
 80005d4:	2cff      	cmp	r4, #255	; 0xff
 80005d6:	d000      	beq.n	80005da <__aeabi_fadd+0x152>
 80005d8:	e774      	b.n	80004c4 <__aeabi_fadd+0x3c>
 80005da:	000a      	movs	r2, r1
 80005dc:	08ed      	lsrs	r5, r5, #3
 80005de:	2d00      	cmp	r5, #0
 80005e0:	d0f3      	beq.n	80005ca <__aeabi_fadd+0x142>
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	03db      	lsls	r3, r3, #15
 80005e6:	432b      	orrs	r3, r5
 80005e8:	025b      	lsls	r3, r3, #9
 80005ea:	0a5b      	lsrs	r3, r3, #9
 80005ec:	26ff      	movs	r6, #255	; 0xff
 80005ee:	e770      	b.n	80004d2 <__aeabi_fadd+0x4a>
 80005f0:	3f01      	subs	r7, #1
 80005f2:	2f00      	cmp	r7, #0
 80005f4:	d0be      	beq.n	8000574 <__aeabi_fadd+0xec>
 80005f6:	2cff      	cmp	r4, #255	; 0xff
 80005f8:	d1b1      	bne.n	800055e <__aeabi_fadd+0xd6>
 80005fa:	e763      	b.n	80004c4 <__aeabi_fadd+0x3c>
 80005fc:	2c00      	cmp	r4, #0
 80005fe:	d047      	beq.n	8000690 <__aeabi_fadd+0x208>
 8000600:	28ff      	cmp	r0, #255	; 0xff
 8000602:	d069      	beq.n	80006d8 <__aeabi_fadd+0x250>
 8000604:	2480      	movs	r4, #128	; 0x80
 8000606:	04e4      	lsls	r4, r4, #19
 8000608:	427a      	negs	r2, r7
 800060a:	4325      	orrs	r5, r4
 800060c:	2a1b      	cmp	r2, #27
 800060e:	dd00      	ble.n	8000612 <__aeabi_fadd+0x18a>
 8000610:	e0c5      	b.n	800079e <__aeabi_fadd+0x316>
 8000612:	002c      	movs	r4, r5
 8000614:	2620      	movs	r6, #32
 8000616:	40d4      	lsrs	r4, r2
 8000618:	1ab2      	subs	r2, r6, r2
 800061a:	4095      	lsls	r5, r2
 800061c:	1e6a      	subs	r2, r5, #1
 800061e:	4195      	sbcs	r5, r2
 8000620:	4325      	orrs	r5, r4
 8000622:	1b5d      	subs	r5, r3, r5
 8000624:	0004      	movs	r4, r0
 8000626:	4689      	mov	r9, r1
 8000628:	e7a5      	b.n	8000576 <__aeabi_fadd+0xee>
 800062a:	01ab      	lsls	r3, r5, #6
 800062c:	0a5b      	lsrs	r3, r3, #9
 800062e:	e750      	b.n	80004d2 <__aeabi_fadd+0x4a>
 8000630:	2400      	movs	r4, #0
 8000632:	2201      	movs	r2, #1
 8000634:	464b      	mov	r3, r9
 8000636:	401a      	ands	r2, r3
 8000638:	076b      	lsls	r3, r5, #29
 800063a:	d1ba      	bne.n	80005b2 <__aeabi_fadd+0x12a>
 800063c:	e742      	b.n	80004c4 <__aeabi_fadd+0x3c>
 800063e:	2f00      	cmp	r7, #0
 8000640:	d13b      	bne.n	80006ba <__aeabi_fadd+0x232>
 8000642:	3401      	adds	r4, #1
 8000644:	b2e0      	uxtb	r0, r4
 8000646:	2801      	cmp	r0, #1
 8000648:	dd4a      	ble.n	80006e0 <__aeabi_fadd+0x258>
 800064a:	2cff      	cmp	r4, #255	; 0xff
 800064c:	d0bd      	beq.n	80005ca <__aeabi_fadd+0x142>
 800064e:	2607      	movs	r6, #7
 8000650:	18ed      	adds	r5, r5, r3
 8000652:	086d      	lsrs	r5, r5, #1
 8000654:	402e      	ands	r6, r5
 8000656:	e7a7      	b.n	80005a8 <__aeabi_fadd+0x120>
 8000658:	2307      	movs	r3, #7
 800065a:	4d57      	ldr	r5, [pc, #348]	; (80007b8 <__aeabi_fadd+0x330>)
 800065c:	1a24      	subs	r4, r4, r0
 800065e:	4035      	ands	r5, r6
 8000660:	401e      	ands	r6, r3
 8000662:	e7a1      	b.n	80005a8 <__aeabi_fadd+0x120>
 8000664:	2c00      	cmp	r4, #0
 8000666:	d11b      	bne.n	80006a0 <__aeabi_fadd+0x218>
 8000668:	2d00      	cmp	r5, #0
 800066a:	d16e      	bne.n	800074a <__aeabi_fadd+0x2c2>
 800066c:	2b00      	cmp	r3, #0
 800066e:	d100      	bne.n	8000672 <__aeabi_fadd+0x1ea>
 8000670:	e09a      	b.n	80007a8 <__aeabi_fadd+0x320>
 8000672:	000a      	movs	r2, r1
 8000674:	001d      	movs	r5, r3
 8000676:	003c      	movs	r4, r7
 8000678:	e724      	b.n	80004c4 <__aeabi_fadd+0x3c>
 800067a:	3f01      	subs	r7, #1
 800067c:	2f00      	cmp	r7, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0x1fa>
 8000680:	e758      	b.n	8000534 <__aeabi_fadd+0xac>
 8000682:	2cff      	cmp	r4, #255	; 0xff
 8000684:	d000      	beq.n	8000688 <__aeabi_fadd+0x200>
 8000686:	e74a      	b.n	800051e <__aeabi_fadd+0x96>
 8000688:	e7a7      	b.n	80005da <__aeabi_fadd+0x152>
 800068a:	1b5e      	subs	r6, r3, r5
 800068c:	4689      	mov	r9, r1
 800068e:	e776      	b.n	800057e <__aeabi_fadd+0xf6>
 8000690:	2d00      	cmp	r5, #0
 8000692:	d11c      	bne.n	80006ce <__aeabi_fadd+0x246>
 8000694:	000a      	movs	r2, r1
 8000696:	28ff      	cmp	r0, #255	; 0xff
 8000698:	d01f      	beq.n	80006da <__aeabi_fadd+0x252>
 800069a:	0004      	movs	r4, r0
 800069c:	001d      	movs	r5, r3
 800069e:	e711      	b.n	80004c4 <__aeabi_fadd+0x3c>
 80006a0:	2d00      	cmp	r5, #0
 80006a2:	d15d      	bne.n	8000760 <__aeabi_fadd+0x2d8>
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d117      	bne.n	80006d8 <__aeabi_fadd+0x250>
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	2200      	movs	r2, #0
 80006ac:	03db      	lsls	r3, r3, #15
 80006ae:	26ff      	movs	r6, #255	; 0xff
 80006b0:	e70f      	b.n	80004d2 <__aeabi_fadd+0x4a>
 80006b2:	000a      	movs	r2, r1
 80006b4:	26ff      	movs	r6, #255	; 0xff
 80006b6:	2300      	movs	r3, #0
 80006b8:	e70b      	b.n	80004d2 <__aeabi_fadd+0x4a>
 80006ba:	2c00      	cmp	r4, #0
 80006bc:	d121      	bne.n	8000702 <__aeabi_fadd+0x27a>
 80006be:	2d00      	cmp	r5, #0
 80006c0:	d166      	bne.n	8000790 <__aeabi_fadd+0x308>
 80006c2:	28ff      	cmp	r0, #255	; 0xff
 80006c4:	d1e9      	bne.n	800069a <__aeabi_fadd+0x212>
 80006c6:	001d      	movs	r5, r3
 80006c8:	e787      	b.n	80005da <__aeabi_fadd+0x152>
 80006ca:	2301      	movs	r3, #1
 80006cc:	e752      	b.n	8000574 <__aeabi_fadd+0xec>
 80006ce:	1c7a      	adds	r2, r7, #1
 80006d0:	d0a7      	beq.n	8000622 <__aeabi_fadd+0x19a>
 80006d2:	43fa      	mvns	r2, r7
 80006d4:	28ff      	cmp	r0, #255	; 0xff
 80006d6:	d199      	bne.n	800060c <__aeabi_fadd+0x184>
 80006d8:	000a      	movs	r2, r1
 80006da:	001d      	movs	r5, r3
 80006dc:	24ff      	movs	r4, #255	; 0xff
 80006de:	e6f1      	b.n	80004c4 <__aeabi_fadd+0x3c>
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d121      	bne.n	8000728 <__aeabi_fadd+0x2a0>
 80006e4:	2d00      	cmp	r5, #0
 80006e6:	d04f      	beq.n	8000788 <__aeabi_fadd+0x300>
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d04c      	beq.n	8000786 <__aeabi_fadd+0x2fe>
 80006ec:	18ed      	adds	r5, r5, r3
 80006ee:	016b      	lsls	r3, r5, #5
 80006f0:	d59e      	bpl.n	8000630 <__aeabi_fadd+0x1a8>
 80006f2:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <__aeabi_fadd+0x330>)
 80006f4:	3607      	adds	r6, #7
 80006f6:	402e      	ands	r6, r5
 80006f8:	2401      	movs	r4, #1
 80006fa:	401d      	ands	r5, r3
 80006fc:	e754      	b.n	80005a8 <__aeabi_fadd+0x120>
 80006fe:	2301      	movs	r3, #1
 8000700:	e718      	b.n	8000534 <__aeabi_fadd+0xac>
 8000702:	28ff      	cmp	r0, #255	; 0xff
 8000704:	d0df      	beq.n	80006c6 <__aeabi_fadd+0x23e>
 8000706:	2480      	movs	r4, #128	; 0x80
 8000708:	04e4      	lsls	r4, r4, #19
 800070a:	427f      	negs	r7, r7
 800070c:	4325      	orrs	r5, r4
 800070e:	2f1b      	cmp	r7, #27
 8000710:	dc4d      	bgt.n	80007ae <__aeabi_fadd+0x326>
 8000712:	2620      	movs	r6, #32
 8000714:	1bf6      	subs	r6, r6, r7
 8000716:	002c      	movs	r4, r5
 8000718:	40b5      	lsls	r5, r6
 800071a:	40fc      	lsrs	r4, r7
 800071c:	1e6a      	subs	r2, r5, #1
 800071e:	4195      	sbcs	r5, r2
 8000720:	4325      	orrs	r5, r4
 8000722:	18ed      	adds	r5, r5, r3
 8000724:	0004      	movs	r4, r0
 8000726:	e706      	b.n	8000536 <__aeabi_fadd+0xae>
 8000728:	2d00      	cmp	r5, #0
 800072a:	d0cc      	beq.n	80006c6 <__aeabi_fadd+0x23e>
 800072c:	2b00      	cmp	r3, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_fadd+0x2aa>
 8000730:	e753      	b.n	80005da <__aeabi_fadd+0x152>
 8000732:	2180      	movs	r1, #128	; 0x80
 8000734:	4660      	mov	r0, ip
 8000736:	03c9      	lsls	r1, r1, #15
 8000738:	4208      	tst	r0, r1
 800073a:	d003      	beq.n	8000744 <__aeabi_fadd+0x2bc>
 800073c:	4640      	mov	r0, r8
 800073e:	4208      	tst	r0, r1
 8000740:	d100      	bne.n	8000744 <__aeabi_fadd+0x2bc>
 8000742:	001d      	movs	r5, r3
 8000744:	2101      	movs	r1, #1
 8000746:	4011      	ands	r1, r2
 8000748:	e747      	b.n	80005da <__aeabi_fadd+0x152>
 800074a:	2b00      	cmp	r3, #0
 800074c:	d100      	bne.n	8000750 <__aeabi_fadd+0x2c8>
 800074e:	e6b9      	b.n	80004c4 <__aeabi_fadd+0x3c>
 8000750:	1aea      	subs	r2, r5, r3
 8000752:	0150      	lsls	r0, r2, #5
 8000754:	d525      	bpl.n	80007a2 <__aeabi_fadd+0x31a>
 8000756:	2607      	movs	r6, #7
 8000758:	1b5d      	subs	r5, r3, r5
 800075a:	402e      	ands	r6, r5
 800075c:	4689      	mov	r9, r1
 800075e:	e723      	b.n	80005a8 <__aeabi_fadd+0x120>
 8000760:	24ff      	movs	r4, #255	; 0xff
 8000762:	2b00      	cmp	r3, #0
 8000764:	d100      	bne.n	8000768 <__aeabi_fadd+0x2e0>
 8000766:	e6ad      	b.n	80004c4 <__aeabi_fadd+0x3c>
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	4660      	mov	r0, ip
 800076c:	03d2      	lsls	r2, r2, #15
 800076e:	4210      	tst	r0, r2
 8000770:	d004      	beq.n	800077c <__aeabi_fadd+0x2f4>
 8000772:	4640      	mov	r0, r8
 8000774:	4210      	tst	r0, r2
 8000776:	d101      	bne.n	800077c <__aeabi_fadd+0x2f4>
 8000778:	001d      	movs	r5, r3
 800077a:	4689      	mov	r9, r1
 800077c:	2201      	movs	r2, #1
 800077e:	464b      	mov	r3, r9
 8000780:	24ff      	movs	r4, #255	; 0xff
 8000782:	401a      	ands	r2, r3
 8000784:	e69e      	b.n	80004c4 <__aeabi_fadd+0x3c>
 8000786:	002b      	movs	r3, r5
 8000788:	08dd      	lsrs	r5, r3, #3
 800078a:	000a      	movs	r2, r1
 800078c:	2400      	movs	r4, #0
 800078e:	e69d      	b.n	80004cc <__aeabi_fadd+0x44>
 8000790:	1c7a      	adds	r2, r7, #1
 8000792:	d0c6      	beq.n	8000722 <__aeabi_fadd+0x29a>
 8000794:	43ff      	mvns	r7, r7
 8000796:	28ff      	cmp	r0, #255	; 0xff
 8000798:	d1b9      	bne.n	800070e <__aeabi_fadd+0x286>
 800079a:	001d      	movs	r5, r3
 800079c:	e71d      	b.n	80005da <__aeabi_fadd+0x152>
 800079e:	2501      	movs	r5, #1
 80007a0:	e73f      	b.n	8000622 <__aeabi_fadd+0x19a>
 80007a2:	1e15      	subs	r5, r2, #0
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fadd+0x320>
 80007a6:	e744      	b.n	8000632 <__aeabi_fadd+0x1aa>
 80007a8:	2200      	movs	r2, #0
 80007aa:	2300      	movs	r3, #0
 80007ac:	e691      	b.n	80004d2 <__aeabi_fadd+0x4a>
 80007ae:	2501      	movs	r5, #1
 80007b0:	e7b7      	b.n	8000722 <__aeabi_fadd+0x29a>
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	7dffffff 	.word	0x7dffffff
 80007b8:	fbffffff 	.word	0xfbffffff

080007bc <__eqsf2>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	0042      	lsls	r2, r0, #1
 80007c0:	024e      	lsls	r6, r1, #9
 80007c2:	004c      	lsls	r4, r1, #1
 80007c4:	0245      	lsls	r5, r0, #9
 80007c6:	0a6d      	lsrs	r5, r5, #9
 80007c8:	0e12      	lsrs	r2, r2, #24
 80007ca:	0fc3      	lsrs	r3, r0, #31
 80007cc:	0a76      	lsrs	r6, r6, #9
 80007ce:	0e24      	lsrs	r4, r4, #24
 80007d0:	0fc9      	lsrs	r1, r1, #31
 80007d2:	2aff      	cmp	r2, #255	; 0xff
 80007d4:	d00f      	beq.n	80007f6 <__eqsf2+0x3a>
 80007d6:	2cff      	cmp	r4, #255	; 0xff
 80007d8:	d011      	beq.n	80007fe <__eqsf2+0x42>
 80007da:	2001      	movs	r0, #1
 80007dc:	42a2      	cmp	r2, r4
 80007de:	d000      	beq.n	80007e2 <__eqsf2+0x26>
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	42b5      	cmp	r5, r6
 80007e4:	d1fc      	bne.n	80007e0 <__eqsf2+0x24>
 80007e6:	428b      	cmp	r3, r1
 80007e8:	d00d      	beq.n	8000806 <__eqsf2+0x4a>
 80007ea:	2a00      	cmp	r2, #0
 80007ec:	d1f8      	bne.n	80007e0 <__eqsf2+0x24>
 80007ee:	0028      	movs	r0, r5
 80007f0:	1e45      	subs	r5, r0, #1
 80007f2:	41a8      	sbcs	r0, r5
 80007f4:	e7f4      	b.n	80007e0 <__eqsf2+0x24>
 80007f6:	2001      	movs	r0, #1
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d1f1      	bne.n	80007e0 <__eqsf2+0x24>
 80007fc:	e7eb      	b.n	80007d6 <__eqsf2+0x1a>
 80007fe:	2001      	movs	r0, #1
 8000800:	2e00      	cmp	r6, #0
 8000802:	d1ed      	bne.n	80007e0 <__eqsf2+0x24>
 8000804:	e7e9      	b.n	80007da <__eqsf2+0x1e>
 8000806:	2000      	movs	r0, #0
 8000808:	e7ea      	b.n	80007e0 <__eqsf2+0x24>
 800080a:	46c0      	nop			; (mov r8, r8)

0800080c <__gesf2>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	004a      	lsls	r2, r1, #1
 8000810:	024e      	lsls	r6, r1, #9
 8000812:	0245      	lsls	r5, r0, #9
 8000814:	0044      	lsls	r4, r0, #1
 8000816:	0a6d      	lsrs	r5, r5, #9
 8000818:	0e24      	lsrs	r4, r4, #24
 800081a:	0fc3      	lsrs	r3, r0, #31
 800081c:	0a76      	lsrs	r6, r6, #9
 800081e:	0e12      	lsrs	r2, r2, #24
 8000820:	0fc9      	lsrs	r1, r1, #31
 8000822:	2cff      	cmp	r4, #255	; 0xff
 8000824:	d015      	beq.n	8000852 <__gesf2+0x46>
 8000826:	2aff      	cmp	r2, #255	; 0xff
 8000828:	d00e      	beq.n	8000848 <__gesf2+0x3c>
 800082a:	2c00      	cmp	r4, #0
 800082c:	d115      	bne.n	800085a <__gesf2+0x4e>
 800082e:	2a00      	cmp	r2, #0
 8000830:	d101      	bne.n	8000836 <__gesf2+0x2a>
 8000832:	2e00      	cmp	r6, #0
 8000834:	d01c      	beq.n	8000870 <__gesf2+0x64>
 8000836:	2d00      	cmp	r5, #0
 8000838:	d014      	beq.n	8000864 <__gesf2+0x58>
 800083a:	428b      	cmp	r3, r1
 800083c:	d027      	beq.n	800088e <__gesf2+0x82>
 800083e:	2002      	movs	r0, #2
 8000840:	3b01      	subs	r3, #1
 8000842:	4018      	ands	r0, r3
 8000844:	3801      	subs	r0, #1
 8000846:	bd70      	pop	{r4, r5, r6, pc}
 8000848:	2e00      	cmp	r6, #0
 800084a:	d0ee      	beq.n	800082a <__gesf2+0x1e>
 800084c:	2002      	movs	r0, #2
 800084e:	4240      	negs	r0, r0
 8000850:	e7f9      	b.n	8000846 <__gesf2+0x3a>
 8000852:	2d00      	cmp	r5, #0
 8000854:	d1fa      	bne.n	800084c <__gesf2+0x40>
 8000856:	2aff      	cmp	r2, #255	; 0xff
 8000858:	d00e      	beq.n	8000878 <__gesf2+0x6c>
 800085a:	2a00      	cmp	r2, #0
 800085c:	d10e      	bne.n	800087c <__gesf2+0x70>
 800085e:	2e00      	cmp	r6, #0
 8000860:	d0ed      	beq.n	800083e <__gesf2+0x32>
 8000862:	e00b      	b.n	800087c <__gesf2+0x70>
 8000864:	2301      	movs	r3, #1
 8000866:	3901      	subs	r1, #1
 8000868:	4399      	bics	r1, r3
 800086a:	0008      	movs	r0, r1
 800086c:	3001      	adds	r0, #1
 800086e:	e7ea      	b.n	8000846 <__gesf2+0x3a>
 8000870:	2000      	movs	r0, #0
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0e7      	beq.n	8000846 <__gesf2+0x3a>
 8000876:	e7e2      	b.n	800083e <__gesf2+0x32>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d1e7      	bne.n	800084c <__gesf2+0x40>
 800087c:	428b      	cmp	r3, r1
 800087e:	d1de      	bne.n	800083e <__gesf2+0x32>
 8000880:	4294      	cmp	r4, r2
 8000882:	dd05      	ble.n	8000890 <__gesf2+0x84>
 8000884:	2102      	movs	r1, #2
 8000886:	1e58      	subs	r0, r3, #1
 8000888:	4008      	ands	r0, r1
 800088a:	3801      	subs	r0, #1
 800088c:	e7db      	b.n	8000846 <__gesf2+0x3a>
 800088e:	2400      	movs	r4, #0
 8000890:	42a2      	cmp	r2, r4
 8000892:	dc04      	bgt.n	800089e <__gesf2+0x92>
 8000894:	42b5      	cmp	r5, r6
 8000896:	d8d2      	bhi.n	800083e <__gesf2+0x32>
 8000898:	2000      	movs	r0, #0
 800089a:	42b5      	cmp	r5, r6
 800089c:	d2d3      	bcs.n	8000846 <__gesf2+0x3a>
 800089e:	1e58      	subs	r0, r3, #1
 80008a0:	2301      	movs	r3, #1
 80008a2:	4398      	bics	r0, r3
 80008a4:	3001      	adds	r0, #1
 80008a6:	e7ce      	b.n	8000846 <__gesf2+0x3a>

080008a8 <__lesf2>:
 80008a8:	b530      	push	{r4, r5, lr}
 80008aa:	0042      	lsls	r2, r0, #1
 80008ac:	0244      	lsls	r4, r0, #9
 80008ae:	024d      	lsls	r5, r1, #9
 80008b0:	0fc3      	lsrs	r3, r0, #31
 80008b2:	0048      	lsls	r0, r1, #1
 80008b4:	0a64      	lsrs	r4, r4, #9
 80008b6:	0e12      	lsrs	r2, r2, #24
 80008b8:	0a6d      	lsrs	r5, r5, #9
 80008ba:	0e00      	lsrs	r0, r0, #24
 80008bc:	0fc9      	lsrs	r1, r1, #31
 80008be:	2aff      	cmp	r2, #255	; 0xff
 80008c0:	d012      	beq.n	80008e8 <__lesf2+0x40>
 80008c2:	28ff      	cmp	r0, #255	; 0xff
 80008c4:	d00c      	beq.n	80008e0 <__lesf2+0x38>
 80008c6:	2a00      	cmp	r2, #0
 80008c8:	d112      	bne.n	80008f0 <__lesf2+0x48>
 80008ca:	2800      	cmp	r0, #0
 80008cc:	d119      	bne.n	8000902 <__lesf2+0x5a>
 80008ce:	2d00      	cmp	r5, #0
 80008d0:	d117      	bne.n	8000902 <__lesf2+0x5a>
 80008d2:	2c00      	cmp	r4, #0
 80008d4:	d02b      	beq.n	800092e <__lesf2+0x86>
 80008d6:	2002      	movs	r0, #2
 80008d8:	3b01      	subs	r3, #1
 80008da:	4018      	ands	r0, r3
 80008dc:	3801      	subs	r0, #1
 80008de:	e026      	b.n	800092e <__lesf2+0x86>
 80008e0:	2d00      	cmp	r5, #0
 80008e2:	d0f0      	beq.n	80008c6 <__lesf2+0x1e>
 80008e4:	2002      	movs	r0, #2
 80008e6:	e022      	b.n	800092e <__lesf2+0x86>
 80008e8:	2c00      	cmp	r4, #0
 80008ea:	d1fb      	bne.n	80008e4 <__lesf2+0x3c>
 80008ec:	28ff      	cmp	r0, #255	; 0xff
 80008ee:	d01f      	beq.n	8000930 <__lesf2+0x88>
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d11f      	bne.n	8000934 <__lesf2+0x8c>
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d11d      	bne.n	8000934 <__lesf2+0x8c>
 80008f8:	2002      	movs	r0, #2
 80008fa:	3b01      	subs	r3, #1
 80008fc:	4018      	ands	r0, r3
 80008fe:	3801      	subs	r0, #1
 8000900:	e015      	b.n	800092e <__lesf2+0x86>
 8000902:	2c00      	cmp	r4, #0
 8000904:	d00e      	beq.n	8000924 <__lesf2+0x7c>
 8000906:	428b      	cmp	r3, r1
 8000908:	d1e5      	bne.n	80008d6 <__lesf2+0x2e>
 800090a:	2200      	movs	r2, #0
 800090c:	4290      	cmp	r0, r2
 800090e:	dc04      	bgt.n	800091a <__lesf2+0x72>
 8000910:	42ac      	cmp	r4, r5
 8000912:	d8e0      	bhi.n	80008d6 <__lesf2+0x2e>
 8000914:	2000      	movs	r0, #0
 8000916:	42ac      	cmp	r4, r5
 8000918:	d209      	bcs.n	800092e <__lesf2+0x86>
 800091a:	1e58      	subs	r0, r3, #1
 800091c:	2301      	movs	r3, #1
 800091e:	4398      	bics	r0, r3
 8000920:	3001      	adds	r0, #1
 8000922:	e004      	b.n	800092e <__lesf2+0x86>
 8000924:	2301      	movs	r3, #1
 8000926:	3901      	subs	r1, #1
 8000928:	4399      	bics	r1, r3
 800092a:	0008      	movs	r0, r1
 800092c:	3001      	adds	r0, #1
 800092e:	bd30      	pop	{r4, r5, pc}
 8000930:	2d00      	cmp	r5, #0
 8000932:	d1d7      	bne.n	80008e4 <__lesf2+0x3c>
 8000934:	428b      	cmp	r3, r1
 8000936:	d1ce      	bne.n	80008d6 <__lesf2+0x2e>
 8000938:	4282      	cmp	r2, r0
 800093a:	dde7      	ble.n	800090c <__lesf2+0x64>
 800093c:	2102      	movs	r1, #2
 800093e:	1e58      	subs	r0, r3, #1
 8000940:	4008      	ands	r0, r1
 8000942:	3801      	subs	r0, #1
 8000944:	e7f3      	b.n	800092e <__lesf2+0x86>
 8000946:	46c0      	nop			; (mov r8, r8)

08000948 <__aeabi_fsub>:
 8000948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094a:	4647      	mov	r7, r8
 800094c:	46ce      	mov	lr, r9
 800094e:	0044      	lsls	r4, r0, #1
 8000950:	0fc2      	lsrs	r2, r0, #31
 8000952:	b580      	push	{r7, lr}
 8000954:	0247      	lsls	r7, r0, #9
 8000956:	0248      	lsls	r0, r1, #9
 8000958:	0a40      	lsrs	r0, r0, #9
 800095a:	4684      	mov	ip, r0
 800095c:	4666      	mov	r6, ip
 800095e:	0048      	lsls	r0, r1, #1
 8000960:	0a7f      	lsrs	r7, r7, #9
 8000962:	0e24      	lsrs	r4, r4, #24
 8000964:	00f6      	lsls	r6, r6, #3
 8000966:	0025      	movs	r5, r4
 8000968:	4690      	mov	r8, r2
 800096a:	00fb      	lsls	r3, r7, #3
 800096c:	0e00      	lsrs	r0, r0, #24
 800096e:	0fc9      	lsrs	r1, r1, #31
 8000970:	46b1      	mov	r9, r6
 8000972:	28ff      	cmp	r0, #255	; 0xff
 8000974:	d100      	bne.n	8000978 <__aeabi_fsub+0x30>
 8000976:	e085      	b.n	8000a84 <__aeabi_fsub+0x13c>
 8000978:	2601      	movs	r6, #1
 800097a:	4071      	eors	r1, r6
 800097c:	1a26      	subs	r6, r4, r0
 800097e:	4291      	cmp	r1, r2
 8000980:	d057      	beq.n	8000a32 <__aeabi_fsub+0xea>
 8000982:	2e00      	cmp	r6, #0
 8000984:	dd43      	ble.n	8000a0e <__aeabi_fsub+0xc6>
 8000986:	2800      	cmp	r0, #0
 8000988:	d000      	beq.n	800098c <__aeabi_fsub+0x44>
 800098a:	e07f      	b.n	8000a8c <__aeabi_fsub+0x144>
 800098c:	4649      	mov	r1, r9
 800098e:	2900      	cmp	r1, #0
 8000990:	d100      	bne.n	8000994 <__aeabi_fsub+0x4c>
 8000992:	e0aa      	b.n	8000aea <__aeabi_fsub+0x1a2>
 8000994:	3e01      	subs	r6, #1
 8000996:	2e00      	cmp	r6, #0
 8000998:	d000      	beq.n	800099c <__aeabi_fsub+0x54>
 800099a:	e0f7      	b.n	8000b8c <__aeabi_fsub+0x244>
 800099c:	1a5b      	subs	r3, r3, r1
 800099e:	015a      	lsls	r2, r3, #5
 80009a0:	d400      	bmi.n	80009a4 <__aeabi_fsub+0x5c>
 80009a2:	e08b      	b.n	8000abc <__aeabi_fsub+0x174>
 80009a4:	019b      	lsls	r3, r3, #6
 80009a6:	099c      	lsrs	r4, r3, #6
 80009a8:	0020      	movs	r0, r4
 80009aa:	f001 f8dd 	bl	8001b68 <__clzsi2>
 80009ae:	3805      	subs	r0, #5
 80009b0:	4084      	lsls	r4, r0
 80009b2:	4285      	cmp	r5, r0
 80009b4:	dd00      	ble.n	80009b8 <__aeabi_fsub+0x70>
 80009b6:	e0d3      	b.n	8000b60 <__aeabi_fsub+0x218>
 80009b8:	1b45      	subs	r5, r0, r5
 80009ba:	0023      	movs	r3, r4
 80009bc:	2020      	movs	r0, #32
 80009be:	3501      	adds	r5, #1
 80009c0:	40eb      	lsrs	r3, r5
 80009c2:	1b45      	subs	r5, r0, r5
 80009c4:	40ac      	lsls	r4, r5
 80009c6:	1e62      	subs	r2, r4, #1
 80009c8:	4194      	sbcs	r4, r2
 80009ca:	4323      	orrs	r3, r4
 80009cc:	2407      	movs	r4, #7
 80009ce:	2500      	movs	r5, #0
 80009d0:	401c      	ands	r4, r3
 80009d2:	2201      	movs	r2, #1
 80009d4:	4641      	mov	r1, r8
 80009d6:	400a      	ands	r2, r1
 80009d8:	2c00      	cmp	r4, #0
 80009da:	d004      	beq.n	80009e6 <__aeabi_fsub+0x9e>
 80009dc:	210f      	movs	r1, #15
 80009de:	4019      	ands	r1, r3
 80009e0:	2904      	cmp	r1, #4
 80009e2:	d000      	beq.n	80009e6 <__aeabi_fsub+0x9e>
 80009e4:	3304      	adds	r3, #4
 80009e6:	0159      	lsls	r1, r3, #5
 80009e8:	d400      	bmi.n	80009ec <__aeabi_fsub+0xa4>
 80009ea:	e080      	b.n	8000aee <__aeabi_fsub+0x1a6>
 80009ec:	3501      	adds	r5, #1
 80009ee:	b2ec      	uxtb	r4, r5
 80009f0:	2dff      	cmp	r5, #255	; 0xff
 80009f2:	d000      	beq.n	80009f6 <__aeabi_fsub+0xae>
 80009f4:	e0a3      	b.n	8000b3e <__aeabi_fsub+0x1f6>
 80009f6:	24ff      	movs	r4, #255	; 0xff
 80009f8:	2300      	movs	r3, #0
 80009fa:	025b      	lsls	r3, r3, #9
 80009fc:	05e4      	lsls	r4, r4, #23
 80009fe:	0a58      	lsrs	r0, r3, #9
 8000a00:	07d2      	lsls	r2, r2, #31
 8000a02:	4320      	orrs	r0, r4
 8000a04:	4310      	orrs	r0, r2
 8000a06:	bc0c      	pop	{r2, r3}
 8000a08:	4690      	mov	r8, r2
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d174      	bne.n	8000afc <__aeabi_fsub+0x1b4>
 8000a12:	1c60      	adds	r0, r4, #1
 8000a14:	b2c0      	uxtb	r0, r0
 8000a16:	2801      	cmp	r0, #1
 8000a18:	dc00      	bgt.n	8000a1c <__aeabi_fsub+0xd4>
 8000a1a:	e0a7      	b.n	8000b6c <__aeabi_fsub+0x224>
 8000a1c:	464a      	mov	r2, r9
 8000a1e:	1a9c      	subs	r4, r3, r2
 8000a20:	0162      	lsls	r2, r4, #5
 8000a22:	d500      	bpl.n	8000a26 <__aeabi_fsub+0xde>
 8000a24:	e0b6      	b.n	8000b94 <__aeabi_fsub+0x24c>
 8000a26:	2c00      	cmp	r4, #0
 8000a28:	d1be      	bne.n	80009a8 <__aeabi_fsub+0x60>
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e7e3      	b.n	80009fa <__aeabi_fsub+0xb2>
 8000a32:	2e00      	cmp	r6, #0
 8000a34:	dc00      	bgt.n	8000a38 <__aeabi_fsub+0xf0>
 8000a36:	e085      	b.n	8000b44 <__aeabi_fsub+0x1fc>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d046      	beq.n	8000aca <__aeabi_fsub+0x182>
 8000a3c:	2cff      	cmp	r4, #255	; 0xff
 8000a3e:	d049      	beq.n	8000ad4 <__aeabi_fsub+0x18c>
 8000a40:	2280      	movs	r2, #128	; 0x80
 8000a42:	4648      	mov	r0, r9
 8000a44:	04d2      	lsls	r2, r2, #19
 8000a46:	4310      	orrs	r0, r2
 8000a48:	4681      	mov	r9, r0
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2e1b      	cmp	r6, #27
 8000a4e:	dc09      	bgt.n	8000a64 <__aeabi_fsub+0x11c>
 8000a50:	2020      	movs	r0, #32
 8000a52:	464c      	mov	r4, r9
 8000a54:	1b80      	subs	r0, r0, r6
 8000a56:	4084      	lsls	r4, r0
 8000a58:	464a      	mov	r2, r9
 8000a5a:	0020      	movs	r0, r4
 8000a5c:	40f2      	lsrs	r2, r6
 8000a5e:	1e44      	subs	r4, r0, #1
 8000a60:	41a0      	sbcs	r0, r4
 8000a62:	4302      	orrs	r2, r0
 8000a64:	189b      	adds	r3, r3, r2
 8000a66:	015a      	lsls	r2, r3, #5
 8000a68:	d528      	bpl.n	8000abc <__aeabi_fsub+0x174>
 8000a6a:	3501      	adds	r5, #1
 8000a6c:	2dff      	cmp	r5, #255	; 0xff
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_fsub+0x12a>
 8000a70:	e0a8      	b.n	8000bc4 <__aeabi_fsub+0x27c>
 8000a72:	2201      	movs	r2, #1
 8000a74:	2407      	movs	r4, #7
 8000a76:	4994      	ldr	r1, [pc, #592]	; (8000cc8 <__aeabi_fsub+0x380>)
 8000a78:	401a      	ands	r2, r3
 8000a7a:	085b      	lsrs	r3, r3, #1
 8000a7c:	400b      	ands	r3, r1
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	401c      	ands	r4, r3
 8000a82:	e7a6      	b.n	80009d2 <__aeabi_fsub+0x8a>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d000      	beq.n	8000a8a <__aeabi_fsub+0x142>
 8000a88:	e778      	b.n	800097c <__aeabi_fsub+0x34>
 8000a8a:	e775      	b.n	8000978 <__aeabi_fsub+0x30>
 8000a8c:	2cff      	cmp	r4, #255	; 0xff
 8000a8e:	d054      	beq.n	8000b3a <__aeabi_fsub+0x1f2>
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	4649      	mov	r1, r9
 8000a94:	04d2      	lsls	r2, r2, #19
 8000a96:	4311      	orrs	r1, r2
 8000a98:	4689      	mov	r9, r1
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2e1b      	cmp	r6, #27
 8000a9e:	dc09      	bgt.n	8000ab4 <__aeabi_fsub+0x16c>
 8000aa0:	2120      	movs	r1, #32
 8000aa2:	4648      	mov	r0, r9
 8000aa4:	1b89      	subs	r1, r1, r6
 8000aa6:	4088      	lsls	r0, r1
 8000aa8:	464a      	mov	r2, r9
 8000aaa:	0001      	movs	r1, r0
 8000aac:	40f2      	lsrs	r2, r6
 8000aae:	1e48      	subs	r0, r1, #1
 8000ab0:	4181      	sbcs	r1, r0
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	1a9b      	subs	r3, r3, r2
 8000ab6:	015a      	lsls	r2, r3, #5
 8000ab8:	d500      	bpl.n	8000abc <__aeabi_fsub+0x174>
 8000aba:	e773      	b.n	80009a4 <__aeabi_fsub+0x5c>
 8000abc:	2201      	movs	r2, #1
 8000abe:	4641      	mov	r1, r8
 8000ac0:	400a      	ands	r2, r1
 8000ac2:	0759      	lsls	r1, r3, #29
 8000ac4:	d000      	beq.n	8000ac8 <__aeabi_fsub+0x180>
 8000ac6:	e789      	b.n	80009dc <__aeabi_fsub+0x94>
 8000ac8:	e011      	b.n	8000aee <__aeabi_fsub+0x1a6>
 8000aca:	4648      	mov	r0, r9
 8000acc:	2800      	cmp	r0, #0
 8000ace:	d158      	bne.n	8000b82 <__aeabi_fsub+0x23a>
 8000ad0:	2cff      	cmp	r4, #255	; 0xff
 8000ad2:	d10c      	bne.n	8000aee <__aeabi_fsub+0x1a6>
 8000ad4:	08db      	lsrs	r3, r3, #3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fsub+0x194>
 8000ada:	e78c      	b.n	80009f6 <__aeabi_fsub+0xae>
 8000adc:	2080      	movs	r0, #128	; 0x80
 8000ade:	03c0      	lsls	r0, r0, #15
 8000ae0:	4303      	orrs	r3, r0
 8000ae2:	025b      	lsls	r3, r3, #9
 8000ae4:	0a5b      	lsrs	r3, r3, #9
 8000ae6:	24ff      	movs	r4, #255	; 0xff
 8000ae8:	e787      	b.n	80009fa <__aeabi_fsub+0xb2>
 8000aea:	2cff      	cmp	r4, #255	; 0xff
 8000aec:	d025      	beq.n	8000b3a <__aeabi_fsub+0x1f2>
 8000aee:	08db      	lsrs	r3, r3, #3
 8000af0:	2dff      	cmp	r5, #255	; 0xff
 8000af2:	d0f0      	beq.n	8000ad6 <__aeabi_fsub+0x18e>
 8000af4:	025b      	lsls	r3, r3, #9
 8000af6:	0a5b      	lsrs	r3, r3, #9
 8000af8:	b2ec      	uxtb	r4, r5
 8000afa:	e77e      	b.n	80009fa <__aeabi_fsub+0xb2>
 8000afc:	2c00      	cmp	r4, #0
 8000afe:	d04d      	beq.n	8000b9c <__aeabi_fsub+0x254>
 8000b00:	28ff      	cmp	r0, #255	; 0xff
 8000b02:	d018      	beq.n	8000b36 <__aeabi_fsub+0x1ee>
 8000b04:	2480      	movs	r4, #128	; 0x80
 8000b06:	04e4      	lsls	r4, r4, #19
 8000b08:	4272      	negs	r2, r6
 8000b0a:	4323      	orrs	r3, r4
 8000b0c:	2a1b      	cmp	r2, #27
 8000b0e:	dd00      	ble.n	8000b12 <__aeabi_fsub+0x1ca>
 8000b10:	e0c4      	b.n	8000c9c <__aeabi_fsub+0x354>
 8000b12:	001c      	movs	r4, r3
 8000b14:	2520      	movs	r5, #32
 8000b16:	40d4      	lsrs	r4, r2
 8000b18:	1aaa      	subs	r2, r5, r2
 8000b1a:	4093      	lsls	r3, r2
 8000b1c:	1e5a      	subs	r2, r3, #1
 8000b1e:	4193      	sbcs	r3, r2
 8000b20:	4323      	orrs	r3, r4
 8000b22:	464a      	mov	r2, r9
 8000b24:	0005      	movs	r5, r0
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	4688      	mov	r8, r1
 8000b2a:	e738      	b.n	800099e <__aeabi_fsub+0x56>
 8000b2c:	1c72      	adds	r2, r6, #1
 8000b2e:	d0f8      	beq.n	8000b22 <__aeabi_fsub+0x1da>
 8000b30:	43f2      	mvns	r2, r6
 8000b32:	28ff      	cmp	r0, #255	; 0xff
 8000b34:	d1ea      	bne.n	8000b0c <__aeabi_fsub+0x1c4>
 8000b36:	000a      	movs	r2, r1
 8000b38:	464b      	mov	r3, r9
 8000b3a:	25ff      	movs	r5, #255	; 0xff
 8000b3c:	e7d7      	b.n	8000aee <__aeabi_fsub+0x1a6>
 8000b3e:	019b      	lsls	r3, r3, #6
 8000b40:	0a5b      	lsrs	r3, r3, #9
 8000b42:	e75a      	b.n	80009fa <__aeabi_fsub+0xb2>
 8000b44:	2e00      	cmp	r6, #0
 8000b46:	d141      	bne.n	8000bcc <__aeabi_fsub+0x284>
 8000b48:	1c65      	adds	r5, r4, #1
 8000b4a:	b2e9      	uxtb	r1, r5
 8000b4c:	2901      	cmp	r1, #1
 8000b4e:	dd45      	ble.n	8000bdc <__aeabi_fsub+0x294>
 8000b50:	2dff      	cmp	r5, #255	; 0xff
 8000b52:	d100      	bne.n	8000b56 <__aeabi_fsub+0x20e>
 8000b54:	e74f      	b.n	80009f6 <__aeabi_fsub+0xae>
 8000b56:	2407      	movs	r4, #7
 8000b58:	444b      	add	r3, r9
 8000b5a:	085b      	lsrs	r3, r3, #1
 8000b5c:	401c      	ands	r4, r3
 8000b5e:	e738      	b.n	80009d2 <__aeabi_fsub+0x8a>
 8000b60:	2207      	movs	r2, #7
 8000b62:	4b5a      	ldr	r3, [pc, #360]	; (8000ccc <__aeabi_fsub+0x384>)
 8000b64:	1a2d      	subs	r5, r5, r0
 8000b66:	4023      	ands	r3, r4
 8000b68:	4014      	ands	r4, r2
 8000b6a:	e732      	b.n	80009d2 <__aeabi_fsub+0x8a>
 8000b6c:	2c00      	cmp	r4, #0
 8000b6e:	d11d      	bne.n	8000bac <__aeabi_fsub+0x264>
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d17a      	bne.n	8000c6a <__aeabi_fsub+0x322>
 8000b74:	464b      	mov	r3, r9
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fsub+0x234>
 8000b7a:	e091      	b.n	8000ca0 <__aeabi_fsub+0x358>
 8000b7c:	000a      	movs	r2, r1
 8000b7e:	2500      	movs	r5, #0
 8000b80:	e7b5      	b.n	8000aee <__aeabi_fsub+0x1a6>
 8000b82:	3e01      	subs	r6, #1
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d119      	bne.n	8000bbc <__aeabi_fsub+0x274>
 8000b88:	444b      	add	r3, r9
 8000b8a:	e76c      	b.n	8000a66 <__aeabi_fsub+0x11e>
 8000b8c:	2cff      	cmp	r4, #255	; 0xff
 8000b8e:	d184      	bne.n	8000a9a <__aeabi_fsub+0x152>
 8000b90:	25ff      	movs	r5, #255	; 0xff
 8000b92:	e7ac      	b.n	8000aee <__aeabi_fsub+0x1a6>
 8000b94:	464a      	mov	r2, r9
 8000b96:	4688      	mov	r8, r1
 8000b98:	1ad4      	subs	r4, r2, r3
 8000b9a:	e705      	b.n	80009a8 <__aeabi_fsub+0x60>
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1c5      	bne.n	8000b2c <__aeabi_fsub+0x1e4>
 8000ba0:	000a      	movs	r2, r1
 8000ba2:	28ff      	cmp	r0, #255	; 0xff
 8000ba4:	d0c8      	beq.n	8000b38 <__aeabi_fsub+0x1f0>
 8000ba6:	0005      	movs	r5, r0
 8000ba8:	464b      	mov	r3, r9
 8000baa:	e7a0      	b.n	8000aee <__aeabi_fsub+0x1a6>
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d149      	bne.n	8000c44 <__aeabi_fsub+0x2fc>
 8000bb0:	464b      	mov	r3, r9
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d077      	beq.n	8000ca6 <__aeabi_fsub+0x35e>
 8000bb6:	000a      	movs	r2, r1
 8000bb8:	25ff      	movs	r5, #255	; 0xff
 8000bba:	e798      	b.n	8000aee <__aeabi_fsub+0x1a6>
 8000bbc:	2cff      	cmp	r4, #255	; 0xff
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_fsub+0x27a>
 8000bc0:	e743      	b.n	8000a4a <__aeabi_fsub+0x102>
 8000bc2:	e787      	b.n	8000ad4 <__aeabi_fsub+0x18c>
 8000bc4:	000a      	movs	r2, r1
 8000bc6:	24ff      	movs	r4, #255	; 0xff
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e716      	b.n	80009fa <__aeabi_fsub+0xb2>
 8000bcc:	2c00      	cmp	r4, #0
 8000bce:	d115      	bne.n	8000bfc <__aeabi_fsub+0x2b4>
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d157      	bne.n	8000c84 <__aeabi_fsub+0x33c>
 8000bd4:	28ff      	cmp	r0, #255	; 0xff
 8000bd6:	d1e6      	bne.n	8000ba6 <__aeabi_fsub+0x25e>
 8000bd8:	464b      	mov	r3, r9
 8000bda:	e77b      	b.n	8000ad4 <__aeabi_fsub+0x18c>
 8000bdc:	2c00      	cmp	r4, #0
 8000bde:	d120      	bne.n	8000c22 <__aeabi_fsub+0x2da>
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d057      	beq.n	8000c94 <__aeabi_fsub+0x34c>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d053      	beq.n	8000c92 <__aeabi_fsub+0x34a>
 8000bea:	444b      	add	r3, r9
 8000bec:	015a      	lsls	r2, r3, #5
 8000bee:	d568      	bpl.n	8000cc2 <__aeabi_fsub+0x37a>
 8000bf0:	2407      	movs	r4, #7
 8000bf2:	4a36      	ldr	r2, [pc, #216]	; (8000ccc <__aeabi_fsub+0x384>)
 8000bf4:	401c      	ands	r4, r3
 8000bf6:	2501      	movs	r5, #1
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	e6ea      	b.n	80009d2 <__aeabi_fsub+0x8a>
 8000bfc:	28ff      	cmp	r0, #255	; 0xff
 8000bfe:	d0eb      	beq.n	8000bd8 <__aeabi_fsub+0x290>
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	04d2      	lsls	r2, r2, #19
 8000c04:	4276      	negs	r6, r6
 8000c06:	4313      	orrs	r3, r2
 8000c08:	2e1b      	cmp	r6, #27
 8000c0a:	dc53      	bgt.n	8000cb4 <__aeabi_fsub+0x36c>
 8000c0c:	2520      	movs	r5, #32
 8000c0e:	1bad      	subs	r5, r5, r6
 8000c10:	001a      	movs	r2, r3
 8000c12:	40ab      	lsls	r3, r5
 8000c14:	40f2      	lsrs	r2, r6
 8000c16:	1e5c      	subs	r4, r3, #1
 8000c18:	41a3      	sbcs	r3, r4
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	444b      	add	r3, r9
 8000c1e:	0005      	movs	r5, r0
 8000c20:	e721      	b.n	8000a66 <__aeabi_fsub+0x11e>
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0d8      	beq.n	8000bd8 <__aeabi_fsub+0x290>
 8000c26:	4649      	mov	r1, r9
 8000c28:	2900      	cmp	r1, #0
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_fsub+0x2e6>
 8000c2c:	e752      	b.n	8000ad4 <__aeabi_fsub+0x18c>
 8000c2e:	2180      	movs	r1, #128	; 0x80
 8000c30:	03c9      	lsls	r1, r1, #15
 8000c32:	420f      	tst	r7, r1
 8000c34:	d100      	bne.n	8000c38 <__aeabi_fsub+0x2f0>
 8000c36:	e74d      	b.n	8000ad4 <__aeabi_fsub+0x18c>
 8000c38:	4660      	mov	r0, ip
 8000c3a:	4208      	tst	r0, r1
 8000c3c:	d000      	beq.n	8000c40 <__aeabi_fsub+0x2f8>
 8000c3e:	e749      	b.n	8000ad4 <__aeabi_fsub+0x18c>
 8000c40:	464b      	mov	r3, r9
 8000c42:	e747      	b.n	8000ad4 <__aeabi_fsub+0x18c>
 8000c44:	4648      	mov	r0, r9
 8000c46:	25ff      	movs	r5, #255	; 0xff
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_fsub+0x306>
 8000c4c:	e74f      	b.n	8000aee <__aeabi_fsub+0x1a6>
 8000c4e:	2280      	movs	r2, #128	; 0x80
 8000c50:	03d2      	lsls	r2, r2, #15
 8000c52:	4217      	tst	r7, r2
 8000c54:	d004      	beq.n	8000c60 <__aeabi_fsub+0x318>
 8000c56:	4660      	mov	r0, ip
 8000c58:	4210      	tst	r0, r2
 8000c5a:	d101      	bne.n	8000c60 <__aeabi_fsub+0x318>
 8000c5c:	464b      	mov	r3, r9
 8000c5e:	4688      	mov	r8, r1
 8000c60:	2201      	movs	r2, #1
 8000c62:	4641      	mov	r1, r8
 8000c64:	25ff      	movs	r5, #255	; 0xff
 8000c66:	400a      	ands	r2, r1
 8000c68:	e741      	b.n	8000aee <__aeabi_fsub+0x1a6>
 8000c6a:	4648      	mov	r0, r9
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	d01f      	beq.n	8000cb0 <__aeabi_fsub+0x368>
 8000c70:	1a1a      	subs	r2, r3, r0
 8000c72:	0150      	lsls	r0, r2, #5
 8000c74:	d520      	bpl.n	8000cb8 <__aeabi_fsub+0x370>
 8000c76:	464a      	mov	r2, r9
 8000c78:	2407      	movs	r4, #7
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	401c      	ands	r4, r3
 8000c7e:	4688      	mov	r8, r1
 8000c80:	2500      	movs	r5, #0
 8000c82:	e6a6      	b.n	80009d2 <__aeabi_fsub+0x8a>
 8000c84:	1c74      	adds	r4, r6, #1
 8000c86:	d0c9      	beq.n	8000c1c <__aeabi_fsub+0x2d4>
 8000c88:	43f6      	mvns	r6, r6
 8000c8a:	28ff      	cmp	r0, #255	; 0xff
 8000c8c:	d1bc      	bne.n	8000c08 <__aeabi_fsub+0x2c0>
 8000c8e:	464b      	mov	r3, r9
 8000c90:	e720      	b.n	8000ad4 <__aeabi_fsub+0x18c>
 8000c92:	4699      	mov	r9, r3
 8000c94:	464b      	mov	r3, r9
 8000c96:	2500      	movs	r5, #0
 8000c98:	08db      	lsrs	r3, r3, #3
 8000c9a:	e72b      	b.n	8000af4 <__aeabi_fsub+0x1ac>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e740      	b.n	8000b22 <__aeabi_fsub+0x1da>
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e6a9      	b.n	80009fa <__aeabi_fsub+0xb2>
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	2200      	movs	r2, #0
 8000caa:	03db      	lsls	r3, r3, #15
 8000cac:	24ff      	movs	r4, #255	; 0xff
 8000cae:	e6a4      	b.n	80009fa <__aeabi_fsub+0xb2>
 8000cb0:	2500      	movs	r5, #0
 8000cb2:	e71c      	b.n	8000aee <__aeabi_fsub+0x1a6>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e7b1      	b.n	8000c1c <__aeabi_fsub+0x2d4>
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	d0f1      	beq.n	8000ca0 <__aeabi_fsub+0x358>
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	2500      	movs	r5, #0
 8000cc0:	e6fc      	b.n	8000abc <__aeabi_fsub+0x174>
 8000cc2:	2500      	movs	r5, #0
 8000cc4:	e6fa      	b.n	8000abc <__aeabi_fsub+0x174>
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	7dffffff 	.word	0x7dffffff
 8000ccc:	fbffffff 	.word	0xfbffffff

08000cd0 <__aeabi_f2iz>:
 8000cd0:	0241      	lsls	r1, r0, #9
 8000cd2:	0042      	lsls	r2, r0, #1
 8000cd4:	0fc3      	lsrs	r3, r0, #31
 8000cd6:	0a49      	lsrs	r1, r1, #9
 8000cd8:	0e12      	lsrs	r2, r2, #24
 8000cda:	2000      	movs	r0, #0
 8000cdc:	2a7e      	cmp	r2, #126	; 0x7e
 8000cde:	d90d      	bls.n	8000cfc <__aeabi_f2iz+0x2c>
 8000ce0:	2a9d      	cmp	r2, #157	; 0x9d
 8000ce2:	d80c      	bhi.n	8000cfe <__aeabi_f2iz+0x2e>
 8000ce4:	2080      	movs	r0, #128	; 0x80
 8000ce6:	0400      	lsls	r0, r0, #16
 8000ce8:	4301      	orrs	r1, r0
 8000cea:	2a95      	cmp	r2, #149	; 0x95
 8000cec:	dc0a      	bgt.n	8000d04 <__aeabi_f2iz+0x34>
 8000cee:	2096      	movs	r0, #150	; 0x96
 8000cf0:	1a82      	subs	r2, r0, r2
 8000cf2:	40d1      	lsrs	r1, r2
 8000cf4:	4248      	negs	r0, r1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_f2iz+0x2c>
 8000cfa:	0008      	movs	r0, r1
 8000cfc:	4770      	bx	lr
 8000cfe:	4a03      	ldr	r2, [pc, #12]	; (8000d0c <__aeabi_f2iz+0x3c>)
 8000d00:	1898      	adds	r0, r3, r2
 8000d02:	e7fb      	b.n	8000cfc <__aeabi_f2iz+0x2c>
 8000d04:	3a96      	subs	r2, #150	; 0x96
 8000d06:	4091      	lsls	r1, r2
 8000d08:	e7f4      	b.n	8000cf4 <__aeabi_f2iz+0x24>
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	7fffffff 	.word	0x7fffffff

08000d10 <__aeabi_ui2f>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	1e04      	subs	r4, r0, #0
 8000d14:	d034      	beq.n	8000d80 <__aeabi_ui2f+0x70>
 8000d16:	f000 ff27 	bl	8001b68 <__clzsi2>
 8000d1a:	229e      	movs	r2, #158	; 0x9e
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	2a96      	cmp	r2, #150	; 0x96
 8000d20:	dc07      	bgt.n	8000d32 <__aeabi_ui2f+0x22>
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	2808      	cmp	r0, #8
 8000d26:	dd2e      	ble.n	8000d86 <__aeabi_ui2f+0x76>
 8000d28:	3808      	subs	r0, #8
 8000d2a:	4084      	lsls	r4, r0
 8000d2c:	0260      	lsls	r0, r4, #9
 8000d2e:	0a40      	lsrs	r0, r0, #9
 8000d30:	e021      	b.n	8000d76 <__aeabi_ui2f+0x66>
 8000d32:	2a99      	cmp	r2, #153	; 0x99
 8000d34:	dd09      	ble.n	8000d4a <__aeabi_ui2f+0x3a>
 8000d36:	0003      	movs	r3, r0
 8000d38:	0021      	movs	r1, r4
 8000d3a:	331b      	adds	r3, #27
 8000d3c:	4099      	lsls	r1, r3
 8000d3e:	1e4b      	subs	r3, r1, #1
 8000d40:	4199      	sbcs	r1, r3
 8000d42:	2305      	movs	r3, #5
 8000d44:	1a1b      	subs	r3, r3, r0
 8000d46:	40dc      	lsrs	r4, r3
 8000d48:	430c      	orrs	r4, r1
 8000d4a:	2805      	cmp	r0, #5
 8000d4c:	dd01      	ble.n	8000d52 <__aeabi_ui2f+0x42>
 8000d4e:	1f43      	subs	r3, r0, #5
 8000d50:	409c      	lsls	r4, r3
 8000d52:	0023      	movs	r3, r4
 8000d54:	490d      	ldr	r1, [pc, #52]	; (8000d8c <__aeabi_ui2f+0x7c>)
 8000d56:	400b      	ands	r3, r1
 8000d58:	0765      	lsls	r5, r4, #29
 8000d5a:	d009      	beq.n	8000d70 <__aeabi_ui2f+0x60>
 8000d5c:	250f      	movs	r5, #15
 8000d5e:	402c      	ands	r4, r5
 8000d60:	2c04      	cmp	r4, #4
 8000d62:	d005      	beq.n	8000d70 <__aeabi_ui2f+0x60>
 8000d64:	3304      	adds	r3, #4
 8000d66:	015c      	lsls	r4, r3, #5
 8000d68:	d502      	bpl.n	8000d70 <__aeabi_ui2f+0x60>
 8000d6a:	229f      	movs	r2, #159	; 0x9f
 8000d6c:	400b      	ands	r3, r1
 8000d6e:	1a12      	subs	r2, r2, r0
 8000d70:	019b      	lsls	r3, r3, #6
 8000d72:	0a58      	lsrs	r0, r3, #9
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	05d2      	lsls	r2, r2, #23
 8000d7a:	0a40      	lsrs	r0, r0, #9
 8000d7c:	4310      	orrs	r0, r2
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
 8000d80:	2200      	movs	r2, #0
 8000d82:	2000      	movs	r0, #0
 8000d84:	e7f7      	b.n	8000d76 <__aeabi_ui2f+0x66>
 8000d86:	0260      	lsls	r0, r4, #9
 8000d88:	0a40      	lsrs	r0, r0, #9
 8000d8a:	e7f4      	b.n	8000d76 <__aeabi_ui2f+0x66>
 8000d8c:	fbffffff 	.word	0xfbffffff

08000d90 <__aeabi_ddiv>:
 8000d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d92:	4657      	mov	r7, sl
 8000d94:	46de      	mov	lr, fp
 8000d96:	464e      	mov	r6, r9
 8000d98:	4645      	mov	r5, r8
 8000d9a:	b5e0      	push	{r5, r6, r7, lr}
 8000d9c:	4683      	mov	fp, r0
 8000d9e:	0007      	movs	r7, r0
 8000da0:	030e      	lsls	r6, r1, #12
 8000da2:	0048      	lsls	r0, r1, #1
 8000da4:	b085      	sub	sp, #20
 8000da6:	4692      	mov	sl, r2
 8000da8:	001c      	movs	r4, r3
 8000daa:	0b36      	lsrs	r6, r6, #12
 8000dac:	0d40      	lsrs	r0, r0, #21
 8000dae:	0fcd      	lsrs	r5, r1, #31
 8000db0:	2800      	cmp	r0, #0
 8000db2:	d100      	bne.n	8000db6 <__aeabi_ddiv+0x26>
 8000db4:	e09d      	b.n	8000ef2 <__aeabi_ddiv+0x162>
 8000db6:	4b95      	ldr	r3, [pc, #596]	; (800100c <__aeabi_ddiv+0x27c>)
 8000db8:	4298      	cmp	r0, r3
 8000dba:	d039      	beq.n	8000e30 <__aeabi_ddiv+0xa0>
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	00f6      	lsls	r6, r6, #3
 8000dc0:	041b      	lsls	r3, r3, #16
 8000dc2:	431e      	orrs	r6, r3
 8000dc4:	4a92      	ldr	r2, [pc, #584]	; (8001010 <__aeabi_ddiv+0x280>)
 8000dc6:	0f7b      	lsrs	r3, r7, #29
 8000dc8:	4333      	orrs	r3, r6
 8000dca:	4699      	mov	r9, r3
 8000dcc:	4694      	mov	ip, r2
 8000dce:	0003      	movs	r3, r0
 8000dd0:	4463      	add	r3, ip
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	00ff      	lsls	r7, r7, #3
 8000dda:	9302      	str	r3, [sp, #8]
 8000ddc:	0323      	lsls	r3, r4, #12
 8000dde:	0b1b      	lsrs	r3, r3, #12
 8000de0:	4698      	mov	r8, r3
 8000de2:	0063      	lsls	r3, r4, #1
 8000de4:	0fe4      	lsrs	r4, r4, #31
 8000de6:	4652      	mov	r2, sl
 8000de8:	0d5b      	lsrs	r3, r3, #21
 8000dea:	9401      	str	r4, [sp, #4]
 8000dec:	d100      	bne.n	8000df0 <__aeabi_ddiv+0x60>
 8000dee:	e0b3      	b.n	8000f58 <__aeabi_ddiv+0x1c8>
 8000df0:	4986      	ldr	r1, [pc, #536]	; (800100c <__aeabi_ddiv+0x27c>)
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d100      	bne.n	8000df8 <__aeabi_ddiv+0x68>
 8000df6:	e09e      	b.n	8000f36 <__aeabi_ddiv+0x1a6>
 8000df8:	4642      	mov	r2, r8
 8000dfa:	00d1      	lsls	r1, r2, #3
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	0412      	lsls	r2, r2, #16
 8000e00:	430a      	orrs	r2, r1
 8000e02:	4651      	mov	r1, sl
 8000e04:	0f49      	lsrs	r1, r1, #29
 8000e06:	4311      	orrs	r1, r2
 8000e08:	468b      	mov	fp, r1
 8000e0a:	4981      	ldr	r1, [pc, #516]	; (8001010 <__aeabi_ddiv+0x280>)
 8000e0c:	4652      	mov	r2, sl
 8000e0e:	468c      	mov	ip, r1
 8000e10:	9900      	ldr	r1, [sp, #0]
 8000e12:	4463      	add	r3, ip
 8000e14:	1acb      	subs	r3, r1, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	00d2      	lsls	r2, r2, #3
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	002b      	movs	r3, r5
 8000e1e:	4063      	eors	r3, r4
 8000e20:	469a      	mov	sl, r3
 8000e22:	2e0f      	cmp	r6, #15
 8000e24:	d900      	bls.n	8000e28 <__aeabi_ddiv+0x98>
 8000e26:	e105      	b.n	8001034 <__aeabi_ddiv+0x2a4>
 8000e28:	4b7a      	ldr	r3, [pc, #488]	; (8001014 <__aeabi_ddiv+0x284>)
 8000e2a:	00b6      	lsls	r6, r6, #2
 8000e2c:	599b      	ldr	r3, [r3, r6]
 8000e2e:	469f      	mov	pc, r3
 8000e30:	465b      	mov	r3, fp
 8000e32:	4333      	orrs	r3, r6
 8000e34:	4699      	mov	r9, r3
 8000e36:	d000      	beq.n	8000e3a <__aeabi_ddiv+0xaa>
 8000e38:	e0b8      	b.n	8000fac <__aeabi_ddiv+0x21c>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	2608      	movs	r6, #8
 8000e3e:	2700      	movs	r7, #0
 8000e40:	9000      	str	r0, [sp, #0]
 8000e42:	9302      	str	r3, [sp, #8]
 8000e44:	e7ca      	b.n	8000ddc <__aeabi_ddiv+0x4c>
 8000e46:	46cb      	mov	fp, r9
 8000e48:	003a      	movs	r2, r7
 8000e4a:	9902      	ldr	r1, [sp, #8]
 8000e4c:	9501      	str	r5, [sp, #4]
 8000e4e:	9b01      	ldr	r3, [sp, #4]
 8000e50:	469a      	mov	sl, r3
 8000e52:	2902      	cmp	r1, #2
 8000e54:	d027      	beq.n	8000ea6 <__aeabi_ddiv+0x116>
 8000e56:	2903      	cmp	r1, #3
 8000e58:	d100      	bne.n	8000e5c <__aeabi_ddiv+0xcc>
 8000e5a:	e280      	b.n	800135e <__aeabi_ddiv+0x5ce>
 8000e5c:	2901      	cmp	r1, #1
 8000e5e:	d044      	beq.n	8000eea <__aeabi_ddiv+0x15a>
 8000e60:	496d      	ldr	r1, [pc, #436]	; (8001018 <__aeabi_ddiv+0x288>)
 8000e62:	9b00      	ldr	r3, [sp, #0]
 8000e64:	468c      	mov	ip, r1
 8000e66:	4463      	add	r3, ip
 8000e68:	001c      	movs	r4, r3
 8000e6a:	2c00      	cmp	r4, #0
 8000e6c:	dd38      	ble.n	8000ee0 <__aeabi_ddiv+0x150>
 8000e6e:	0753      	lsls	r3, r2, #29
 8000e70:	d000      	beq.n	8000e74 <__aeabi_ddiv+0xe4>
 8000e72:	e213      	b.n	800129c <__aeabi_ddiv+0x50c>
 8000e74:	08d2      	lsrs	r2, r2, #3
 8000e76:	465b      	mov	r3, fp
 8000e78:	01db      	lsls	r3, r3, #7
 8000e7a:	d509      	bpl.n	8000e90 <__aeabi_ddiv+0x100>
 8000e7c:	4659      	mov	r1, fp
 8000e7e:	4b67      	ldr	r3, [pc, #412]	; (800101c <__aeabi_ddiv+0x28c>)
 8000e80:	4019      	ands	r1, r3
 8000e82:	468b      	mov	fp, r1
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	00c9      	lsls	r1, r1, #3
 8000e88:	468c      	mov	ip, r1
 8000e8a:	9b00      	ldr	r3, [sp, #0]
 8000e8c:	4463      	add	r3, ip
 8000e8e:	001c      	movs	r4, r3
 8000e90:	4b63      	ldr	r3, [pc, #396]	; (8001020 <__aeabi_ddiv+0x290>)
 8000e92:	429c      	cmp	r4, r3
 8000e94:	dc07      	bgt.n	8000ea6 <__aeabi_ddiv+0x116>
 8000e96:	465b      	mov	r3, fp
 8000e98:	0564      	lsls	r4, r4, #21
 8000e9a:	075f      	lsls	r7, r3, #29
 8000e9c:	025b      	lsls	r3, r3, #9
 8000e9e:	4317      	orrs	r7, r2
 8000ea0:	0b1b      	lsrs	r3, r3, #12
 8000ea2:	0d62      	lsrs	r2, r4, #21
 8000ea4:	e002      	b.n	8000eac <__aeabi_ddiv+0x11c>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	2700      	movs	r7, #0
 8000eaa:	4a58      	ldr	r2, [pc, #352]	; (800100c <__aeabi_ddiv+0x27c>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	031b      	lsls	r3, r3, #12
 8000eb0:	0b1c      	lsrs	r4, r3, #12
 8000eb2:	0d0b      	lsrs	r3, r1, #20
 8000eb4:	051b      	lsls	r3, r3, #20
 8000eb6:	4323      	orrs	r3, r4
 8000eb8:	0514      	lsls	r4, r2, #20
 8000eba:	4a5a      	ldr	r2, [pc, #360]	; (8001024 <__aeabi_ddiv+0x294>)
 8000ebc:	0038      	movs	r0, r7
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	431c      	orrs	r4, r3
 8000ec2:	4653      	mov	r3, sl
 8000ec4:	0064      	lsls	r4, r4, #1
 8000ec6:	07db      	lsls	r3, r3, #31
 8000ec8:	0864      	lsrs	r4, r4, #1
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	0021      	movs	r1, r4
 8000ece:	b005      	add	sp, #20
 8000ed0:	bc3c      	pop	{r2, r3, r4, r5}
 8000ed2:	4690      	mov	r8, r2
 8000ed4:	4699      	mov	r9, r3
 8000ed6:	46a2      	mov	sl, r4
 8000ed8:	46ab      	mov	fp, r5
 8000eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000edc:	2201      	movs	r2, #1
 8000ede:	4252      	negs	r2, r2
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	1b1b      	subs	r3, r3, r4
 8000ee4:	2b38      	cmp	r3, #56	; 0x38
 8000ee6:	dc00      	bgt.n	8000eea <__aeabi_ddiv+0x15a>
 8000ee8:	e1ad      	b.n	8001246 <__aeabi_ddiv+0x4b6>
 8000eea:	2200      	movs	r2, #0
 8000eec:	2300      	movs	r3, #0
 8000eee:	2700      	movs	r7, #0
 8000ef0:	e7dc      	b.n	8000eac <__aeabi_ddiv+0x11c>
 8000ef2:	465b      	mov	r3, fp
 8000ef4:	4333      	orrs	r3, r6
 8000ef6:	4699      	mov	r9, r3
 8000ef8:	d05e      	beq.n	8000fb8 <__aeabi_ddiv+0x228>
 8000efa:	2e00      	cmp	r6, #0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_ddiv+0x170>
 8000efe:	e18a      	b.n	8001216 <__aeabi_ddiv+0x486>
 8000f00:	0030      	movs	r0, r6
 8000f02:	f000 fe31 	bl	8001b68 <__clzsi2>
 8000f06:	0003      	movs	r3, r0
 8000f08:	3b0b      	subs	r3, #11
 8000f0a:	2b1c      	cmp	r3, #28
 8000f0c:	dd00      	ble.n	8000f10 <__aeabi_ddiv+0x180>
 8000f0e:	e17b      	b.n	8001208 <__aeabi_ddiv+0x478>
 8000f10:	221d      	movs	r2, #29
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	465a      	mov	r2, fp
 8000f16:	0001      	movs	r1, r0
 8000f18:	40da      	lsrs	r2, r3
 8000f1a:	3908      	subs	r1, #8
 8000f1c:	408e      	lsls	r6, r1
 8000f1e:	0013      	movs	r3, r2
 8000f20:	465f      	mov	r7, fp
 8000f22:	4333      	orrs	r3, r6
 8000f24:	4699      	mov	r9, r3
 8000f26:	408f      	lsls	r7, r1
 8000f28:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <__aeabi_ddiv+0x298>)
 8000f2a:	2600      	movs	r6, #0
 8000f2c:	1a1b      	subs	r3, r3, r0
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2300      	movs	r3, #0
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	e752      	b.n	8000ddc <__aeabi_ddiv+0x4c>
 8000f36:	4641      	mov	r1, r8
 8000f38:	4653      	mov	r3, sl
 8000f3a:	430b      	orrs	r3, r1
 8000f3c:	493b      	ldr	r1, [pc, #236]	; (800102c <__aeabi_ddiv+0x29c>)
 8000f3e:	469b      	mov	fp, r3
 8000f40:	468c      	mov	ip, r1
 8000f42:	9b00      	ldr	r3, [sp, #0]
 8000f44:	4463      	add	r3, ip
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	465b      	mov	r3, fp
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d13b      	bne.n	8000fc6 <__aeabi_ddiv+0x236>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	2200      	movs	r2, #0
 8000f52:	431e      	orrs	r6, r3
 8000f54:	2102      	movs	r1, #2
 8000f56:	e761      	b.n	8000e1c <__aeabi_ddiv+0x8c>
 8000f58:	4643      	mov	r3, r8
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	469b      	mov	fp, r3
 8000f5e:	d037      	beq.n	8000fd0 <__aeabi_ddiv+0x240>
 8000f60:	4643      	mov	r3, r8
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d100      	bne.n	8000f68 <__aeabi_ddiv+0x1d8>
 8000f66:	e162      	b.n	800122e <__aeabi_ddiv+0x49e>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	f000 fdfd 	bl	8001b68 <__clzsi2>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	3b0b      	subs	r3, #11
 8000f72:	2b1c      	cmp	r3, #28
 8000f74:	dd00      	ble.n	8000f78 <__aeabi_ddiv+0x1e8>
 8000f76:	e153      	b.n	8001220 <__aeabi_ddiv+0x490>
 8000f78:	0002      	movs	r2, r0
 8000f7a:	4641      	mov	r1, r8
 8000f7c:	3a08      	subs	r2, #8
 8000f7e:	4091      	lsls	r1, r2
 8000f80:	4688      	mov	r8, r1
 8000f82:	211d      	movs	r1, #29
 8000f84:	1acb      	subs	r3, r1, r3
 8000f86:	4651      	mov	r1, sl
 8000f88:	40d9      	lsrs	r1, r3
 8000f8a:	000b      	movs	r3, r1
 8000f8c:	4641      	mov	r1, r8
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	469b      	mov	fp, r3
 8000f92:	4653      	mov	r3, sl
 8000f94:	4093      	lsls	r3, r2
 8000f96:	001a      	movs	r2, r3
 8000f98:	9b00      	ldr	r3, [sp, #0]
 8000f9a:	4925      	ldr	r1, [pc, #148]	; (8001030 <__aeabi_ddiv+0x2a0>)
 8000f9c:	469c      	mov	ip, r3
 8000f9e:	4460      	add	r0, ip
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	468c      	mov	ip, r1
 8000fa4:	4463      	add	r3, ip
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2100      	movs	r1, #0
 8000faa:	e737      	b.n	8000e1c <__aeabi_ddiv+0x8c>
 8000fac:	2303      	movs	r3, #3
 8000fae:	46b1      	mov	r9, r6
 8000fb0:	9000      	str	r0, [sp, #0]
 8000fb2:	260c      	movs	r6, #12
 8000fb4:	9302      	str	r3, [sp, #8]
 8000fb6:	e711      	b.n	8000ddc <__aeabi_ddiv+0x4c>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	2604      	movs	r6, #4
 8000fc0:	2700      	movs	r7, #0
 8000fc2:	9302      	str	r3, [sp, #8]
 8000fc4:	e70a      	b.n	8000ddc <__aeabi_ddiv+0x4c>
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	46c3      	mov	fp, r8
 8000fca:	431e      	orrs	r6, r3
 8000fcc:	2103      	movs	r1, #3
 8000fce:	e725      	b.n	8000e1c <__aeabi_ddiv+0x8c>
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	431e      	orrs	r6, r3
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	e720      	b.n	8000e1c <__aeabi_ddiv+0x8c>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	469a      	mov	sl, r3
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	2700      	movs	r7, #0
 8000fe2:	031b      	lsls	r3, r3, #12
 8000fe4:	4a09      	ldr	r2, [pc, #36]	; (800100c <__aeabi_ddiv+0x27c>)
 8000fe6:	e761      	b.n	8000eac <__aeabi_ddiv+0x11c>
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	4649      	mov	r1, r9
 8000fec:	031b      	lsls	r3, r3, #12
 8000fee:	4219      	tst	r1, r3
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_ddiv+0x264>
 8000ff2:	e0e2      	b.n	80011ba <__aeabi_ddiv+0x42a>
 8000ff4:	4659      	mov	r1, fp
 8000ff6:	4219      	tst	r1, r3
 8000ff8:	d000      	beq.n	8000ffc <__aeabi_ddiv+0x26c>
 8000ffa:	e0de      	b.n	80011ba <__aeabi_ddiv+0x42a>
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	031b      	lsls	r3, r3, #12
 8001000:	0017      	movs	r7, r2
 8001002:	0b1b      	lsrs	r3, r3, #12
 8001004:	46a2      	mov	sl, r4
 8001006:	4a01      	ldr	r2, [pc, #4]	; (800100c <__aeabi_ddiv+0x27c>)
 8001008:	e750      	b.n	8000eac <__aeabi_ddiv+0x11c>
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	000007ff 	.word	0x000007ff
 8001010:	fffffc01 	.word	0xfffffc01
 8001014:	08008204 	.word	0x08008204
 8001018:	000003ff 	.word	0x000003ff
 800101c:	feffffff 	.word	0xfeffffff
 8001020:	000007fe 	.word	0x000007fe
 8001024:	800fffff 	.word	0x800fffff
 8001028:	fffffc0d 	.word	0xfffffc0d
 800102c:	fffff801 	.word	0xfffff801
 8001030:	000003f3 	.word	0x000003f3
 8001034:	45d9      	cmp	r9, fp
 8001036:	d900      	bls.n	800103a <__aeabi_ddiv+0x2aa>
 8001038:	e0cb      	b.n	80011d2 <__aeabi_ddiv+0x442>
 800103a:	d100      	bne.n	800103e <__aeabi_ddiv+0x2ae>
 800103c:	e0c6      	b.n	80011cc <__aeabi_ddiv+0x43c>
 800103e:	003c      	movs	r4, r7
 8001040:	4648      	mov	r0, r9
 8001042:	2700      	movs	r7, #0
 8001044:	9b00      	ldr	r3, [sp, #0]
 8001046:	3b01      	subs	r3, #1
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	465b      	mov	r3, fp
 800104c:	0e16      	lsrs	r6, r2, #24
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	431e      	orrs	r6, r3
 8001052:	0213      	lsls	r3, r2, #8
 8001054:	4698      	mov	r8, r3
 8001056:	0433      	lsls	r3, r6, #16
 8001058:	0c1b      	lsrs	r3, r3, #16
 800105a:	4699      	mov	r9, r3
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	9101      	str	r1, [sp, #4]
 8001060:	f7ff f8d8 	bl	8000214 <__aeabi_uidivmod>
 8001064:	464a      	mov	r2, r9
 8001066:	4342      	muls	r2, r0
 8001068:	040b      	lsls	r3, r1, #16
 800106a:	0c21      	lsrs	r1, r4, #16
 800106c:	0005      	movs	r5, r0
 800106e:	4319      	orrs	r1, r3
 8001070:	428a      	cmp	r2, r1
 8001072:	d907      	bls.n	8001084 <__aeabi_ddiv+0x2f4>
 8001074:	1989      	adds	r1, r1, r6
 8001076:	3d01      	subs	r5, #1
 8001078:	428e      	cmp	r6, r1
 800107a:	d803      	bhi.n	8001084 <__aeabi_ddiv+0x2f4>
 800107c:	428a      	cmp	r2, r1
 800107e:	d901      	bls.n	8001084 <__aeabi_ddiv+0x2f4>
 8001080:	1e85      	subs	r5, r0, #2
 8001082:	1989      	adds	r1, r1, r6
 8001084:	1a88      	subs	r0, r1, r2
 8001086:	9901      	ldr	r1, [sp, #4]
 8001088:	f7ff f8c4 	bl	8000214 <__aeabi_uidivmod>
 800108c:	0409      	lsls	r1, r1, #16
 800108e:	468c      	mov	ip, r1
 8001090:	464a      	mov	r2, r9
 8001092:	0421      	lsls	r1, r4, #16
 8001094:	4664      	mov	r4, ip
 8001096:	4342      	muls	r2, r0
 8001098:	0c09      	lsrs	r1, r1, #16
 800109a:	0003      	movs	r3, r0
 800109c:	4321      	orrs	r1, r4
 800109e:	428a      	cmp	r2, r1
 80010a0:	d904      	bls.n	80010ac <__aeabi_ddiv+0x31c>
 80010a2:	1989      	adds	r1, r1, r6
 80010a4:	3b01      	subs	r3, #1
 80010a6:	428e      	cmp	r6, r1
 80010a8:	d800      	bhi.n	80010ac <__aeabi_ddiv+0x31c>
 80010aa:	e0f1      	b.n	8001290 <__aeabi_ddiv+0x500>
 80010ac:	042d      	lsls	r5, r5, #16
 80010ae:	431d      	orrs	r5, r3
 80010b0:	46ab      	mov	fp, r5
 80010b2:	4643      	mov	r3, r8
 80010b4:	1a89      	subs	r1, r1, r2
 80010b6:	4642      	mov	r2, r8
 80010b8:	0c28      	lsrs	r0, r5, #16
 80010ba:	0412      	lsls	r2, r2, #16
 80010bc:	0c1d      	lsrs	r5, r3, #16
 80010be:	465b      	mov	r3, fp
 80010c0:	0c14      	lsrs	r4, r2, #16
 80010c2:	0022      	movs	r2, r4
 80010c4:	041b      	lsls	r3, r3, #16
 80010c6:	0c1b      	lsrs	r3, r3, #16
 80010c8:	435a      	muls	r2, r3
 80010ca:	9403      	str	r4, [sp, #12]
 80010cc:	436b      	muls	r3, r5
 80010ce:	4344      	muls	r4, r0
 80010d0:	9502      	str	r5, [sp, #8]
 80010d2:	4368      	muls	r0, r5
 80010d4:	191b      	adds	r3, r3, r4
 80010d6:	0c15      	lsrs	r5, r2, #16
 80010d8:	18eb      	adds	r3, r5, r3
 80010da:	429c      	cmp	r4, r3
 80010dc:	d903      	bls.n	80010e6 <__aeabi_ddiv+0x356>
 80010de:	2480      	movs	r4, #128	; 0x80
 80010e0:	0264      	lsls	r4, r4, #9
 80010e2:	46a4      	mov	ip, r4
 80010e4:	4460      	add	r0, ip
 80010e6:	0c1c      	lsrs	r4, r3, #16
 80010e8:	0415      	lsls	r5, r2, #16
 80010ea:	041b      	lsls	r3, r3, #16
 80010ec:	0c2d      	lsrs	r5, r5, #16
 80010ee:	1820      	adds	r0, r4, r0
 80010f0:	195d      	adds	r5, r3, r5
 80010f2:	4281      	cmp	r1, r0
 80010f4:	d377      	bcc.n	80011e6 <__aeabi_ddiv+0x456>
 80010f6:	d073      	beq.n	80011e0 <__aeabi_ddiv+0x450>
 80010f8:	1a0c      	subs	r4, r1, r0
 80010fa:	4aa2      	ldr	r2, [pc, #648]	; (8001384 <__aeabi_ddiv+0x5f4>)
 80010fc:	1b7d      	subs	r5, r7, r5
 80010fe:	42af      	cmp	r7, r5
 8001100:	41bf      	sbcs	r7, r7
 8001102:	4694      	mov	ip, r2
 8001104:	9b00      	ldr	r3, [sp, #0]
 8001106:	427f      	negs	r7, r7
 8001108:	4463      	add	r3, ip
 800110a:	1be0      	subs	r0, r4, r7
 800110c:	001c      	movs	r4, r3
 800110e:	4286      	cmp	r6, r0
 8001110:	d100      	bne.n	8001114 <__aeabi_ddiv+0x384>
 8001112:	e0db      	b.n	80012cc <__aeabi_ddiv+0x53c>
 8001114:	9901      	ldr	r1, [sp, #4]
 8001116:	f7ff f87d 	bl	8000214 <__aeabi_uidivmod>
 800111a:	464a      	mov	r2, r9
 800111c:	4342      	muls	r2, r0
 800111e:	040b      	lsls	r3, r1, #16
 8001120:	0c29      	lsrs	r1, r5, #16
 8001122:	0007      	movs	r7, r0
 8001124:	4319      	orrs	r1, r3
 8001126:	428a      	cmp	r2, r1
 8001128:	d907      	bls.n	800113a <__aeabi_ddiv+0x3aa>
 800112a:	1989      	adds	r1, r1, r6
 800112c:	3f01      	subs	r7, #1
 800112e:	428e      	cmp	r6, r1
 8001130:	d803      	bhi.n	800113a <__aeabi_ddiv+0x3aa>
 8001132:	428a      	cmp	r2, r1
 8001134:	d901      	bls.n	800113a <__aeabi_ddiv+0x3aa>
 8001136:	1e87      	subs	r7, r0, #2
 8001138:	1989      	adds	r1, r1, r6
 800113a:	1a88      	subs	r0, r1, r2
 800113c:	9901      	ldr	r1, [sp, #4]
 800113e:	f7ff f869 	bl	8000214 <__aeabi_uidivmod>
 8001142:	0409      	lsls	r1, r1, #16
 8001144:	464a      	mov	r2, r9
 8001146:	4689      	mov	r9, r1
 8001148:	0429      	lsls	r1, r5, #16
 800114a:	464d      	mov	r5, r9
 800114c:	4342      	muls	r2, r0
 800114e:	0c09      	lsrs	r1, r1, #16
 8001150:	0003      	movs	r3, r0
 8001152:	4329      	orrs	r1, r5
 8001154:	428a      	cmp	r2, r1
 8001156:	d907      	bls.n	8001168 <__aeabi_ddiv+0x3d8>
 8001158:	1989      	adds	r1, r1, r6
 800115a:	3b01      	subs	r3, #1
 800115c:	428e      	cmp	r6, r1
 800115e:	d803      	bhi.n	8001168 <__aeabi_ddiv+0x3d8>
 8001160:	428a      	cmp	r2, r1
 8001162:	d901      	bls.n	8001168 <__aeabi_ddiv+0x3d8>
 8001164:	1e83      	subs	r3, r0, #2
 8001166:	1989      	adds	r1, r1, r6
 8001168:	043f      	lsls	r7, r7, #16
 800116a:	1a89      	subs	r1, r1, r2
 800116c:	003a      	movs	r2, r7
 800116e:	9f03      	ldr	r7, [sp, #12]
 8001170:	431a      	orrs	r2, r3
 8001172:	0038      	movs	r0, r7
 8001174:	0413      	lsls	r3, r2, #16
 8001176:	0c1b      	lsrs	r3, r3, #16
 8001178:	4358      	muls	r0, r3
 800117a:	4681      	mov	r9, r0
 800117c:	9802      	ldr	r0, [sp, #8]
 800117e:	0c15      	lsrs	r5, r2, #16
 8001180:	436f      	muls	r7, r5
 8001182:	4343      	muls	r3, r0
 8001184:	4345      	muls	r5, r0
 8001186:	4648      	mov	r0, r9
 8001188:	0c00      	lsrs	r0, r0, #16
 800118a:	4684      	mov	ip, r0
 800118c:	19db      	adds	r3, r3, r7
 800118e:	4463      	add	r3, ip
 8001190:	429f      	cmp	r7, r3
 8001192:	d903      	bls.n	800119c <__aeabi_ddiv+0x40c>
 8001194:	2080      	movs	r0, #128	; 0x80
 8001196:	0240      	lsls	r0, r0, #9
 8001198:	4684      	mov	ip, r0
 800119a:	4465      	add	r5, ip
 800119c:	4648      	mov	r0, r9
 800119e:	0c1f      	lsrs	r7, r3, #16
 80011a0:	0400      	lsls	r0, r0, #16
 80011a2:	041b      	lsls	r3, r3, #16
 80011a4:	0c00      	lsrs	r0, r0, #16
 80011a6:	197d      	adds	r5, r7, r5
 80011a8:	1818      	adds	r0, r3, r0
 80011aa:	42a9      	cmp	r1, r5
 80011ac:	d200      	bcs.n	80011b0 <__aeabi_ddiv+0x420>
 80011ae:	e084      	b.n	80012ba <__aeabi_ddiv+0x52a>
 80011b0:	d100      	bne.n	80011b4 <__aeabi_ddiv+0x424>
 80011b2:	e07f      	b.n	80012b4 <__aeabi_ddiv+0x524>
 80011b4:	2301      	movs	r3, #1
 80011b6:	431a      	orrs	r2, r3
 80011b8:	e657      	b.n	8000e6a <__aeabi_ddiv+0xda>
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	464a      	mov	r2, r9
 80011be:	031b      	lsls	r3, r3, #12
 80011c0:	4313      	orrs	r3, r2
 80011c2:	031b      	lsls	r3, r3, #12
 80011c4:	0b1b      	lsrs	r3, r3, #12
 80011c6:	46aa      	mov	sl, r5
 80011c8:	4a6f      	ldr	r2, [pc, #444]	; (8001388 <__aeabi_ddiv+0x5f8>)
 80011ca:	e66f      	b.n	8000eac <__aeabi_ddiv+0x11c>
 80011cc:	42ba      	cmp	r2, r7
 80011ce:	d900      	bls.n	80011d2 <__aeabi_ddiv+0x442>
 80011d0:	e735      	b.n	800103e <__aeabi_ddiv+0x2ae>
 80011d2:	464b      	mov	r3, r9
 80011d4:	07dc      	lsls	r4, r3, #31
 80011d6:	0858      	lsrs	r0, r3, #1
 80011d8:	087b      	lsrs	r3, r7, #1
 80011da:	431c      	orrs	r4, r3
 80011dc:	07ff      	lsls	r7, r7, #31
 80011de:	e734      	b.n	800104a <__aeabi_ddiv+0x2ba>
 80011e0:	2400      	movs	r4, #0
 80011e2:	42af      	cmp	r7, r5
 80011e4:	d289      	bcs.n	80010fa <__aeabi_ddiv+0x36a>
 80011e6:	4447      	add	r7, r8
 80011e8:	4547      	cmp	r7, r8
 80011ea:	41a4      	sbcs	r4, r4
 80011ec:	465b      	mov	r3, fp
 80011ee:	4264      	negs	r4, r4
 80011f0:	19a4      	adds	r4, r4, r6
 80011f2:	1864      	adds	r4, r4, r1
 80011f4:	3b01      	subs	r3, #1
 80011f6:	42a6      	cmp	r6, r4
 80011f8:	d21e      	bcs.n	8001238 <__aeabi_ddiv+0x4a8>
 80011fa:	42a0      	cmp	r0, r4
 80011fc:	d86d      	bhi.n	80012da <__aeabi_ddiv+0x54a>
 80011fe:	d100      	bne.n	8001202 <__aeabi_ddiv+0x472>
 8001200:	e0b6      	b.n	8001370 <__aeabi_ddiv+0x5e0>
 8001202:	1a24      	subs	r4, r4, r0
 8001204:	469b      	mov	fp, r3
 8001206:	e778      	b.n	80010fa <__aeabi_ddiv+0x36a>
 8001208:	0003      	movs	r3, r0
 800120a:	465a      	mov	r2, fp
 800120c:	3b28      	subs	r3, #40	; 0x28
 800120e:	409a      	lsls	r2, r3
 8001210:	2700      	movs	r7, #0
 8001212:	4691      	mov	r9, r2
 8001214:	e688      	b.n	8000f28 <__aeabi_ddiv+0x198>
 8001216:	4658      	mov	r0, fp
 8001218:	f000 fca6 	bl	8001b68 <__clzsi2>
 800121c:	3020      	adds	r0, #32
 800121e:	e672      	b.n	8000f06 <__aeabi_ddiv+0x176>
 8001220:	0003      	movs	r3, r0
 8001222:	4652      	mov	r2, sl
 8001224:	3b28      	subs	r3, #40	; 0x28
 8001226:	409a      	lsls	r2, r3
 8001228:	4693      	mov	fp, r2
 800122a:	2200      	movs	r2, #0
 800122c:	e6b4      	b.n	8000f98 <__aeabi_ddiv+0x208>
 800122e:	4650      	mov	r0, sl
 8001230:	f000 fc9a 	bl	8001b68 <__clzsi2>
 8001234:	3020      	adds	r0, #32
 8001236:	e69a      	b.n	8000f6e <__aeabi_ddiv+0x1de>
 8001238:	42a6      	cmp	r6, r4
 800123a:	d1e2      	bne.n	8001202 <__aeabi_ddiv+0x472>
 800123c:	45b8      	cmp	r8, r7
 800123e:	d9dc      	bls.n	80011fa <__aeabi_ddiv+0x46a>
 8001240:	1a34      	subs	r4, r6, r0
 8001242:	469b      	mov	fp, r3
 8001244:	e759      	b.n	80010fa <__aeabi_ddiv+0x36a>
 8001246:	2b1f      	cmp	r3, #31
 8001248:	dc65      	bgt.n	8001316 <__aeabi_ddiv+0x586>
 800124a:	4c50      	ldr	r4, [pc, #320]	; (800138c <__aeabi_ddiv+0x5fc>)
 800124c:	9900      	ldr	r1, [sp, #0]
 800124e:	46a4      	mov	ip, r4
 8001250:	465c      	mov	r4, fp
 8001252:	4461      	add	r1, ip
 8001254:	0008      	movs	r0, r1
 8001256:	408c      	lsls	r4, r1
 8001258:	0011      	movs	r1, r2
 800125a:	4082      	lsls	r2, r0
 800125c:	40d9      	lsrs	r1, r3
 800125e:	1e50      	subs	r0, r2, #1
 8001260:	4182      	sbcs	r2, r0
 8001262:	430c      	orrs	r4, r1
 8001264:	4314      	orrs	r4, r2
 8001266:	465a      	mov	r2, fp
 8001268:	40da      	lsrs	r2, r3
 800126a:	0013      	movs	r3, r2
 800126c:	0762      	lsls	r2, r4, #29
 800126e:	d009      	beq.n	8001284 <__aeabi_ddiv+0x4f4>
 8001270:	220f      	movs	r2, #15
 8001272:	4022      	ands	r2, r4
 8001274:	2a04      	cmp	r2, #4
 8001276:	d005      	beq.n	8001284 <__aeabi_ddiv+0x4f4>
 8001278:	0022      	movs	r2, r4
 800127a:	1d14      	adds	r4, r2, #4
 800127c:	4294      	cmp	r4, r2
 800127e:	4189      	sbcs	r1, r1
 8001280:	4249      	negs	r1, r1
 8001282:	185b      	adds	r3, r3, r1
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d562      	bpl.n	800134e <__aeabi_ddiv+0x5be>
 8001288:	2201      	movs	r2, #1
 800128a:	2300      	movs	r3, #0
 800128c:	2700      	movs	r7, #0
 800128e:	e60d      	b.n	8000eac <__aeabi_ddiv+0x11c>
 8001290:	428a      	cmp	r2, r1
 8001292:	d800      	bhi.n	8001296 <__aeabi_ddiv+0x506>
 8001294:	e70a      	b.n	80010ac <__aeabi_ddiv+0x31c>
 8001296:	1e83      	subs	r3, r0, #2
 8001298:	1989      	adds	r1, r1, r6
 800129a:	e707      	b.n	80010ac <__aeabi_ddiv+0x31c>
 800129c:	230f      	movs	r3, #15
 800129e:	4013      	ands	r3, r2
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d100      	bne.n	80012a6 <__aeabi_ddiv+0x516>
 80012a4:	e5e6      	b.n	8000e74 <__aeabi_ddiv+0xe4>
 80012a6:	1d17      	adds	r7, r2, #4
 80012a8:	4297      	cmp	r7, r2
 80012aa:	4192      	sbcs	r2, r2
 80012ac:	4253      	negs	r3, r2
 80012ae:	449b      	add	fp, r3
 80012b0:	08fa      	lsrs	r2, r7, #3
 80012b2:	e5e0      	b.n	8000e76 <__aeabi_ddiv+0xe6>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d100      	bne.n	80012ba <__aeabi_ddiv+0x52a>
 80012b8:	e5d7      	b.n	8000e6a <__aeabi_ddiv+0xda>
 80012ba:	1871      	adds	r1, r6, r1
 80012bc:	1e53      	subs	r3, r2, #1
 80012be:	42b1      	cmp	r1, r6
 80012c0:	d327      	bcc.n	8001312 <__aeabi_ddiv+0x582>
 80012c2:	42a9      	cmp	r1, r5
 80012c4:	d315      	bcc.n	80012f2 <__aeabi_ddiv+0x562>
 80012c6:	d058      	beq.n	800137a <__aeabi_ddiv+0x5ea>
 80012c8:	001a      	movs	r2, r3
 80012ca:	e773      	b.n	80011b4 <__aeabi_ddiv+0x424>
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	dc00      	bgt.n	80012d2 <__aeabi_ddiv+0x542>
 80012d0:	e604      	b.n	8000edc <__aeabi_ddiv+0x14c>
 80012d2:	2301      	movs	r3, #1
 80012d4:	2200      	movs	r2, #0
 80012d6:	449b      	add	fp, r3
 80012d8:	e5cd      	b.n	8000e76 <__aeabi_ddiv+0xe6>
 80012da:	2302      	movs	r3, #2
 80012dc:	4447      	add	r7, r8
 80012de:	4547      	cmp	r7, r8
 80012e0:	4189      	sbcs	r1, r1
 80012e2:	425b      	negs	r3, r3
 80012e4:	469c      	mov	ip, r3
 80012e6:	4249      	negs	r1, r1
 80012e8:	1989      	adds	r1, r1, r6
 80012ea:	190c      	adds	r4, r1, r4
 80012ec:	44e3      	add	fp, ip
 80012ee:	1a24      	subs	r4, r4, r0
 80012f0:	e703      	b.n	80010fa <__aeabi_ddiv+0x36a>
 80012f2:	4643      	mov	r3, r8
 80012f4:	005f      	lsls	r7, r3, #1
 80012f6:	4547      	cmp	r7, r8
 80012f8:	419b      	sbcs	r3, r3
 80012fa:	46b8      	mov	r8, r7
 80012fc:	425b      	negs	r3, r3
 80012fe:	199e      	adds	r6, r3, r6
 8001300:	3a02      	subs	r2, #2
 8001302:	1989      	adds	r1, r1, r6
 8001304:	42a9      	cmp	r1, r5
 8001306:	d000      	beq.n	800130a <__aeabi_ddiv+0x57a>
 8001308:	e754      	b.n	80011b4 <__aeabi_ddiv+0x424>
 800130a:	4540      	cmp	r0, r8
 800130c:	d000      	beq.n	8001310 <__aeabi_ddiv+0x580>
 800130e:	e751      	b.n	80011b4 <__aeabi_ddiv+0x424>
 8001310:	e5ab      	b.n	8000e6a <__aeabi_ddiv+0xda>
 8001312:	001a      	movs	r2, r3
 8001314:	e7f6      	b.n	8001304 <__aeabi_ddiv+0x574>
 8001316:	211f      	movs	r1, #31
 8001318:	465f      	mov	r7, fp
 800131a:	4249      	negs	r1, r1
 800131c:	1b0c      	subs	r4, r1, r4
 800131e:	40e7      	lsrs	r7, r4
 8001320:	2b20      	cmp	r3, #32
 8001322:	d007      	beq.n	8001334 <__aeabi_ddiv+0x5a4>
 8001324:	491a      	ldr	r1, [pc, #104]	; (8001390 <__aeabi_ddiv+0x600>)
 8001326:	9b00      	ldr	r3, [sp, #0]
 8001328:	468c      	mov	ip, r1
 800132a:	4463      	add	r3, ip
 800132c:	0018      	movs	r0, r3
 800132e:	465b      	mov	r3, fp
 8001330:	4083      	lsls	r3, r0
 8001332:	431a      	orrs	r2, r3
 8001334:	1e50      	subs	r0, r2, #1
 8001336:	4182      	sbcs	r2, r0
 8001338:	433a      	orrs	r2, r7
 800133a:	2707      	movs	r7, #7
 800133c:	2300      	movs	r3, #0
 800133e:	4017      	ands	r7, r2
 8001340:	d009      	beq.n	8001356 <__aeabi_ddiv+0x5c6>
 8001342:	210f      	movs	r1, #15
 8001344:	2300      	movs	r3, #0
 8001346:	4011      	ands	r1, r2
 8001348:	0014      	movs	r4, r2
 800134a:	2904      	cmp	r1, #4
 800134c:	d195      	bne.n	800127a <__aeabi_ddiv+0x4ea>
 800134e:	0022      	movs	r2, r4
 8001350:	075f      	lsls	r7, r3, #29
 8001352:	025b      	lsls	r3, r3, #9
 8001354:	0b1b      	lsrs	r3, r3, #12
 8001356:	08d2      	lsrs	r2, r2, #3
 8001358:	4317      	orrs	r7, r2
 800135a:	2200      	movs	r2, #0
 800135c:	e5a6      	b.n	8000eac <__aeabi_ddiv+0x11c>
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	4659      	mov	r1, fp
 8001362:	031b      	lsls	r3, r3, #12
 8001364:	430b      	orrs	r3, r1
 8001366:	031b      	lsls	r3, r3, #12
 8001368:	0017      	movs	r7, r2
 800136a:	0b1b      	lsrs	r3, r3, #12
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <__aeabi_ddiv+0x5f8>)
 800136e:	e59d      	b.n	8000eac <__aeabi_ddiv+0x11c>
 8001370:	42bd      	cmp	r5, r7
 8001372:	d8b2      	bhi.n	80012da <__aeabi_ddiv+0x54a>
 8001374:	469b      	mov	fp, r3
 8001376:	2400      	movs	r4, #0
 8001378:	e6bf      	b.n	80010fa <__aeabi_ddiv+0x36a>
 800137a:	4580      	cmp	r8, r0
 800137c:	d3b9      	bcc.n	80012f2 <__aeabi_ddiv+0x562>
 800137e:	001a      	movs	r2, r3
 8001380:	e7c3      	b.n	800130a <__aeabi_ddiv+0x57a>
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	000003ff 	.word	0x000003ff
 8001388:	000007ff 	.word	0x000007ff
 800138c:	0000041e 	.word	0x0000041e
 8001390:	0000043e 	.word	0x0000043e

08001394 <__aeabi_dmul>:
 8001394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001396:	4657      	mov	r7, sl
 8001398:	46de      	mov	lr, fp
 800139a:	464e      	mov	r6, r9
 800139c:	4645      	mov	r5, r8
 800139e:	b5e0      	push	{r5, r6, r7, lr}
 80013a0:	4683      	mov	fp, r0
 80013a2:	0006      	movs	r6, r0
 80013a4:	030f      	lsls	r7, r1, #12
 80013a6:	0048      	lsls	r0, r1, #1
 80013a8:	b087      	sub	sp, #28
 80013aa:	4692      	mov	sl, r2
 80013ac:	001d      	movs	r5, r3
 80013ae:	0b3f      	lsrs	r7, r7, #12
 80013b0:	0d40      	lsrs	r0, r0, #21
 80013b2:	0fcc      	lsrs	r4, r1, #31
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d100      	bne.n	80013ba <__aeabi_dmul+0x26>
 80013b8:	e06f      	b.n	800149a <__aeabi_dmul+0x106>
 80013ba:	4bde      	ldr	r3, [pc, #888]	; (8001734 <__aeabi_dmul+0x3a0>)
 80013bc:	4298      	cmp	r0, r3
 80013be:	d038      	beq.n	8001432 <__aeabi_dmul+0x9e>
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	00ff      	lsls	r7, r7, #3
 80013c4:	041b      	lsls	r3, r3, #16
 80013c6:	431f      	orrs	r7, r3
 80013c8:	0f73      	lsrs	r3, r6, #29
 80013ca:	433b      	orrs	r3, r7
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	4bda      	ldr	r3, [pc, #872]	; (8001738 <__aeabi_dmul+0x3a4>)
 80013d0:	2700      	movs	r7, #0
 80013d2:	4699      	mov	r9, r3
 80013d4:	2300      	movs	r3, #0
 80013d6:	469b      	mov	fp, r3
 80013d8:	00f6      	lsls	r6, r6, #3
 80013da:	4481      	add	r9, r0
 80013dc:	032b      	lsls	r3, r5, #12
 80013de:	0069      	lsls	r1, r5, #1
 80013e0:	0b1b      	lsrs	r3, r3, #12
 80013e2:	4652      	mov	r2, sl
 80013e4:	4698      	mov	r8, r3
 80013e6:	0d49      	lsrs	r1, r1, #21
 80013e8:	0fed      	lsrs	r5, r5, #31
 80013ea:	2900      	cmp	r1, #0
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dmul+0x5c>
 80013ee:	e085      	b.n	80014fc <__aeabi_dmul+0x168>
 80013f0:	4bd0      	ldr	r3, [pc, #832]	; (8001734 <__aeabi_dmul+0x3a0>)
 80013f2:	4299      	cmp	r1, r3
 80013f4:	d100      	bne.n	80013f8 <__aeabi_dmul+0x64>
 80013f6:	e073      	b.n	80014e0 <__aeabi_dmul+0x14c>
 80013f8:	4643      	mov	r3, r8
 80013fa:	00da      	lsls	r2, r3, #3
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	041b      	lsls	r3, r3, #16
 8001400:	4313      	orrs	r3, r2
 8001402:	4652      	mov	r2, sl
 8001404:	48cc      	ldr	r0, [pc, #816]	; (8001738 <__aeabi_dmul+0x3a4>)
 8001406:	0f52      	lsrs	r2, r2, #29
 8001408:	4684      	mov	ip, r0
 800140a:	4313      	orrs	r3, r2
 800140c:	4652      	mov	r2, sl
 800140e:	2000      	movs	r0, #0
 8001410:	4461      	add	r1, ip
 8001412:	00d2      	lsls	r2, r2, #3
 8001414:	4489      	add	r9, r1
 8001416:	0021      	movs	r1, r4
 8001418:	4069      	eors	r1, r5
 800141a:	9100      	str	r1, [sp, #0]
 800141c:	468c      	mov	ip, r1
 800141e:	2101      	movs	r1, #1
 8001420:	4449      	add	r1, r9
 8001422:	468a      	mov	sl, r1
 8001424:	2f0f      	cmp	r7, #15
 8001426:	d900      	bls.n	800142a <__aeabi_dmul+0x96>
 8001428:	e090      	b.n	800154c <__aeabi_dmul+0x1b8>
 800142a:	49c4      	ldr	r1, [pc, #784]	; (800173c <__aeabi_dmul+0x3a8>)
 800142c:	00bf      	lsls	r7, r7, #2
 800142e:	59cf      	ldr	r7, [r1, r7]
 8001430:	46bf      	mov	pc, r7
 8001432:	465b      	mov	r3, fp
 8001434:	433b      	orrs	r3, r7
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	d000      	beq.n	800143c <__aeabi_dmul+0xa8>
 800143a:	e16a      	b.n	8001712 <__aeabi_dmul+0x37e>
 800143c:	2302      	movs	r3, #2
 800143e:	2708      	movs	r7, #8
 8001440:	2600      	movs	r6, #0
 8001442:	4681      	mov	r9, r0
 8001444:	469b      	mov	fp, r3
 8001446:	e7c9      	b.n	80013dc <__aeabi_dmul+0x48>
 8001448:	0032      	movs	r2, r6
 800144a:	4658      	mov	r0, fp
 800144c:	9b01      	ldr	r3, [sp, #4]
 800144e:	4661      	mov	r1, ip
 8001450:	9100      	str	r1, [sp, #0]
 8001452:	2802      	cmp	r0, #2
 8001454:	d100      	bne.n	8001458 <__aeabi_dmul+0xc4>
 8001456:	e075      	b.n	8001544 <__aeabi_dmul+0x1b0>
 8001458:	2803      	cmp	r0, #3
 800145a:	d100      	bne.n	800145e <__aeabi_dmul+0xca>
 800145c:	e1fe      	b.n	800185c <__aeabi_dmul+0x4c8>
 800145e:	2801      	cmp	r0, #1
 8001460:	d000      	beq.n	8001464 <__aeabi_dmul+0xd0>
 8001462:	e12c      	b.n	80016be <__aeabi_dmul+0x32a>
 8001464:	2300      	movs	r3, #0
 8001466:	2700      	movs	r7, #0
 8001468:	2600      	movs	r6, #0
 800146a:	2500      	movs	r5, #0
 800146c:	033f      	lsls	r7, r7, #12
 800146e:	0d2a      	lsrs	r2, r5, #20
 8001470:	0b3f      	lsrs	r7, r7, #12
 8001472:	48b3      	ldr	r0, [pc, #716]	; (8001740 <__aeabi_dmul+0x3ac>)
 8001474:	0512      	lsls	r2, r2, #20
 8001476:	433a      	orrs	r2, r7
 8001478:	4002      	ands	r2, r0
 800147a:	051b      	lsls	r3, r3, #20
 800147c:	4313      	orrs	r3, r2
 800147e:	9a00      	ldr	r2, [sp, #0]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	07d1      	lsls	r1, r2, #31
 8001484:	085b      	lsrs	r3, r3, #1
 8001486:	430b      	orrs	r3, r1
 8001488:	0030      	movs	r0, r6
 800148a:	0019      	movs	r1, r3
 800148c:	b007      	add	sp, #28
 800148e:	bc3c      	pop	{r2, r3, r4, r5}
 8001490:	4690      	mov	r8, r2
 8001492:	4699      	mov	r9, r3
 8001494:	46a2      	mov	sl, r4
 8001496:	46ab      	mov	fp, r5
 8001498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149a:	465b      	mov	r3, fp
 800149c:	433b      	orrs	r3, r7
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dmul+0x110>
 80014a2:	e12f      	b.n	8001704 <__aeabi_dmul+0x370>
 80014a4:	2f00      	cmp	r7, #0
 80014a6:	d100      	bne.n	80014aa <__aeabi_dmul+0x116>
 80014a8:	e1a5      	b.n	80017f6 <__aeabi_dmul+0x462>
 80014aa:	0038      	movs	r0, r7
 80014ac:	f000 fb5c 	bl	8001b68 <__clzsi2>
 80014b0:	0003      	movs	r3, r0
 80014b2:	3b0b      	subs	r3, #11
 80014b4:	2b1c      	cmp	r3, #28
 80014b6:	dd00      	ble.n	80014ba <__aeabi_dmul+0x126>
 80014b8:	e196      	b.n	80017e8 <__aeabi_dmul+0x454>
 80014ba:	221d      	movs	r2, #29
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	465a      	mov	r2, fp
 80014c0:	0001      	movs	r1, r0
 80014c2:	40da      	lsrs	r2, r3
 80014c4:	465e      	mov	r6, fp
 80014c6:	3908      	subs	r1, #8
 80014c8:	408f      	lsls	r7, r1
 80014ca:	0013      	movs	r3, r2
 80014cc:	408e      	lsls	r6, r1
 80014ce:	433b      	orrs	r3, r7
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	4b9c      	ldr	r3, [pc, #624]	; (8001744 <__aeabi_dmul+0x3b0>)
 80014d4:	2700      	movs	r7, #0
 80014d6:	1a1b      	subs	r3, r3, r0
 80014d8:	4699      	mov	r9, r3
 80014da:	2300      	movs	r3, #0
 80014dc:	469b      	mov	fp, r3
 80014de:	e77d      	b.n	80013dc <__aeabi_dmul+0x48>
 80014e0:	4641      	mov	r1, r8
 80014e2:	4653      	mov	r3, sl
 80014e4:	430b      	orrs	r3, r1
 80014e6:	4993      	ldr	r1, [pc, #588]	; (8001734 <__aeabi_dmul+0x3a0>)
 80014e8:	468c      	mov	ip, r1
 80014ea:	44e1      	add	r9, ip
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d000      	beq.n	80014f2 <__aeabi_dmul+0x15e>
 80014f0:	e11a      	b.n	8001728 <__aeabi_dmul+0x394>
 80014f2:	2202      	movs	r2, #2
 80014f4:	2002      	movs	r0, #2
 80014f6:	4317      	orrs	r7, r2
 80014f8:	2200      	movs	r2, #0
 80014fa:	e78c      	b.n	8001416 <__aeabi_dmul+0x82>
 80014fc:	4313      	orrs	r3, r2
 80014fe:	d100      	bne.n	8001502 <__aeabi_dmul+0x16e>
 8001500:	e10d      	b.n	800171e <__aeabi_dmul+0x38a>
 8001502:	4643      	mov	r3, r8
 8001504:	2b00      	cmp	r3, #0
 8001506:	d100      	bne.n	800150a <__aeabi_dmul+0x176>
 8001508:	e181      	b.n	800180e <__aeabi_dmul+0x47a>
 800150a:	4640      	mov	r0, r8
 800150c:	f000 fb2c 	bl	8001b68 <__clzsi2>
 8001510:	0002      	movs	r2, r0
 8001512:	3a0b      	subs	r2, #11
 8001514:	2a1c      	cmp	r2, #28
 8001516:	dd00      	ble.n	800151a <__aeabi_dmul+0x186>
 8001518:	e172      	b.n	8001800 <__aeabi_dmul+0x46c>
 800151a:	0001      	movs	r1, r0
 800151c:	4643      	mov	r3, r8
 800151e:	3908      	subs	r1, #8
 8001520:	408b      	lsls	r3, r1
 8001522:	4698      	mov	r8, r3
 8001524:	231d      	movs	r3, #29
 8001526:	1a9a      	subs	r2, r3, r2
 8001528:	4653      	mov	r3, sl
 800152a:	40d3      	lsrs	r3, r2
 800152c:	001a      	movs	r2, r3
 800152e:	4643      	mov	r3, r8
 8001530:	4313      	orrs	r3, r2
 8001532:	4652      	mov	r2, sl
 8001534:	408a      	lsls	r2, r1
 8001536:	4649      	mov	r1, r9
 8001538:	1a08      	subs	r0, r1, r0
 800153a:	4982      	ldr	r1, [pc, #520]	; (8001744 <__aeabi_dmul+0x3b0>)
 800153c:	4689      	mov	r9, r1
 800153e:	4481      	add	r9, r0
 8001540:	2000      	movs	r0, #0
 8001542:	e768      	b.n	8001416 <__aeabi_dmul+0x82>
 8001544:	4b7b      	ldr	r3, [pc, #492]	; (8001734 <__aeabi_dmul+0x3a0>)
 8001546:	2700      	movs	r7, #0
 8001548:	2600      	movs	r6, #0
 800154a:	e78e      	b.n	800146a <__aeabi_dmul+0xd6>
 800154c:	0c14      	lsrs	r4, r2, #16
 800154e:	0412      	lsls	r2, r2, #16
 8001550:	0c12      	lsrs	r2, r2, #16
 8001552:	0011      	movs	r1, r2
 8001554:	0c37      	lsrs	r7, r6, #16
 8001556:	0436      	lsls	r6, r6, #16
 8001558:	0c35      	lsrs	r5, r6, #16
 800155a:	4379      	muls	r1, r7
 800155c:	0028      	movs	r0, r5
 800155e:	468c      	mov	ip, r1
 8001560:	002e      	movs	r6, r5
 8001562:	4360      	muls	r0, r4
 8001564:	4460      	add	r0, ip
 8001566:	4683      	mov	fp, r0
 8001568:	4356      	muls	r6, r2
 800156a:	0021      	movs	r1, r4
 800156c:	0c30      	lsrs	r0, r6, #16
 800156e:	4680      	mov	r8, r0
 8001570:	4658      	mov	r0, fp
 8001572:	4379      	muls	r1, r7
 8001574:	4440      	add	r0, r8
 8001576:	9102      	str	r1, [sp, #8]
 8001578:	4584      	cmp	ip, r0
 800157a:	d906      	bls.n	800158a <__aeabi_dmul+0x1f6>
 800157c:	4688      	mov	r8, r1
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	0249      	lsls	r1, r1, #9
 8001582:	468c      	mov	ip, r1
 8001584:	44e0      	add	r8, ip
 8001586:	4641      	mov	r1, r8
 8001588:	9102      	str	r1, [sp, #8]
 800158a:	0436      	lsls	r6, r6, #16
 800158c:	0c01      	lsrs	r1, r0, #16
 800158e:	0c36      	lsrs	r6, r6, #16
 8001590:	0400      	lsls	r0, r0, #16
 8001592:	468b      	mov	fp, r1
 8001594:	1981      	adds	r1, r0, r6
 8001596:	0c1e      	lsrs	r6, r3, #16
 8001598:	041b      	lsls	r3, r3, #16
 800159a:	0c1b      	lsrs	r3, r3, #16
 800159c:	9103      	str	r1, [sp, #12]
 800159e:	0019      	movs	r1, r3
 80015a0:	4379      	muls	r1, r7
 80015a2:	468c      	mov	ip, r1
 80015a4:	0028      	movs	r0, r5
 80015a6:	4375      	muls	r5, r6
 80015a8:	4465      	add	r5, ip
 80015aa:	46a8      	mov	r8, r5
 80015ac:	4358      	muls	r0, r3
 80015ae:	0c05      	lsrs	r5, r0, #16
 80015b0:	4445      	add	r5, r8
 80015b2:	4377      	muls	r7, r6
 80015b4:	42a9      	cmp	r1, r5
 80015b6:	d903      	bls.n	80015c0 <__aeabi_dmul+0x22c>
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	0249      	lsls	r1, r1, #9
 80015bc:	468c      	mov	ip, r1
 80015be:	4467      	add	r7, ip
 80015c0:	0c29      	lsrs	r1, r5, #16
 80015c2:	468c      	mov	ip, r1
 80015c4:	0039      	movs	r1, r7
 80015c6:	0400      	lsls	r0, r0, #16
 80015c8:	0c00      	lsrs	r0, r0, #16
 80015ca:	042d      	lsls	r5, r5, #16
 80015cc:	182d      	adds	r5, r5, r0
 80015ce:	4461      	add	r1, ip
 80015d0:	44ab      	add	fp, r5
 80015d2:	9105      	str	r1, [sp, #20]
 80015d4:	4659      	mov	r1, fp
 80015d6:	9104      	str	r1, [sp, #16]
 80015d8:	9901      	ldr	r1, [sp, #4]
 80015da:	040f      	lsls	r7, r1, #16
 80015dc:	0c3f      	lsrs	r7, r7, #16
 80015de:	0c08      	lsrs	r0, r1, #16
 80015e0:	0039      	movs	r1, r7
 80015e2:	4351      	muls	r1, r2
 80015e4:	4342      	muls	r2, r0
 80015e6:	4690      	mov	r8, r2
 80015e8:	0002      	movs	r2, r0
 80015ea:	468c      	mov	ip, r1
 80015ec:	0c09      	lsrs	r1, r1, #16
 80015ee:	468b      	mov	fp, r1
 80015f0:	4362      	muls	r2, r4
 80015f2:	437c      	muls	r4, r7
 80015f4:	4444      	add	r4, r8
 80015f6:	445c      	add	r4, fp
 80015f8:	45a0      	cmp	r8, r4
 80015fa:	d903      	bls.n	8001604 <__aeabi_dmul+0x270>
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	0249      	lsls	r1, r1, #9
 8001600:	4688      	mov	r8, r1
 8001602:	4442      	add	r2, r8
 8001604:	0c21      	lsrs	r1, r4, #16
 8001606:	4688      	mov	r8, r1
 8001608:	4661      	mov	r1, ip
 800160a:	0409      	lsls	r1, r1, #16
 800160c:	0c09      	lsrs	r1, r1, #16
 800160e:	468c      	mov	ip, r1
 8001610:	0039      	movs	r1, r7
 8001612:	4359      	muls	r1, r3
 8001614:	4343      	muls	r3, r0
 8001616:	4370      	muls	r0, r6
 8001618:	437e      	muls	r6, r7
 800161a:	0c0f      	lsrs	r7, r1, #16
 800161c:	18f6      	adds	r6, r6, r3
 800161e:	0424      	lsls	r4, r4, #16
 8001620:	19be      	adds	r6, r7, r6
 8001622:	4464      	add	r4, ip
 8001624:	4442      	add	r2, r8
 8001626:	468c      	mov	ip, r1
 8001628:	42b3      	cmp	r3, r6
 800162a:	d903      	bls.n	8001634 <__aeabi_dmul+0x2a0>
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	025b      	lsls	r3, r3, #9
 8001630:	4698      	mov	r8, r3
 8001632:	4440      	add	r0, r8
 8001634:	9b02      	ldr	r3, [sp, #8]
 8001636:	4661      	mov	r1, ip
 8001638:	4698      	mov	r8, r3
 800163a:	9b04      	ldr	r3, [sp, #16]
 800163c:	0437      	lsls	r7, r6, #16
 800163e:	4443      	add	r3, r8
 8001640:	469b      	mov	fp, r3
 8001642:	45ab      	cmp	fp, r5
 8001644:	41ad      	sbcs	r5, r5
 8001646:	426b      	negs	r3, r5
 8001648:	040d      	lsls	r5, r1, #16
 800164a:	9905      	ldr	r1, [sp, #20]
 800164c:	0c2d      	lsrs	r5, r5, #16
 800164e:	468c      	mov	ip, r1
 8001650:	197f      	adds	r7, r7, r5
 8001652:	4467      	add	r7, ip
 8001654:	18fd      	adds	r5, r7, r3
 8001656:	46a8      	mov	r8, r5
 8001658:	465d      	mov	r5, fp
 800165a:	192d      	adds	r5, r5, r4
 800165c:	42a5      	cmp	r5, r4
 800165e:	41a4      	sbcs	r4, r4
 8001660:	4693      	mov	fp, r2
 8001662:	4264      	negs	r4, r4
 8001664:	46a4      	mov	ip, r4
 8001666:	44c3      	add	fp, r8
 8001668:	44dc      	add	ip, fp
 800166a:	428f      	cmp	r7, r1
 800166c:	41bf      	sbcs	r7, r7
 800166e:	4598      	cmp	r8, r3
 8001670:	419b      	sbcs	r3, r3
 8001672:	4593      	cmp	fp, r2
 8001674:	4192      	sbcs	r2, r2
 8001676:	45a4      	cmp	ip, r4
 8001678:	41a4      	sbcs	r4, r4
 800167a:	425b      	negs	r3, r3
 800167c:	427f      	negs	r7, r7
 800167e:	431f      	orrs	r7, r3
 8001680:	0c36      	lsrs	r6, r6, #16
 8001682:	4252      	negs	r2, r2
 8001684:	4264      	negs	r4, r4
 8001686:	19bf      	adds	r7, r7, r6
 8001688:	4322      	orrs	r2, r4
 800168a:	18bf      	adds	r7, r7, r2
 800168c:	4662      	mov	r2, ip
 800168e:	1838      	adds	r0, r7, r0
 8001690:	0243      	lsls	r3, r0, #9
 8001692:	0dd2      	lsrs	r2, r2, #23
 8001694:	9903      	ldr	r1, [sp, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	026a      	lsls	r2, r5, #9
 800169a:	430a      	orrs	r2, r1
 800169c:	1e50      	subs	r0, r2, #1
 800169e:	4182      	sbcs	r2, r0
 80016a0:	4661      	mov	r1, ip
 80016a2:	0ded      	lsrs	r5, r5, #23
 80016a4:	432a      	orrs	r2, r5
 80016a6:	024e      	lsls	r6, r1, #9
 80016a8:	4332      	orrs	r2, r6
 80016aa:	01d9      	lsls	r1, r3, #7
 80016ac:	d400      	bmi.n	80016b0 <__aeabi_dmul+0x31c>
 80016ae:	e0b3      	b.n	8001818 <__aeabi_dmul+0x484>
 80016b0:	2601      	movs	r6, #1
 80016b2:	0850      	lsrs	r0, r2, #1
 80016b4:	4032      	ands	r2, r6
 80016b6:	4302      	orrs	r2, r0
 80016b8:	07de      	lsls	r6, r3, #31
 80016ba:	4332      	orrs	r2, r6
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	4c22      	ldr	r4, [pc, #136]	; (8001748 <__aeabi_dmul+0x3b4>)
 80016c0:	4454      	add	r4, sl
 80016c2:	2c00      	cmp	r4, #0
 80016c4:	dd62      	ble.n	800178c <__aeabi_dmul+0x3f8>
 80016c6:	0751      	lsls	r1, r2, #29
 80016c8:	d009      	beq.n	80016de <__aeabi_dmul+0x34a>
 80016ca:	200f      	movs	r0, #15
 80016cc:	4010      	ands	r0, r2
 80016ce:	2804      	cmp	r0, #4
 80016d0:	d005      	beq.n	80016de <__aeabi_dmul+0x34a>
 80016d2:	1d10      	adds	r0, r2, #4
 80016d4:	4290      	cmp	r0, r2
 80016d6:	4192      	sbcs	r2, r2
 80016d8:	4252      	negs	r2, r2
 80016da:	189b      	adds	r3, r3, r2
 80016dc:	0002      	movs	r2, r0
 80016de:	01d9      	lsls	r1, r3, #7
 80016e0:	d504      	bpl.n	80016ec <__aeabi_dmul+0x358>
 80016e2:	2480      	movs	r4, #128	; 0x80
 80016e4:	4819      	ldr	r0, [pc, #100]	; (800174c <__aeabi_dmul+0x3b8>)
 80016e6:	00e4      	lsls	r4, r4, #3
 80016e8:	4003      	ands	r3, r0
 80016ea:	4454      	add	r4, sl
 80016ec:	4818      	ldr	r0, [pc, #96]	; (8001750 <__aeabi_dmul+0x3bc>)
 80016ee:	4284      	cmp	r4, r0
 80016f0:	dd00      	ble.n	80016f4 <__aeabi_dmul+0x360>
 80016f2:	e727      	b.n	8001544 <__aeabi_dmul+0x1b0>
 80016f4:	075e      	lsls	r6, r3, #29
 80016f6:	025b      	lsls	r3, r3, #9
 80016f8:	08d2      	lsrs	r2, r2, #3
 80016fa:	0b1f      	lsrs	r7, r3, #12
 80016fc:	0563      	lsls	r3, r4, #21
 80016fe:	4316      	orrs	r6, r2
 8001700:	0d5b      	lsrs	r3, r3, #21
 8001702:	e6b2      	b.n	800146a <__aeabi_dmul+0xd6>
 8001704:	2300      	movs	r3, #0
 8001706:	4699      	mov	r9, r3
 8001708:	3301      	adds	r3, #1
 800170a:	2704      	movs	r7, #4
 800170c:	2600      	movs	r6, #0
 800170e:	469b      	mov	fp, r3
 8001710:	e664      	b.n	80013dc <__aeabi_dmul+0x48>
 8001712:	2303      	movs	r3, #3
 8001714:	9701      	str	r7, [sp, #4]
 8001716:	4681      	mov	r9, r0
 8001718:	270c      	movs	r7, #12
 800171a:	469b      	mov	fp, r3
 800171c:	e65e      	b.n	80013dc <__aeabi_dmul+0x48>
 800171e:	2201      	movs	r2, #1
 8001720:	2001      	movs	r0, #1
 8001722:	4317      	orrs	r7, r2
 8001724:	2200      	movs	r2, #0
 8001726:	e676      	b.n	8001416 <__aeabi_dmul+0x82>
 8001728:	2303      	movs	r3, #3
 800172a:	2003      	movs	r0, #3
 800172c:	431f      	orrs	r7, r3
 800172e:	4643      	mov	r3, r8
 8001730:	e671      	b.n	8001416 <__aeabi_dmul+0x82>
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	000007ff 	.word	0x000007ff
 8001738:	fffffc01 	.word	0xfffffc01
 800173c:	08008244 	.word	0x08008244
 8001740:	800fffff 	.word	0x800fffff
 8001744:	fffffc0d 	.word	0xfffffc0d
 8001748:	000003ff 	.word	0x000003ff
 800174c:	feffffff 	.word	0xfeffffff
 8001750:	000007fe 	.word	0x000007fe
 8001754:	2300      	movs	r3, #0
 8001756:	2780      	movs	r7, #128	; 0x80
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	033f      	lsls	r7, r7, #12
 800175c:	2600      	movs	r6, #0
 800175e:	4b43      	ldr	r3, [pc, #268]	; (800186c <__aeabi_dmul+0x4d8>)
 8001760:	e683      	b.n	800146a <__aeabi_dmul+0xd6>
 8001762:	9b01      	ldr	r3, [sp, #4]
 8001764:	0032      	movs	r2, r6
 8001766:	46a4      	mov	ip, r4
 8001768:	4658      	mov	r0, fp
 800176a:	e670      	b.n	800144e <__aeabi_dmul+0xba>
 800176c:	46ac      	mov	ip, r5
 800176e:	e66e      	b.n	800144e <__aeabi_dmul+0xba>
 8001770:	2780      	movs	r7, #128	; 0x80
 8001772:	9901      	ldr	r1, [sp, #4]
 8001774:	033f      	lsls	r7, r7, #12
 8001776:	4239      	tst	r1, r7
 8001778:	d02d      	beq.n	80017d6 <__aeabi_dmul+0x442>
 800177a:	423b      	tst	r3, r7
 800177c:	d12b      	bne.n	80017d6 <__aeabi_dmul+0x442>
 800177e:	431f      	orrs	r7, r3
 8001780:	033f      	lsls	r7, r7, #12
 8001782:	0b3f      	lsrs	r7, r7, #12
 8001784:	9500      	str	r5, [sp, #0]
 8001786:	0016      	movs	r6, r2
 8001788:	4b38      	ldr	r3, [pc, #224]	; (800186c <__aeabi_dmul+0x4d8>)
 800178a:	e66e      	b.n	800146a <__aeabi_dmul+0xd6>
 800178c:	2501      	movs	r5, #1
 800178e:	1b2d      	subs	r5, r5, r4
 8001790:	2d38      	cmp	r5, #56	; 0x38
 8001792:	dd00      	ble.n	8001796 <__aeabi_dmul+0x402>
 8001794:	e666      	b.n	8001464 <__aeabi_dmul+0xd0>
 8001796:	2d1f      	cmp	r5, #31
 8001798:	dc40      	bgt.n	800181c <__aeabi_dmul+0x488>
 800179a:	4835      	ldr	r0, [pc, #212]	; (8001870 <__aeabi_dmul+0x4dc>)
 800179c:	001c      	movs	r4, r3
 800179e:	4450      	add	r0, sl
 80017a0:	0016      	movs	r6, r2
 80017a2:	4082      	lsls	r2, r0
 80017a4:	4084      	lsls	r4, r0
 80017a6:	40ee      	lsrs	r6, r5
 80017a8:	1e50      	subs	r0, r2, #1
 80017aa:	4182      	sbcs	r2, r0
 80017ac:	4334      	orrs	r4, r6
 80017ae:	4314      	orrs	r4, r2
 80017b0:	40eb      	lsrs	r3, r5
 80017b2:	0762      	lsls	r2, r4, #29
 80017b4:	d009      	beq.n	80017ca <__aeabi_dmul+0x436>
 80017b6:	220f      	movs	r2, #15
 80017b8:	4022      	ands	r2, r4
 80017ba:	2a04      	cmp	r2, #4
 80017bc:	d005      	beq.n	80017ca <__aeabi_dmul+0x436>
 80017be:	0022      	movs	r2, r4
 80017c0:	1d14      	adds	r4, r2, #4
 80017c2:	4294      	cmp	r4, r2
 80017c4:	4180      	sbcs	r0, r0
 80017c6:	4240      	negs	r0, r0
 80017c8:	181b      	adds	r3, r3, r0
 80017ca:	021a      	lsls	r2, r3, #8
 80017cc:	d53e      	bpl.n	800184c <__aeabi_dmul+0x4b8>
 80017ce:	2301      	movs	r3, #1
 80017d0:	2700      	movs	r7, #0
 80017d2:	2600      	movs	r6, #0
 80017d4:	e649      	b.n	800146a <__aeabi_dmul+0xd6>
 80017d6:	2780      	movs	r7, #128	; 0x80
 80017d8:	9b01      	ldr	r3, [sp, #4]
 80017da:	033f      	lsls	r7, r7, #12
 80017dc:	431f      	orrs	r7, r3
 80017de:	033f      	lsls	r7, r7, #12
 80017e0:	0b3f      	lsrs	r7, r7, #12
 80017e2:	9400      	str	r4, [sp, #0]
 80017e4:	4b21      	ldr	r3, [pc, #132]	; (800186c <__aeabi_dmul+0x4d8>)
 80017e6:	e640      	b.n	800146a <__aeabi_dmul+0xd6>
 80017e8:	0003      	movs	r3, r0
 80017ea:	465a      	mov	r2, fp
 80017ec:	3b28      	subs	r3, #40	; 0x28
 80017ee:	409a      	lsls	r2, r3
 80017f0:	2600      	movs	r6, #0
 80017f2:	9201      	str	r2, [sp, #4]
 80017f4:	e66d      	b.n	80014d2 <__aeabi_dmul+0x13e>
 80017f6:	4658      	mov	r0, fp
 80017f8:	f000 f9b6 	bl	8001b68 <__clzsi2>
 80017fc:	3020      	adds	r0, #32
 80017fe:	e657      	b.n	80014b0 <__aeabi_dmul+0x11c>
 8001800:	0003      	movs	r3, r0
 8001802:	4652      	mov	r2, sl
 8001804:	3b28      	subs	r3, #40	; 0x28
 8001806:	409a      	lsls	r2, r3
 8001808:	0013      	movs	r3, r2
 800180a:	2200      	movs	r2, #0
 800180c:	e693      	b.n	8001536 <__aeabi_dmul+0x1a2>
 800180e:	4650      	mov	r0, sl
 8001810:	f000 f9aa 	bl	8001b68 <__clzsi2>
 8001814:	3020      	adds	r0, #32
 8001816:	e67b      	b.n	8001510 <__aeabi_dmul+0x17c>
 8001818:	46ca      	mov	sl, r9
 800181a:	e750      	b.n	80016be <__aeabi_dmul+0x32a>
 800181c:	201f      	movs	r0, #31
 800181e:	001e      	movs	r6, r3
 8001820:	4240      	negs	r0, r0
 8001822:	1b04      	subs	r4, r0, r4
 8001824:	40e6      	lsrs	r6, r4
 8001826:	2d20      	cmp	r5, #32
 8001828:	d003      	beq.n	8001832 <__aeabi_dmul+0x49e>
 800182a:	4c12      	ldr	r4, [pc, #72]	; (8001874 <__aeabi_dmul+0x4e0>)
 800182c:	4454      	add	r4, sl
 800182e:	40a3      	lsls	r3, r4
 8001830:	431a      	orrs	r2, r3
 8001832:	1e50      	subs	r0, r2, #1
 8001834:	4182      	sbcs	r2, r0
 8001836:	4332      	orrs	r2, r6
 8001838:	2607      	movs	r6, #7
 800183a:	2700      	movs	r7, #0
 800183c:	4016      	ands	r6, r2
 800183e:	d009      	beq.n	8001854 <__aeabi_dmul+0x4c0>
 8001840:	200f      	movs	r0, #15
 8001842:	2300      	movs	r3, #0
 8001844:	4010      	ands	r0, r2
 8001846:	0014      	movs	r4, r2
 8001848:	2804      	cmp	r0, #4
 800184a:	d1b9      	bne.n	80017c0 <__aeabi_dmul+0x42c>
 800184c:	0022      	movs	r2, r4
 800184e:	075e      	lsls	r6, r3, #29
 8001850:	025b      	lsls	r3, r3, #9
 8001852:	0b1f      	lsrs	r7, r3, #12
 8001854:	08d2      	lsrs	r2, r2, #3
 8001856:	4316      	orrs	r6, r2
 8001858:	2300      	movs	r3, #0
 800185a:	e606      	b.n	800146a <__aeabi_dmul+0xd6>
 800185c:	2780      	movs	r7, #128	; 0x80
 800185e:	033f      	lsls	r7, r7, #12
 8001860:	431f      	orrs	r7, r3
 8001862:	033f      	lsls	r7, r7, #12
 8001864:	0b3f      	lsrs	r7, r7, #12
 8001866:	0016      	movs	r6, r2
 8001868:	4b00      	ldr	r3, [pc, #0]	; (800186c <__aeabi_dmul+0x4d8>)
 800186a:	e5fe      	b.n	800146a <__aeabi_dmul+0xd6>
 800186c:	000007ff 	.word	0x000007ff
 8001870:	0000041e 	.word	0x0000041e
 8001874:	0000043e 	.word	0x0000043e

08001878 <__aeabi_d2iz>:
 8001878:	b530      	push	{r4, r5, lr}
 800187a:	4d14      	ldr	r5, [pc, #80]	; (80018cc <__aeabi_d2iz+0x54>)
 800187c:	030a      	lsls	r2, r1, #12
 800187e:	004b      	lsls	r3, r1, #1
 8001880:	0b12      	lsrs	r2, r2, #12
 8001882:	0d5b      	lsrs	r3, r3, #21
 8001884:	0fc9      	lsrs	r1, r1, #31
 8001886:	2400      	movs	r4, #0
 8001888:	42ab      	cmp	r3, r5
 800188a:	dd11      	ble.n	80018b0 <__aeabi_d2iz+0x38>
 800188c:	4c10      	ldr	r4, [pc, #64]	; (80018d0 <__aeabi_d2iz+0x58>)
 800188e:	42a3      	cmp	r3, r4
 8001890:	dc10      	bgt.n	80018b4 <__aeabi_d2iz+0x3c>
 8001892:	2480      	movs	r4, #128	; 0x80
 8001894:	0364      	lsls	r4, r4, #13
 8001896:	4322      	orrs	r2, r4
 8001898:	4c0e      	ldr	r4, [pc, #56]	; (80018d4 <__aeabi_d2iz+0x5c>)
 800189a:	1ae4      	subs	r4, r4, r3
 800189c:	2c1f      	cmp	r4, #31
 800189e:	dd0c      	ble.n	80018ba <__aeabi_d2iz+0x42>
 80018a0:	480d      	ldr	r0, [pc, #52]	; (80018d8 <__aeabi_d2iz+0x60>)
 80018a2:	1ac3      	subs	r3, r0, r3
 80018a4:	40da      	lsrs	r2, r3
 80018a6:	0013      	movs	r3, r2
 80018a8:	425c      	negs	r4, r3
 80018aa:	2900      	cmp	r1, #0
 80018ac:	d100      	bne.n	80018b0 <__aeabi_d2iz+0x38>
 80018ae:	001c      	movs	r4, r3
 80018b0:	0020      	movs	r0, r4
 80018b2:	bd30      	pop	{r4, r5, pc}
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <__aeabi_d2iz+0x64>)
 80018b6:	18cc      	adds	r4, r1, r3
 80018b8:	e7fa      	b.n	80018b0 <__aeabi_d2iz+0x38>
 80018ba:	4d09      	ldr	r5, [pc, #36]	; (80018e0 <__aeabi_d2iz+0x68>)
 80018bc:	40e0      	lsrs	r0, r4
 80018be:	46ac      	mov	ip, r5
 80018c0:	4463      	add	r3, ip
 80018c2:	409a      	lsls	r2, r3
 80018c4:	0013      	movs	r3, r2
 80018c6:	4303      	orrs	r3, r0
 80018c8:	e7ee      	b.n	80018a8 <__aeabi_d2iz+0x30>
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	000003fe 	.word	0x000003fe
 80018d0:	0000041d 	.word	0x0000041d
 80018d4:	00000433 	.word	0x00000433
 80018d8:	00000413 	.word	0x00000413
 80018dc:	7fffffff 	.word	0x7fffffff
 80018e0:	fffffbed 	.word	0xfffffbed

080018e4 <__aeabi_i2d>:
 80018e4:	b570      	push	{r4, r5, r6, lr}
 80018e6:	2800      	cmp	r0, #0
 80018e8:	d02d      	beq.n	8001946 <__aeabi_i2d+0x62>
 80018ea:	17c3      	asrs	r3, r0, #31
 80018ec:	18c5      	adds	r5, r0, r3
 80018ee:	405d      	eors	r5, r3
 80018f0:	0fc4      	lsrs	r4, r0, #31
 80018f2:	0028      	movs	r0, r5
 80018f4:	f000 f938 	bl	8001b68 <__clzsi2>
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <__aeabi_i2d+0x6c>)
 80018fa:	1a1b      	subs	r3, r3, r0
 80018fc:	055b      	lsls	r3, r3, #21
 80018fe:	0d5b      	lsrs	r3, r3, #21
 8001900:	280a      	cmp	r0, #10
 8001902:	dd15      	ble.n	8001930 <__aeabi_i2d+0x4c>
 8001904:	380b      	subs	r0, #11
 8001906:	4085      	lsls	r5, r0
 8001908:	2200      	movs	r2, #0
 800190a:	032d      	lsls	r5, r5, #12
 800190c:	0b2d      	lsrs	r5, r5, #12
 800190e:	2100      	movs	r1, #0
 8001910:	0010      	movs	r0, r2
 8001912:	032d      	lsls	r5, r5, #12
 8001914:	0d0a      	lsrs	r2, r1, #20
 8001916:	0b2d      	lsrs	r5, r5, #12
 8001918:	0512      	lsls	r2, r2, #20
 800191a:	432a      	orrs	r2, r5
 800191c:	4d0d      	ldr	r5, [pc, #52]	; (8001954 <__aeabi_i2d+0x70>)
 800191e:	051b      	lsls	r3, r3, #20
 8001920:	402a      	ands	r2, r5
 8001922:	4313      	orrs	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	07e4      	lsls	r4, r4, #31
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	4323      	orrs	r3, r4
 800192c:	0019      	movs	r1, r3
 800192e:	bd70      	pop	{r4, r5, r6, pc}
 8001930:	0002      	movs	r2, r0
 8001932:	0029      	movs	r1, r5
 8001934:	3215      	adds	r2, #21
 8001936:	4091      	lsls	r1, r2
 8001938:	000a      	movs	r2, r1
 800193a:	210b      	movs	r1, #11
 800193c:	1a08      	subs	r0, r1, r0
 800193e:	40c5      	lsrs	r5, r0
 8001940:	032d      	lsls	r5, r5, #12
 8001942:	0b2d      	lsrs	r5, r5, #12
 8001944:	e7e3      	b.n	800190e <__aeabi_i2d+0x2a>
 8001946:	2400      	movs	r4, #0
 8001948:	2300      	movs	r3, #0
 800194a:	2500      	movs	r5, #0
 800194c:	2200      	movs	r2, #0
 800194e:	e7de      	b.n	800190e <__aeabi_i2d+0x2a>
 8001950:	0000041e 	.word	0x0000041e
 8001954:	800fffff 	.word	0x800fffff

08001958 <__aeabi_ui2d>:
 8001958:	b510      	push	{r4, lr}
 800195a:	1e04      	subs	r4, r0, #0
 800195c:	d025      	beq.n	80019aa <__aeabi_ui2d+0x52>
 800195e:	f000 f903 	bl	8001b68 <__clzsi2>
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <__aeabi_ui2d+0x5c>)
 8001964:	1a1b      	subs	r3, r3, r0
 8001966:	055b      	lsls	r3, r3, #21
 8001968:	0d5b      	lsrs	r3, r3, #21
 800196a:	280a      	cmp	r0, #10
 800196c:	dd12      	ble.n	8001994 <__aeabi_ui2d+0x3c>
 800196e:	380b      	subs	r0, #11
 8001970:	4084      	lsls	r4, r0
 8001972:	2200      	movs	r2, #0
 8001974:	0324      	lsls	r4, r4, #12
 8001976:	0b24      	lsrs	r4, r4, #12
 8001978:	2100      	movs	r1, #0
 800197a:	0010      	movs	r0, r2
 800197c:	0324      	lsls	r4, r4, #12
 800197e:	0d0a      	lsrs	r2, r1, #20
 8001980:	0b24      	lsrs	r4, r4, #12
 8001982:	0512      	lsls	r2, r2, #20
 8001984:	4322      	orrs	r2, r4
 8001986:	4c0c      	ldr	r4, [pc, #48]	; (80019b8 <__aeabi_ui2d+0x60>)
 8001988:	051b      	lsls	r3, r3, #20
 800198a:	4022      	ands	r2, r4
 800198c:	4313      	orrs	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	0859      	lsrs	r1, r3, #1
 8001992:	bd10      	pop	{r4, pc}
 8001994:	0002      	movs	r2, r0
 8001996:	0021      	movs	r1, r4
 8001998:	3215      	adds	r2, #21
 800199a:	4091      	lsls	r1, r2
 800199c:	000a      	movs	r2, r1
 800199e:	210b      	movs	r1, #11
 80019a0:	1a08      	subs	r0, r1, r0
 80019a2:	40c4      	lsrs	r4, r0
 80019a4:	0324      	lsls	r4, r4, #12
 80019a6:	0b24      	lsrs	r4, r4, #12
 80019a8:	e7e6      	b.n	8001978 <__aeabi_ui2d+0x20>
 80019aa:	2300      	movs	r3, #0
 80019ac:	2400      	movs	r4, #0
 80019ae:	2200      	movs	r2, #0
 80019b0:	e7e2      	b.n	8001978 <__aeabi_ui2d+0x20>
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	0000041e 	.word	0x0000041e
 80019b8:	800fffff 	.word	0x800fffff

080019bc <__aeabi_f2d>:
 80019bc:	0041      	lsls	r1, r0, #1
 80019be:	0e09      	lsrs	r1, r1, #24
 80019c0:	1c4b      	adds	r3, r1, #1
 80019c2:	b570      	push	{r4, r5, r6, lr}
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	0246      	lsls	r6, r0, #9
 80019c8:	0a75      	lsrs	r5, r6, #9
 80019ca:	0fc4      	lsrs	r4, r0, #31
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	dd14      	ble.n	80019fa <__aeabi_f2d+0x3e>
 80019d0:	23e0      	movs	r3, #224	; 0xe0
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	076d      	lsls	r5, r5, #29
 80019d6:	0b36      	lsrs	r6, r6, #12
 80019d8:	18cb      	adds	r3, r1, r3
 80019da:	2100      	movs	r1, #0
 80019dc:	0d0a      	lsrs	r2, r1, #20
 80019de:	0028      	movs	r0, r5
 80019e0:	0512      	lsls	r2, r2, #20
 80019e2:	4d1c      	ldr	r5, [pc, #112]	; (8001a54 <__aeabi_f2d+0x98>)
 80019e4:	4332      	orrs	r2, r6
 80019e6:	055b      	lsls	r3, r3, #21
 80019e8:	402a      	ands	r2, r5
 80019ea:	085b      	lsrs	r3, r3, #1
 80019ec:	4313      	orrs	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	07e4      	lsls	r4, r4, #31
 80019f2:	085b      	lsrs	r3, r3, #1
 80019f4:	4323      	orrs	r3, r4
 80019f6:	0019      	movs	r1, r3
 80019f8:	bd70      	pop	{r4, r5, r6, pc}
 80019fa:	2900      	cmp	r1, #0
 80019fc:	d114      	bne.n	8001a28 <__aeabi_f2d+0x6c>
 80019fe:	2d00      	cmp	r5, #0
 8001a00:	d01e      	beq.n	8001a40 <__aeabi_f2d+0x84>
 8001a02:	0028      	movs	r0, r5
 8001a04:	f000 f8b0 	bl	8001b68 <__clzsi2>
 8001a08:	280a      	cmp	r0, #10
 8001a0a:	dc1c      	bgt.n	8001a46 <__aeabi_f2d+0x8a>
 8001a0c:	230b      	movs	r3, #11
 8001a0e:	002a      	movs	r2, r5
 8001a10:	1a1b      	subs	r3, r3, r0
 8001a12:	40da      	lsrs	r2, r3
 8001a14:	0003      	movs	r3, r0
 8001a16:	3315      	adds	r3, #21
 8001a18:	409d      	lsls	r5, r3
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <__aeabi_f2d+0x9c>)
 8001a1c:	0312      	lsls	r2, r2, #12
 8001a1e:	1a1b      	subs	r3, r3, r0
 8001a20:	055b      	lsls	r3, r3, #21
 8001a22:	0b16      	lsrs	r6, r2, #12
 8001a24:	0d5b      	lsrs	r3, r3, #21
 8001a26:	e7d8      	b.n	80019da <__aeabi_f2d+0x1e>
 8001a28:	2d00      	cmp	r5, #0
 8001a2a:	d006      	beq.n	8001a3a <__aeabi_f2d+0x7e>
 8001a2c:	0b32      	lsrs	r2, r6, #12
 8001a2e:	2680      	movs	r6, #128	; 0x80
 8001a30:	0336      	lsls	r6, r6, #12
 8001a32:	076d      	lsls	r5, r5, #29
 8001a34:	4316      	orrs	r6, r2
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <__aeabi_f2d+0xa0>)
 8001a38:	e7cf      	b.n	80019da <__aeabi_f2d+0x1e>
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <__aeabi_f2d+0xa0>)
 8001a3c:	2600      	movs	r6, #0
 8001a3e:	e7cc      	b.n	80019da <__aeabi_f2d+0x1e>
 8001a40:	2300      	movs	r3, #0
 8001a42:	2600      	movs	r6, #0
 8001a44:	e7c9      	b.n	80019da <__aeabi_f2d+0x1e>
 8001a46:	0003      	movs	r3, r0
 8001a48:	002a      	movs	r2, r5
 8001a4a:	3b0b      	subs	r3, #11
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	2500      	movs	r5, #0
 8001a50:	e7e3      	b.n	8001a1a <__aeabi_f2d+0x5e>
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	800fffff 	.word	0x800fffff
 8001a58:	00000389 	.word	0x00000389
 8001a5c:	000007ff 	.word	0x000007ff

08001a60 <__aeabi_d2f>:
 8001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a62:	004c      	lsls	r4, r1, #1
 8001a64:	0d64      	lsrs	r4, r4, #21
 8001a66:	030b      	lsls	r3, r1, #12
 8001a68:	1c62      	adds	r2, r4, #1
 8001a6a:	0a5b      	lsrs	r3, r3, #9
 8001a6c:	0f46      	lsrs	r6, r0, #29
 8001a6e:	0552      	lsls	r2, r2, #21
 8001a70:	0fc9      	lsrs	r1, r1, #31
 8001a72:	431e      	orrs	r6, r3
 8001a74:	00c5      	lsls	r5, r0, #3
 8001a76:	0d52      	lsrs	r2, r2, #21
 8001a78:	2a01      	cmp	r2, #1
 8001a7a:	dd29      	ble.n	8001ad0 <__aeabi_d2f+0x70>
 8001a7c:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <__aeabi_d2f+0xfc>)
 8001a7e:	18e7      	adds	r7, r4, r3
 8001a80:	2ffe      	cmp	r7, #254	; 0xfe
 8001a82:	dc1c      	bgt.n	8001abe <__aeabi_d2f+0x5e>
 8001a84:	2f00      	cmp	r7, #0
 8001a86:	dd3b      	ble.n	8001b00 <__aeabi_d2f+0xa0>
 8001a88:	0180      	lsls	r0, r0, #6
 8001a8a:	1e43      	subs	r3, r0, #1
 8001a8c:	4198      	sbcs	r0, r3
 8001a8e:	2207      	movs	r2, #7
 8001a90:	00f3      	lsls	r3, r6, #3
 8001a92:	0f6d      	lsrs	r5, r5, #29
 8001a94:	4303      	orrs	r3, r0
 8001a96:	432b      	orrs	r3, r5
 8001a98:	401a      	ands	r2, r3
 8001a9a:	2a00      	cmp	r2, #0
 8001a9c:	d004      	beq.n	8001aa8 <__aeabi_d2f+0x48>
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	2a04      	cmp	r2, #4
 8001aa4:	d000      	beq.n	8001aa8 <__aeabi_d2f+0x48>
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	04d2      	lsls	r2, r2, #19
 8001aac:	401a      	ands	r2, r3
 8001aae:	d024      	beq.n	8001afa <__aeabi_d2f+0x9a>
 8001ab0:	3701      	adds	r7, #1
 8001ab2:	b2fa      	uxtb	r2, r7
 8001ab4:	2fff      	cmp	r7, #255	; 0xff
 8001ab6:	d002      	beq.n	8001abe <__aeabi_d2f+0x5e>
 8001ab8:	019b      	lsls	r3, r3, #6
 8001aba:	0a58      	lsrs	r0, r3, #9
 8001abc:	e001      	b.n	8001ac2 <__aeabi_d2f+0x62>
 8001abe:	22ff      	movs	r2, #255	; 0xff
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	0240      	lsls	r0, r0, #9
 8001ac4:	05d2      	lsls	r2, r2, #23
 8001ac6:	0a40      	lsrs	r0, r0, #9
 8001ac8:	07c9      	lsls	r1, r1, #31
 8001aca:	4310      	orrs	r0, r2
 8001acc:	4308      	orrs	r0, r1
 8001ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad0:	4335      	orrs	r5, r6
 8001ad2:	2c00      	cmp	r4, #0
 8001ad4:	d104      	bne.n	8001ae0 <__aeabi_d2f+0x80>
 8001ad6:	2d00      	cmp	r5, #0
 8001ad8:	d10a      	bne.n	8001af0 <__aeabi_d2f+0x90>
 8001ada:	2200      	movs	r2, #0
 8001adc:	2000      	movs	r0, #0
 8001ade:	e7f0      	b.n	8001ac2 <__aeabi_d2f+0x62>
 8001ae0:	2d00      	cmp	r5, #0
 8001ae2:	d0ec      	beq.n	8001abe <__aeabi_d2f+0x5e>
 8001ae4:	2080      	movs	r0, #128	; 0x80
 8001ae6:	03c0      	lsls	r0, r0, #15
 8001ae8:	4330      	orrs	r0, r6
 8001aea:	22ff      	movs	r2, #255	; 0xff
 8001aec:	e7e9      	b.n	8001ac2 <__aeabi_d2f+0x62>
 8001aee:	2400      	movs	r4, #0
 8001af0:	2300      	movs	r3, #0
 8001af2:	025b      	lsls	r3, r3, #9
 8001af4:	0a58      	lsrs	r0, r3, #9
 8001af6:	b2e2      	uxtb	r2, r4
 8001af8:	e7e3      	b.n	8001ac2 <__aeabi_d2f+0x62>
 8001afa:	08db      	lsrs	r3, r3, #3
 8001afc:	003c      	movs	r4, r7
 8001afe:	e7f8      	b.n	8001af2 <__aeabi_d2f+0x92>
 8001b00:	003b      	movs	r3, r7
 8001b02:	3317      	adds	r3, #23
 8001b04:	dbf3      	blt.n	8001aee <__aeabi_d2f+0x8e>
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	041b      	lsls	r3, r3, #16
 8001b0a:	4333      	orrs	r3, r6
 8001b0c:	261e      	movs	r6, #30
 8001b0e:	1bf6      	subs	r6, r6, r7
 8001b10:	2e1f      	cmp	r6, #31
 8001b12:	dd14      	ble.n	8001b3e <__aeabi_d2f+0xde>
 8001b14:	2202      	movs	r2, #2
 8001b16:	4252      	negs	r2, r2
 8001b18:	1bd7      	subs	r7, r2, r7
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	40fa      	lsrs	r2, r7
 8001b1e:	0017      	movs	r7, r2
 8001b20:	2e20      	cmp	r6, #32
 8001b22:	d004      	beq.n	8001b2e <__aeabi_d2f+0xce>
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <__aeabi_d2f+0x100>)
 8001b26:	4694      	mov	ip, r2
 8001b28:	4464      	add	r4, ip
 8001b2a:	40a3      	lsls	r3, r4
 8001b2c:	431d      	orrs	r5, r3
 8001b2e:	002b      	movs	r3, r5
 8001b30:	1e5d      	subs	r5, r3, #1
 8001b32:	41ab      	sbcs	r3, r5
 8001b34:	2207      	movs	r2, #7
 8001b36:	433b      	orrs	r3, r7
 8001b38:	401a      	ands	r2, r3
 8001b3a:	2700      	movs	r7, #0
 8001b3c:	e7ad      	b.n	8001a9a <__aeabi_d2f+0x3a>
 8001b3e:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <__aeabi_d2f+0x104>)
 8001b40:	0028      	movs	r0, r5
 8001b42:	18a2      	adds	r2, r4, r2
 8001b44:	4095      	lsls	r5, r2
 8001b46:	4093      	lsls	r3, r2
 8001b48:	1e6c      	subs	r4, r5, #1
 8001b4a:	41a5      	sbcs	r5, r4
 8001b4c:	40f0      	lsrs	r0, r6
 8001b4e:	2207      	movs	r2, #7
 8001b50:	432b      	orrs	r3, r5
 8001b52:	4303      	orrs	r3, r0
 8001b54:	401a      	ands	r2, r3
 8001b56:	2700      	movs	r7, #0
 8001b58:	e79f      	b.n	8001a9a <__aeabi_d2f+0x3a>
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	fffffc80 	.word	0xfffffc80
 8001b60:	fffffca2 	.word	0xfffffca2
 8001b64:	fffffc82 	.word	0xfffffc82

08001b68 <__clzsi2>:
 8001b68:	211c      	movs	r1, #28
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	041b      	lsls	r3, r3, #16
 8001b6e:	4298      	cmp	r0, r3
 8001b70:	d301      	bcc.n	8001b76 <__clzsi2+0xe>
 8001b72:	0c00      	lsrs	r0, r0, #16
 8001b74:	3910      	subs	r1, #16
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	4298      	cmp	r0, r3
 8001b7a:	d301      	bcc.n	8001b80 <__clzsi2+0x18>
 8001b7c:	0a00      	lsrs	r0, r0, #8
 8001b7e:	3908      	subs	r1, #8
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	4298      	cmp	r0, r3
 8001b84:	d301      	bcc.n	8001b8a <__clzsi2+0x22>
 8001b86:	0900      	lsrs	r0, r0, #4
 8001b88:	3904      	subs	r1, #4
 8001b8a:	a202      	add	r2, pc, #8	; (adr r2, 8001b94 <__clzsi2+0x2c>)
 8001b8c:	5c10      	ldrb	r0, [r2, r0]
 8001b8e:	1840      	adds	r0, r0, r1
 8001b90:	4770      	bx	lr
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	02020304 	.word	0x02020304
 8001b98:	01010101 	.word	0x01010101
	...

08001ba4 <__clzdi2>:
 8001ba4:	b510      	push	{r4, lr}
 8001ba6:	2900      	cmp	r1, #0
 8001ba8:	d103      	bne.n	8001bb2 <__clzdi2+0xe>
 8001baa:	f7ff ffdd 	bl	8001b68 <__clzsi2>
 8001bae:	3020      	adds	r0, #32
 8001bb0:	e002      	b.n	8001bb8 <__clzdi2+0x14>
 8001bb2:	1c08      	adds	r0, r1, #0
 8001bb4:	f7ff ffd8 	bl	8001b68 <__clzsi2>
 8001bb8:	bd10      	pop	{r4, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)

08001bbc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc2:	1dfb      	adds	r3, r7, #7
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_Init+0x3c>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_Init+0x3c>)
 8001bce:	2140      	movs	r1, #64	; 0x40
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f000 f811 	bl	8001bfc <HAL_InitTick>
 8001bda:	1e03      	subs	r3, r0, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001bde:	1dfb      	adds	r3, r7, #7
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
 8001be4:	e001      	b.n	8001bea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001be6:	f006 f8f3 	bl	8007dd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bea:	1dfb      	adds	r3, r7, #7
 8001bec:	781b      	ldrb	r3, [r3, #0]
}
 8001bee:	0018      	movs	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	40022000 	.word	0x40022000

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c04:	230f      	movs	r3, #15
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_InitTick+0x50>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	23fa      	movs	r3, #250	; 0xfa
 8001c12:	0099      	lsls	r1, r3, #2
 8001c14:	0010      	movs	r0, r2
 8001c16:	f7fe fa77 	bl	8000108 <__udivsi3>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f000 f918 	bl	8001e52 <HAL_SYSTICK_Config>
 8001c22:	1e03      	subs	r3, r0, #0
 8001c24:	d004      	beq.n	8001c30 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8001c26:	230f      	movs	r3, #15
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	e006      	b.n	8001c3e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	2301      	movs	r3, #1
 8001c34:	425b      	negs	r3, r3
 8001c36:	2200      	movs	r2, #0
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f000 f8e5 	bl	8001e08 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8001c3e:	230f      	movs	r3, #15
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	781b      	ldrb	r3, [r3, #0]
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b004      	add	sp, #16
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000004 	.word	0x20000004

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  uwTick++;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_IncTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <HAL_IncTick+0x14>)
 8001c5c:	601a      	str	r2, [r3, #0]
}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	200000b0 	.word	0x200000b0

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <HAL_GetTick+0x10>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	200000b0 	.word	0x200000b0

08001c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff fff0 	bl	8001c68 <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3301      	adds	r3, #1
 8001c94:	d002      	beq.n	8001c9c <HAL_Delay+0x20>
  {
    wait++;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c9c:	46c0      	nop			; (mov r8, r8)
 8001c9e:	f7ff ffe3 	bl	8001c68 <HAL_GetTick>
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d8f7      	bhi.n	8001c9e <HAL_Delay+0x22>
  {
  }
}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b004      	add	sp, #16
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	1dfb      	adds	r3, r7, #7
 8001cc2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001cc4:	1dfb      	adds	r3, r7, #7
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	001a      	movs	r2, r3
 8001cca:	231f      	movs	r3, #31
 8001ccc:	401a      	ands	r2, r3
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <NVIC_EnableIRQ+0x28>)
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4091      	lsls	r1, r2
 8001cd4:	000a      	movs	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	e000e100 	.word	0xe000e100

08001ce4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	0002      	movs	r2, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	1dfb      	adds	r3, r7, #7
 8001cf0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001cf2:	1dfb      	adds	r3, r7, #7
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8001cf8:	d932      	bls.n	8001d60 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cfa:	4a2f      	ldr	r2, [pc, #188]	; (8001db8 <NVIC_SetPriority+0xd4>)
 8001cfc:	1dfb      	adds	r3, r7, #7
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	0019      	movs	r1, r3
 8001d02:	230f      	movs	r3, #15
 8001d04:	400b      	ands	r3, r1
 8001d06:	3b08      	subs	r3, #8
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	3306      	adds	r3, #6
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	18d3      	adds	r3, r2, r3
 8001d10:	3304      	adds	r3, #4
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	1dfa      	adds	r2, r7, #7
 8001d16:	7812      	ldrb	r2, [r2, #0]
 8001d18:	0011      	movs	r1, r2
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	00d2      	lsls	r2, r2, #3
 8001d20:	21ff      	movs	r1, #255	; 0xff
 8001d22:	4091      	lsls	r1, r2
 8001d24:	000a      	movs	r2, r1
 8001d26:	43d2      	mvns	r2, r2
 8001d28:	401a      	ands	r2, r3
 8001d2a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	019b      	lsls	r3, r3, #6
 8001d30:	22ff      	movs	r2, #255	; 0xff
 8001d32:	401a      	ands	r2, r3
 8001d34:	1dfb      	adds	r3, r7, #7
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	4003      	ands	r3, r0
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d42:	481d      	ldr	r0, [pc, #116]	; (8001db8 <NVIC_SetPriority+0xd4>)
 8001d44:	1dfb      	adds	r3, r7, #7
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	001c      	movs	r4, r3
 8001d4a:	230f      	movs	r3, #15
 8001d4c:	4023      	ands	r3, r4
 8001d4e:	3b08      	subs	r3, #8
 8001d50:	089b      	lsrs	r3, r3, #2
 8001d52:	430a      	orrs	r2, r1
 8001d54:	3306      	adds	r3, #6
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	18c3      	adds	r3, r0, r3
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d5e:	e027      	b.n	8001db0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d60:	4a16      	ldr	r2, [pc, #88]	; (8001dbc <NVIC_SetPriority+0xd8>)
 8001d62:	1dfb      	adds	r3, r7, #7
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b25b      	sxtb	r3, r3
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	33c0      	adds	r3, #192	; 0xc0
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	589b      	ldr	r3, [r3, r2]
 8001d70:	1dfa      	adds	r2, r7, #7
 8001d72:	7812      	ldrb	r2, [r2, #0]
 8001d74:	0011      	movs	r1, r2
 8001d76:	2203      	movs	r2, #3
 8001d78:	400a      	ands	r2, r1
 8001d7a:	00d2      	lsls	r2, r2, #3
 8001d7c:	21ff      	movs	r1, #255	; 0xff
 8001d7e:	4091      	lsls	r1, r2
 8001d80:	000a      	movs	r2, r1
 8001d82:	43d2      	mvns	r2, r2
 8001d84:	401a      	ands	r2, r3
 8001d86:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	019b      	lsls	r3, r3, #6
 8001d8c:	22ff      	movs	r2, #255	; 0xff
 8001d8e:	401a      	ands	r2, r3
 8001d90:	1dfb      	adds	r3, r7, #7
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	0018      	movs	r0, r3
 8001d96:	2303      	movs	r3, #3
 8001d98:	4003      	ands	r3, r0
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d9e:	4807      	ldr	r0, [pc, #28]	; (8001dbc <NVIC_SetPriority+0xd8>)
 8001da0:	1dfb      	adds	r3, r7, #7
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	430a      	orrs	r2, r1
 8001daa:	33c0      	adds	r3, #192	; 0xc0
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	501a      	str	r2, [r3, r0]
}
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b003      	add	sp, #12
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	e000ed00 	.word	0xe000ed00
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <SysTick_Config+0x40>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e010      	b.n	8001df8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <SysTick_Config+0x44>)
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	3a01      	subs	r2, #1
 8001ddc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dde:	2301      	movs	r3, #1
 8001de0:	425b      	negs	r3, r3
 8001de2:	2103      	movs	r1, #3
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff ff7d 	bl	8001ce4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <SysTick_Config+0x44>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <SysTick_Config+0x44>)
 8001df2:	2207      	movs	r2, #7
 8001df4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b002      	add	sp, #8
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	00ffffff 	.word	0x00ffffff
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	210f      	movs	r1, #15
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	1c02      	adds	r2, r0, #0
 8001e18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	187b      	adds	r3, r7, r1
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b25b      	sxtb	r3, r3
 8001e22:	0011      	movs	r1, r2
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff ff5d 	bl	8001ce4 <NVIC_SetPriority>
}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b004      	add	sp, #16
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	0002      	movs	r2, r0
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b25b      	sxtb	r3, r3
 8001e44:	0018      	movs	r0, r3
 8001e46:	f7ff ff37 	bl	8001cb8 <NVIC_EnableIRQ>
}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b002      	add	sp, #8
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f7ff ffaf 	bl	8001dc0 <SysTick_Config>
 8001e62:	0003      	movs	r3, r0
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b002      	add	sp, #8
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d106      	bne.n	8001e88 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8001e80:	2104      	movs	r1, #4
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001e86:	e005      	b.n	8001e94 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8001e8e:	2104      	movs	r1, #4
 8001e90:	438a      	bics	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
}
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b002      	add	sp, #8
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2225      	movs	r2, #37	; 0x25
 8001eb4:	5c9b      	ldrb	r3, [r3, r2]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d007      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ec2:	230f      	movs	r3, #15
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	e02a      	b.n	8001f22 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	210e      	movs	r1, #14
 8001ed8:	438a      	bics	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	438a      	bics	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	221c      	movs	r2, #28
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4091      	lsls	r1, r2
 8001efc:	000a      	movs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2225      	movs	r2, #37	; 0x25
 8001f04:	2101      	movs	r1, #1
 8001f06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2224      	movs	r2, #36	; 0x24
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	0010      	movs	r0, r2
 8001f20:	4798      	blx	r3
    }
  }
  return status;
 8001f22:	230f      	movs	r3, #15
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	781b      	ldrb	r3, [r3, #0]
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b004      	add	sp, #16
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f46:	e14f      	b.n	80021e8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4091      	lsls	r1, r2
 8001f52:	000a      	movs	r2, r1
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d100      	bne.n	8001f60 <HAL_GPIO_Init+0x30>
 8001f5e:	e140      	b.n	80021e2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x40>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b12      	cmp	r3, #18
 8001f6e:	d123      	bne.n	8001fb8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	08da      	lsrs	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3208      	adds	r2, #8
 8001f78:	0092      	lsls	r2, r2, #2
 8001f7a:	58d3      	ldr	r3, [r2, r3]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2207      	movs	r2, #7
 8001f82:	4013      	ands	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	0013      	movs	r3, r2
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2107      	movs	r1, #7
 8001f9c:	400b      	ands	r3, r1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	0013      	movs	r3, r2
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	08da      	lsrs	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3208      	adds	r2, #8
 8001fb2:	0092      	lsls	r2, r2, #2
 8001fb4:	6939      	ldr	r1, [r7, #16]
 8001fb6:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d00b      	beq.n	8001fd8 <HAL_GPIO_Init+0xa8>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d007      	beq.n	8001fd8 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fcc:	2b11      	cmp	r3, #17
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b12      	cmp	r3, #18
 8001fd6:	d130      	bne.n	800203a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	0013      	movs	r3, r2
 8001fe8:	43da      	mvns	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	0013      	movs	r3, r2
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800200e:	2201      	movs	r2, #1
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
 8002014:	0013      	movs	r3, r2
 8002016:	43da      	mvns	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	2201      	movs	r2, #1
 8002026:	401a      	ands	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	409a      	lsls	r2, r3
 800202c:	0013      	movs	r3, r2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	409a      	lsls	r2, r3
 8002048:	0013      	movs	r3, r2
 800204a:	43da      	mvns	r2, r3
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2203      	movs	r2, #3
 8002058:	401a      	ands	r2, r3
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	409a      	lsls	r2, r3
 8002060:	0013      	movs	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	2203      	movs	r2, #3
 800207a:	409a      	lsls	r2, r3
 800207c:	0013      	movs	r3, r2
 800207e:	43da      	mvns	r2, r3
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	409a      	lsls	r2, r3
 8002090:	0013      	movs	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	055b      	lsls	r3, r3, #21
 80020a6:	4013      	ands	r3, r2
 80020a8:	d100      	bne.n	80020ac <HAL_GPIO_Init+0x17c>
 80020aa:	e09a      	b.n	80021e2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ac:	4b54      	ldr	r3, [pc, #336]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 80020ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b0:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	430a      	orrs	r2, r1
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80020b8:	4a52      	ldr	r2, [pc, #328]	; (8002204 <HAL_GPIO_Init+0x2d4>)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	589b      	ldr	r3, [r3, r2]
 80020c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2203      	movs	r2, #3
 80020ca:	4013      	ands	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	220f      	movs	r2, #15
 80020d0:	409a      	lsls	r2, r3
 80020d2:	0013      	movs	r3, r2
 80020d4:	43da      	mvns	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	23a0      	movs	r3, #160	; 0xa0
 80020e0:	05db      	lsls	r3, r3, #23
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d019      	beq.n	800211a <HAL_GPIO_Init+0x1ea>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a47      	ldr	r2, [pc, #284]	; (8002208 <HAL_GPIO_Init+0x2d8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0x1e6>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a46      	ldr	r2, [pc, #280]	; (800220c <HAL_GPIO_Init+0x2dc>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00d      	beq.n	8002112 <HAL_GPIO_Init+0x1e2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a45      	ldr	r2, [pc, #276]	; (8002210 <HAL_GPIO_Init+0x2e0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <HAL_GPIO_Init+0x1de>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a44      	ldr	r2, [pc, #272]	; (8002214 <HAL_GPIO_Init+0x2e4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_GPIO_Init+0x1da>
 8002106:	2305      	movs	r3, #5
 8002108:	e008      	b.n	800211c <HAL_GPIO_Init+0x1ec>
 800210a:	2306      	movs	r3, #6
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x1ec>
 800210e:	2303      	movs	r3, #3
 8002110:	e004      	b.n	800211c <HAL_GPIO_Init+0x1ec>
 8002112:	2302      	movs	r3, #2
 8002114:	e002      	b.n	800211c <HAL_GPIO_Init+0x1ec>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_GPIO_Init+0x1ec>
 800211a:	2300      	movs	r3, #0
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	2103      	movs	r1, #3
 8002120:	400a      	ands	r2, r1
 8002122:	0092      	lsls	r2, r2, #2
 8002124:	4093      	lsls	r3, r2
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800212c:	4935      	ldr	r1, [pc, #212]	; (8002204 <HAL_GPIO_Init+0x2d4>)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	3302      	adds	r3, #2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800213a:	4b37      	ldr	r3, [pc, #220]	; (8002218 <HAL_GPIO_Init+0x2e8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43da      	mvns	r2, r3
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	025b      	lsls	r3, r3, #9
 8002152:	4013      	ands	r3, r2
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800215e:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <HAL_GPIO_Init+0x2e8>)
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002164:	4b2c      	ldr	r3, [pc, #176]	; (8002218 <HAL_GPIO_Init+0x2e8>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43da      	mvns	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	029b      	lsls	r3, r3, #10
 800217c:	4013      	ands	r3, r2
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002188:	4b23      	ldr	r3, [pc, #140]	; (8002218 <HAL_GPIO_Init+0x2e8>)
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <HAL_GPIO_Init+0x2e8>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43da      	mvns	r2, r3
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	035b      	lsls	r3, r3, #13
 80021a6:	4013      	ands	r3, r2
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_GPIO_Init+0x2e8>)
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80021b8:	4b17      	ldr	r3, [pc, #92]	; (8002218 <HAL_GPIO_Init+0x2e8>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	43da      	mvns	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	039b      	lsls	r3, r3, #14
 80021d0:	4013      	ands	r3, r2
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021dc:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <HAL_GPIO_Init+0x2e8>)
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3301      	adds	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	40da      	lsrs	r2, r3
 80021f0:	1e13      	subs	r3, r2, #0
 80021f2:	d000      	beq.n	80021f6 <HAL_GPIO_Init+0x2c6>
 80021f4:	e6a8      	b.n	8001f48 <HAL_GPIO_Init+0x18>
  }
}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b006      	add	sp, #24
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	40021000 	.word	0x40021000
 8002204:	40010000 	.word	0x40010000
 8002208:	50000400 	.word	0x50000400
 800220c:	50000800 	.word	0x50000800
 8002210:	50000c00 	.word	0x50000c00
 8002214:	50001c00 	.word	0x50001c00
 8002218:	40010400 	.word	0x40010400

0800221c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	000a      	movs	r2, r1
 8002226:	1cbb      	adds	r3, r7, #2
 8002228:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	1cba      	adds	r2, r7, #2
 8002230:	8812      	ldrh	r2, [r2, #0]
 8002232:	4013      	ands	r3, r2
 8002234:	d004      	beq.n	8002240 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002236:	230f      	movs	r3, #15
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	e003      	b.n	8002248 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002240:	230f      	movs	r3, #15
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002248:	230f      	movs	r3, #15
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	781b      	ldrb	r3, [r3, #0]
}
 800224e:	0018      	movs	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	b004      	add	sp, #16
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	0008      	movs	r0, r1
 8002260:	0011      	movs	r1, r2
 8002262:	1cbb      	adds	r3, r7, #2
 8002264:	1c02      	adds	r2, r0, #0
 8002266:	801a      	strh	r2, [r3, #0]
 8002268:	1c7b      	adds	r3, r7, #1
 800226a:	1c0a      	adds	r2, r1, #0
 800226c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800226e:	1c7b      	adds	r3, r7, #1
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002276:	1cbb      	adds	r3, r7, #2
 8002278:	881a      	ldrh	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800227e:	e003      	b.n	8002288 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002280:	1cbb      	adds	r3, r7, #2
 8002282:	881a      	ldrh	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b002      	add	sp, #8
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e082      	b.n	80023a8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2241      	movs	r2, #65	; 0x41
 80022a6:	5c9b      	ldrb	r3, [r3, r2]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d107      	bne.n	80022be <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2240      	movs	r2, #64	; 0x40
 80022b2:	2100      	movs	r1, #0
 80022b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f004 fc57 	bl	8006b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2241      	movs	r2, #65	; 0x41
 80022c2:	2124      	movs	r1, #36	; 0x24
 80022c4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2101      	movs	r1, #1
 80022d2:	438a      	bics	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4934      	ldr	r1, [pc, #208]	; (80023b0 <HAL_I2C_Init+0x120>)
 80022e0:	400a      	ands	r2, r1
 80022e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4931      	ldr	r1, [pc, #196]	; (80023b4 <HAL_I2C_Init+0x124>)
 80022f0:	400a      	ands	r2, r1
 80022f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d108      	bne.n	800230e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	0209      	lsls	r1, r1, #8
 8002308:	430a      	orrs	r2, r1
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	e007      	b.n	800231e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2184      	movs	r1, #132	; 0x84
 8002318:	0209      	lsls	r1, r1, #8
 800231a:	430a      	orrs	r2, r1
 800231c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d104      	bne.n	8002330 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	491f      	ldr	r1, [pc, #124]	; (80023b8 <HAL_I2C_Init+0x128>)
 800233c:	430a      	orrs	r2, r1
 800233e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	491a      	ldr	r1, [pc, #104]	; (80023b4 <HAL_I2C_Init+0x124>)
 800234c:	400a      	ands	r2, r1
 800234e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	431a      	orrs	r2, r3
 800235a:	0011      	movs	r1, r2
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	021a      	lsls	r2, r3, #8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69d9      	ldr	r1, [r3, #28]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1a      	ldr	r2, [r3, #32]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2101      	movs	r1, #1
 8002386:	430a      	orrs	r2, r1
 8002388:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2241      	movs	r2, #65	; 0x41
 8002394:	2120      	movs	r1, #32
 8002396:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2242      	movs	r2, #66	; 0x42
 80023a2:	2100      	movs	r1, #0
 80023a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	f0ffffff 	.word	0xf0ffffff
 80023b4:	ffff7fff 	.word	0xffff7fff
 80023b8:	02008000 	.word	0x02008000

080023bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	0008      	movs	r0, r1
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	0019      	movs	r1, r3
 80023ca:	230a      	movs	r3, #10
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	1c02      	adds	r2, r0, #0
 80023d0:	801a      	strh	r2, [r3, #0]
 80023d2:	2308      	movs	r3, #8
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	1c0a      	adds	r2, r1, #0
 80023d8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2241      	movs	r2, #65	; 0x41
 80023de:	5c9b      	ldrb	r3, [r3, r2]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d000      	beq.n	80023e8 <HAL_I2C_Master_Transmit+0x2c>
 80023e6:	e0e7      	b.n	80025b8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2240      	movs	r2, #64	; 0x40
 80023ec:	5c9b      	ldrb	r3, [r3, r2]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_I2C_Master_Transmit+0x3a>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e0e1      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1fe>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2240      	movs	r2, #64	; 0x40
 80023fa:	2101      	movs	r1, #1
 80023fc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023fe:	f7ff fc33 	bl	8001c68 <HAL_GetTick>
 8002402:	0003      	movs	r3, r0
 8002404:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	0219      	lsls	r1, r3, #8
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2319      	movs	r3, #25
 8002412:	2201      	movs	r2, #1
 8002414:	f000 fa04 	bl	8002820 <I2C_WaitOnFlagUntilTimeout>
 8002418:	1e03      	subs	r3, r0, #0
 800241a:	d001      	beq.n	8002420 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0cc      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2241      	movs	r2, #65	; 0x41
 8002424:	2121      	movs	r1, #33	; 0x21
 8002426:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2242      	movs	r2, #66	; 0x42
 800242c:	2110      	movs	r1, #16
 800242e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2208      	movs	r2, #8
 8002440:	18ba      	adds	r2, r7, r2
 8002442:	8812      	ldrh	r2, [r2, #0]
 8002444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	2bff      	cmp	r3, #255	; 0xff
 8002454:	d911      	bls.n	800247a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	22ff      	movs	r2, #255	; 0xff
 800245a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	b2da      	uxtb	r2, r3
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	045c      	lsls	r4, r3, #17
 8002466:	230a      	movs	r3, #10
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	8819      	ldrh	r1, [r3, #0]
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	4b55      	ldr	r3, [pc, #340]	; (80025c4 <HAL_I2C_Master_Transmit+0x208>)
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	0023      	movs	r3, r4
 8002474:	f000 fb60 	bl	8002b38 <I2C_TransferConfig>
 8002478:	e075      	b.n	8002566 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	b2da      	uxtb	r2, r3
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	049c      	lsls	r4, r3, #18
 800248e:	230a      	movs	r3, #10
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	8819      	ldrh	r1, [r3, #0]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	4b4b      	ldr	r3, [pc, #300]	; (80025c4 <HAL_I2C_Master_Transmit+0x208>)
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	0023      	movs	r3, r4
 800249c:	f000 fb4c 	bl	8002b38 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80024a0:	e061      	b.n	8002566 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	0018      	movs	r0, r3
 80024aa:	f000 f9f8 	bl	800289e <I2C_WaitOnTXISFlagUntilTimeout>
 80024ae:	1e03      	subs	r3, r0, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e081      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	781a      	ldrb	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d03a      	beq.n	8002566 <HAL_I2C_Master_Transmit+0x1aa>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d136      	bne.n	8002566 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	0013      	movs	r3, r2
 8002502:	2200      	movs	r2, #0
 8002504:	2180      	movs	r1, #128	; 0x80
 8002506:	f000 f98b 	bl	8002820 <I2C_WaitOnFlagUntilTimeout>
 800250a:	1e03      	subs	r3, r0, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e053      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002516:	b29b      	uxth	r3, r3
 8002518:	2bff      	cmp	r3, #255	; 0xff
 800251a:	d911      	bls.n	8002540 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	22ff      	movs	r2, #255	; 0xff
 8002520:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002526:	b2da      	uxtb	r2, r3
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	045c      	lsls	r4, r3, #17
 800252c:	230a      	movs	r3, #10
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	8819      	ldrh	r1, [r3, #0]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	2300      	movs	r3, #0
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	0023      	movs	r3, r4
 800253a:	f000 fafd 	bl	8002b38 <I2C_TransferConfig>
 800253e:	e012      	b.n	8002566 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254e:	b2da      	uxtb	r2, r3
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	049c      	lsls	r4, r3, #18
 8002554:	230a      	movs	r3, #10
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	8819      	ldrh	r1, [r3, #0]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	2300      	movs	r3, #0
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	0023      	movs	r3, r4
 8002562:	f000 fae9 	bl	8002b38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d198      	bne.n	80024a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	0018      	movs	r0, r3
 8002578:	f000 f9d0 	bl	800291c <I2C_WaitOnSTOPFlagUntilTimeout>
 800257c:	1e03      	subs	r3, r0, #0
 800257e:	d001      	beq.n	8002584 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e01a      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2220      	movs	r2, #32
 800258a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	490c      	ldr	r1, [pc, #48]	; (80025c8 <HAL_I2C_Master_Transmit+0x20c>)
 8002598:	400a      	ands	r2, r1
 800259a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2241      	movs	r2, #65	; 0x41
 80025a0:	2120      	movs	r1, #32
 80025a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2242      	movs	r2, #66	; 0x42
 80025a8:	2100      	movs	r1, #0
 80025aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2240      	movs	r2, #64	; 0x40
 80025b0:	2100      	movs	r1, #0
 80025b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
  }
}
 80025ba:	0018      	movs	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	b007      	add	sp, #28
 80025c0:	bd90      	pop	{r4, r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	80002000 	.word	0x80002000
 80025c8:	fe00e800 	.word	0xfe00e800

080025cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	0008      	movs	r0, r1
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	0019      	movs	r1, r3
 80025da:	230a      	movs	r3, #10
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	1c02      	adds	r2, r0, #0
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	2308      	movs	r3, #8
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	1c0a      	adds	r2, r1, #0
 80025e8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2241      	movs	r2, #65	; 0x41
 80025ee:	5c9b      	ldrb	r3, [r3, r2]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d000      	beq.n	80025f8 <HAL_I2C_Master_Receive+0x2c>
 80025f6:	e0e8      	b.n	80027ca <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2240      	movs	r2, #64	; 0x40
 80025fc:	5c9b      	ldrb	r3, [r3, r2]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_I2C_Master_Receive+0x3a>
 8002602:	2302      	movs	r3, #2
 8002604:	e0e2      	b.n	80027cc <HAL_I2C_Master_Receive+0x200>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2240      	movs	r2, #64	; 0x40
 800260a:	2101      	movs	r1, #1
 800260c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800260e:	f7ff fb2b 	bl	8001c68 <HAL_GetTick>
 8002612:	0003      	movs	r3, r0
 8002614:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	0219      	lsls	r1, r3, #8
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2319      	movs	r3, #25
 8002622:	2201      	movs	r2, #1
 8002624:	f000 f8fc 	bl	8002820 <I2C_WaitOnFlagUntilTimeout>
 8002628:	1e03      	subs	r3, r0, #0
 800262a:	d001      	beq.n	8002630 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0cd      	b.n	80027cc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2241      	movs	r2, #65	; 0x41
 8002634:	2122      	movs	r1, #34	; 0x22
 8002636:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2242      	movs	r2, #66	; 0x42
 800263c:	2110      	movs	r1, #16
 800263e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2208      	movs	r2, #8
 8002650:	18ba      	adds	r2, r7, r2
 8002652:	8812      	ldrh	r2, [r2, #0]
 8002654:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	2bff      	cmp	r3, #255	; 0xff
 8002664:	d911      	bls.n	800268a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	22ff      	movs	r2, #255	; 0xff
 800266a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	b2da      	uxtb	r2, r3
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	045c      	lsls	r4, r3, #17
 8002676:	230a      	movs	r3, #10
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	8819      	ldrh	r1, [r3, #0]
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	4b55      	ldr	r3, [pc, #340]	; (80027d4 <HAL_I2C_Master_Receive+0x208>)
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	0023      	movs	r3, r4
 8002684:	f000 fa58 	bl	8002b38 <I2C_TransferConfig>
 8002688:	e076      	b.n	8002778 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002698:	b2da      	uxtb	r2, r3
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	049c      	lsls	r4, r3, #18
 800269e:	230a      	movs	r3, #10
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	8819      	ldrh	r1, [r3, #0]
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	4b4b      	ldr	r3, [pc, #300]	; (80027d4 <HAL_I2C_Master_Receive+0x208>)
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	0023      	movs	r3, r4
 80026ac:	f000 fa44 	bl	8002b38 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80026b0:	e062      	b.n	8002778 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 f96b 	bl	8002994 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e082      	b.n	80027cc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d03a      	beq.n	8002778 <HAL_I2C_Master_Receive+0x1ac>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002706:	2b00      	cmp	r3, #0
 8002708:	d136      	bne.n	8002778 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800270a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	0013      	movs	r3, r2
 8002714:	2200      	movs	r2, #0
 8002716:	2180      	movs	r1, #128	; 0x80
 8002718:	f000 f882 	bl	8002820 <I2C_WaitOnFlagUntilTimeout>
 800271c:	1e03      	subs	r3, r0, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e053      	b.n	80027cc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	2bff      	cmp	r3, #255	; 0xff
 800272c:	d911      	bls.n	8002752 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	22ff      	movs	r2, #255	; 0xff
 8002732:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002738:	b2da      	uxtb	r2, r3
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	045c      	lsls	r4, r3, #17
 800273e:	230a      	movs	r3, #10
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	8819      	ldrh	r1, [r3, #0]
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	2300      	movs	r3, #0
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	0023      	movs	r3, r4
 800274c:	f000 f9f4 	bl	8002b38 <I2C_TransferConfig>
 8002750:	e012      	b.n	8002778 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002760:	b2da      	uxtb	r2, r3
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	049c      	lsls	r4, r3, #18
 8002766:	230a      	movs	r3, #10
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	8819      	ldrh	r1, [r3, #0]
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	2300      	movs	r3, #0
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	0023      	movs	r3, r4
 8002774:	f000 f9e0 	bl	8002b38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d197      	bne.n	80026b2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	0018      	movs	r0, r3
 800278a:	f000 f8c7 	bl	800291c <I2C_WaitOnSTOPFlagUntilTimeout>
 800278e:	1e03      	subs	r3, r0, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e01a      	b.n	80027cc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2220      	movs	r2, #32
 800279c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	490b      	ldr	r1, [pc, #44]	; (80027d8 <HAL_I2C_Master_Receive+0x20c>)
 80027aa:	400a      	ands	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2241      	movs	r2, #65	; 0x41
 80027b2:	2120      	movs	r1, #32
 80027b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2242      	movs	r2, #66	; 0x42
 80027ba:	2100      	movs	r1, #0
 80027bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2240      	movs	r2, #64	; 0x40
 80027c2:	2100      	movs	r1, #0
 80027c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e000      	b.n	80027cc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
  }
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b007      	add	sp, #28
 80027d2:	bd90      	pop	{r4, r7, pc}
 80027d4:	80002400 	.word	0x80002400
 80027d8:	fe00e800 	.word	0xfe00e800

080027dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2202      	movs	r2, #2
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d103      	bne.n	80027fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2200      	movs	r2, #0
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2201      	movs	r2, #1
 8002802:	4013      	ands	r3, r2
 8002804:	2b01      	cmp	r3, #1
 8002806:	d007      	beq.n	8002818 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699a      	ldr	r2, [r3, #24]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2101      	movs	r1, #1
 8002814:	430a      	orrs	r2, r1
 8002816:	619a      	str	r2, [r3, #24]
  }
}
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	b002      	add	sp, #8
 800281e:	bd80      	pop	{r7, pc}

08002820 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	1dfb      	adds	r3, r7, #7
 800282e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002830:	e021      	b.n	8002876 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	3301      	adds	r3, #1
 8002836:	d01e      	beq.n	8002876 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002838:	f7ff fa16 	bl	8001c68 <HAL_GetTick>
 800283c:	0002      	movs	r2, r0
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d302      	bcc.n	800284e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d113      	bne.n	8002876 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	2220      	movs	r2, #32
 8002854:	431a      	orrs	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2241      	movs	r2, #65	; 0x41
 800285e:	2120      	movs	r1, #32
 8002860:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2242      	movs	r2, #66	; 0x42
 8002866:	2100      	movs	r1, #0
 8002868:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2240      	movs	r2, #64	; 0x40
 800286e:	2100      	movs	r1, #0
 8002870:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e00f      	b.n	8002896 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	4013      	ands	r3, r2
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	425a      	negs	r2, r3
 8002886:	4153      	adcs	r3, r2
 8002888:	b2db      	uxtb	r3, r3
 800288a:	001a      	movs	r2, r3
 800288c:	1dfb      	adds	r3, r7, #7
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d0ce      	beq.n	8002832 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	0018      	movs	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	b004      	add	sp, #16
 800289c:	bd80      	pop	{r7, pc}

0800289e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028aa:	e02b      	b.n	8002904 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	0018      	movs	r0, r3
 80028b4:	f000 f8da 	bl	8002a6c <I2C_IsAcknowledgeFailed>
 80028b8:	1e03      	subs	r3, r0, #0
 80028ba:	d001      	beq.n	80028c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e029      	b.n	8002914 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	3301      	adds	r3, #1
 80028c4:	d01e      	beq.n	8002904 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c6:	f7ff f9cf 	bl	8001c68 <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d302      	bcc.n	80028dc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d113      	bne.n	8002904 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	2220      	movs	r2, #32
 80028e2:	431a      	orrs	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2241      	movs	r2, #65	; 0x41
 80028ec:	2120      	movs	r1, #32
 80028ee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2242      	movs	r2, #66	; 0x42
 80028f4:	2100      	movs	r1, #0
 80028f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	2100      	movs	r1, #0
 80028fe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e007      	b.n	8002914 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2202      	movs	r2, #2
 800290c:	4013      	ands	r3, r2
 800290e:	2b02      	cmp	r3, #2
 8002910:	d1cc      	bne.n	80028ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b004      	add	sp, #16
 800291a:	bd80      	pop	{r7, pc}

0800291c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002928:	e028      	b.n	800297c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	0018      	movs	r0, r3
 8002932:	f000 f89b 	bl	8002a6c <I2C_IsAcknowledgeFailed>
 8002936:	1e03      	subs	r3, r0, #0
 8002938:	d001      	beq.n	800293e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e026      	b.n	800298c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293e:	f7ff f993 	bl	8001c68 <HAL_GetTick>
 8002942:	0002      	movs	r2, r0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	429a      	cmp	r2, r3
 800294c:	d302      	bcc.n	8002954 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d113      	bne.n	800297c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	2220      	movs	r2, #32
 800295a:	431a      	orrs	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2241      	movs	r2, #65	; 0x41
 8002964:	2120      	movs	r1, #32
 8002966:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2242      	movs	r2, #66	; 0x42
 800296c:	2100      	movs	r1, #0
 800296e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2240      	movs	r2, #64	; 0x40
 8002974:	2100      	movs	r1, #0
 8002976:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e007      	b.n	800298c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2220      	movs	r2, #32
 8002984:	4013      	ands	r3, r2
 8002986:	2b20      	cmp	r3, #32
 8002988:	d1cf      	bne.n	800292a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b004      	add	sp, #16
 8002992:	bd80      	pop	{r7, pc}

08002994 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029a0:	e055      	b.n	8002a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 f85f 	bl	8002a6c <I2C_IsAcknowledgeFailed>
 80029ae:	1e03      	subs	r3, r0, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e053      	b.n	8002a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2220      	movs	r2, #32
 80029be:	4013      	ands	r3, r2
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	d129      	bne.n	8002a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2204      	movs	r2, #4
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d105      	bne.n	80029de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	e03f      	b.n	8002a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2220      	movs	r2, #32
 80029e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	491d      	ldr	r1, [pc, #116]	; (8002a68 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80029f2:	400a      	ands	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2241      	movs	r2, #65	; 0x41
 8002a00:	2120      	movs	r1, #32
 8002a02:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2242      	movs	r2, #66	; 0x42
 8002a08:	2100      	movs	r1, #0
 8002a0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2240      	movs	r2, #64	; 0x40
 8002a10:	2100      	movs	r1, #0
 8002a12:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e022      	b.n	8002a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a18:	f7ff f926 	bl	8001c68 <HAL_GetTick>
 8002a1c:	0002      	movs	r2, r0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d302      	bcc.n	8002a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10f      	bne.n	8002a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	2220      	movs	r2, #32
 8002a34:	431a      	orrs	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2241      	movs	r2, #65	; 0x41
 8002a3e:	2120      	movs	r1, #32
 8002a40:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2240      	movs	r2, #64	; 0x40
 8002a46:	2100      	movs	r1, #0
 8002a48:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e007      	b.n	8002a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2204      	movs	r2, #4
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d1a2      	bne.n	80029a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b004      	add	sp, #16
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	fe00e800 	.word	0xfe00e800

08002a6c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2210      	movs	r2, #16
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b10      	cmp	r3, #16
 8002a84:	d151      	bne.n	8002b2a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a86:	e021      	b.n	8002acc <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	d01e      	beq.n	8002acc <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8e:	f7ff f8eb 	bl	8001c68 <HAL_GetTick>
 8002a92:	0002      	movs	r2, r0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <I2C_IsAcknowledgeFailed+0x38>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d113      	bne.n	8002acc <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2241      	movs	r2, #65	; 0x41
 8002ab4:	2120      	movs	r1, #32
 8002ab6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2242      	movs	r2, #66	; 0x42
 8002abc:	2100      	movs	r1, #0
 8002abe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2240      	movs	r2, #64	; 0x40
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e02f      	b.n	8002b2c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d1d6      	bne.n	8002a88 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2210      	movs	r2, #16
 8002ae0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7ff fe75 	bl	80027dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	490d      	ldr	r1, [pc, #52]	; (8002b34 <I2C_IsAcknowledgeFailed+0xc8>)
 8002afe:	400a      	ands	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	2204      	movs	r2, #4
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2241      	movs	r2, #65	; 0x41
 8002b12:	2120      	movs	r1, #32
 8002b14:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2242      	movs	r2, #66	; 0x42
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2240      	movs	r2, #64	; 0x40
 8002b22:	2100      	movs	r1, #0
 8002b24:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b004      	add	sp, #16
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	fe00e800 	.word	0xfe00e800

08002b38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	0008      	movs	r0, r1
 8002b42:	0011      	movs	r1, r2
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	240a      	movs	r4, #10
 8002b48:	193b      	adds	r3, r7, r4
 8002b4a:	1c02      	adds	r2, r0, #0
 8002b4c:	801a      	strh	r2, [r3, #0]
 8002b4e:	2009      	movs	r0, #9
 8002b50:	183b      	adds	r3, r7, r0
 8002b52:	1c0a      	adds	r2, r1, #0
 8002b54:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	6a3a      	ldr	r2, [r7, #32]
 8002b5e:	0d51      	lsrs	r1, r2, #21
 8002b60:	2280      	movs	r2, #128	; 0x80
 8002b62:	00d2      	lsls	r2, r2, #3
 8002b64:	400a      	ands	r2, r1
 8002b66:	490e      	ldr	r1, [pc, #56]	; (8002ba0 <I2C_TransferConfig+0x68>)
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	43d2      	mvns	r2, r2
 8002b6c:	401a      	ands	r2, r3
 8002b6e:	0011      	movs	r1, r2
 8002b70:	193b      	adds	r3, r7, r4
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	059b      	lsls	r3, r3, #22
 8002b76:	0d9a      	lsrs	r2, r3, #22
 8002b78:	183b      	adds	r3, r7, r0
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	0418      	lsls	r0, r3, #16
 8002b7e:	23ff      	movs	r3, #255	; 0xff
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	4003      	ands	r3, r0
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b005      	add	sp, #20
 8002b9c:	bd90      	pop	{r4, r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	03ff63ff 	.word	0x03ff63ff

08002ba4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2241      	movs	r2, #65	; 0x41
 8002bb2:	5c9b      	ldrb	r3, [r3, r2]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d138      	bne.n	8002c2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2240      	movs	r2, #64	; 0x40
 8002bbe:	5c9b      	ldrb	r3, [r3, r2]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e032      	b.n	8002c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2240      	movs	r2, #64	; 0x40
 8002bcc:	2101      	movs	r1, #1
 8002bce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2241      	movs	r2, #65	; 0x41
 8002bd4:	2124      	movs	r1, #36	; 0x24
 8002bd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2101      	movs	r1, #1
 8002be4:	438a      	bics	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4911      	ldr	r1, [pc, #68]	; (8002c38 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002bf4:	400a      	ands	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6819      	ldr	r1, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2101      	movs	r1, #1
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2241      	movs	r2, #65	; 0x41
 8002c1c:	2120      	movs	r1, #32
 8002c1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2240      	movs	r2, #64	; 0x40
 8002c24:	2100      	movs	r1, #0
 8002c26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e000      	b.n	8002c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c2c:	2302      	movs	r3, #2
  }
}
 8002c2e:	0018      	movs	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b002      	add	sp, #8
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	ffffefff 	.word	0xffffefff

08002c3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2241      	movs	r2, #65	; 0x41
 8002c4a:	5c9b      	ldrb	r3, [r3, r2]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d139      	bne.n	8002cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2240      	movs	r2, #64	; 0x40
 8002c56:	5c9b      	ldrb	r3, [r3, r2]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e033      	b.n	8002cc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2240      	movs	r2, #64	; 0x40
 8002c64:	2101      	movs	r1, #1
 8002c66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2241      	movs	r2, #65	; 0x41
 8002c6c:	2124      	movs	r1, #36	; 0x24
 8002c6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	438a      	bics	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2101      	movs	r1, #1
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2241      	movs	r2, #65	; 0x41
 8002cb6:	2120      	movs	r1, #32
 8002cb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2240      	movs	r2, #64	; 0x40
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
  }
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b004      	add	sp, #16
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	fffff0ff 	.word	0xfffff0ff

08002cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd4:	b5b0      	push	{r4, r5, r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f000 fbab 	bl	800343e <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce8:	4bce      	ldr	r3, [pc, #824]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	220c      	movs	r2, #12
 8002cee:	4013      	ands	r3, r2
 8002cf0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cf2:	4bcc      	ldr	r3, [pc, #816]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	025b      	lsls	r3, r3, #9
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2201      	movs	r2, #1
 8002d04:	4013      	ands	r3, r2
 8002d06:	d100      	bne.n	8002d0a <HAL_RCC_OscConfig+0x36>
 8002d08:	e07e      	b.n	8002e08 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d007      	beq.n	8002d20 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d112      	bne.n	8002d3c <HAL_RCC_OscConfig+0x68>
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	025b      	lsls	r3, r3, #9
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d10d      	bne.n	8002d3c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	4bc0      	ldr	r3, [pc, #768]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	029b      	lsls	r3, r3, #10
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d100      	bne.n	8002d2e <HAL_RCC_OscConfig+0x5a>
 8002d2c:	e06b      	b.n	8002e06 <HAL_RCC_OscConfig+0x132>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d167      	bne.n	8002e06 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f000 fb81 	bl	800343e <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	025b      	lsls	r3, r3, #9
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_OscConfig+0x84>
 8002d48:	4bb6      	ldr	r3, [pc, #728]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4bb5      	ldr	r3, [pc, #724]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002d4e:	2180      	movs	r1, #128	; 0x80
 8002d50:	0249      	lsls	r1, r1, #9
 8002d52:	430a      	orrs	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e027      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	23a0      	movs	r3, #160	; 0xa0
 8002d5e:	02db      	lsls	r3, r3, #11
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d10e      	bne.n	8002d82 <HAL_RCC_OscConfig+0xae>
 8002d64:	4baf      	ldr	r3, [pc, #700]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4bae      	ldr	r3, [pc, #696]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002d6a:	2180      	movs	r1, #128	; 0x80
 8002d6c:	02c9      	lsls	r1, r1, #11
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	4bac      	ldr	r3, [pc, #688]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4bab      	ldr	r3, [pc, #684]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002d78:	2180      	movs	r1, #128	; 0x80
 8002d7a:	0249      	lsls	r1, r1, #9
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	e012      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d82:	4ba8      	ldr	r3, [pc, #672]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4ba7      	ldr	r3, [pc, #668]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002d88:	49a7      	ldr	r1, [pc, #668]	; (8003028 <HAL_RCC_OscConfig+0x354>)
 8002d8a:	400a      	ands	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	4ba5      	ldr	r3, [pc, #660]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	025b      	lsls	r3, r3, #9
 8002d96:	4013      	ands	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4ba1      	ldr	r3, [pc, #644]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4ba0      	ldr	r3, [pc, #640]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002da2:	49a2      	ldr	r1, [pc, #648]	; (800302c <HAL_RCC_OscConfig+0x358>)
 8002da4:	400a      	ands	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d015      	beq.n	8002ddc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe ff5a 	bl	8001c68 <HAL_GetTick>
 8002db4:	0003      	movs	r3, r0
 8002db6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002db8:	e009      	b.n	8002dce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dba:	f7fe ff55 	bl	8001c68 <HAL_GetTick>
 8002dbe:	0002      	movs	r2, r0
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b64      	cmp	r3, #100	; 0x64
 8002dc6:	d902      	bls.n	8002dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	f000 fb38 	bl	800343e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dce:	4b95      	ldr	r3, [pc, #596]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	029b      	lsls	r3, r3, #10
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d0ef      	beq.n	8002dba <HAL_RCC_OscConfig+0xe6>
 8002dda:	e015      	b.n	8002e08 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fe ff44 	bl	8001c68 <HAL_GetTick>
 8002de0:	0003      	movs	r3, r0
 8002de2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de6:	f7fe ff3f 	bl	8001c68 <HAL_GetTick>
 8002dea:	0002      	movs	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b64      	cmp	r3, #100	; 0x64
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e322      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002df8:	4b8a      	ldr	r3, [pc, #552]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	029b      	lsls	r3, r3, #10
 8002e00:	4013      	ands	r3, r2
 8002e02:	d1f0      	bne.n	8002de6 <HAL_RCC_OscConfig+0x112>
 8002e04:	e000      	b.n	8002e08 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e06:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d100      	bne.n	8002e14 <HAL_RCC_OscConfig+0x140>
 8002e12:	e08a      	b.n	8002f2a <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d13d      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x1ce>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d13a      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002e2c:	4b7d      	ldr	r3, [pc, #500]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2204      	movs	r2, #4
 8002e32:	4013      	ands	r3, r2
 8002e34:	d004      	beq.n	8002e40 <HAL_RCC_OscConfig+0x16c>
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e2fe      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e40:	4b78      	ldr	r3, [pc, #480]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a7a      	ldr	r2, [pc, #488]	; (8003030 <HAL_RCC_OscConfig+0x35c>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	021a      	lsls	r2, r3, #8
 8002e50:	4b74      	ldr	r3, [pc, #464]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e56:	4b73      	ldr	r3, [pc, #460]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2209      	movs	r2, #9
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	4b70      	ldr	r3, [pc, #448]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e68:	f000 fc1e 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8002e6c:	0001      	movs	r1, r0
 8002e6e:	4b6d      	ldr	r3, [pc, #436]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	220f      	movs	r2, #15
 8002e76:	4013      	ands	r3, r2
 8002e78:	4a6e      	ldr	r2, [pc, #440]	; (8003034 <HAL_RCC_OscConfig+0x360>)
 8002e7a:	5cd3      	ldrb	r3, [r2, r3]
 8002e7c:	000a      	movs	r2, r1
 8002e7e:	40da      	lsrs	r2, r3
 8002e80:	4b6d      	ldr	r3, [pc, #436]	; (8003038 <HAL_RCC_OscConfig+0x364>)
 8002e82:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002e84:	2513      	movs	r5, #19
 8002e86:	197c      	adds	r4, r7, r5
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7fe feb7 	bl	8001bfc <HAL_InitTick>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002e92:	197b      	adds	r3, r7, r5
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d047      	beq.n	8002f2a <HAL_RCC_OscConfig+0x256>
      {
        return status;
 8002e9a:	2313      	movs	r3, #19
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	e2cd      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d027      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002ea8:	4b5e      	ldr	r3, [pc, #376]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2209      	movs	r2, #9
 8002eae:	4393      	bics	r3, r2
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	4b5c      	ldr	r3, [pc, #368]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7fe fed5 	bl	8001c68 <HAL_GetTick>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec4:	f7fe fed0 	bl	8001c68 <HAL_GetTick>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e2b3      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ed6:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2204      	movs	r2, #4
 8002edc:	4013      	ands	r3, r2
 8002ede:	d0f1      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a52      	ldr	r2, [pc, #328]	; (8003030 <HAL_RCC_OscConfig+0x35c>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	0019      	movs	r1, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	021a      	lsls	r2, r3, #8
 8002ef0:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	e018      	b.n	8002f2a <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef8:	4b4a      	ldr	r3, [pc, #296]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b49      	ldr	r3, [pc, #292]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002efe:	2101      	movs	r1, #1
 8002f00:	438a      	bics	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe feb0 	bl	8001c68 <HAL_GetTick>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f0e:	f7fe feab 	bl	8001c68 <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e28e      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f20:	4b40      	ldr	r3, [pc, #256]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2204      	movs	r2, #4
 8002f26:	4013      	ands	r3, r2
 8002f28:	d1f1      	bne.n	8002f0e <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2210      	movs	r2, #16
 8002f30:	4013      	ands	r3, r2
 8002f32:	d100      	bne.n	8002f36 <HAL_RCC_OscConfig+0x262>
 8002f34:	e09e      	b.n	8003074 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d13f      	bne.n	8002fbc <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f3c:	4b39      	ldr	r3, [pc, #228]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4013      	ands	r3, r2
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_OscConfig+0x280>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e274      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f54:	4b33      	ldr	r3, [pc, #204]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4a38      	ldr	r2, [pc, #224]	; (800303c <HAL_RCC_OscConfig+0x368>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f62:	4b30      	ldr	r3, [pc, #192]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002f64:	430a      	orrs	r2, r1
 8002f66:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f68:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	0a19      	lsrs	r1, r3, #8
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	061a      	lsls	r2, r3, #24
 8002f76:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	0b5b      	lsrs	r3, r3, #13
 8002f82:	3301      	adds	r3, #1
 8002f84:	2280      	movs	r2, #128	; 0x80
 8002f86:	0212      	lsls	r2, r2, #8
 8002f88:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f8a:	4b26      	ldr	r3, [pc, #152]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	210f      	movs	r1, #15
 8002f92:	400b      	ands	r3, r1
 8002f94:	4927      	ldr	r1, [pc, #156]	; (8003034 <HAL_RCC_OscConfig+0x360>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f9a:	4b27      	ldr	r3, [pc, #156]	; (8003038 <HAL_RCC_OscConfig+0x364>)
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002f9e:	2513      	movs	r5, #19
 8002fa0:	197c      	adds	r4, r7, r5
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7fe fe2a 	bl	8001bfc <HAL_InitTick>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002fac:	197b      	adds	r3, r7, r5
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d05f      	beq.n	8003074 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8002fb4:	2313      	movs	r3, #19
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	e240      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d03d      	beq.n	8003040 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fc4:	4b17      	ldr	r3, [pc, #92]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b16      	ldr	r3, [pc, #88]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	0049      	lsls	r1, r1, #1
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd2:	f7fe fe49 	bl	8001c68 <HAL_GetTick>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fdc:	f7fe fe44 	bl	8001c68 <HAL_GetTick>
 8002fe0:	0002      	movs	r2, r0
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e227      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fee:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a0f      	ldr	r2, [pc, #60]	; (800303c <HAL_RCC_OscConfig+0x368>)
 8003000:	4013      	ands	r3, r2
 8003002:	0019      	movs	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	0a19      	lsrs	r1, r3, #8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	061a      	lsls	r2, r3, #24
 800301c:	4b01      	ldr	r3, [pc, #4]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	e027      	b.n	8003074 <HAL_RCC_OscConfig+0x3a0>
 8003024:	40021000 	.word	0x40021000
 8003028:	fffeffff 	.word	0xfffeffff
 800302c:	fffbffff 	.word	0xfffbffff
 8003030:	ffffe0ff 	.word	0xffffe0ff
 8003034:	080082f8 	.word	0x080082f8
 8003038:	20000004 	.word	0x20000004
 800303c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003040:	4bbd      	ldr	r3, [pc, #756]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4bbc      	ldr	r3, [pc, #752]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 8003046:	49bd      	ldr	r1, [pc, #756]	; (800333c <HAL_RCC_OscConfig+0x668>)
 8003048:	400a      	ands	r2, r1
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fe fe0c 	bl	8001c68 <HAL_GetTick>
 8003050:	0003      	movs	r3, r0
 8003052:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003056:	f7fe fe07 	bl	8001c68 <HAL_GetTick>
 800305a:	0002      	movs	r2, r0
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e1ea      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003068:	4bb3      	ldr	r3, [pc, #716]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4013      	ands	r3, r2
 8003072:	d1f0      	bne.n	8003056 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2208      	movs	r2, #8
 800307a:	4013      	ands	r3, r2
 800307c:	d036      	beq.n	80030ec <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d019      	beq.n	80030ba <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003086:	4bac      	ldr	r3, [pc, #688]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 8003088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800308a:	4bab      	ldr	r3, [pc, #684]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 800308c:	2101      	movs	r1, #1
 800308e:	430a      	orrs	r2, r1
 8003090:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003092:	f7fe fde9 	bl	8001c68 <HAL_GetTick>
 8003096:	0003      	movs	r3, r0
 8003098:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309c:	f7fe fde4 	bl	8001c68 <HAL_GetTick>
 80030a0:	0002      	movs	r2, r0
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e1c7      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030ae:	4ba2      	ldr	r3, [pc, #648]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80030b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b2:	2202      	movs	r2, #2
 80030b4:	4013      	ands	r3, r2
 80030b6:	d0f1      	beq.n	800309c <HAL_RCC_OscConfig+0x3c8>
 80030b8:	e018      	b.n	80030ec <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ba:	4b9f      	ldr	r3, [pc, #636]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80030bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030be:	4b9e      	ldr	r3, [pc, #632]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80030c0:	2101      	movs	r1, #1
 80030c2:	438a      	bics	r2, r1
 80030c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c6:	f7fe fdcf 	bl	8001c68 <HAL_GetTick>
 80030ca:	0003      	movs	r3, r0
 80030cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fe fdca 	bl	8001c68 <HAL_GetTick>
 80030d4:	0002      	movs	r2, r0
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e1ad      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030e2:	4b95      	ldr	r3, [pc, #596]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80030e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e6:	2202      	movs	r2, #2
 80030e8:	4013      	ands	r3, r2
 80030ea:	d1f1      	bne.n	80030d0 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2204      	movs	r2, #4
 80030f2:	4013      	ands	r3, r2
 80030f4:	d100      	bne.n	80030f8 <HAL_RCC_OscConfig+0x424>
 80030f6:	e0af      	b.n	8003258 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f8:	2327      	movs	r3, #39	; 0x27
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003100:	4b8d      	ldr	r3, [pc, #564]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 8003102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	055b      	lsls	r3, r3, #21
 8003108:	4013      	ands	r3, r2
 800310a:	d10a      	bne.n	8003122 <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310c:	4b8a      	ldr	r3, [pc, #552]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 800310e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003110:	4b89      	ldr	r3, [pc, #548]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	0549      	lsls	r1, r1, #21
 8003116:	430a      	orrs	r2, r1
 8003118:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800311a:	2327      	movs	r3, #39	; 0x27
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003122:	4b87      	ldr	r3, [pc, #540]	; (8003340 <HAL_RCC_OscConfig+0x66c>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4013      	ands	r3, r2
 800312c:	d11a      	bne.n	8003164 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800312e:	4b84      	ldr	r3, [pc, #528]	; (8003340 <HAL_RCC_OscConfig+0x66c>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	4b83      	ldr	r3, [pc, #524]	; (8003340 <HAL_RCC_OscConfig+0x66c>)
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	0049      	lsls	r1, r1, #1
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313c:	f7fe fd94 	bl	8001c68 <HAL_GetTick>
 8003140:	0003      	movs	r3, r0
 8003142:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003146:	f7fe fd8f 	bl	8001c68 <HAL_GetTick>
 800314a:	0002      	movs	r2, r0
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b64      	cmp	r3, #100	; 0x64
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e172      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003158:	4b79      	ldr	r3, [pc, #484]	; (8003340 <HAL_RCC_OscConfig+0x66c>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4013      	ands	r3, r2
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	429a      	cmp	r2, r3
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x4ac>
 8003170:	4b71      	ldr	r3, [pc, #452]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 8003172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003174:	4b70      	ldr	r3, [pc, #448]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 8003176:	2180      	movs	r1, #128	; 0x80
 8003178:	0049      	lsls	r1, r1, #1
 800317a:	430a      	orrs	r2, r1
 800317c:	651a      	str	r2, [r3, #80]	; 0x50
 800317e:	e031      	b.n	80031e4 <HAL_RCC_OscConfig+0x510>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10c      	bne.n	80031a2 <HAL_RCC_OscConfig+0x4ce>
 8003188:	4b6b      	ldr	r3, [pc, #428]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 800318a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800318c:	4b6a      	ldr	r3, [pc, #424]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 800318e:	496b      	ldr	r1, [pc, #428]	; (800333c <HAL_RCC_OscConfig+0x668>)
 8003190:	400a      	ands	r2, r1
 8003192:	651a      	str	r2, [r3, #80]	; 0x50
 8003194:	4b68      	ldr	r3, [pc, #416]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 8003196:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003198:	4b67      	ldr	r3, [pc, #412]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 800319a:	496a      	ldr	r1, [pc, #424]	; (8003344 <HAL_RCC_OscConfig+0x670>)
 800319c:	400a      	ands	r2, r1
 800319e:	651a      	str	r2, [r3, #80]	; 0x50
 80031a0:	e020      	b.n	80031e4 <HAL_RCC_OscConfig+0x510>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	23a0      	movs	r3, #160	; 0xa0
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d10e      	bne.n	80031cc <HAL_RCC_OscConfig+0x4f8>
 80031ae:	4b62      	ldr	r3, [pc, #392]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80031b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031b2:	4b61      	ldr	r3, [pc, #388]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	00c9      	lsls	r1, r1, #3
 80031b8:	430a      	orrs	r2, r1
 80031ba:	651a      	str	r2, [r3, #80]	; 0x50
 80031bc:	4b5e      	ldr	r3, [pc, #376]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80031be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031c0:	4b5d      	ldr	r3, [pc, #372]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80031c2:	2180      	movs	r1, #128	; 0x80
 80031c4:	0049      	lsls	r1, r1, #1
 80031c6:	430a      	orrs	r2, r1
 80031c8:	651a      	str	r2, [r3, #80]	; 0x50
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0x510>
 80031cc:	4b5a      	ldr	r3, [pc, #360]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80031ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031d0:	4b59      	ldr	r3, [pc, #356]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80031d2:	495a      	ldr	r1, [pc, #360]	; (800333c <HAL_RCC_OscConfig+0x668>)
 80031d4:	400a      	ands	r2, r1
 80031d6:	651a      	str	r2, [r3, #80]	; 0x50
 80031d8:	4b57      	ldr	r3, [pc, #348]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80031da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031dc:	4b56      	ldr	r3, [pc, #344]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80031de:	4959      	ldr	r1, [pc, #356]	; (8003344 <HAL_RCC_OscConfig+0x670>)
 80031e0:	400a      	ands	r2, r1
 80031e2:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ec:	f7fe fd3c 	bl	8001c68 <HAL_GetTick>
 80031f0:	0003      	movs	r3, r0
 80031f2:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031f4:	e009      	b.n	800320a <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fe fd37 	bl	8001c68 <HAL_GetTick>
 80031fa:	0002      	movs	r2, r0
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	4a51      	ldr	r2, [pc, #324]	; (8003348 <HAL_RCC_OscConfig+0x674>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e119      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800320a:	4b4b      	ldr	r3, [pc, #300]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 800320c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4013      	ands	r3, r2
 8003214:	d0ef      	beq.n	80031f6 <HAL_RCC_OscConfig+0x522>
 8003216:	e014      	b.n	8003242 <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003218:	f7fe fd26 	bl	8001c68 <HAL_GetTick>
 800321c:	0003      	movs	r3, r0
 800321e:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003220:	e009      	b.n	8003236 <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7fe fd21 	bl	8001c68 <HAL_GetTick>
 8003226:	0002      	movs	r2, r0
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	4a46      	ldr	r2, [pc, #280]	; (8003348 <HAL_RCC_OscConfig+0x674>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e103      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003236:	4b40      	ldr	r3, [pc, #256]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 8003238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4013      	ands	r3, r2
 8003240:	d1ef      	bne.n	8003222 <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003242:	2327      	movs	r3, #39	; 0x27
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d105      	bne.n	8003258 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324c:	4b3a      	ldr	r3, [pc, #232]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 800324e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003250:	4b39      	ldr	r3, [pc, #228]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 8003252:	493e      	ldr	r1, [pc, #248]	; (800334c <HAL_RCC_OscConfig+0x678>)
 8003254:	400a      	ands	r2, r1
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2220      	movs	r2, #32
 800325e:	4013      	ands	r3, r2
 8003260:	d049      	beq.n	80032f6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d026      	beq.n	80032b8 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800326a:	4b33      	ldr	r3, [pc, #204]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	4b32      	ldr	r3, [pc, #200]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 8003270:	2101      	movs	r1, #1
 8003272:	430a      	orrs	r2, r1
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	4b30      	ldr	r3, [pc, #192]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 8003278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327a:	4b2f      	ldr	r3, [pc, #188]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 800327c:	2101      	movs	r1, #1
 800327e:	430a      	orrs	r2, r1
 8003280:	635a      	str	r2, [r3, #52]	; 0x34
 8003282:	4b33      	ldr	r3, [pc, #204]	; (8003350 <HAL_RCC_OscConfig+0x67c>)
 8003284:	6a1a      	ldr	r2, [r3, #32]
 8003286:	4b32      	ldr	r3, [pc, #200]	; (8003350 <HAL_RCC_OscConfig+0x67c>)
 8003288:	2180      	movs	r1, #128	; 0x80
 800328a:	0189      	lsls	r1, r1, #6
 800328c:	430a      	orrs	r2, r1
 800328e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fe fcea 	bl	8001c68 <HAL_GetTick>
 8003294:	0003      	movs	r3, r0
 8003296:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800329a:	f7fe fce5 	bl	8001c68 <HAL_GetTick>
 800329e:	0002      	movs	r2, r0
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e0c8      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032ac:	4b22      	ldr	r3, [pc, #136]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2202      	movs	r2, #2
 80032b2:	4013      	ands	r3, r2
 80032b4:	d0f1      	beq.n	800329a <HAL_RCC_OscConfig+0x5c6>
 80032b6:	e01e      	b.n	80032f6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80032b8:	4b1f      	ldr	r3, [pc, #124]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80032be:	2101      	movs	r1, #1
 80032c0:	438a      	bics	r2, r1
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	4b22      	ldr	r3, [pc, #136]	; (8003350 <HAL_RCC_OscConfig+0x67c>)
 80032c6:	6a1a      	ldr	r2, [r3, #32]
 80032c8:	4b21      	ldr	r3, [pc, #132]	; (8003350 <HAL_RCC_OscConfig+0x67c>)
 80032ca:	4922      	ldr	r1, [pc, #136]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80032cc:	400a      	ands	r2, r1
 80032ce:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe fcca 	bl	8001c68 <HAL_GetTick>
 80032d4:	0003      	movs	r3, r0
 80032d6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032da:	f7fe fcc5 	bl	8001c68 <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e0a8      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2202      	movs	r2, #2
 80032f2:	4013      	ands	r3, r2
 80032f4:	d1f1      	bne.n	80032da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d100      	bne.n	8003300 <HAL_RCC_OscConfig+0x62c>
 80032fe:	e09d      	b.n	800343c <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d100      	bne.n	8003308 <HAL_RCC_OscConfig+0x634>
 8003306:	e076      	b.n	80033f6 <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	2b02      	cmp	r3, #2
 800330e:	d157      	bne.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003310:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_RCC_OscConfig+0x664>)
 8003316:	4910      	ldr	r1, [pc, #64]	; (8003358 <HAL_RCC_OscConfig+0x684>)
 8003318:	400a      	ands	r2, r1
 800331a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fe fca4 	bl	8001c68 <HAL_GetTick>
 8003320:	0003      	movs	r3, r0
 8003322:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003324:	e01a      	b.n	800335c <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003326:	f7fe fc9f 	bl	8001c68 <HAL_GetTick>
 800332a:	0002      	movs	r2, r0
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d913      	bls.n	800335c <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e082      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
 8003338:	40021000 	.word	0x40021000
 800333c:	fffffeff 	.word	0xfffffeff
 8003340:	40007000 	.word	0x40007000
 8003344:	fffffbff 	.word	0xfffffbff
 8003348:	00001388 	.word	0x00001388
 800334c:	efffffff 	.word	0xefffffff
 8003350:	40010000 	.word	0x40010000
 8003354:	ffffdfff 	.word	0xffffdfff
 8003358:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800335c:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <HAL_RCC_OscConfig+0x774>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	049b      	lsls	r3, r3, #18
 8003364:	4013      	ands	r3, r2
 8003366:	d1de      	bne.n	8003326 <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003368:	4b37      	ldr	r3, [pc, #220]	; (8003448 <HAL_RCC_OscConfig+0x774>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a37      	ldr	r2, [pc, #220]	; (800344c <HAL_RCC_OscConfig+0x778>)
 800336e:	4013      	ands	r3, r2
 8003370:	0019      	movs	r1, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003380:	431a      	orrs	r2, r3
 8003382:	4b31      	ldr	r3, [pc, #196]	; (8003448 <HAL_RCC_OscConfig+0x774>)
 8003384:	430a      	orrs	r2, r1
 8003386:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003388:	4b2f      	ldr	r3, [pc, #188]	; (8003448 <HAL_RCC_OscConfig+0x774>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b2e      	ldr	r3, [pc, #184]	; (8003448 <HAL_RCC_OscConfig+0x774>)
 800338e:	2180      	movs	r1, #128	; 0x80
 8003390:	0449      	lsls	r1, r1, #17
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003396:	f7fe fc67 	bl	8001c68 <HAL_GetTick>
 800339a:	0003      	movs	r3, r0
 800339c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fe fc62 	bl	8001c68 <HAL_GetTick>
 80033a4:	0002      	movs	r2, r0
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e045      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80033b2:	4b25      	ldr	r3, [pc, #148]	; (8003448 <HAL_RCC_OscConfig+0x774>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	049b      	lsls	r3, r3, #18
 80033ba:	4013      	ands	r3, r2
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x6cc>
 80033be:	e03d      	b.n	800343c <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_RCC_OscConfig+0x774>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_RCC_OscConfig+0x774>)
 80033c6:	4922      	ldr	r1, [pc, #136]	; (8003450 <HAL_RCC_OscConfig+0x77c>)
 80033c8:	400a      	ands	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fe fc4c 	bl	8001c68 <HAL_GetTick>
 80033d0:	0003      	movs	r3, r0
 80033d2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fe fc47 	bl	8001c68 <HAL_GetTick>
 80033da:	0002      	movs	r2, r0
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e02a      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80033e8:	4b17      	ldr	r3, [pc, #92]	; (8003448 <HAL_RCC_OscConfig+0x774>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	049b      	lsls	r3, r3, #18
 80033f0:	4013      	ands	r3, r2
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x702>
 80033f4:	e022      	b.n	800343c <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e01d      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_RCC_OscConfig+0x774>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	2380      	movs	r3, #128	; 0x80
 800340c:	025b      	lsls	r3, r3, #9
 800340e:	401a      	ands	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	429a      	cmp	r2, r3
 8003416:	d10f      	bne.n	8003438 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	23f0      	movs	r3, #240	; 0xf0
 800341c:	039b      	lsls	r3, r3, #14
 800341e:	401a      	ands	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d107      	bne.n	8003438 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	23c0      	movs	r3, #192	; 0xc0
 800342c:	041b      	lsls	r3, r3, #16
 800342e:	401a      	ands	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	0018      	movs	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	b00a      	add	sp, #40	; 0x28
 8003444:	bdb0      	pop	{r4, r5, r7, pc}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	40021000 	.word	0x40021000
 800344c:	ff02ffff 	.word	0xff02ffff
 8003450:	feffffff 	.word	0xfeffffff

08003454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b5b0      	push	{r4, r5, r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e10d      	b.n	8003684 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003468:	4b88      	ldr	r3, [pc, #544]	; (800368c <HAL_RCC_ClockConfig+0x238>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2201      	movs	r2, #1
 800346e:	4013      	ands	r3, r2
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d911      	bls.n	800349a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b85      	ldr	r3, [pc, #532]	; (800368c <HAL_RCC_ClockConfig+0x238>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2201      	movs	r2, #1
 800347c:	4393      	bics	r3, r2
 800347e:	0019      	movs	r1, r3
 8003480:	4b82      	ldr	r3, [pc, #520]	; (800368c <HAL_RCC_ClockConfig+0x238>)
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003488:	4b80      	ldr	r3, [pc, #512]	; (800368c <HAL_RCC_ClockConfig+0x238>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2201      	movs	r2, #1
 800348e:	4013      	ands	r3, r2
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d001      	beq.n	800349a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e0f4      	b.n	8003684 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2202      	movs	r2, #2
 80034a0:	4013      	ands	r3, r2
 80034a2:	d009      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a4:	4b7a      	ldr	r3, [pc, #488]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	22f0      	movs	r2, #240	; 0xf0
 80034aa:	4393      	bics	r3, r2
 80034ac:	0019      	movs	r1, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	4b77      	ldr	r3, [pc, #476]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 80034b4:	430a      	orrs	r2, r1
 80034b6:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2201      	movs	r2, #1
 80034be:	4013      	ands	r3, r2
 80034c0:	d100      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x70>
 80034c2:	e089      	b.n	80035d8 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d107      	bne.n	80034dc <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034cc:	4b70      	ldr	r3, [pc, #448]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	029b      	lsls	r3, r3, #10
 80034d4:	4013      	ands	r3, r2
 80034d6:	d120      	bne.n	800351a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0d3      	b.n	8003684 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d107      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034e4:	4b6a      	ldr	r3, [pc, #424]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	049b      	lsls	r3, r3, #18
 80034ec:	4013      	ands	r3, r2
 80034ee:	d114      	bne.n	800351a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0c7      	b.n	8003684 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d106      	bne.n	800350a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034fc:	4b64      	ldr	r3, [pc, #400]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2204      	movs	r2, #4
 8003502:	4013      	ands	r3, r2
 8003504:	d109      	bne.n	800351a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0bc      	b.n	8003684 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800350a:	4b61      	ldr	r3, [pc, #388]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4013      	ands	r3, r2
 8003514:	d101      	bne.n	800351a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0b4      	b.n	8003684 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800351a:	4b5d      	ldr	r3, [pc, #372]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2203      	movs	r2, #3
 8003520:	4393      	bics	r3, r2
 8003522:	0019      	movs	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	4b59      	ldr	r3, [pc, #356]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 800352a:	430a      	orrs	r2, r1
 800352c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800352e:	f7fe fb9b 	bl	8001c68 <HAL_GetTick>
 8003532:	0003      	movs	r3, r0
 8003534:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d111      	bne.n	8003562 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800353e:	e009      	b.n	8003554 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f7fe fb92 	bl	8001c68 <HAL_GetTick>
 8003544:	0002      	movs	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	4a52      	ldr	r2, [pc, #328]	; (8003694 <HAL_RCC_ClockConfig+0x240>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e097      	b.n	8003684 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003554:	4b4e      	ldr	r3, [pc, #312]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	220c      	movs	r2, #12
 800355a:	4013      	ands	r3, r2
 800355c:	2b08      	cmp	r3, #8
 800355e:	d1ef      	bne.n	8003540 <HAL_RCC_ClockConfig+0xec>
 8003560:	e03a      	b.n	80035d8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b03      	cmp	r3, #3
 8003568:	d111      	bne.n	800358e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800356a:	e009      	b.n	8003580 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800356c:	f7fe fb7c 	bl	8001c68 <HAL_GetTick>
 8003570:	0002      	movs	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	4a47      	ldr	r2, [pc, #284]	; (8003694 <HAL_RCC_ClockConfig+0x240>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e081      	b.n	8003684 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003580:	4b43      	ldr	r3, [pc, #268]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	220c      	movs	r2, #12
 8003586:	4013      	ands	r3, r2
 8003588:	2b0c      	cmp	r3, #12
 800358a:	d1ef      	bne.n	800356c <HAL_RCC_ClockConfig+0x118>
 800358c:	e024      	b.n	80035d8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d11b      	bne.n	80035ce <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003596:	e009      	b.n	80035ac <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003598:	f7fe fb66 	bl	8001c68 <HAL_GetTick>
 800359c:	0002      	movs	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	4a3c      	ldr	r2, [pc, #240]	; (8003694 <HAL_RCC_ClockConfig+0x240>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e06b      	b.n	8003684 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ac:	4b38      	ldr	r3, [pc, #224]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	220c      	movs	r2, #12
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d1ef      	bne.n	8003598 <HAL_RCC_ClockConfig+0x144>
 80035b8:	e00e      	b.n	80035d8 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ba:	f7fe fb55 	bl	8001c68 <HAL_GetTick>
 80035be:	0002      	movs	r2, r0
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	4a33      	ldr	r2, [pc, #204]	; (8003694 <HAL_RCC_ClockConfig+0x240>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e05a      	b.n	8003684 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80035ce:	4b30      	ldr	r3, [pc, #192]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	220c      	movs	r2, #12
 80035d4:	4013      	ands	r3, r2
 80035d6:	d1f0      	bne.n	80035ba <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d8:	4b2c      	ldr	r3, [pc, #176]	; (800368c <HAL_RCC_ClockConfig+0x238>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2201      	movs	r2, #1
 80035de:	4013      	ands	r3, r2
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d211      	bcs.n	800360a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_RCC_ClockConfig+0x238>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2201      	movs	r2, #1
 80035ec:	4393      	bics	r3, r2
 80035ee:	0019      	movs	r1, r3
 80035f0:	4b26      	ldr	r3, [pc, #152]	; (800368c <HAL_RCC_ClockConfig+0x238>)
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f8:	4b24      	ldr	r3, [pc, #144]	; (800368c <HAL_RCC_ClockConfig+0x238>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2201      	movs	r2, #1
 80035fe:	4013      	ands	r3, r2
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d001      	beq.n	800360a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e03c      	b.n	8003684 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2204      	movs	r2, #4
 8003610:	4013      	ands	r3, r2
 8003612:	d009      	beq.n	8003628 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003614:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4a1f      	ldr	r2, [pc, #124]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 800361a:	4013      	ands	r3, r2
 800361c:	0019      	movs	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 8003624:	430a      	orrs	r2, r1
 8003626:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2208      	movs	r2, #8
 800362e:	4013      	ands	r3, r2
 8003630:	d00a      	beq.n	8003648 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003632:	4b17      	ldr	r3, [pc, #92]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	4a19      	ldr	r2, [pc, #100]	; (800369c <HAL_RCC_ClockConfig+0x248>)
 8003638:	4013      	ands	r3, r2
 800363a:	0019      	movs	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	00da      	lsls	r2, r3, #3
 8003642:	4b13      	ldr	r3, [pc, #76]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 8003644:	430a      	orrs	r2, r1
 8003646:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003648:	f000 f82e 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 800364c:	0001      	movs	r1, r0
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <HAL_RCC_ClockConfig+0x23c>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	220f      	movs	r2, #15
 8003656:	4013      	ands	r3, r2
 8003658:	4a11      	ldr	r2, [pc, #68]	; (80036a0 <HAL_RCC_ClockConfig+0x24c>)
 800365a:	5cd3      	ldrb	r3, [r2, r3]
 800365c:	000a      	movs	r2, r1
 800365e:	40da      	lsrs	r2, r3
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <HAL_RCC_ClockConfig+0x250>)
 8003662:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8003664:	250b      	movs	r5, #11
 8003666:	197c      	adds	r4, r7, r5
 8003668:	2000      	movs	r0, #0
 800366a:	f7fe fac7 	bl	8001bfc <HAL_InitTick>
 800366e:	0003      	movs	r3, r0
 8003670:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003672:	197b      	adds	r3, r7, r5
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800367a:	230b      	movs	r3, #11
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	e000      	b.n	8003684 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b004      	add	sp, #16
 800368a:	bdb0      	pop	{r4, r5, r7, pc}
 800368c:	40022000 	.word	0x40022000
 8003690:	40021000 	.word	0x40021000
 8003694:	00001388 	.word	0x00001388
 8003698:	fffff8ff 	.word	0xfffff8ff
 800369c:	ffffc7ff 	.word	0xffffc7ff
 80036a0:	080082f8 	.word	0x080082f8
 80036a4:	20000004 	.word	0x20000004

080036a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80036ae:	4b3b      	ldr	r3, [pc, #236]	; (800379c <HAL_RCC_GetSysClockFreq+0xf4>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	220c      	movs	r2, #12
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d00e      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x34>
 80036be:	2b0c      	cmp	r3, #12
 80036c0:	d00f      	beq.n	80036e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d157      	bne.n	8003776 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036c6:	4b35      	ldr	r3, [pc, #212]	; (800379c <HAL_RCC_GetSysClockFreq+0xf4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2210      	movs	r2, #16
 80036cc:	4013      	ands	r3, r2
 80036ce:	d002      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80036d0:	4b33      	ldr	r3, [pc, #204]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036d2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80036d4:	e05d      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80036d6:	4b33      	ldr	r3, [pc, #204]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80036d8:	613b      	str	r3, [r7, #16]
      break;
 80036da:	e05a      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036dc:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x100>)
 80036de:	613b      	str	r3, [r7, #16]
      break;
 80036e0:	e057      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	0c9b      	lsrs	r3, r3, #18
 80036e6:	220f      	movs	r2, #15
 80036e8:	4013      	ands	r3, r2
 80036ea:	4a30      	ldr	r2, [pc, #192]	; (80037ac <HAL_RCC_GetSysClockFreq+0x104>)
 80036ec:	5cd3      	ldrb	r3, [r2, r3]
 80036ee:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	0d9b      	lsrs	r3, r3, #22
 80036f4:	2203      	movs	r2, #3
 80036f6:	4013      	ands	r3, r2
 80036f8:	3301      	adds	r3, #1
 80036fa:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <HAL_RCC_GetSysClockFreq+0xf4>)
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	025b      	lsls	r3, r3, #9
 8003704:	4013      	ands	r3, r2
 8003706:	d00f      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	000a      	movs	r2, r1
 800370c:	0152      	lsls	r2, r2, #5
 800370e:	1a52      	subs	r2, r2, r1
 8003710:	0193      	lsls	r3, r2, #6
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	185b      	adds	r3, r3, r1
 8003718:	025b      	lsls	r3, r3, #9
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	0018      	movs	r0, r3
 800371e:	f7fc fcf3 	bl	8000108 <__udivsi3>
 8003722:	0003      	movs	r3, r0
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	e023      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003728:	4b1c      	ldr	r3, [pc, #112]	; (800379c <HAL_RCC_GetSysClockFreq+0xf4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2210      	movs	r2, #16
 800372e:	4013      	ands	r3, r2
 8003730:	d00f      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	000a      	movs	r2, r1
 8003736:	0152      	lsls	r2, r2, #5
 8003738:	1a52      	subs	r2, r2, r1
 800373a:	0193      	lsls	r3, r2, #6
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	185b      	adds	r3, r3, r1
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	0018      	movs	r0, r3
 8003748:	f7fc fcde 	bl	8000108 <__udivsi3>
 800374c:	0003      	movs	r3, r0
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e00e      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	000a      	movs	r2, r1
 8003756:	0152      	lsls	r2, r2, #5
 8003758:	1a52      	subs	r2, r2, r1
 800375a:	0193      	lsls	r3, r2, #6
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	185b      	adds	r3, r3, r1
 8003762:	029b      	lsls	r3, r3, #10
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	0018      	movs	r0, r3
 8003768:	f7fc fcce 	bl	8000108 <__udivsi3>
 800376c:	0003      	movs	r3, r0
 800376e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	613b      	str	r3, [r7, #16]
      break;
 8003774:	e00d      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003776:	4b09      	ldr	r3, [pc, #36]	; (800379c <HAL_RCC_GetSysClockFreq+0xf4>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	0b5b      	lsrs	r3, r3, #13
 800377c:	2207      	movs	r2, #7
 800377e:	4013      	ands	r3, r2
 8003780:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	2280      	movs	r2, #128	; 0x80
 8003788:	0212      	lsls	r2, r2, #8
 800378a:	409a      	lsls	r2, r3
 800378c:	0013      	movs	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
      break;
 8003790:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003792:	693b      	ldr	r3, [r7, #16]
}
 8003794:	0018      	movs	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	b006      	add	sp, #24
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000
 80037a0:	003d0900 	.word	0x003d0900
 80037a4:	00f42400 	.word	0x00f42400
 80037a8:	007a1200 	.word	0x007a1200
 80037ac:	08008310 	.word	0x08008310

080037b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b4:	4b02      	ldr	r3, [pc, #8]	; (80037c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80037b6:	681b      	ldr	r3, [r3, #0]
}
 80037b8:	0018      	movs	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	20000004 	.word	0x20000004

080037c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037c8:	f7ff fff2 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037cc:	0001      	movs	r1, r0
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	2207      	movs	r2, #7
 80037d6:	4013      	ands	r3, r2
 80037d8:	4a04      	ldr	r2, [pc, #16]	; (80037ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80037da:	5cd3      	ldrb	r3, [r2, r3]
 80037dc:	40d9      	lsrs	r1, r3
 80037de:	000b      	movs	r3, r1
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	40021000 	.word	0x40021000
 80037ec:	08008308 	.word	0x08008308

080037f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037f4:	f7ff ffdc 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037f8:	0001      	movs	r1, r0
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	0adb      	lsrs	r3, r3, #11
 8003800:	2207      	movs	r2, #7
 8003802:	4013      	ands	r3, r2
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003806:	5cd3      	ldrb	r3, [r2, r3]
 8003808:	40d9      	lsrs	r1, r3
 800380a:	000b      	movs	r3, r1
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	40021000 	.word	0x40021000
 8003818:	08008308 	.word	0x08008308

0800381c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2220      	movs	r2, #32
 800382a:	4013      	ands	r3, r2
 800382c:	d100      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x14>
 800382e:	e0c7      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8003830:	2317      	movs	r3, #23
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003838:	4b91      	ldr	r3, [pc, #580]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800383a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	055b      	lsls	r3, r3, #21
 8003840:	4013      	ands	r3, r2
 8003842:	d10a      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003844:	4b8e      	ldr	r3, [pc, #568]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003848:	4b8d      	ldr	r3, [pc, #564]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800384a:	2180      	movs	r1, #128	; 0x80
 800384c:	0549      	lsls	r1, r1, #21
 800384e:	430a      	orrs	r2, r1
 8003850:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003852:	2317      	movs	r3, #23
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385a:	4b8a      	ldr	r3, [pc, #552]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	2380      	movs	r3, #128	; 0x80
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4013      	ands	r3, r2
 8003864:	d11a      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003866:	4b87      	ldr	r3, [pc, #540]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	4b86      	ldr	r3, [pc, #536]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800386c:	2180      	movs	r1, #128	; 0x80
 800386e:	0049      	lsls	r1, r1, #1
 8003870:	430a      	orrs	r2, r1
 8003872:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003874:	f7fe f9f8 	bl	8001c68 <HAL_GetTick>
 8003878:	0003      	movs	r3, r0
 800387a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387c:	e008      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800387e:	f7fe f9f3 	bl	8001c68 <HAL_GetTick>
 8003882:	0002      	movs	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b64      	cmp	r3, #100	; 0x64
 800388a:	d901      	bls.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e0f2      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003890:	4b7c      	ldr	r3, [pc, #496]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	4013      	ands	r3, r2
 800389a:	d0f0      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800389c:	4b78      	ldr	r3, [pc, #480]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	23c0      	movs	r3, #192	; 0xc0
 80038a2:	039b      	lsls	r3, r3, #14
 80038a4:	4013      	ands	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	23c0      	movs	r3, #192	; 0xc0
 80038ae:	039b      	lsls	r3, r3, #14
 80038b0:	4013      	ands	r3, r2
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d013      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	23c0      	movs	r3, #192	; 0xc0
 80038be:	029b      	lsls	r3, r3, #10
 80038c0:	401a      	ands	r2, r3
 80038c2:	23c0      	movs	r3, #192	; 0xc0
 80038c4:	029b      	lsls	r3, r3, #10
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d10a      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80038ca:	4b6d      	ldr	r3, [pc, #436]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	029b      	lsls	r3, r3, #10
 80038d2:	401a      	ands	r2, r3
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	029b      	lsls	r3, r3, #10
 80038d8:	429a      	cmp	r2, r3
 80038da:	d101      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0ca      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80038e0:	4b67      	ldr	r3, [pc, #412]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038e4:	23c0      	movs	r3, #192	; 0xc0
 80038e6:	029b      	lsls	r3, r3, #10
 80038e8:	4013      	ands	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d03b      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	23c0      	movs	r3, #192	; 0xc0
 80038f8:	029b      	lsls	r3, r3, #10
 80038fa:	4013      	ands	r3, r2
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d033      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2220      	movs	r2, #32
 8003908:	4013      	ands	r3, r2
 800390a:	d02e      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800390c:	4b5c      	ldr	r3, [pc, #368]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800390e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003910:	4a5d      	ldr	r2, [pc, #372]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003912:	4013      	ands	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003916:	4b5a      	ldr	r3, [pc, #360]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003918:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800391a:	4b59      	ldr	r3, [pc, #356]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800391c:	2180      	movs	r1, #128	; 0x80
 800391e:	0309      	lsls	r1, r1, #12
 8003920:	430a      	orrs	r2, r1
 8003922:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003924:	4b56      	ldr	r3, [pc, #344]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003926:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003928:	4b55      	ldr	r3, [pc, #340]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800392a:	4958      	ldr	r1, [pc, #352]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800392c:	400a      	ands	r2, r1
 800392e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003930:	4b53      	ldr	r3, [pc, #332]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4013      	ands	r3, r2
 800393e:	d014      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fe f992 	bl	8001c68 <HAL_GetTick>
 8003944:	0003      	movs	r3, r0
 8003946:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003948:	e009      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fe f98d 	bl	8001c68 <HAL_GetTick>
 800394e:	0002      	movs	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	4a4e      	ldr	r2, [pc, #312]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e08b      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800395e:	4b48      	ldr	r3, [pc, #288]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003960:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003962:	2380      	movs	r3, #128	; 0x80
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4013      	ands	r3, r2
 8003968:	d0ef      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	23c0      	movs	r3, #192	; 0xc0
 8003970:	029b      	lsls	r3, r3, #10
 8003972:	401a      	ands	r2, r3
 8003974:	23c0      	movs	r3, #192	; 0xc0
 8003976:	029b      	lsls	r3, r3, #10
 8003978:	429a      	cmp	r2, r3
 800397a:	d10c      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800397c:	4b40      	ldr	r3, [pc, #256]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a44      	ldr	r2, [pc, #272]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003982:	4013      	ands	r3, r2
 8003984:	0019      	movs	r1, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	23c0      	movs	r3, #192	; 0xc0
 800398c:	039b      	lsls	r3, r3, #14
 800398e:	401a      	ands	r2, r3
 8003990:	4b3b      	ldr	r3, [pc, #236]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003992:	430a      	orrs	r2, r1
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	4b3a      	ldr	r3, [pc, #232]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003998:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	23c0      	movs	r3, #192	; 0xc0
 80039a0:	029b      	lsls	r3, r3, #10
 80039a2:	401a      	ands	r2, r3
 80039a4:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039a6:	430a      	orrs	r2, r1
 80039a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039aa:	2317      	movs	r3, #23
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d105      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b4:	4b32      	ldr	r3, [pc, #200]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b8:	4b31      	ldr	r3, [pc, #196]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039ba:	4937      	ldr	r1, [pc, #220]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80039bc:	400a      	ands	r2, r1
 80039be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2201      	movs	r2, #1
 80039c6:	4013      	ands	r3, r2
 80039c8:	d009      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039ca:	4b2d      	ldr	r3, [pc, #180]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ce:	2203      	movs	r2, #3
 80039d0:	4393      	bics	r3, r2
 80039d2:	0019      	movs	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039da:	430a      	orrs	r2, r1
 80039dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2202      	movs	r2, #2
 80039e4:	4013      	ands	r3, r2
 80039e6:	d009      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039e8:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ec:	220c      	movs	r2, #12
 80039ee:	4393      	bics	r3, r2
 80039f0:	0019      	movs	r1, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039f8:	430a      	orrs	r2, r1
 80039fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2204      	movs	r2, #4
 8003a02:	4013      	ands	r3, r2
 8003a04:	d009      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a06:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0a:	4a24      	ldr	r2, [pc, #144]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a16:	430a      	orrs	r2, r1
 8003a18:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2208      	movs	r2, #8
 8003a20:	4013      	ands	r3, r2
 8003a22:	d009      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a24:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a28:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a34:	430a      	orrs	r2, r1
 8003a36:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2240      	movs	r2, #64	; 0x40
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d009      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a42:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a46:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a52:	430a      	orrs	r2, r1
 8003a54:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2280      	movs	r2, #128	; 0x80
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d009      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003a60:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a64:	4a10      	ldr	r2, [pc, #64]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	0019      	movs	r1, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a70:	430a      	orrs	r2, r1
 8003a72:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	0018      	movs	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b006      	add	sp, #24
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40007000 	.word	0x40007000
 8003a88:	fffcffff 	.word	0xfffcffff
 8003a8c:	fff7ffff 	.word	0xfff7ffff
 8003a90:	00001388 	.word	0x00001388
 8003a94:	ffcfffff 	.word	0xffcfffff
 8003a98:	efffffff 	.word	0xefffffff
 8003a9c:	fffff3ff 	.word	0xfffff3ff
 8003aa0:	ffffcfff 	.word	0xffffcfff
 8003aa4:	fbffffff 	.word	0xfbffffff
 8003aa8:	fff3ffff 	.word	0xfff3ffff

08003aac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e01d      	b.n	8003afa <HAL_RNG_Init+0x4e>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	795b      	ldrb	r3, [r3, #5]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d106      	bne.n	8003ad6 <HAL_RNG_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f004 f8e1 	bl	8007c98 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2104      	movs	r1, #4
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	0018      	movs	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b002      	add	sp, #8
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;    
  HAL_StatusTypeDef status = HAL_OK;
 8003b0c:	230f      	movs	r3, #15
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	791b      	ldrb	r3, [r3, #4]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_RNG_GenerateRandomNumber+0x1e>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e042      	b.n	8003ba6 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	795b      	ldrb	r3, [r3, #5]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d130      	bne.n	8003b92 <HAL_RNG_GenerateRandomNumber+0x90>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b36:	f7fe f897 	bl	8001c68 <HAL_GetTick>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	60bb      	str	r3, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003b3e:	e014      	b.n	8003b6a <HAL_RNG_GenerateRandomNumber+0x68>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003b40:	f7fe f892 	bl	8001c68 <HAL_GetTick>
 8003b44:	0002      	movs	r2, r0
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d90d      	bls.n	8003b6a <HAL_RNG_GenerateRandomNumber+0x68>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e01d      	b.n	8003ba6 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d1e3      	bne.n	8003b40 <HAL_RNG_GenerateRandomNumber+0x3e>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	715a      	strb	r2, [r3, #5]
 8003b90:	e003      	b.n	8003b9a <HAL_RNG_GenerateRandomNumber+0x98>
  }
  else
  {
    status = HAL_ERROR;
 8003b92:	230f      	movs	r3, #15
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	2201      	movs	r2, #1
 8003b98:	701a      	strb	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	711a      	strb	r2, [r3, #4]

  return status;
 8003ba0:	230f      	movs	r3, #15
 8003ba2:	18fb      	adds	r3, r7, r3
 8003ba4:	781b      	ldrb	r3, [r3, #0]
}
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b004      	add	sp, #16
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	330c      	adds	r3, #12
 8003bba:	001a      	movs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	0011      	movs	r1, r2
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f7ff ff9e 	bl	8003b02 <HAL_RNG_GenerateRandomNumber>
 8003bc6:	1e03      	subs	r3, r0, #0
 8003bc8:	d102      	bne.n	8003bd0 <HAL_RNG_GetRandomNumber+0x22>
  {
    return hrng->RandomNumber; 
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	e000      	b.n	8003bd2 <HAL_RNG_GetRandomNumber+0x24>
  }
  else
  {
    return 0U;
 8003bd0:	2300      	movs	r3, #0
  }
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b002      	add	sp, #8
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e059      	b.n	8003ca2 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2251      	movs	r2, #81	; 0x51
 8003bf8:	5c9b      	ldrb	r3, [r3, r2]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d107      	bne.n	8003c10 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2250      	movs	r2, #80	; 0x50
 8003c04:	2100      	movs	r1, #0
 8003c06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f004 f89c 	bl	8007d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2251      	movs	r2, #81	; 0x51
 8003c14:	2102      	movs	r1, #2
 8003c16:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2140      	movs	r1, #64	; 0x40
 8003c24:	438a      	bics	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6999      	ldr	r1, [r3, #24]
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	400b      	ands	r3, r1
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	0011      	movs	r1, r2
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	0c1b      	lsrs	r3, r3, #16
 8003c70:	2204      	movs	r2, #4
 8003c72:	4013      	ands	r3, r2
 8003c74:	0019      	movs	r1, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4907      	ldr	r1, [pc, #28]	; (8003cac <HAL_SPI_Init+0xd0>)
 8003c8e:	400a      	ands	r2, r1
 8003c90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2251      	movs	r2, #81	; 0x51
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b002      	add	sp, #8
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	fffff7ff 	.word	0xfffff7ff

08003cb0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	1dbb      	adds	r3, r7, #6
 8003cbe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cc0:	231f      	movs	r3, #31
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2250      	movs	r2, #80	; 0x50
 8003ccc:	5c9b      	ldrb	r3, [r3, r2]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_SPI_Transmit+0x26>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e136      	b.n	8003f44 <HAL_SPI_Transmit+0x294>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2250      	movs	r2, #80	; 0x50
 8003cda:	2101      	movs	r1, #1
 8003cdc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cde:	f7fd ffc3 	bl	8001c68 <HAL_GetTick>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003ce6:	2316      	movs	r3, #22
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	1dba      	adds	r2, r7, #6
 8003cec:	8812      	ldrh	r2, [r2, #0]
 8003cee:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2251      	movs	r2, #81	; 0x51
 8003cf4:	5c9b      	ldrb	r3, [r3, r2]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d004      	beq.n	8003d06 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003cfc:	231f      	movs	r3, #31
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	2202      	movs	r2, #2
 8003d02:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d04:	e113      	b.n	8003f2e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_SPI_Transmit+0x64>
 8003d0c:	1dbb      	adds	r3, r7, #6
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d104      	bne.n	8003d1e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003d14:	231f      	movs	r3, #31
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d1c:	e107      	b.n	8003f2e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2251      	movs	r2, #81	; 0x51
 8003d22:	2103      	movs	r1, #3
 8003d24:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1dba      	adds	r2, r7, #6
 8003d36:	8812      	ldrh	r2, [r2, #0]
 8003d38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1dba      	adds	r2, r7, #6
 8003d3e:	8812      	ldrh	r2, [r2, #0]
 8003d40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d108      	bne.n	8003d7e <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2180      	movs	r1, #128	; 0x80
 8003d78:	01c9      	lsls	r1, r1, #7
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2240      	movs	r2, #64	; 0x40
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d007      	beq.n	8003d9c <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2140      	movs	r1, #64	; 0x40
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d14e      	bne.n	8003e46 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <HAL_SPI_Transmit+0x10a>
 8003db0:	2316      	movs	r3, #22
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d13f      	bne.n	8003e3a <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	1c9a      	adds	r2, r3, #2
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dde:	e02c      	b.n	8003e3a <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2202      	movs	r2, #2
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d112      	bne.n	8003e14 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	881a      	ldrh	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	1c9a      	adds	r2, r3, #2
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e12:	e012      	b.n	8003e3a <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e14:	f7fd ff28 	bl	8001c68 <HAL_GetTick>
 8003e18:	0002      	movs	r2, r0
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d802      	bhi.n	8003e2a <HAL_SPI_Transmit+0x17a>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	3301      	adds	r3, #1
 8003e28:	d102      	bne.n	8003e30 <HAL_SPI_Transmit+0x180>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8003e30:	231f      	movs	r3, #31
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	2203      	movs	r2, #3
 8003e36:	701a      	strb	r2, [r3, #0]
          goto error;
 8003e38:	e079      	b.n	8003f2e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1cd      	bne.n	8003de0 <HAL_SPI_Transmit+0x130>
 8003e44:	e04f      	b.n	8003ee6 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <HAL_SPI_Transmit+0x1a8>
 8003e4e:	2316      	movs	r3, #22
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d141      	bne.n	8003edc <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	7812      	ldrb	r2, [r2, #0]
 8003e64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e7e:	e02d      	b.n	8003edc <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2202      	movs	r2, #2
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d113      	bne.n	8003eb6 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	330c      	adds	r3, #12
 8003e98:	7812      	ldrb	r2, [r2, #0]
 8003e9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003eb4:	e012      	b.n	8003edc <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eb6:	f7fd fed7 	bl	8001c68 <HAL_GetTick>
 8003eba:	0002      	movs	r2, r0
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d802      	bhi.n	8003ecc <HAL_SPI_Transmit+0x21c>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	d102      	bne.n	8003ed2 <HAL_SPI_Transmit+0x222>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d104      	bne.n	8003edc <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8003ed2:	231f      	movs	r3, #31
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	701a      	strb	r2, [r3, #0]
          goto error;
 8003eda:	e028      	b.n	8003f2e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1cc      	bne.n	8003e80 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	6839      	ldr	r1, [r7, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	0018      	movs	r0, r3
 8003eee:	f000 f8a9 	bl	8004044 <SPI_EndRxTxTransaction>
 8003ef2:	1e03      	subs	r3, r0, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d004      	beq.n	8003f2c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8003f22:	231f      	movs	r3, #31
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	2201      	movs	r2, #1
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e000      	b.n	8003f2e <HAL_SPI_Transmit+0x27e>
  }

error:
 8003f2c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2251      	movs	r2, #81	; 0x51
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2250      	movs	r2, #80	; 0x50
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003f3e:	231f      	movs	r3, #31
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	781b      	ldrb	r3, [r3, #0]
}
 8003f44:	0018      	movs	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b008      	add	sp, #32
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2251      	movs	r2, #81	; 0x51
 8003f58:	5c9b      	ldrb	r3, [r3, r2]
 8003f5a:	b2db      	uxtb	r3, r3
}
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b002      	add	sp, #8
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	1dfb      	adds	r3, r7, #7
 8003f72:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f74:	e050      	b.n	8004018 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	d04d      	beq.n	8004018 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f7c:	f7fd fe74 	bl	8001c68 <HAL_GetTick>
 8003f80:	0002      	movs	r2, r0
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d902      	bls.n	8003f92 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d142      	bne.n	8004018 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	21e0      	movs	r1, #224	; 0xe0
 8003f9e:	438a      	bics	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	2382      	movs	r3, #130	; 0x82
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d113      	bne.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0x72>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d005      	beq.n	8003fc6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d107      	bne.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2140      	movs	r1, #64	; 0x40
 8003fd2:	438a      	bics	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fda:	2380      	movs	r3, #128	; 0x80
 8003fdc:	019b      	lsls	r3, r3, #6
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d110      	bne.n	8004004 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4914      	ldr	r1, [pc, #80]	; (8004040 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8003fee:	400a      	ands	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2180      	movs	r1, #128	; 0x80
 8003ffe:	0189      	lsls	r1, r1, #6
 8004000:	430a      	orrs	r2, r1
 8004002:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2251      	movs	r2, #81	; 0x51
 8004008:	2101      	movs	r1, #1
 800400a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2250      	movs	r2, #80	; 0x50
 8004010:	2100      	movs	r1, #0
 8004012:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e00f      	b.n	8004038 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	4013      	ands	r3, r2
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	425a      	negs	r2, r3
 8004028:	4153      	adcs	r3, r2
 800402a:	b2db      	uxtb	r3, r3
 800402c:	001a      	movs	r2, r3
 800402e:	1dfb      	adds	r3, r7, #7
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d19f      	bne.n	8003f76 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	0018      	movs	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	b004      	add	sp, #16
 800403e:	bd80      	pop	{r7, pc}
 8004040:	ffffdfff 	.word	0xffffdfff

08004044 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	2382      	movs	r3, #130	; 0x82
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	429a      	cmp	r2, r3
 800405a:	d112      	bne.n	8004082 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	0013      	movs	r3, r2
 8004066:	2200      	movs	r2, #0
 8004068:	2180      	movs	r1, #128	; 0x80
 800406a:	f7ff ff7b 	bl	8003f64 <SPI_WaitFlagStateUntilTimeout>
 800406e:	1e03      	subs	r3, r0, #0
 8004070:	d020      	beq.n	80040b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	2220      	movs	r2, #32
 8004078:	431a      	orrs	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e019      	b.n	80040b6 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2251      	movs	r2, #81	; 0x51
 8004086:	5c9b      	ldrb	r3, [r3, r2]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b05      	cmp	r3, #5
 800408c:	d112      	bne.n	80040b4 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	0013      	movs	r3, r2
 8004098:	2200      	movs	r2, #0
 800409a:	2101      	movs	r1, #1
 800409c:	f7ff ff62 	bl	8003f64 <SPI_WaitFlagStateUntilTimeout>
 80040a0:	1e03      	subs	r3, r0, #0
 80040a2:	d007      	beq.n	80040b4 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a8:	2220      	movs	r2, #32
 80040aa:	431a      	orrs	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e000      	b.n	80040b6 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	0018      	movs	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b004      	add	sp, #16
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e044      	b.n	800415c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d107      	bne.n	80040ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2270      	movs	r2, #112	; 0x70
 80040de:	2100      	movs	r1, #0
 80040e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f003 ff5d 	bl	8007fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2224      	movs	r2, #36	; 0x24
 80040ee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2101      	movs	r1, #1
 80040fc:	438a      	bics	r2, r1
 80040fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	0018      	movs	r0, r3
 8004104:	f000 fac6 	bl	8004694 <UART_SetConfig>
 8004108:	0003      	movs	r3, r0
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e024      	b.n	800415c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	0018      	movs	r0, r3
 800411e:	f000 fdd1 	bl	8004cc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	490d      	ldr	r1, [pc, #52]	; (8004164 <HAL_UART_Init+0xa4>)
 800412e:	400a      	ands	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	212a      	movs	r1, #42	; 0x2a
 800413e:	438a      	bics	r2, r1
 8004140:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2101      	movs	r1, #1
 800414e:	430a      	orrs	r2, r1
 8004150:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	0018      	movs	r0, r3
 8004156:	f000 fe69 	bl	8004e2c <UART_CheckIdleState>
 800415a:	0003      	movs	r3, r0
}
 800415c:	0018      	movs	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	b002      	add	sp, #8
 8004162:	bd80      	pop	{r7, pc}
 8004164:	ffffb7ff 	.word	0xffffb7ff

08004168 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	; 0x28
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	1dbb      	adds	r3, r7, #6
 8004176:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417c:	2b20      	cmp	r3, #32
 800417e:	d000      	beq.n	8004182 <HAL_UART_Transmit+0x1a>
 8004180:	e094      	b.n	80042ac <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_UART_Transmit+0x28>
 8004188:	1dbb      	adds	r3, r7, #6
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e08c      	b.n	80042ae <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	015b      	lsls	r3, r3, #5
 800419c:	429a      	cmp	r2, r3
 800419e:	d109      	bne.n	80041b4 <HAL_UART_Transmit+0x4c>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d105      	bne.n	80041b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2201      	movs	r2, #1
 80041ac:	4013      	ands	r3, r2
 80041ae:	d001      	beq.n	80041b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e07c      	b.n	80042ae <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2270      	movs	r2, #112	; 0x70
 80041b8:	5c9b      	ldrb	r3, [r3, r2]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_UART_Transmit+0x5a>
 80041be:	2302      	movs	r3, #2
 80041c0:	e075      	b.n	80042ae <HAL_UART_Transmit+0x146>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2270      	movs	r2, #112	; 0x70
 80041c6:	2101      	movs	r1, #1
 80041c8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2221      	movs	r2, #33	; 0x21
 80041d4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80041d6:	f7fd fd47 	bl	8001c68 <HAL_GetTick>
 80041da:	0003      	movs	r3, r0
 80041dc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1dba      	adds	r2, r7, #6
 80041e2:	2150      	movs	r1, #80	; 0x50
 80041e4:	8812      	ldrh	r2, [r2, #0]
 80041e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1dba      	adds	r2, r7, #6
 80041ec:	2152      	movs	r1, #82	; 0x52
 80041ee:	8812      	ldrh	r2, [r2, #0]
 80041f0:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	015b      	lsls	r3, r3, #5
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d108      	bne.n	8004210 <HAL_UART_Transmit+0xa8>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d104      	bne.n	8004210 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	e003      	b.n	8004218 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004214:	2300      	movs	r3, #0
 8004216:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004218:	e02c      	b.n	8004274 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	0013      	movs	r3, r2
 8004224:	2200      	movs	r2, #0
 8004226:	2180      	movs	r1, #128	; 0x80
 8004228:	f000 fe46 	bl	8004eb8 <UART_WaitOnFlagUntilTimeout>
 800422c:	1e03      	subs	r3, r0, #0
 800422e:	d001      	beq.n	8004234 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e03c      	b.n	80042ae <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10b      	bne.n	8004252 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	001a      	movs	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	05d2      	lsls	r2, r2, #23
 8004246:	0dd2      	lsrs	r2, r2, #23
 8004248:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	3302      	adds	r3, #2
 800424e:	61bb      	str	r3, [r7, #24]
 8004250:	e007      	b.n	8004262 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	781a      	ldrb	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	3301      	adds	r3, #1
 8004260:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2252      	movs	r2, #82	; 0x52
 8004266:	5a9b      	ldrh	r3, [r3, r2]
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b299      	uxth	r1, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2252      	movs	r2, #82	; 0x52
 8004272:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2252      	movs	r2, #82	; 0x52
 8004278:	5a9b      	ldrh	r3, [r3, r2]
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1cc      	bne.n	800421a <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	0013      	movs	r3, r2
 800428a:	2200      	movs	r2, #0
 800428c:	2140      	movs	r1, #64	; 0x40
 800428e:	f000 fe13 	bl	8004eb8 <UART_WaitOnFlagUntilTimeout>
 8004292:	1e03      	subs	r3, r0, #0
 8004294:	d001      	beq.n	800429a <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e009      	b.n	80042ae <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2270      	movs	r2, #112	; 0x70
 80042a4:	2100      	movs	r1, #0
 80042a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	e000      	b.n	80042ae <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
  }
}
 80042ae:	0018      	movs	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b008      	add	sp, #32
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	1dbb      	adds	r3, r7, #6
 80042c4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	d000      	beq.n	80042d0 <HAL_UART_Receive_IT+0x18>
 80042ce:	e09f      	b.n	8004410 <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_UART_Receive_IT+0x26>
 80042d6:	1dbb      	adds	r3, r7, #6
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e097      	b.n	8004412 <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	015b      	lsls	r3, r3, #5
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d109      	bne.n	8004302 <HAL_UART_Receive_IT+0x4a>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d105      	bne.n	8004302 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2201      	movs	r2, #1
 80042fa:	4013      	ands	r3, r2
 80042fc:	d001      	beq.n	8004302 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e087      	b.n	8004412 <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2270      	movs	r2, #112	; 0x70
 8004306:	5c9b      	ldrb	r3, [r3, r2]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_UART_Receive_IT+0x58>
 800430c:	2302      	movs	r3, #2
 800430e:	e080      	b.n	8004412 <HAL_UART_Receive_IT+0x15a>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2270      	movs	r2, #112	; 0x70
 8004314:	2101      	movs	r1, #1
 8004316:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1dba      	adds	r2, r7, #6
 8004322:	2158      	movs	r1, #88	; 0x58
 8004324:	8812      	ldrh	r2, [r2, #0]
 8004326:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	1dba      	adds	r2, r7, #6
 800432c:	215a      	movs	r1, #90	; 0x5a
 800432e:	8812      	ldrh	r2, [r2, #0]
 8004330:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	2380      	movs	r3, #128	; 0x80
 800433e:	015b      	lsls	r3, r3, #5
 8004340:	429a      	cmp	r2, r3
 8004342:	d10d      	bne.n	8004360 <HAL_UART_Receive_IT+0xa8>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d104      	bne.n	8004356 <HAL_UART_Receive_IT+0x9e>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	225c      	movs	r2, #92	; 0x5c
 8004350:	4932      	ldr	r1, [pc, #200]	; (800441c <HAL_UART_Receive_IT+0x164>)
 8004352:	5299      	strh	r1, [r3, r2]
 8004354:	e02e      	b.n	80043b4 <HAL_UART_Receive_IT+0xfc>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	225c      	movs	r2, #92	; 0x5c
 800435a:	21ff      	movs	r1, #255	; 0xff
 800435c:	5299      	strh	r1, [r3, r2]
 800435e:	e029      	b.n	80043b4 <HAL_UART_Receive_IT+0xfc>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10d      	bne.n	8004384 <HAL_UART_Receive_IT+0xcc>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d104      	bne.n	800437a <HAL_UART_Receive_IT+0xc2>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	225c      	movs	r2, #92	; 0x5c
 8004374:	21ff      	movs	r1, #255	; 0xff
 8004376:	5299      	strh	r1, [r3, r2]
 8004378:	e01c      	b.n	80043b4 <HAL_UART_Receive_IT+0xfc>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	225c      	movs	r2, #92	; 0x5c
 800437e:	217f      	movs	r1, #127	; 0x7f
 8004380:	5299      	strh	r1, [r3, r2]
 8004382:	e017      	b.n	80043b4 <HAL_UART_Receive_IT+0xfc>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	2380      	movs	r3, #128	; 0x80
 800438a:	055b      	lsls	r3, r3, #21
 800438c:	429a      	cmp	r2, r3
 800438e:	d10d      	bne.n	80043ac <HAL_UART_Receive_IT+0xf4>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <HAL_UART_Receive_IT+0xea>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	225c      	movs	r2, #92	; 0x5c
 800439c:	217f      	movs	r1, #127	; 0x7f
 800439e:	5299      	strh	r1, [r3, r2]
 80043a0:	e008      	b.n	80043b4 <HAL_UART_Receive_IT+0xfc>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	225c      	movs	r2, #92	; 0x5c
 80043a6:	213f      	movs	r1, #63	; 0x3f
 80043a8:	5299      	strh	r1, [r3, r2]
 80043aa:	e003      	b.n	80043b4 <HAL_UART_Receive_IT+0xfc>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	225c      	movs	r2, #92	; 0x5c
 80043b0:	2100      	movs	r1, #0
 80043b2:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2222      	movs	r2, #34	; 0x22
 80043be:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2101      	movs	r1, #1
 80043cc:	430a      	orrs	r2, r1
 80043ce:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	015b      	lsls	r3, r3, #5
 80043d8:	429a      	cmp	r2, r3
 80043da:	d107      	bne.n	80043ec <HAL_UART_Receive_IT+0x134>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d103      	bne.n	80043ec <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4a0e      	ldr	r2, [pc, #56]	; (8004420 <HAL_UART_Receive_IT+0x168>)
 80043e8:	661a      	str	r2, [r3, #96]	; 0x60
 80043ea:	e002      	b.n	80043f2 <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <HAL_UART_Receive_IT+0x16c>)
 80043f0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2270      	movs	r2, #112	; 0x70
 80043f6:	2100      	movs	r1, #0
 80043f8:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2190      	movs	r1, #144	; 0x90
 8004406:	0049      	lsls	r1, r1, #1
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	e000      	b.n	8004412 <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8004410:	2302      	movs	r3, #2
  }
}
 8004412:	0018      	movs	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	b004      	add	sp, #16
 8004418:	bd80      	pop	{r7, pc}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	000001ff 	.word	0x000001ff
 8004420:	080050ad 	.word	0x080050ad
 8004424:	08004ff1 	.word	0x08004ff1

08004428 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	220f      	movs	r2, #15
 800444c:	4013      	ands	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d112      	bne.n	800447c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	2220      	movs	r2, #32
 800445a:	4013      	ands	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	2220      	movs	r2, #32
 8004462:	4013      	ands	r3, r2
 8004464:	d00a      	beq.n	800447c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446a:	2b00      	cmp	r3, #0
 800446c:	d100      	bne.n	8004470 <HAL_UART_IRQHandler+0x48>
 800446e:	e0f6      	b.n	800465e <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	0010      	movs	r0, r2
 8004478:	4798      	blx	r3
      }
      return;
 800447a:	e0f0      	b.n	800465e <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d100      	bne.n	8004484 <HAL_UART_IRQHandler+0x5c>
 8004482:	e0b8      	b.n	80045f6 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2201      	movs	r2, #1
 8004488:	4013      	ands	r3, r2
 800448a:	d105      	bne.n	8004498 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	2390      	movs	r3, #144	; 0x90
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	4013      	ands	r3, r2
 8004494:	d100      	bne.n	8004498 <HAL_UART_IRQHandler+0x70>
 8004496:	e0ae      	b.n	80045f6 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2201      	movs	r2, #1
 800449c:	4013      	ands	r3, r2
 800449e:	d00e      	beq.n	80044be <HAL_UART_IRQHandler+0x96>
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4013      	ands	r3, r2
 80044a8:	d009      	beq.n	80044be <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2201      	movs	r2, #1
 80044b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b6:	2201      	movs	r2, #1
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	2202      	movs	r2, #2
 80044c2:	4013      	ands	r3, r2
 80044c4:	d00d      	beq.n	80044e2 <HAL_UART_IRQHandler+0xba>
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2201      	movs	r2, #1
 80044ca:	4013      	ands	r3, r2
 80044cc:	d009      	beq.n	80044e2 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2202      	movs	r2, #2
 80044d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044da:	2204      	movs	r2, #4
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	2204      	movs	r2, #4
 80044e6:	4013      	ands	r3, r2
 80044e8:	d00d      	beq.n	8004506 <HAL_UART_IRQHandler+0xde>
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2201      	movs	r2, #1
 80044ee:	4013      	ands	r3, r2
 80044f0:	d009      	beq.n	8004506 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2204      	movs	r2, #4
 80044f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fe:	2202      	movs	r2, #2
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	2208      	movs	r2, #8
 800450a:	4013      	ands	r3, r2
 800450c:	d011      	beq.n	8004532 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2220      	movs	r2, #32
 8004512:	4013      	ands	r3, r2
 8004514:	d103      	bne.n	800451e <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2201      	movs	r2, #1
 800451a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800451c:	d009      	beq.n	8004532 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2208      	movs	r2, #8
 8004524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800452a:	2208      	movs	r2, #8
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d100      	bne.n	800453c <HAL_UART_IRQHandler+0x114>
 800453a:	e092      	b.n	8004662 <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	2220      	movs	r2, #32
 8004540:	4013      	ands	r3, r2
 8004542:	d00c      	beq.n	800455e <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2220      	movs	r2, #32
 8004548:	4013      	ands	r3, r2
 800454a:	d008      	beq.n	800455e <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004550:	2b00      	cmp	r3, #0
 8004552:	d004      	beq.n	800455e <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	0010      	movs	r0, r2
 800455c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004562:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2240      	movs	r2, #64	; 0x40
 800456c:	4013      	ands	r3, r2
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d003      	beq.n	800457a <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2208      	movs	r2, #8
 8004576:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004578:	d033      	beq.n	80045e2 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	0018      	movs	r0, r3
 800457e:	f000 fce5 	bl	8004f4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2240      	movs	r2, #64	; 0x40
 800458a:	4013      	ands	r3, r2
 800458c:	2b40      	cmp	r3, #64	; 0x40
 800458e:	d123      	bne.n	80045d8 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2140      	movs	r1, #64	; 0x40
 800459c:	438a      	bics	r2, r1
 800459e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d012      	beq.n	80045ce <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ac:	4a30      	ldr	r2, [pc, #192]	; (8004670 <HAL_UART_IRQHandler+0x248>)
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b4:	0018      	movs	r0, r3
 80045b6:	f7fd fc73 	bl	8001ea0 <HAL_DMA_Abort_IT>
 80045ba:	1e03      	subs	r3, r0, #0
 80045bc:	d019      	beq.n	80045f2 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c8:	0018      	movs	r0, r3
 80045ca:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045cc:	e011      	b.n	80045f2 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 f857 	bl	8004684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d6:	e00c      	b.n	80045f2 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	0018      	movs	r0, r3
 80045dc:	f000 f852 	bl	8004684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	e007      	b.n	80045f2 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	0018      	movs	r0, r3
 80045e6:	f000 f84d 	bl	8004684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80045f0:	e037      	b.n	8004662 <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f2:	46c0      	nop			; (mov r8, r8)
    return;
 80045f4:	e035      	b.n	8004662 <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	035b      	lsls	r3, r3, #13
 80045fc:	4013      	ands	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_UART_IRQHandler+0x1f6>
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	2380      	movs	r3, #128	; 0x80
 8004604:	03db      	lsls	r3, r3, #15
 8004606:	4013      	ands	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2280      	movs	r2, #128	; 0x80
 8004610:	0352      	lsls	r2, r2, #13
 8004612:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	0018      	movs	r0, r3
 8004618:	f000 fda6 	bl	8005168 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800461c:	e024      	b.n	8004668 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	2280      	movs	r2, #128	; 0x80
 8004622:	4013      	ands	r3, r2
 8004624:	d00d      	beq.n	8004642 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	2280      	movs	r2, #128	; 0x80
 800462a:	4013      	ands	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004632:	2b00      	cmp	r3, #0
 8004634:	d017      	beq.n	8004666 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	0010      	movs	r0, r2
 800463e:	4798      	blx	r3
    }
    return;
 8004640:	e011      	b.n	8004666 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	2240      	movs	r2, #64	; 0x40
 8004646:	4013      	ands	r3, r2
 8004648:	d00e      	beq.n	8004668 <HAL_UART_IRQHandler+0x240>
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2240      	movs	r2, #64	; 0x40
 800464e:	4013      	ands	r3, r2
 8004650:	d00a      	beq.n	8004668 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	0018      	movs	r0, r3
 8004656:	f000 fcb0 	bl	8004fba <UART_EndTransmit_IT>
    return;
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	e004      	b.n	8004668 <HAL_UART_IRQHandler+0x240>
      return;
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	e002      	b.n	8004668 <HAL_UART_IRQHandler+0x240>
    return;
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	e000      	b.n	8004668 <HAL_UART_IRQHandler+0x240>
    return;
 8004666:	46c0      	nop			; (mov r8, r8)
  }

}
 8004668:	46bd      	mov	sp, r7
 800466a:	b008      	add	sp, #32
 800466c:	bd80      	pop	{r7, pc}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	08004f8d 	.word	0x08004f8d

08004674 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800467c:	46c0      	nop			; (mov r8, r8)
 800467e:	46bd      	mov	sp, r7
 8004680:	b002      	add	sp, #8
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800468c:	46c0      	nop			; (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	b002      	add	sp, #8
 8004692:	bd80      	pop	{r7, pc}

08004694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004694:	b5b0      	push	{r4, r5, r7, lr}
 8004696:	b08e      	sub	sp, #56	; 0x38
 8004698:	af00      	add	r7, sp, #0
 800469a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800469c:	231b      	movs	r3, #27
 800469e:	2218      	movs	r2, #24
 80046a0:	4694      	mov	ip, r2
 80046a2:	44bc      	add	ip, r7
 80046a4:	4463      	add	r3, ip
 80046a6:	2210      	movs	r2, #16
 80046a8:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80046ae:	2313      	movs	r3, #19
 80046b0:	2218      	movs	r2, #24
 80046b2:	4694      	mov	ip, r2
 80046b4:	44bc      	add	ip, r7
 80046b6:	4463      	add	r3, ip
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80046bc:	2300      	movs	r3, #0
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4ac8      	ldr	r2, [pc, #800]	; (8004a00 <UART_SetConfig+0x36c>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	0019      	movs	r1, r3
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046ea:	430a      	orrs	r2, r1
 80046ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4ac3      	ldr	r2, [pc, #780]	; (8004a04 <UART_SetConfig+0x370>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	0019      	movs	r1, r3
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4abd      	ldr	r2, [pc, #756]	; (8004a08 <UART_SetConfig+0x374>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d004      	beq.n	8004720 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800471c:	4313      	orrs	r3, r2
 800471e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	4ab9      	ldr	r2, [pc, #740]	; (8004a0c <UART_SetConfig+0x378>)
 8004728:	4013      	ands	r3, r2
 800472a:	0019      	movs	r1, r3
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004732:	430a      	orrs	r2, r1
 8004734:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4ab5      	ldr	r2, [pc, #724]	; (8004a10 <UART_SetConfig+0x37c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d134      	bne.n	80047aa <UART_SetConfig+0x116>
 8004740:	4bb4      	ldr	r3, [pc, #720]	; (8004a14 <UART_SetConfig+0x380>)
 8004742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004744:	2203      	movs	r2, #3
 8004746:	4013      	ands	r3, r2
 8004748:	2b01      	cmp	r3, #1
 800474a:	d015      	beq.n	8004778 <UART_SetConfig+0xe4>
 800474c:	d304      	bcc.n	8004758 <UART_SetConfig+0xc4>
 800474e:	2b02      	cmp	r3, #2
 8004750:	d00a      	beq.n	8004768 <UART_SetConfig+0xd4>
 8004752:	2b03      	cmp	r3, #3
 8004754:	d018      	beq.n	8004788 <UART_SetConfig+0xf4>
 8004756:	e01f      	b.n	8004798 <UART_SetConfig+0x104>
 8004758:	231b      	movs	r3, #27
 800475a:	2218      	movs	r2, #24
 800475c:	4694      	mov	ip, r2
 800475e:	44bc      	add	ip, r7
 8004760:	4463      	add	r3, ip
 8004762:	2201      	movs	r2, #1
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e0ab      	b.n	80048c0 <UART_SetConfig+0x22c>
 8004768:	231b      	movs	r3, #27
 800476a:	2218      	movs	r2, #24
 800476c:	4694      	mov	ip, r2
 800476e:	44bc      	add	ip, r7
 8004770:	4463      	add	r3, ip
 8004772:	2202      	movs	r2, #2
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	e0a3      	b.n	80048c0 <UART_SetConfig+0x22c>
 8004778:	231b      	movs	r3, #27
 800477a:	2218      	movs	r2, #24
 800477c:	4694      	mov	ip, r2
 800477e:	44bc      	add	ip, r7
 8004780:	4463      	add	r3, ip
 8004782:	2204      	movs	r2, #4
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	e09b      	b.n	80048c0 <UART_SetConfig+0x22c>
 8004788:	231b      	movs	r3, #27
 800478a:	2218      	movs	r2, #24
 800478c:	4694      	mov	ip, r2
 800478e:	44bc      	add	ip, r7
 8004790:	4463      	add	r3, ip
 8004792:	2208      	movs	r2, #8
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	e093      	b.n	80048c0 <UART_SetConfig+0x22c>
 8004798:	231b      	movs	r3, #27
 800479a:	2218      	movs	r2, #24
 800479c:	4694      	mov	ip, r2
 800479e:	44bc      	add	ip, r7
 80047a0:	4463      	add	r3, ip
 80047a2:	2210      	movs	r2, #16
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	e08a      	b.n	80048c0 <UART_SetConfig+0x22c>
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a9a      	ldr	r2, [pc, #616]	; (8004a18 <UART_SetConfig+0x384>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d137      	bne.n	8004824 <UART_SetConfig+0x190>
 80047b4:	4b97      	ldr	r3, [pc, #604]	; (8004a14 <UART_SetConfig+0x380>)
 80047b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b8:	220c      	movs	r2, #12
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d018      	beq.n	80047f2 <UART_SetConfig+0x15e>
 80047c0:	d802      	bhi.n	80047c8 <UART_SetConfig+0x134>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <UART_SetConfig+0x13e>
 80047c6:	e024      	b.n	8004812 <UART_SetConfig+0x17e>
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d00a      	beq.n	80047e2 <UART_SetConfig+0x14e>
 80047cc:	2b0c      	cmp	r3, #12
 80047ce:	d018      	beq.n	8004802 <UART_SetConfig+0x16e>
 80047d0:	e01f      	b.n	8004812 <UART_SetConfig+0x17e>
 80047d2:	231b      	movs	r3, #27
 80047d4:	2218      	movs	r2, #24
 80047d6:	4694      	mov	ip, r2
 80047d8:	44bc      	add	ip, r7
 80047da:	4463      	add	r3, ip
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]
 80047e0:	e06e      	b.n	80048c0 <UART_SetConfig+0x22c>
 80047e2:	231b      	movs	r3, #27
 80047e4:	2218      	movs	r2, #24
 80047e6:	4694      	mov	ip, r2
 80047e8:	44bc      	add	ip, r7
 80047ea:	4463      	add	r3, ip
 80047ec:	2202      	movs	r2, #2
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	e066      	b.n	80048c0 <UART_SetConfig+0x22c>
 80047f2:	231b      	movs	r3, #27
 80047f4:	2218      	movs	r2, #24
 80047f6:	4694      	mov	ip, r2
 80047f8:	44bc      	add	ip, r7
 80047fa:	4463      	add	r3, ip
 80047fc:	2204      	movs	r2, #4
 80047fe:	701a      	strb	r2, [r3, #0]
 8004800:	e05e      	b.n	80048c0 <UART_SetConfig+0x22c>
 8004802:	231b      	movs	r3, #27
 8004804:	2218      	movs	r2, #24
 8004806:	4694      	mov	ip, r2
 8004808:	44bc      	add	ip, r7
 800480a:	4463      	add	r3, ip
 800480c:	2208      	movs	r2, #8
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e056      	b.n	80048c0 <UART_SetConfig+0x22c>
 8004812:	231b      	movs	r3, #27
 8004814:	2218      	movs	r2, #24
 8004816:	4694      	mov	ip, r2
 8004818:	44bc      	add	ip, r7
 800481a:	4463      	add	r3, ip
 800481c:	2210      	movs	r2, #16
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	46c0      	nop			; (mov r8, r8)
 8004822:	e04d      	b.n	80048c0 <UART_SetConfig+0x22c>
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a77      	ldr	r2, [pc, #476]	; (8004a08 <UART_SetConfig+0x374>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d141      	bne.n	80048b2 <UART_SetConfig+0x21e>
 800482e:	4b79      	ldr	r3, [pc, #484]	; (8004a14 <UART_SetConfig+0x380>)
 8004830:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004832:	23c0      	movs	r3, #192	; 0xc0
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	4013      	ands	r3, r2
 8004838:	2280      	movs	r2, #128	; 0x80
 800483a:	00d2      	lsls	r2, r2, #3
 800483c:	4293      	cmp	r3, r2
 800483e:	d01f      	beq.n	8004880 <UART_SetConfig+0x1ec>
 8004840:	2280      	movs	r2, #128	; 0x80
 8004842:	00d2      	lsls	r2, r2, #3
 8004844:	4293      	cmp	r3, r2
 8004846:	d802      	bhi.n	800484e <UART_SetConfig+0x1ba>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d009      	beq.n	8004860 <UART_SetConfig+0x1cc>
 800484c:	e028      	b.n	80048a0 <UART_SetConfig+0x20c>
 800484e:	2280      	movs	r2, #128	; 0x80
 8004850:	0112      	lsls	r2, r2, #4
 8004852:	4293      	cmp	r3, r2
 8004854:	d00c      	beq.n	8004870 <UART_SetConfig+0x1dc>
 8004856:	22c0      	movs	r2, #192	; 0xc0
 8004858:	0112      	lsls	r2, r2, #4
 800485a:	4293      	cmp	r3, r2
 800485c:	d018      	beq.n	8004890 <UART_SetConfig+0x1fc>
 800485e:	e01f      	b.n	80048a0 <UART_SetConfig+0x20c>
 8004860:	231b      	movs	r3, #27
 8004862:	2218      	movs	r2, #24
 8004864:	4694      	mov	ip, r2
 8004866:	44bc      	add	ip, r7
 8004868:	4463      	add	r3, ip
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	e027      	b.n	80048c0 <UART_SetConfig+0x22c>
 8004870:	231b      	movs	r3, #27
 8004872:	2218      	movs	r2, #24
 8004874:	4694      	mov	ip, r2
 8004876:	44bc      	add	ip, r7
 8004878:	4463      	add	r3, ip
 800487a:	2202      	movs	r2, #2
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	e01f      	b.n	80048c0 <UART_SetConfig+0x22c>
 8004880:	231b      	movs	r3, #27
 8004882:	2218      	movs	r2, #24
 8004884:	4694      	mov	ip, r2
 8004886:	44bc      	add	ip, r7
 8004888:	4463      	add	r3, ip
 800488a:	2204      	movs	r2, #4
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	e017      	b.n	80048c0 <UART_SetConfig+0x22c>
 8004890:	231b      	movs	r3, #27
 8004892:	2218      	movs	r2, #24
 8004894:	4694      	mov	ip, r2
 8004896:	44bc      	add	ip, r7
 8004898:	4463      	add	r3, ip
 800489a:	2208      	movs	r2, #8
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	e00f      	b.n	80048c0 <UART_SetConfig+0x22c>
 80048a0:	231b      	movs	r3, #27
 80048a2:	2218      	movs	r2, #24
 80048a4:	4694      	mov	ip, r2
 80048a6:	44bc      	add	ip, r7
 80048a8:	4463      	add	r3, ip
 80048aa:	2210      	movs	r2, #16
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	e006      	b.n	80048c0 <UART_SetConfig+0x22c>
 80048b2:	231b      	movs	r3, #27
 80048b4:	2218      	movs	r2, #24
 80048b6:	4694      	mov	ip, r2
 80048b8:	44bc      	add	ip, r7
 80048ba:	4463      	add	r3, ip
 80048bc:	2210      	movs	r2, #16
 80048be:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a50      	ldr	r2, [pc, #320]	; (8004a08 <UART_SetConfig+0x374>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d000      	beq.n	80048cc <UART_SetConfig+0x238>
 80048ca:	e083      	b.n	80049d4 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048cc:	231b      	movs	r3, #27
 80048ce:	2218      	movs	r2, #24
 80048d0:	4694      	mov	ip, r2
 80048d2:	44bc      	add	ip, r7
 80048d4:	4463      	add	r3, ip
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d00d      	beq.n	80048f8 <UART_SetConfig+0x264>
 80048dc:	dc02      	bgt.n	80048e4 <UART_SetConfig+0x250>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d005      	beq.n	80048ee <UART_SetConfig+0x25a>
 80048e2:	e01d      	b.n	8004920 <UART_SetConfig+0x28c>
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d012      	beq.n	800490e <UART_SetConfig+0x27a>
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d015      	beq.n	8004918 <UART_SetConfig+0x284>
 80048ec:	e018      	b.n	8004920 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80048ee:	f7fe ff69 	bl	80037c4 <HAL_RCC_GetPCLK1Freq>
 80048f2:	0003      	movs	r3, r0
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048f6:	e01b      	b.n	8004930 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048f8:	4b46      	ldr	r3, [pc, #280]	; (8004a14 <UART_SetConfig+0x380>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2210      	movs	r2, #16
 80048fe:	4013      	ands	r3, r2
 8004900:	d002      	beq.n	8004908 <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8004902:	4b46      	ldr	r3, [pc, #280]	; (8004a1c <UART_SetConfig+0x388>)
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8004906:	e013      	b.n	8004930 <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004908:	4b45      	ldr	r3, [pc, #276]	; (8004a20 <UART_SetConfig+0x38c>)
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800490c:	e010      	b.n	8004930 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800490e:	f7fe fecb 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8004912:	0003      	movs	r3, r0
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004916:	e00b      	b.n	8004930 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004918:	2380      	movs	r3, #128	; 0x80
 800491a:	021b      	lsls	r3, r3, #8
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800491e:	e007      	b.n	8004930 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004920:	2313      	movs	r3, #19
 8004922:	2218      	movs	r2, #24
 8004924:	4694      	mov	ip, r2
 8004926:	44bc      	add	ip, r7
 8004928:	4463      	add	r3, ip
 800492a:	2201      	movs	r2, #1
 800492c:	701a      	strb	r2, [r3, #0]
        break;
 800492e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	2b00      	cmp	r3, #0
 8004934:	d100      	bne.n	8004938 <UART_SetConfig+0x2a4>
 8004936:	e1a6      	b.n	8004c86 <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	0013      	movs	r3, r2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	189b      	adds	r3, r3, r2
 8004942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004944:	429a      	cmp	r2, r3
 8004946:	d305      	bcc.n	8004954 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800494e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004950:	429a      	cmp	r2, r3
 8004952:	d907      	bls.n	8004964 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 8004954:	2313      	movs	r3, #19
 8004956:	2218      	movs	r2, #24
 8004958:	4694      	mov	ip, r2
 800495a:	44bc      	add	ip, r7
 800495c:	4463      	add	r3, ip
 800495e:	2201      	movs	r2, #1
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	e190      	b.n	8004c86 <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	6939      	ldr	r1, [r7, #16]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	000b      	movs	r3, r1
 8004972:	0e1b      	lsrs	r3, r3, #24
 8004974:	0010      	movs	r0, r2
 8004976:	0205      	lsls	r5, r0, #8
 8004978:	431d      	orrs	r5, r3
 800497a:	000b      	movs	r3, r1
 800497c:	021c      	lsls	r4, r3, #8
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	085b      	lsrs	r3, r3, #1
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	68b8      	ldr	r0, [r7, #8]
 800498c:	68f9      	ldr	r1, [r7, #12]
 800498e:	1900      	adds	r0, r0, r4
 8004990:	4169      	adcs	r1, r5
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	2300      	movs	r3, #0
 800499a:	607b      	str	r3, [r7, #4]
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f7fb fc78 	bl	8000294 <__aeabi_uldivmod>
 80049a4:	0003      	movs	r3, r0
 80049a6:	000c      	movs	r4, r1
 80049a8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	4a1d      	ldr	r2, [pc, #116]	; (8004a24 <UART_SetConfig+0x390>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d908      	bls.n	80049c4 <UART_SetConfig+0x330>
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	4a1c      	ldr	r2, [pc, #112]	; (8004a28 <UART_SetConfig+0x394>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d804      	bhi.n	80049c4 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c0:	60da      	str	r2, [r3, #12]
 80049c2:	e160      	b.n	8004c86 <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 80049c4:	2313      	movs	r3, #19
 80049c6:	2218      	movs	r2, #24
 80049c8:	4694      	mov	ip, r2
 80049ca:	44bc      	add	ip, r7
 80049cc:	4463      	add	r3, ip
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e158      	b.n	8004c86 <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	2380      	movs	r3, #128	; 0x80
 80049da:	021b      	lsls	r3, r3, #8
 80049dc:	429a      	cmp	r2, r3
 80049de:	d000      	beq.n	80049e2 <UART_SetConfig+0x34e>
 80049e0:	e0c3      	b.n	8004b6a <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 80049e2:	231b      	movs	r3, #27
 80049e4:	2218      	movs	r2, #24
 80049e6:	4694      	mov	ip, r2
 80049e8:	44bc      	add	ip, r7
 80049ea:	4463      	add	r3, ip
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d900      	bls.n	80049f4 <UART_SetConfig+0x360>
 80049f2:	e086      	b.n	8004b02 <UART_SetConfig+0x46e>
 80049f4:	009a      	lsls	r2, r3, #2
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <UART_SetConfig+0x398>)
 80049f8:	18d3      	adds	r3, r2, r3
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	469f      	mov	pc, r3
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	efff69f3 	.word	0xefff69f3
 8004a04:	ffffcfff 	.word	0xffffcfff
 8004a08:	40004800 	.word	0x40004800
 8004a0c:	fffff4ff 	.word	0xfffff4ff
 8004a10:	40013800 	.word	0x40013800
 8004a14:	40021000 	.word	0x40021000
 8004a18:	40004400 	.word	0x40004400
 8004a1c:	003d0900 	.word	0x003d0900
 8004a20:	00f42400 	.word	0x00f42400
 8004a24:	000002ff 	.word	0x000002ff
 8004a28:	000fffff 	.word	0x000fffff
 8004a2c:	08008284 	.word	0x08008284
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004a30:	f7fe fec8 	bl	80037c4 <HAL_RCC_GetPCLK1Freq>
 8004a34:	0003      	movs	r3, r0
 8004a36:	005a      	lsls	r2, r3, #1
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	085b      	lsrs	r3, r3, #1
 8004a3e:	18d2      	adds	r2, r2, r3
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	0019      	movs	r1, r3
 8004a46:	0010      	movs	r0, r2
 8004a48:	f7fb fb5e 	bl	8000108 <__udivsi3>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a52:	e05e      	b.n	8004b12 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004a54:	f7fe fecc 	bl	80037f0 <HAL_RCC_GetPCLK2Freq>
 8004a58:	0003      	movs	r3, r0
 8004a5a:	005a      	lsls	r2, r3, #1
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	18d2      	adds	r2, r2, r3
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	0019      	movs	r1, r3
 8004a6a:	0010      	movs	r0, r2
 8004a6c:	f7fb fb4c 	bl	8000108 <__udivsi3>
 8004a70:	0003      	movs	r3, r0
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a76:	e04c      	b.n	8004b12 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a78:	4b8b      	ldr	r3, [pc, #556]	; (8004ca8 <UART_SetConfig+0x614>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2210      	movs	r2, #16
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	085b      	lsrs	r3, r3, #1
 8004a88:	4a88      	ldr	r2, [pc, #544]	; (8004cac <UART_SetConfig+0x618>)
 8004a8a:	189a      	adds	r2, r3, r2
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	0019      	movs	r1, r3
 8004a92:	0010      	movs	r0, r2
 8004a94:	f7fb fb38 	bl	8000108 <__udivsi3>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004a9e:	e038      	b.n	8004b12 <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	085b      	lsrs	r3, r3, #1
 8004aa6:	4a82      	ldr	r2, [pc, #520]	; (8004cb0 <UART_SetConfig+0x61c>)
 8004aa8:	189a      	adds	r2, r3, r2
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	0019      	movs	r1, r3
 8004ab0:	0010      	movs	r0, r2
 8004ab2:	f7fb fb29 	bl	8000108 <__udivsi3>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004abc:	e029      	b.n	8004b12 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004abe:	f7fe fdf3 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	005a      	lsls	r2, r3, #1
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	085b      	lsrs	r3, r3, #1
 8004acc:	18d2      	adds	r2, r2, r3
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	0010      	movs	r0, r2
 8004ad6:	f7fb fb17 	bl	8000108 <__udivsi3>
 8004ada:	0003      	movs	r3, r0
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ae0:	e017      	b.n	8004b12 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	085b      	lsrs	r3, r3, #1
 8004ae8:	2280      	movs	r2, #128	; 0x80
 8004aea:	0252      	lsls	r2, r2, #9
 8004aec:	189a      	adds	r2, r3, r2
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	0019      	movs	r1, r3
 8004af4:	0010      	movs	r0, r2
 8004af6:	f7fb fb07 	bl	8000108 <__udivsi3>
 8004afa:	0003      	movs	r3, r0
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b00:	e007      	b.n	8004b12 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004b02:	2313      	movs	r3, #19
 8004b04:	2218      	movs	r2, #24
 8004b06:	4694      	mov	ip, r2
 8004b08:	44bc      	add	ip, r7
 8004b0a:	4463      	add	r3, ip
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	701a      	strb	r2, [r3, #0]
        break;
 8004b10:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	2b0f      	cmp	r3, #15
 8004b16:	d920      	bls.n	8004b5a <UART_SetConfig+0x4c6>
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	4a66      	ldr	r2, [pc, #408]	; (8004cb4 <UART_SetConfig+0x620>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d81c      	bhi.n	8004b5a <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	200a      	movs	r0, #10
 8004b26:	2418      	movs	r4, #24
 8004b28:	193b      	adds	r3, r7, r4
 8004b2a:	181b      	adds	r3, r3, r0
 8004b2c:	210f      	movs	r1, #15
 8004b2e:	438a      	bics	r2, r1
 8004b30:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b34:	085b      	lsrs	r3, r3, #1
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2207      	movs	r2, #7
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	b299      	uxth	r1, r3
 8004b3e:	193b      	adds	r3, r7, r4
 8004b40:	181b      	adds	r3, r3, r0
 8004b42:	193a      	adds	r2, r7, r4
 8004b44:	1812      	adds	r2, r2, r0
 8004b46:	8812      	ldrh	r2, [r2, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	193a      	adds	r2, r7, r4
 8004b52:	1812      	adds	r2, r2, r0
 8004b54:	8812      	ldrh	r2, [r2, #0]
 8004b56:	60da      	str	r2, [r3, #12]
 8004b58:	e095      	b.n	8004c86 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8004b5a:	2313      	movs	r3, #19
 8004b5c:	2218      	movs	r2, #24
 8004b5e:	4694      	mov	ip, r2
 8004b60:	44bc      	add	ip, r7
 8004b62:	4463      	add	r3, ip
 8004b64:	2201      	movs	r2, #1
 8004b66:	701a      	strb	r2, [r3, #0]
 8004b68:	e08d      	b.n	8004c86 <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 8004b6a:	231b      	movs	r3, #27
 8004b6c:	2218      	movs	r2, #24
 8004b6e:	4694      	mov	ip, r2
 8004b70:	44bc      	add	ip, r7
 8004b72:	4463      	add	r3, ip
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d86a      	bhi.n	8004c50 <UART_SetConfig+0x5bc>
 8004b7a:	009a      	lsls	r2, r3, #2
 8004b7c:	4b4e      	ldr	r3, [pc, #312]	; (8004cb8 <UART_SetConfig+0x624>)
 8004b7e:	18d3      	adds	r3, r2, r3
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004b84:	f7fe fe1e 	bl	80037c4 <HAL_RCC_GetPCLK1Freq>
 8004b88:	0002      	movs	r2, r0
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	18d2      	adds	r2, r2, r3
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	0019      	movs	r1, r3
 8004b98:	0010      	movs	r0, r2
 8004b9a:	f7fb fab5 	bl	8000108 <__udivsi3>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ba4:	e05c      	b.n	8004c60 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004ba6:	f7fe fe23 	bl	80037f0 <HAL_RCC_GetPCLK2Freq>
 8004baa:	0002      	movs	r2, r0
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	18d2      	adds	r2, r2, r3
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	0019      	movs	r1, r3
 8004bba:	0010      	movs	r0, r2
 8004bbc:	f7fb faa4 	bl	8000108 <__udivsi3>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bc6:	e04b      	b.n	8004c60 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bc8:	4b37      	ldr	r3, [pc, #220]	; (8004ca8 <UART_SetConfig+0x614>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2210      	movs	r2, #16
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d00e      	beq.n	8004bf0 <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	4a38      	ldr	r2, [pc, #224]	; (8004cbc <UART_SetConfig+0x628>)
 8004bda:	189a      	adds	r2, r3, r2
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	0019      	movs	r1, r3
 8004be2:	0010      	movs	r0, r2
 8004be4:	f7fb fa90 	bl	8000108 <__udivsi3>
 8004be8:	0003      	movs	r3, r0
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004bee:	e037      	b.n	8004c60 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	085b      	lsrs	r3, r3, #1
 8004bf6:	4a32      	ldr	r2, [pc, #200]	; (8004cc0 <UART_SetConfig+0x62c>)
 8004bf8:	189a      	adds	r2, r3, r2
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	0019      	movs	r1, r3
 8004c00:	0010      	movs	r0, r2
 8004c02:	f7fb fa81 	bl	8000108 <__udivsi3>
 8004c06:	0003      	movs	r3, r0
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c0c:	e028      	b.n	8004c60 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004c0e:	f7fe fd4b 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8004c12:	0002      	movs	r2, r0
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	085b      	lsrs	r3, r3, #1
 8004c1a:	18d2      	adds	r2, r2, r3
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	0019      	movs	r1, r3
 8004c22:	0010      	movs	r0, r2
 8004c24:	f7fb fa70 	bl	8000108 <__udivsi3>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c2e:	e017      	b.n	8004c60 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	2280      	movs	r2, #128	; 0x80
 8004c38:	0212      	lsls	r2, r2, #8
 8004c3a:	189a      	adds	r2, r3, r2
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	0019      	movs	r1, r3
 8004c42:	0010      	movs	r0, r2
 8004c44:	f7fb fa60 	bl	8000108 <__udivsi3>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c4e:	e007      	b.n	8004c60 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004c50:	2313      	movs	r3, #19
 8004c52:	2218      	movs	r2, #24
 8004c54:	4694      	mov	ip, r2
 8004c56:	44bc      	add	ip, r7
 8004c58:	4463      	add	r3, ip
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	701a      	strb	r2, [r3, #0]
        break;
 8004c5e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c62:	2b0f      	cmp	r3, #15
 8004c64:	d908      	bls.n	8004c78 <UART_SetConfig+0x5e4>
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	4a12      	ldr	r2, [pc, #72]	; (8004cb4 <UART_SetConfig+0x620>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d804      	bhi.n	8004c78 <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c74:	60da      	str	r2, [r3, #12]
 8004c76:	e006      	b.n	8004c86 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8004c78:	2313      	movs	r3, #19
 8004c7a:	2218      	movs	r2, #24
 8004c7c:	4694      	mov	ip, r2
 8004c7e:	44bc      	add	ip, r7
 8004c80:	4463      	add	r3, ip
 8004c82:	2201      	movs	r2, #1
 8004c84:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004c92:	2313      	movs	r3, #19
 8004c94:	2218      	movs	r2, #24
 8004c96:	4694      	mov	ip, r2
 8004c98:	44bc      	add	ip, r7
 8004c9a:	4463      	add	r3, ip
 8004c9c:	781b      	ldrb	r3, [r3, #0]
}
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b00e      	add	sp, #56	; 0x38
 8004ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	007a1200 	.word	0x007a1200
 8004cb0:	01e84800 	.word	0x01e84800
 8004cb4:	0000ffff 	.word	0x0000ffff
 8004cb8:	080082a8 	.word	0x080082a8
 8004cbc:	003d0900 	.word	0x003d0900
 8004cc0:	00f42400 	.word	0x00f42400

08004cc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d00b      	beq.n	8004cee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4a4a      	ldr	r2, [pc, #296]	; (8004e08 <UART_AdvFeatureConfig+0x144>)
 8004cde:	4013      	ands	r3, r2
 8004ce0:	0019      	movs	r1, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d00b      	beq.n	8004d10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	4a43      	ldr	r2, [pc, #268]	; (8004e0c <UART_AdvFeatureConfig+0x148>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	0019      	movs	r1, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	2204      	movs	r2, #4
 8004d16:	4013      	ands	r3, r2
 8004d18:	d00b      	beq.n	8004d32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a3b      	ldr	r2, [pc, #236]	; (8004e10 <UART_AdvFeatureConfig+0x14c>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	0019      	movs	r1, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	2208      	movs	r2, #8
 8004d38:	4013      	ands	r3, r2
 8004d3a:	d00b      	beq.n	8004d54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	4a34      	ldr	r2, [pc, #208]	; (8004e14 <UART_AdvFeatureConfig+0x150>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	0019      	movs	r1, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	2210      	movs	r2, #16
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	d00b      	beq.n	8004d76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4a2c      	ldr	r2, [pc, #176]	; (8004e18 <UART_AdvFeatureConfig+0x154>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	0019      	movs	r1, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d00b      	beq.n	8004d98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	4a25      	ldr	r2, [pc, #148]	; (8004e1c <UART_AdvFeatureConfig+0x158>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	0019      	movs	r1, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	2240      	movs	r2, #64	; 0x40
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d01d      	beq.n	8004dde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <UART_AdvFeatureConfig+0x15c>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	0019      	movs	r1, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dbe:	2380      	movs	r3, #128	; 0x80
 8004dc0:	035b      	lsls	r3, r3, #13
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d10b      	bne.n	8004dde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	4a15      	ldr	r2, [pc, #84]	; (8004e24 <UART_AdvFeatureConfig+0x160>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	0019      	movs	r1, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2280      	movs	r2, #128	; 0x80
 8004de4:	4013      	ands	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	4a0e      	ldr	r2, [pc, #56]	; (8004e28 <UART_AdvFeatureConfig+0x164>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	605a      	str	r2, [r3, #4]
  }
}
 8004e00:	46c0      	nop			; (mov r8, r8)
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b002      	add	sp, #8
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	fffdffff 	.word	0xfffdffff
 8004e0c:	fffeffff 	.word	0xfffeffff
 8004e10:	fffbffff 	.word	0xfffbffff
 8004e14:	ffff7fff 	.word	0xffff7fff
 8004e18:	ffffefff 	.word	0xffffefff
 8004e1c:	ffffdfff 	.word	0xffffdfff
 8004e20:	ffefffff 	.word	0xffefffff
 8004e24:	ff9fffff 	.word	0xff9fffff
 8004e28:	fff7ffff 	.word	0xfff7ffff

08004e2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004e3a:	f7fc ff15 	bl	8001c68 <HAL_GetTick>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2208      	movs	r2, #8
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d10d      	bne.n	8004e6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	0399      	lsls	r1, r3, #14
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	4b16      	ldr	r3, [pc, #88]	; (8004eb4 <UART_CheckIdleState+0x88>)
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	0013      	movs	r3, r2
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f000 f82a 	bl	8004eb8 <UART_WaitOnFlagUntilTimeout>
 8004e64:	1e03      	subs	r3, r0, #0
 8004e66:	d001      	beq.n	8004e6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e01f      	b.n	8004eac <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2204      	movs	r2, #4
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d10d      	bne.n	8004e96 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	2380      	movs	r3, #128	; 0x80
 8004e7e:	03d9      	lsls	r1, r3, #15
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <UART_CheckIdleState+0x88>)
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	0013      	movs	r3, r2
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f000 f815 	bl	8004eb8 <UART_WaitOnFlagUntilTimeout>
 8004e8e:	1e03      	subs	r3, r0, #0
 8004e90:	d001      	beq.n	8004e96 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e00a      	b.n	8004eac <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2270      	movs	r2, #112	; 0x70
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	0018      	movs	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b004      	add	sp, #16
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	01ffffff 	.word	0x01ffffff

08004eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	1dfb      	adds	r3, r7, #7
 8004ec6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec8:	e029      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	d026      	beq.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed0:	f7fc feca 	bl	8001c68 <HAL_GetTick>
 8004ed4:	0002      	movs	r2, r0
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d302      	bcc.n	8004ee6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d11b      	bne.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4915      	ldr	r1, [pc, #84]	; (8004f48 <UART_WaitOnFlagUntilTimeout+0x90>)
 8004ef2:	400a      	ands	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2101      	movs	r1, #1
 8004f02:	438a      	bics	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2270      	movs	r2, #112	; 0x70
 8004f16:	2100      	movs	r1, #0
 8004f18:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e00f      	b.n	8004f3e <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	4013      	ands	r3, r2
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	425a      	negs	r2, r3
 8004f2e:	4153      	adcs	r3, r2
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	001a      	movs	r2, r3
 8004f34:	1dfb      	adds	r3, r7, #7
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d0c6      	beq.n	8004eca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	0018      	movs	r0, r3
 8004f40:	46bd      	mov	sp, r7
 8004f42:	b004      	add	sp, #16
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	fffffe5f 	.word	0xfffffe5f

08004f4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	490a      	ldr	r1, [pc, #40]	; (8004f88 <UART_EndRxTransfer+0x3c>)
 8004f60:	400a      	ands	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2101      	movs	r1, #1
 8004f70:	438a      	bics	r2, r1
 8004f72:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004f80:	46c0      	nop			; (mov r8, r8)
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b002      	add	sp, #8
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	fffffedf 	.word	0xfffffedf

08004f8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	225a      	movs	r2, #90	; 0x5a
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2252      	movs	r2, #82	; 0x52
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	0018      	movs	r0, r3
 8004fae:	f7ff fb69 	bl	8004684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b004      	add	sp, #16
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2140      	movs	r1, #64	; 0x40
 8004fce:	438a      	bics	r2, r1
 8004fd0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f7ff fb47 	bl	8004674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	b002      	add	sp, #8
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ff8:	230e      	movs	r3, #14
 8004ffa:	18fb      	adds	r3, r7, r3
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	215c      	movs	r1, #92	; 0x5c
 8005000:	5a52      	ldrh	r2, [r2, r1]
 8005002:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005008:	2b22      	cmp	r3, #34	; 0x22
 800500a:	d140      	bne.n	800508e <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005012:	210c      	movs	r1, #12
 8005014:	187b      	adds	r3, r7, r1
 8005016:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005018:	187b      	adds	r3, r7, r1
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	b2da      	uxtb	r2, r3
 800501e:	230e      	movs	r3, #14
 8005020:	18fb      	adds	r3, r7, r3
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b2d9      	uxtb	r1, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502a:	400a      	ands	r2, r1
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	225a      	movs	r2, #90	; 0x5a
 800503e:	5a9b      	ldrh	r3, [r3, r2]
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b299      	uxth	r1, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	225a      	movs	r2, #90	; 0x5a
 800504a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	225a      	movs	r2, #90	; 0x5a
 8005050:	5a9b      	ldrh	r3, [r3, r2]
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d122      	bne.n	800509e <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4911      	ldr	r1, [pc, #68]	; (80050a8 <UART_RxISR_8BIT+0xb8>)
 8005064:	400a      	ands	r2, r1
 8005066:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2101      	movs	r1, #1
 8005074:	438a      	bics	r2, r1
 8005076:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	0018      	movs	r0, r3
 8005088:	f002 fda6 	bl	8007bd8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800508c:	e007      	b.n	800509e <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699a      	ldr	r2, [r3, #24]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2108      	movs	r1, #8
 800509a:	430a      	orrs	r2, r1
 800509c:	619a      	str	r2, [r3, #24]
}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b004      	add	sp, #16
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	fffffedf 	.word	0xfffffedf

080050ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80050b4:	230e      	movs	r3, #14
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	215c      	movs	r1, #92	; 0x5c
 80050bc:	5a52      	ldrh	r2, [r2, r1]
 80050be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050c4:	2b22      	cmp	r3, #34	; 0x22
 80050c6:	d140      	bne.n	800514a <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ce:	210c      	movs	r1, #12
 80050d0:	187b      	adds	r3, r7, r1
 80050d2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80050da:	187b      	adds	r3, r7, r1
 80050dc:	220e      	movs	r2, #14
 80050de:	18ba      	adds	r2, r7, r2
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	8812      	ldrh	r2, [r2, #0]
 80050e4:	4013      	ands	r3, r2
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f0:	1c9a      	adds	r2, r3, #2
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	225a      	movs	r2, #90	; 0x5a
 80050fa:	5a9b      	ldrh	r3, [r3, r2]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b01      	subs	r3, #1
 8005100:	b299      	uxth	r1, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	225a      	movs	r2, #90	; 0x5a
 8005106:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	225a      	movs	r2, #90	; 0x5a
 800510c:	5a9b      	ldrh	r3, [r3, r2]
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d122      	bne.n	800515a <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4911      	ldr	r1, [pc, #68]	; (8005164 <UART_RxISR_16BIT+0xb8>)
 8005120:	400a      	ands	r2, r1
 8005122:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2101      	movs	r1, #1
 8005130:	438a      	bics	r2, r1
 8005132:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	0018      	movs	r0, r3
 8005144:	f002 fd48 	bl	8007bd8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005148:	e007      	b.n	800515a <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	699a      	ldr	r2, [r3, #24]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2108      	movs	r1, #8
 8005156:	430a      	orrs	r2, r1
 8005158:	619a      	str	r2, [r3, #24]
}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	46bd      	mov	sp, r7
 800515e:	b004      	add	sp, #16
 8005160:	bd80      	pop	{r7, pc}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	fffffedf 	.word	0xfffffedf

08005168 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005170:	46c0      	nop			; (mov r8, r8)
 8005172:	46bd      	mov	sp, r7
 8005174:	b002      	add	sp, #8
 8005176:	bd80      	pop	{r7, pc}

08005178 <_ZN8APDS99606enable3getEv>:
    uint8_t PIEN : 1;

    // gesture enable
    uint8_t GEN : 1;

    uint8_t get() {
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
      return (GEN << 6) | (PIEN << 5) | (AIEN << 4) | (WEN << 3) | (PEN << 2) |
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	065b      	lsls	r3, r3, #25
 8005186:	0fdb      	lsrs	r3, r3, #31
 8005188:	b2db      	uxtb	r3, r3
 800518a:	019b      	lsls	r3, r3, #6
 800518c:	b25a      	sxtb	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	069b      	lsls	r3, r3, #26
 8005194:	0fdb      	lsrs	r3, r3, #31
 8005196:	b2db      	uxtb	r3, r3
 8005198:	015b      	lsls	r3, r3, #5
 800519a:	b25b      	sxtb	r3, r3
 800519c:	4313      	orrs	r3, r2
 800519e:	b25a      	sxtb	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	06db      	lsls	r3, r3, #27
 80051a6:	0fdb      	lsrs	r3, r3, #31
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	b25b      	sxtb	r3, r3
 80051ae:	4313      	orrs	r3, r2
 80051b0:	b25a      	sxtb	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	071b      	lsls	r3, r3, #28
 80051b8:	0fdb      	lsrs	r3, r3, #31
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	b25b      	sxtb	r3, r3
 80051c0:	4313      	orrs	r3, r2
 80051c2:	b25a      	sxtb	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	075b      	lsls	r3, r3, #29
 80051ca:	0fdb      	lsrs	r3, r3, #31
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	b25b      	sxtb	r3, r3
 80051d2:	4313      	orrs	r3, r2
 80051d4:	b25a      	sxtb	r2, r3
             (AEN << 1) | PON;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	079b      	lsls	r3, r3, #30
 80051dc:	0fdb      	lsrs	r3, r3, #31
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	005b      	lsls	r3, r3, #1
      return (GEN << 6) | (PIEN << 5) | (AIEN << 4) | (WEN << 3) | (PEN << 2) |
 80051e2:	b25b      	sxtb	r3, r3
 80051e4:	4313      	orrs	r3, r2
 80051e6:	b25a      	sxtb	r2, r3
             (AEN << 1) | PON;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	07db      	lsls	r3, r3, #31
 80051ee:	0fdb      	lsrs	r3, r3, #31
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	b25b      	sxtb	r3, r3
 80051f4:	4313      	orrs	r3, r2
 80051f6:	b25b      	sxtb	r3, r3
 80051f8:	b2db      	uxtb	r3, r3
    };
 80051fa:	0018      	movs	r0, r3
 80051fc:	46bd      	mov	sp, r7
 80051fe:	b002      	add	sp, #8
 8005200:	bd80      	pop	{r7, pc}

08005202 <_ZN8APDS99607control3getEv>:
    uint8_t PGAIN : 2;

    // led drive strength
    uint8_t LDRIVE : 2;

    uint8_t get() { return (LDRIVE << 6) | (PGAIN << 2) | AGAIN; }
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	069b      	lsls	r3, r3, #26
 8005210:	0f9b      	lsrs	r3, r3, #30
 8005212:	b2db      	uxtb	r3, r3
 8005214:	019b      	lsls	r3, r3, #6
 8005216:	b25a      	sxtb	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	071b      	lsls	r3, r3, #28
 800521e:	0f9b      	lsrs	r3, r3, #30
 8005220:	b2db      	uxtb	r3, r3
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	b25b      	sxtb	r3, r3
 8005226:	4313      	orrs	r3, r2
 8005228:	b25a      	sxtb	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	079b      	lsls	r3, r3, #30
 8005230:	0f9b      	lsrs	r3, r3, #30
 8005232:	b2db      	uxtb	r3, r3
 8005234:	b25b      	sxtb	r3, r3
 8005236:	4313      	orrs	r3, r2
 8005238:	b25b      	sxtb	r3, r3
 800523a:	b2db      	uxtb	r3, r3
 800523c:	0018      	movs	r0, r3
 800523e:	46bd      	mov	sp, r7
 8005240:	b002      	add	sp, #8
 8005242:	bd80      	pop	{r7, pc}

08005244 <_ZN8APDS99606gconf13getEv>:
    /* Gesture FIFO Threshold. This value is compared with the FIFO Level (i.e.
    the number of UDLR datasets) to generate an interrupt (if enabled).
    */
    uint8_t GFIFOTH : 2;

    uint8_t get() { return (GFIFOTH << 6) | (GEXMSK << 2) | GEXPERS; }
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	061b      	lsls	r3, r3, #24
 8005252:	0f9b      	lsrs	r3, r3, #30
 8005254:	b2db      	uxtb	r3, r3
 8005256:	019b      	lsls	r3, r3, #6
 8005258:	b25a      	sxtb	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	069b      	lsls	r3, r3, #26
 8005260:	0f1b      	lsrs	r3, r3, #28
 8005262:	b2db      	uxtb	r3, r3
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	b25b      	sxtb	r3, r3
 8005268:	4313      	orrs	r3, r2
 800526a:	b25a      	sxtb	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	079b      	lsls	r3, r3, #30
 8005272:	0f9b      	lsrs	r3, r3, #30
 8005274:	b2db      	uxtb	r3, r3
 8005276:	b25b      	sxtb	r3, r3
 8005278:	4313      	orrs	r3, r2
 800527a:	b25b      	sxtb	r3, r3
 800527c:	b2db      	uxtb	r3, r3
 800527e:	0018      	movs	r0, r3
 8005280:	46bd      	mov	sp, r7
 8005282:	b002      	add	sp, #8
 8005284:	bd80      	pop	{r7, pc}

08005286 <_ZN8APDS99606gconf23getEv>:

    // Gesture Gain Control. Sets the gain of the proximity receiver in gesture
    // mode.
    uint8_t GGAIN : 2;

    uint8_t get() { return (GGAIN << 5) | (GLDRIVE << 3) | GWTIME; }
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	065b      	lsls	r3, r3, #25
 8005294:	0f9b      	lsrs	r3, r3, #30
 8005296:	b2db      	uxtb	r3, r3
 8005298:	015b      	lsls	r3, r3, #5
 800529a:	b25a      	sxtb	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	06db      	lsls	r3, r3, #27
 80052a2:	0f9b      	lsrs	r3, r3, #30
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	b25b      	sxtb	r3, r3
 80052aa:	4313      	orrs	r3, r2
 80052ac:	b25a      	sxtb	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	075b      	lsls	r3, r3, #29
 80052b4:	0f5b      	lsrs	r3, r3, #29
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	b25b      	sxtb	r3, r3
 80052ba:	4313      	orrs	r3, r2
 80052bc:	b25b      	sxtb	r3, r3
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	0018      	movs	r0, r3
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b002      	add	sp, #8
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <_ZN8APDS99606gpulse3getEv>:

    // Gesture Pulse Length. Sets the LED_ON pulse width during a Gesture LDR
    // Pulse.
    uint8_t GPLEN : 2;

    uint8_t get() { return (GPLEN << 6) | GPULSE; }
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	061b      	lsls	r3, r3, #24
 80052d6:	0f9b      	lsrs	r3, r3, #30
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	019b      	lsls	r3, r3, #6
 80052dc:	b25a      	sxtb	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	069b      	lsls	r3, r3, #26
 80052e4:	0e9b      	lsrs	r3, r3, #26
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	b25b      	sxtb	r3, r3
 80052ea:	4313      	orrs	r3, r2
 80052ec:	b25b      	sxtb	r3, r3
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	0018      	movs	r0, r3
 80052f2:	46bd      	mov	sp, r7
 80052f4:	b002      	add	sp, #8
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <_ZN8APDS99606gconf33getEv>:
    /* Gesture Dimension Select. Selects which gesture photodiode pairs are
    enabled to gather results during gesture.
    */
    uint8_t GDIMS : 2;

    uint8_t get() { return GDIMS; }
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	079b      	lsls	r3, r3, #30
 8005306:	0f9b      	lsrs	r3, r3, #30
 8005308:	b2db      	uxtb	r3, r3
 800530a:	0018      	movs	r0, r3
 800530c:	46bd      	mov	sp, r7
 800530e:	b002      	add	sp, #8
 8005310:	bd80      	pop	{r7, pc}

08005312 <_ZN8APDS99606gconf43getEv>:
    /* Gesture interrupt enable. Gesture Interrupt Enable. When asserted, all
    gesture related interrupts are unmasked.
    */
    uint8_t GIEN : 2;

    uint8_t get() { return (GIEN << 1) | GMODE; }
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	075b      	lsls	r3, r3, #29
 8005320:	0f9b      	lsrs	r3, r3, #30
 8005322:	b2db      	uxtb	r3, r3
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	b25a      	sxtb	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	07db      	lsls	r3, r3, #31
 800532e:	0fdb      	lsrs	r3, r3, #31
 8005330:	b2db      	uxtb	r3, r3
 8005332:	b25b      	sxtb	r3, r3
 8005334:	4313      	orrs	r3, r2
 8005336:	b25b      	sxtb	r3, r3
 8005338:	b2db      	uxtb	r3, r3
 800533a:	0018      	movs	r0, r3
 800533c:	46bd      	mov	sp, r7
 800533e:	b002      	add	sp, #8
 8005340:	bd80      	pop	{r7, pc}

08005342 <_ZN8APDS99606enableEb>:
 *  @brief  Enables the device
 *          Disables the device (putting it in lower power sleep mode)
 *  @param  en
 *          Enable (True/False)
 */
void APDS9960::enable(bool en) {
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	000a      	movs	r2, r1
 800534c:	1cfb      	adds	r3, r7, #3
 800534e:	701a      	strb	r2, [r3, #0]
  _enable.PON = en;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	1cfa      	adds	r2, r7, #3
 8005354:	7812      	ldrb	r2, [r2, #0]
 8005356:	2101      	movs	r1, #1
 8005358:	0010      	movs	r0, r2
 800535a:	4008      	ands	r0, r1
 800535c:	7a9a      	ldrb	r2, [r3, #10]
 800535e:	2101      	movs	r1, #1
 8005360:	438a      	bics	r2, r1
 8005362:	1c11      	adds	r1, r2, #0
 8005364:	1c02      	adds	r2, r0, #0
 8005366:	430a      	orrs	r2, r1
 8005368:	729a      	strb	r2, [r3, #10]
  this->write8(APDS9960_ENABLE, _enable.get());
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	330a      	adds	r3, #10
 800536e:	0018      	movs	r0, r3
 8005370:	f7ff ff02 	bl	8005178 <_ZN8APDS99606enable3getEv>
 8005374:	0003      	movs	r3, r0
 8005376:	001a      	movs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2180      	movs	r1, #128	; 0x80
 800537c:	0018      	movs	r0, r3
 800537e:	f000 faaf 	bl	80058e0 <_ZN8APDS99606write8Ehh>
}
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	46bd      	mov	sp, r7
 8005386:	b002      	add	sp, #8
 8005388:	bd80      	pop	{r7, pc}

0800538a <_ZN8APDS99605beginEt15apds9960AGain_th>:
 *  @param  *theWire
 *          Wire object
 *  @return True if initialization was successful, otherwise false.
 */
bool APDS9960::begin(uint16_t iTimeMS, apds9960AGain_t aGain,
                                 uint8_t addr) {
 800538a:	b5b0      	push	{r4, r5, r7, lr}
 800538c:	b084      	sub	sp, #16
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	000c      	movs	r4, r1
 8005394:	0010      	movs	r0, r2
 8005396:	0019      	movs	r1, r3
 8005398:	1cbb      	adds	r3, r7, #2
 800539a:	1c22      	adds	r2, r4, #0
 800539c:	801a      	strh	r2, [r3, #0]
 800539e:	1c7b      	adds	r3, r7, #1
 80053a0:	1c02      	adds	r2, r0, #0
 80053a2:	701a      	strb	r2, [r3, #0]
 80053a4:	003b      	movs	r3, r7
 80053a6:	1c0a      	adds	r2, r1, #0
 80053a8:	701a      	strb	r2, [r3, #0]
  _i2caddr = addr;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	003a      	movs	r2, r7
 80053ae:	7812      	ldrb	r2, [r2, #0]
 80053b0:	701a      	strb	r2, [r3, #0]

  /* Make sure we're actually connected */
  uint8_t x = read8(APDS9960_ID);
 80053b2:	250e      	movs	r5, #14
 80053b4:	197c      	adds	r4, r7, r5
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2192      	movs	r1, #146	; 0x92
 80053ba:	0018      	movs	r0, r3
 80053bc:	f000 faa8 	bl	8005910 <_ZN8APDS99605read8Eh>
 80053c0:	0003      	movs	r3, r0
 80053c2:	7023      	strb	r3, [r4, #0]
  if (x != 0xAB) {
 80053c4:	197b      	adds	r3, r7, r5
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2bab      	cmp	r3, #171	; 0xab
 80053ca:	d001      	beq.n	80053d0 <_ZN8APDS99605beginEt15apds9960AGain_th+0x46>
    return false;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e081      	b.n	80054d4 <_ZN8APDS99605beginEt15apds9960AGain_th+0x14a>
  }

  /* Set default integration time and gain */
  setADCIntegrationTime(iTimeMS);
 80053d0:	1cbb      	adds	r3, r7, #2
 80053d2:	881a      	ldrh	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	0011      	movs	r1, r2
 80053d8:	0018      	movs	r0, r3
 80053da:	f000 f87f 	bl	80054dc <_ZN8APDS996021setADCIntegrationTimeEt>
  setADCGain(aGain);
 80053de:	1c7b      	adds	r3, r7, #1
 80053e0:	781a      	ldrb	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	0011      	movs	r1, r2
 80053e6:	0018      	movs	r0, r3
 80053e8:	f000 f8c0 	bl	800556c <_ZN8APDS996010setADCGainE15apds9960AGain_t>

  // disable everything to start
  enableGesture(false);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2100      	movs	r1, #0
 80053f0:	0018      	movs	r0, r3
 80053f2:	f000 f9a4 	bl	800573e <_ZN8APDS996013enableGestureEb>
  enableProximity(false);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2100      	movs	r1, #0
 80053fa:	0018      	movs	r0, r3
 80053fc:	f000 f8dd 	bl	80055ba <_ZN8APDS996015enableProximityEb>
  enableColor(false);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2100      	movs	r1, #0
 8005404:	0018      	movs	r0, r3
 8005406:	f000 f9f1 	bl	80057ec <_ZN8APDS996011enableColorEb>

  disableColorInterrupt();
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	0018      	movs	r0, r3
 800540e:	f000 fa40 	bl	8005892 <_ZN8APDS996021disableColorInterruptEv>
  disableProximityInterrupt();
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	0018      	movs	r0, r3
 8005416:	f000 f8f4 	bl	8005602 <_ZN8APDS996025disableProximityInterruptEv>
  clearInterrupt();
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	0018      	movs	r0, r3
 800541e:	f000 fa51 	bl	80058c4 <_ZN8APDS996014clearInterruptEv>

  /* Note: by default, the device is in power down mode on bootup */
  enable(false);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2100      	movs	r1, #0
 8005426:	0018      	movs	r0, r3
 8005428:	f7ff ff8b 	bl	8005342 <_ZN8APDS99606enableEb>
  HAL_Delay(10);
 800542c:	200a      	movs	r0, #10
 800542e:	f7fc fc25 	bl	8001c7c <HAL_Delay>
  enable(true);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2101      	movs	r1, #1
 8005436:	0018      	movs	r0, r3
 8005438:	f7ff ff83 	bl	8005342 <_ZN8APDS99606enableEb>
  HAL_Delay(10);
 800543c:	200a      	movs	r0, #10
 800543e:	f7fc fc1d 	bl	8001c7c <HAL_Delay>

  // default to all gesture dimensions
  setGestureDimensions(APDS9960_DIMENSIONS_ALL);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2100      	movs	r1, #0
 8005446:	0018      	movs	r0, r3
 8005448:	f000 f8f4 	bl	8005634 <_ZN8APDS996020setGestureDimensionsEh>
  setGestureFIFOThreshold(APDS9960_GFIFO_4);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2101      	movs	r1, #1
 8005450:	0018      	movs	r0, r3
 8005452:	f000 f916 	bl	8005682 <_ZN8APDS996023setGestureFIFOThresholdEh>
  setGestureGain(APDS9960_GGAIN_4);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2102      	movs	r1, #2
 800545a:	0018      	movs	r0, r3
 800545c:	f000 f936 	bl	80056cc <_ZN8APDS996014setGestureGainEh>
  setGestureProximityThreshold(50);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2132      	movs	r1, #50	; 0x32
 8005464:	0018      	movs	r0, r3
 8005466:	f000 f958 	bl	800571a <_ZN8APDS996028setGestureProximityThresholdEh>
  resetCounts();
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	0018      	movs	r0, r3
 800546e:	f000 f9a6 	bl	80057be <_ZN8APDS996011resetCountsEv>

  _gpulse.GPLEN = APDS9960_GPULSE_32US;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	7d1a      	ldrb	r2, [r3, #20]
 8005476:	2140      	movs	r1, #64	; 0x40
 8005478:	4249      	negs	r1, r1
 800547a:	430a      	orrs	r2, r1
 800547c:	751a      	strb	r2, [r3, #20]
  _gpulse.GPULSE = 9; // 10 pulses
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	7d1a      	ldrb	r2, [r3, #20]
 8005482:	213f      	movs	r1, #63	; 0x3f
 8005484:	438a      	bics	r2, r1
 8005486:	1c11      	adds	r1, r2, #0
 8005488:	2209      	movs	r2, #9
 800548a:	430a      	orrs	r2, r1
 800548c:	751a      	strb	r2, [r3, #20]
  this->write8(APDS9960_GPULSE, _gpulse.get());
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3314      	adds	r3, #20
 8005492:	0018      	movs	r0, r3
 8005494:	f7ff ff18 	bl	80052c8 <_ZN8APDS99606gpulse3getEv>
 8005498:	0003      	movs	r3, r0
 800549a:	001a      	movs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	21a6      	movs	r1, #166	; 0xa6
 80054a0:	0018      	movs	r0, r3
 80054a2:	f000 fa1d 	bl	80058e0 <_ZN8APDS99606write8Ehh>

  for (uint8_t i=0; i<len_color_filt; i++) {
 80054a6:	230f      	movs	r3, #15
 80054a8:	18fb      	adds	r3, r7, r3
 80054aa:	2200      	movs	r2, #0
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	230f      	movs	r3, #15
 80054b0:	18fb      	adds	r3, r7, r3
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d80c      	bhi.n	80054d2 <_ZN8APDS99605beginEt15apds9960AGain_th+0x148>
    color_filt[i] = UNKNOWN;
 80054b8:	210f      	movs	r1, #15
 80054ba:	187b      	adds	r3, r7, r1
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	18d3      	adds	r3, r2, r3
 80054c2:	22ff      	movs	r2, #255	; 0xff
 80054c4:	761a      	strb	r2, [r3, #24]
  for (uint8_t i=0; i<len_color_filt; i++) {
 80054c6:	187b      	adds	r3, r7, r1
 80054c8:	781a      	ldrb	r2, [r3, #0]
 80054ca:	187b      	adds	r3, r7, r1
 80054cc:	3201      	adds	r2, #1
 80054ce:	701a      	strb	r2, [r3, #0]
 80054d0:	e7ed      	b.n	80054ae <_ZN8APDS99605beginEt15apds9960AGain_th+0x124>
  }

  return true;
 80054d2:	2301      	movs	r3, #1
}
 80054d4:	0018      	movs	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b004      	add	sp, #16
 80054da:	bdb0      	pop	{r4, r5, r7, pc}

080054dc <_ZN8APDS996021setADCIntegrationTimeEt>:
/*!
 *  @brief  Sets the integration time for the ADC of the APDS9960, in millis
 *  @param  iTimeMS
 *          Integration time
 */
void APDS9960::setADCIntegrationTime(uint16_t iTimeMS) {
 80054dc:	b590      	push	{r4, r7, lr}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	000a      	movs	r2, r1
 80054e6:	1cbb      	adds	r3, r7, #2
 80054e8:	801a      	strh	r2, [r3, #0]
  float temp;

  // convert ms into 2.78ms increments
  temp = iTimeMS;
 80054ea:	1cbb      	adds	r3, r7, #2
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	0018      	movs	r0, r3
 80054f0:	f7fb fc0e 	bl	8000d10 <__aeabi_ui2f>
 80054f4:	1c03      	adds	r3, r0, #0
 80054f6:	60fb      	str	r3, [r7, #12]
  temp /= 2.78;
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f7fc fa5f 	bl	80019bc <__aeabi_f2d>
 80054fe:	4a18      	ldr	r2, [pc, #96]	; (8005560 <_ZN8APDS996021setADCIntegrationTimeEt+0x84>)
 8005500:	4b18      	ldr	r3, [pc, #96]	; (8005564 <_ZN8APDS996021setADCIntegrationTimeEt+0x88>)
 8005502:	f7fb fc45 	bl	8000d90 <__aeabi_ddiv>
 8005506:	0003      	movs	r3, r0
 8005508:	000c      	movs	r4, r1
 800550a:	0018      	movs	r0, r3
 800550c:	0021      	movs	r1, r4
 800550e:	f7fc faa7 	bl	8001a60 <__aeabi_d2f>
 8005512:	1c03      	adds	r3, r0, #0
 8005514:	60fb      	str	r3, [r7, #12]
  temp = 256 - temp;
 8005516:	68f9      	ldr	r1, [r7, #12]
 8005518:	2087      	movs	r0, #135	; 0x87
 800551a:	05c0      	lsls	r0, r0, #23
 800551c:	f7fb fa14 	bl	8000948 <__aeabi_fsub>
 8005520:	1c03      	adds	r3, r0, #0
 8005522:	60fb      	str	r3, [r7, #12]
  if (temp > 255)
 8005524:	4910      	ldr	r1, [pc, #64]	; (8005568 <_ZN8APDS996021setADCIntegrationTimeEt+0x8c>)
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f7fa fea0 	bl	800026c <__aeabi_fcmpgt>
 800552c:	1e03      	subs	r3, r0, #0
 800552e:	d001      	beq.n	8005534 <_ZN8APDS996021setADCIntegrationTimeEt+0x58>
    temp = 255;
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <_ZN8APDS996021setADCIntegrationTimeEt+0x8c>)
 8005532:	60fb      	str	r3, [r7, #12]
  if (temp < 0)
 8005534:	2100      	movs	r1, #0
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7fa fe84 	bl	8000244 <__aeabi_fcmplt>
 800553c:	1e03      	subs	r3, r0, #0
 800553e:	d001      	beq.n	8005544 <_ZN8APDS996021setADCIntegrationTimeEt+0x68>
    temp = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]

  /* Update the timing register */
  write8(APDS9960_ATIME, (uint8_t)temp);
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f7fa fec5 	bl	80002d4 <__aeabi_f2uiz>
 800554a:	0003      	movs	r3, r0
 800554c:	b2da      	uxtb	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2181      	movs	r1, #129	; 0x81
 8005552:	0018      	movs	r0, r3
 8005554:	f000 f9c4 	bl	80058e0 <_ZN8APDS99606write8Ehh>
}
 8005558:	46c0      	nop			; (mov r8, r8)
 800555a:	46bd      	mov	sp, r7
 800555c:	b005      	add	sp, #20
 800555e:	bd90      	pop	{r4, r7, pc}
 8005560:	a3d70a3d 	.word	0xa3d70a3d
 8005564:	40063d70 	.word	0x40063d70
 8005568:	437f0000 	.word	0x437f0000

0800556c <_ZN8APDS996010setADCGainE15apds9960AGain_t>:
 *  @brief  Adjusts the color/ALS gain on the APDS9960 (adjusts the sensitivity
 *          to light)
 *  @param  aGain
 *          Gain
 */
void APDS9960::setADCGain(apds9960AGain_t aGain) {
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	000a      	movs	r2, r1
 8005576:	1cfb      	adds	r3, r7, #3
 8005578:	701a      	strb	r2, [r3, #0]
  _control.AGAIN = aGain;
 800557a:	1cfb      	adds	r3, r7, #3
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2203      	movs	r2, #3
 8005580:	4013      	ands	r3, r2
 8005582:	b2da      	uxtb	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2103      	movs	r1, #3
 8005588:	400a      	ands	r2, r1
 800558a:	0010      	movs	r0, r2
 800558c:	7b9a      	ldrb	r2, [r3, #14]
 800558e:	2103      	movs	r1, #3
 8005590:	438a      	bics	r2, r1
 8005592:	1c11      	adds	r1, r2, #0
 8005594:	1c02      	adds	r2, r0, #0
 8005596:	430a      	orrs	r2, r1
 8005598:	739a      	strb	r2, [r3, #14]

  /* Update the timing register */
  write8(APDS9960_CONTROL, _control.get());
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	330e      	adds	r3, #14
 800559e:	0018      	movs	r0, r3
 80055a0:	f7ff fe2f 	bl	8005202 <_ZN8APDS99607control3getEv>
 80055a4:	0003      	movs	r3, r0
 80055a6:	001a      	movs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	218f      	movs	r1, #143	; 0x8f
 80055ac:	0018      	movs	r0, r3
 80055ae:	f000 f997 	bl	80058e0 <_ZN8APDS99606write8Ehh>
}
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	46bd      	mov	sp, r7
 80055b6:	b002      	add	sp, #8
 80055b8:	bd80      	pop	{r7, pc}

080055ba <_ZN8APDS996015enableProximityEb>:
/*!
 *  @brief  Enable proximity readings on APDS9960
 *  @param  en
 *          Enable (True/False)
 */
void APDS9960::enableProximity(bool en) {
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	000a      	movs	r2, r1
 80055c4:	1cfb      	adds	r3, r7, #3
 80055c6:	701a      	strb	r2, [r3, #0]
  _enable.PEN = en;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	1cfa      	adds	r2, r7, #3
 80055cc:	7812      	ldrb	r2, [r2, #0]
 80055ce:	2101      	movs	r1, #1
 80055d0:	400a      	ands	r2, r1
 80055d2:	0090      	lsls	r0, r2, #2
 80055d4:	7a9a      	ldrb	r2, [r3, #10]
 80055d6:	2104      	movs	r1, #4
 80055d8:	438a      	bics	r2, r1
 80055da:	1c11      	adds	r1, r2, #0
 80055dc:	1c02      	adds	r2, r0, #0
 80055de:	430a      	orrs	r2, r1
 80055e0:	729a      	strb	r2, [r3, #10]

  write8(APDS9960_ENABLE, _enable.get());
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	330a      	adds	r3, #10
 80055e6:	0018      	movs	r0, r3
 80055e8:	f7ff fdc6 	bl	8005178 <_ZN8APDS99606enable3getEv>
 80055ec:	0003      	movs	r3, r0
 80055ee:	001a      	movs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2180      	movs	r1, #128	; 0x80
 80055f4:	0018      	movs	r0, r3
 80055f6:	f000 f973 	bl	80058e0 <_ZN8APDS99606write8Ehh>
}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b002      	add	sp, #8
 8005600:	bd80      	pop	{r7, pc}

08005602 <_ZN8APDS996025disableProximityInterruptEv>:
}

/*!
 *  @brief  Disable proximity interrupts
 */
void APDS9960::disableProximityInterrupt() {
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  _enable.PIEN = 0;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	7a9a      	ldrb	r2, [r3, #10]
 800560e:	2120      	movs	r1, #32
 8005610:	438a      	bics	r2, r1
 8005612:	729a      	strb	r2, [r3, #10]
  write8(APDS9960_ENABLE, _enable.get());
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	330a      	adds	r3, #10
 8005618:	0018      	movs	r0, r3
 800561a:	f7ff fdad 	bl	8005178 <_ZN8APDS99606enable3getEv>
 800561e:	0003      	movs	r3, r0
 8005620:	001a      	movs	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2180      	movs	r1, #128	; 0x80
 8005626:	0018      	movs	r0, r3
 8005628:	f000 f95a 	bl	80058e0 <_ZN8APDS99606write8Ehh>
}
 800562c:	46c0      	nop			; (mov r8, r8)
 800562e:	46bd      	mov	sp, r7
 8005630:	b002      	add	sp, #8
 8005632:	bd80      	pop	{r7, pc}

08005634 <_ZN8APDS996020setGestureDimensionsEh>:
 *  @brief  Sets gesture dimensions
 *  @param  dims
 *          Dimensions (APDS9960_DIMENSIONS_ALL, APDS9960_DIMENSIONS_UP_DOWM,
 *          APDS9960_DIMENSIONS_UP_DOWN, APGS9960_DIMENSIONS_LEFT_RIGHT)
 */
void APDS9960::setGestureDimensions(uint8_t dims) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	000a      	movs	r2, r1
 800563e:	1cfb      	adds	r3, r7, #3
 8005640:	701a      	strb	r2, [r3, #0]
  _gconf3.GDIMS = dims;
 8005642:	1cfb      	adds	r3, r7, #3
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2203      	movs	r2, #3
 8005648:	4013      	ands	r3, r2
 800564a:	b2da      	uxtb	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2103      	movs	r1, #3
 8005650:	400a      	ands	r2, r1
 8005652:	0010      	movs	r0, r2
 8005654:	7d5a      	ldrb	r2, [r3, #21]
 8005656:	2103      	movs	r1, #3
 8005658:	438a      	bics	r2, r1
 800565a:	1c11      	adds	r1, r2, #0
 800565c:	1c02      	adds	r2, r0, #0
 800565e:	430a      	orrs	r2, r1
 8005660:	755a      	strb	r2, [r3, #21]
  this->write8(APDS9960_GCONF3, _gconf3.get());
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3315      	adds	r3, #21
 8005666:	0018      	movs	r0, r3
 8005668:	f7ff fe46 	bl	80052f8 <_ZN8APDS99606gconf33getEv>
 800566c:	0003      	movs	r3, r0
 800566e:	001a      	movs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	21aa      	movs	r1, #170	; 0xaa
 8005674:	0018      	movs	r0, r3
 8005676:	f000 f933 	bl	80058e0 <_ZN8APDS99606write8Ehh>
}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	b002      	add	sp, #8
 8005680:	bd80      	pop	{r7, pc}

08005682 <_ZN8APDS996023setGestureFIFOThresholdEh>:
 *  @brief  Sets gesture FIFO Threshold
 *  @param  thresh
 *          Threshold (APDS9960_GFIFO_1, APDS9960_GFIFO_4, APDS9960_GFIFO_8,
 *          APDS9960_GFIFO_16)
 */
void APDS9960::setGestureFIFOThreshold(uint8_t thresh) {
 8005682:	b580      	push	{r7, lr}
 8005684:	b082      	sub	sp, #8
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	000a      	movs	r2, r1
 800568c:	1cfb      	adds	r3, r7, #3
 800568e:	701a      	strb	r2, [r3, #0]
  _gconf1.GFIFOTH = thresh;
 8005690:	1cfb      	adds	r3, r7, #3
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2203      	movs	r2, #3
 8005696:	4013      	ands	r3, r2
 8005698:	b2da      	uxtb	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	0190      	lsls	r0, r2, #6
 800569e:	7c9a      	ldrb	r2, [r3, #18]
 80056a0:	213f      	movs	r1, #63	; 0x3f
 80056a2:	400a      	ands	r2, r1
 80056a4:	1c11      	adds	r1, r2, #0
 80056a6:	1c02      	adds	r2, r0, #0
 80056a8:	430a      	orrs	r2, r1
 80056aa:	749a      	strb	r2, [r3, #18]
  this->write8(APDS9960_GCONF1, _gconf1.get());
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3312      	adds	r3, #18
 80056b0:	0018      	movs	r0, r3
 80056b2:	f7ff fdc7 	bl	8005244 <_ZN8APDS99606gconf13getEv>
 80056b6:	0003      	movs	r3, r0
 80056b8:	001a      	movs	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	21a2      	movs	r1, #162	; 0xa2
 80056be:	0018      	movs	r0, r3
 80056c0:	f000 f90e 	bl	80058e0 <_ZN8APDS99606write8Ehh>
}
 80056c4:	46c0      	nop			; (mov r8, r8)
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b002      	add	sp, #8
 80056ca:	bd80      	pop	{r7, pc}

080056cc <_ZN8APDS996014setGestureGainEh>:
 *  @brief  Sets gesture sensor gain
 *  @param  gain
 *          Gain (APDS9960_GAIN_1, APDS9960_GAIN_2, APDS9960_GAIN_4,
 *          APDS9960_GAIN_8)
 */
void APDS9960::setGestureGain(uint8_t gain) {
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	000a      	movs	r2, r1
 80056d6:	1cfb      	adds	r3, r7, #3
 80056d8:	701a      	strb	r2, [r3, #0]
  _gconf2.GGAIN = gain;
 80056da:	1cfb      	adds	r3, r7, #3
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2203      	movs	r2, #3
 80056e0:	4013      	ands	r3, r2
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2103      	movs	r1, #3
 80056e8:	400a      	ands	r2, r1
 80056ea:	0150      	lsls	r0, r2, #5
 80056ec:	7cda      	ldrb	r2, [r3, #19]
 80056ee:	2160      	movs	r1, #96	; 0x60
 80056f0:	438a      	bics	r2, r1
 80056f2:	1c11      	adds	r1, r2, #0
 80056f4:	1c02      	adds	r2, r0, #0
 80056f6:	430a      	orrs	r2, r1
 80056f8:	74da      	strb	r2, [r3, #19]
  this->write8(APDS9960_GCONF2, _gconf2.get());
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3313      	adds	r3, #19
 80056fe:	0018      	movs	r0, r3
 8005700:	f7ff fdc1 	bl	8005286 <_ZN8APDS99606gconf23getEv>
 8005704:	0003      	movs	r3, r0
 8005706:	001a      	movs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	21a3      	movs	r1, #163	; 0xa3
 800570c:	0018      	movs	r0, r3
 800570e:	f000 f8e7 	bl	80058e0 <_ZN8APDS99606write8Ehh>
}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	46bd      	mov	sp, r7
 8005716:	b002      	add	sp, #8
 8005718:	bd80      	pop	{r7, pc}

0800571a <_ZN8APDS996028setGestureProximityThresholdEh>:
/*!
 *  @brief  Sets gesture sensor threshold
 *  @param  thresh
 *          Threshold
 */
void APDS9960::setGestureProximityThreshold(uint8_t thresh) {
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	000a      	movs	r2, r1
 8005724:	1cfb      	adds	r3, r7, #3
 8005726:	701a      	strb	r2, [r3, #0]
  this->write8(APDS9960_GPENTH, thresh);
 8005728:	1cfb      	adds	r3, r7, #3
 800572a:	781a      	ldrb	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	21a0      	movs	r1, #160	; 0xa0
 8005730:	0018      	movs	r0, r3
 8005732:	f000 f8d5 	bl	80058e0 <_ZN8APDS99606write8Ehh>
}
 8005736:	46c0      	nop			; (mov r8, r8)
 8005738:	46bd      	mov	sp, r7
 800573a:	b002      	add	sp, #8
 800573c:	bd80      	pop	{r7, pc}

0800573e <_ZN8APDS996013enableGestureEb>:
/*!
 *  @brief  Enable gesture readings on APDS9960
 *  @param  en
 *          Enable (True/False)
 */
void APDS9960::enableGesture(bool en) {
 800573e:	b580      	push	{r7, lr}
 8005740:	b082      	sub	sp, #8
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	000a      	movs	r2, r1
 8005748:	1cfb      	adds	r3, r7, #3
 800574a:	701a      	strb	r2, [r3, #0]
  if (!en) {
 800574c:	1cfb      	adds	r3, r7, #3
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2201      	movs	r2, #1
 8005752:	4053      	eors	r3, r2
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d010      	beq.n	800577c <_ZN8APDS996013enableGestureEb+0x3e>
    _gconf4.GMODE = 0;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	7d9a      	ldrb	r2, [r3, #22]
 800575e:	2101      	movs	r1, #1
 8005760:	438a      	bics	r2, r1
 8005762:	759a      	strb	r2, [r3, #22]
    write8(APDS9960_GCONF4, _gconf4.get());
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3316      	adds	r3, #22
 8005768:	0018      	movs	r0, r3
 800576a:	f7ff fdd2 	bl	8005312 <_ZN8APDS99606gconf43getEv>
 800576e:	0003      	movs	r3, r0
 8005770:	001a      	movs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	21ab      	movs	r1, #171	; 0xab
 8005776:	0018      	movs	r0, r3
 8005778:	f000 f8b2 	bl	80058e0 <_ZN8APDS99606write8Ehh>
  }
  _enable.GEN = en;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	1cfa      	adds	r2, r7, #3
 8005780:	7812      	ldrb	r2, [r2, #0]
 8005782:	2101      	movs	r1, #1
 8005784:	400a      	ands	r2, r1
 8005786:	0190      	lsls	r0, r2, #6
 8005788:	7a9a      	ldrb	r2, [r3, #10]
 800578a:	2140      	movs	r1, #64	; 0x40
 800578c:	438a      	bics	r2, r1
 800578e:	1c11      	adds	r1, r2, #0
 8005790:	1c02      	adds	r2, r0, #0
 8005792:	430a      	orrs	r2, r1
 8005794:	729a      	strb	r2, [r3, #10]
  write8(APDS9960_ENABLE, _enable.get());
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	330a      	adds	r3, #10
 800579a:	0018      	movs	r0, r3
 800579c:	f7ff fcec 	bl	8005178 <_ZN8APDS99606enable3getEv>
 80057a0:	0003      	movs	r3, r0
 80057a2:	001a      	movs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2180      	movs	r1, #128	; 0x80
 80057a8:	0018      	movs	r0, r3
 80057aa:	f000 f899 	bl	80058e0 <_ZN8APDS99606write8Ehh>
  resetCounts();
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	0018      	movs	r0, r3
 80057b2:	f000 f804 	bl	80057be <_ZN8APDS996011resetCountsEv>
}
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	46bd      	mov	sp, r7
 80057ba:	b002      	add	sp, #8
 80057bc:	bd80      	pop	{r7, pc}

080057be <_ZN8APDS996011resetCountsEv>:

/*!
 *  @brief  Resets gesture counts
 */
void APDS9960::resetCounts() {
 80057be:	b580      	push	{r7, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  gestCnt = 0;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	715a      	strb	r2, [r3, #5]
  UCount = 0;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	719a      	strb	r2, [r3, #6]
  DCount = 0;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	71da      	strb	r2, [r3, #7]
  LCount = 0;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	721a      	strb	r2, [r3, #8]
  RCount = 0;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	725a      	strb	r2, [r3, #9]
}
 80057e4:	46c0      	nop			; (mov r8, r8)
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b002      	add	sp, #8
 80057ea:	bd80      	pop	{r7, pc}

080057ec <_ZN8APDS996011enableColorEb>:
/*!
 *  @brief  Enable proximity readings on APDS9960
 *  @param  en
 *          Enable (True/False)
 */
void APDS9960::enableColor(bool en) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	000a      	movs	r2, r1
 80057f6:	1cfb      	adds	r3, r7, #3
 80057f8:	701a      	strb	r2, [r3, #0]
  _enable.AEN = en;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	1cfa      	adds	r2, r7, #3
 80057fe:	7812      	ldrb	r2, [r2, #0]
 8005800:	2101      	movs	r1, #1
 8005802:	400a      	ands	r2, r1
 8005804:	1890      	adds	r0, r2, r2
 8005806:	7a9a      	ldrb	r2, [r3, #10]
 8005808:	2102      	movs	r1, #2
 800580a:	438a      	bics	r2, r1
 800580c:	1c11      	adds	r1, r2, #0
 800580e:	1c02      	adds	r2, r0, #0
 8005810:	430a      	orrs	r2, r1
 8005812:	729a      	strb	r2, [r3, #10]
  write8(APDS9960_ENABLE, _enable.get());
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	330a      	adds	r3, #10
 8005818:	0018      	movs	r0, r3
 800581a:	f7ff fcad 	bl	8005178 <_ZN8APDS99606enable3getEv>
 800581e:	0003      	movs	r3, r0
 8005820:	001a      	movs	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2180      	movs	r1, #128	; 0x80
 8005826:	0018      	movs	r0, r3
 8005828:	f000 f85a 	bl	80058e0 <_ZN8APDS99606write8Ehh>
}
 800582c:	46c0      	nop			; (mov r8, r8)
 800582e:	46bd      	mov	sp, r7
 8005830:	b002      	add	sp, #8
 8005832:	bd80      	pop	{r7, pc}

08005834 <_ZN8APDS996012getColorDataEPtS0_S0_S0_>:
 *          Blue value
 *  @param  *c
 *          Clear channel value
 */
void APDS9960::getColorData(uint16_t *r, uint16_t *g, uint16_t *b,
                                     uint16_t *c) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]

  *c = read16R(APDS9960_CDATAL);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2194      	movs	r1, #148	; 0x94
 8005846:	0018      	movs	r0, r3
 8005848:	f000 f877 	bl	800593a <_ZN8APDS99607read16REh>
 800584c:	0003      	movs	r3, r0
 800584e:	001a      	movs	r2, r3
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	801a      	strh	r2, [r3, #0]
  *r = read16R(APDS9960_RDATAL);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2196      	movs	r1, #150	; 0x96
 8005858:	0018      	movs	r0, r3
 800585a:	f000 f86e 	bl	800593a <_ZN8APDS99607read16REh>
 800585e:	0003      	movs	r3, r0
 8005860:	001a      	movs	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	801a      	strh	r2, [r3, #0]
  *g = read16R(APDS9960_GDATAL);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2198      	movs	r1, #152	; 0x98
 800586a:	0018      	movs	r0, r3
 800586c:	f000 f865 	bl	800593a <_ZN8APDS99607read16REh>
 8005870:	0003      	movs	r3, r0
 8005872:	001a      	movs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	801a      	strh	r2, [r3, #0]
  *b = read16R(APDS9960_BDATAL);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	219a      	movs	r1, #154	; 0x9a
 800587c:	0018      	movs	r0, r3
 800587e:	f000 f85c 	bl	800593a <_ZN8APDS99607read16REh>
 8005882:	0003      	movs	r3, r0
 8005884:	001a      	movs	r2, r3
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	801a      	strh	r2, [r3, #0]
}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	46bd      	mov	sp, r7
 800588e:	b004      	add	sp, #16
 8005890:	bd80      	pop	{r7, pc}

08005892 <_ZN8APDS996021disableColorInterruptEv>:
}

/*!
 *  @brief  Disables color interrupt
 */
void APDS9960::disableColorInterrupt() {
 8005892:	b580      	push	{r7, lr}
 8005894:	b082      	sub	sp, #8
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  _enable.AIEN = 0;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	7a9a      	ldrb	r2, [r3, #10]
 800589e:	2110      	movs	r1, #16
 80058a0:	438a      	bics	r2, r1
 80058a2:	729a      	strb	r2, [r3, #10]
  write8(APDS9960_ENABLE, _enable.get());
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	330a      	adds	r3, #10
 80058a8:	0018      	movs	r0, r3
 80058aa:	f7ff fc65 	bl	8005178 <_ZN8APDS99606enable3getEv>
 80058ae:	0003      	movs	r3, r0
 80058b0:	001a      	movs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2180      	movs	r1, #128	; 0x80
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 f812 	bl	80058e0 <_ZN8APDS99606write8Ehh>
}
 80058bc:	46c0      	nop			; (mov r8, r8)
 80058be:	46bd      	mov	sp, r7
 80058c0:	b002      	add	sp, #8
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <_ZN8APDS996014clearInterruptEv>:

/*!
 *  @brief  Clears interrupt
 */
void APDS9960::clearInterrupt() {
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  this->write(APDS9960_AICLEAR, 0, 1);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	2301      	movs	r3, #1
 80058d0:	2200      	movs	r2, #0
 80058d2:	21e7      	movs	r1, #231	; 0xe7
 80058d4:	f000 f89e 	bl	8005a14 <_ZN8APDS99605writeEhhh>
}
 80058d8:	46c0      	nop			; (mov r8, r8)
 80058da:	46bd      	mov	sp, r7
 80058dc:	b002      	add	sp, #8
 80058de:	bd80      	pop	{r7, pc}

080058e0 <_ZN8APDS99606write8Ehh>:
 *  @param  reg
 *          Register to write to
 *  @param  value
 *          Value to write
 */
void APDS9960::write8(uint8_t reg, uint8_t value) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	0008      	movs	r0, r1
 80058ea:	0011      	movs	r1, r2
 80058ec:	1cfb      	adds	r3, r7, #3
 80058ee:	1c02      	adds	r2, r0, #0
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	1cbb      	adds	r3, r7, #2
 80058f4:	1c0a      	adds	r2, r1, #0
 80058f6:	701a      	strb	r2, [r3, #0]
  this->write(reg, value, 2);
 80058f8:	1cbb      	adds	r3, r7, #2
 80058fa:	781a      	ldrb	r2, [r3, #0]
 80058fc:	1cfb      	adds	r3, r7, #3
 80058fe:	7819      	ldrb	r1, [r3, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	2302      	movs	r3, #2
 8005904:	f000 f886 	bl	8005a14 <_ZN8APDS99605writeEhhh>
}
 8005908:	46c0      	nop			; (mov r8, r8)
 800590a:	46bd      	mov	sp, r7
 800590c:	b002      	add	sp, #8
 800590e:	bd80      	pop	{r7, pc}

08005910 <_ZN8APDS99605read8Eh>:
 *  @brief  Reads 8 bits from specified register
 *  @param  reg
 *          Register to write to
 *  @return Value in register
 */
uint8_t APDS9960::read8(uint8_t reg) {
 8005910:	b590      	push	{r4, r7, lr}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	000a      	movs	r2, r1
 800591a:	1cfb      	adds	r3, r7, #3
 800591c:	701a      	strb	r2, [r3, #0]
  uint8_t ret;
  this->read(reg, &ret, 1);
 800591e:	240f      	movs	r4, #15
 8005920:	193a      	adds	r2, r7, r4
 8005922:	1cfb      	adds	r3, r7, #3
 8005924:	7819      	ldrb	r1, [r3, #0]
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	2301      	movs	r3, #1
 800592a:	f000 f825 	bl	8005978 <_ZN8APDS99604readEhPhh>

  return ret;
 800592e:	193b      	adds	r3, r7, r4
 8005930:	781b      	ldrb	r3, [r3, #0]
}
 8005932:	0018      	movs	r0, r3
 8005934:	46bd      	mov	sp, r7
 8005936:	b005      	add	sp, #20
 8005938:	bd90      	pop	{r4, r7, pc}

0800593a <_ZN8APDS99607read16REh>:
 *  @brief  Reads 16 bites from specified register
 *  @param  reg
 *          Register to write to
 *  @return Value in register
 */
uint16_t APDS9960::read16R(uint8_t reg) {
 800593a:	b590      	push	{r4, r7, lr}
 800593c:	b085      	sub	sp, #20
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	000a      	movs	r2, r1
 8005944:	1cfb      	adds	r3, r7, #3
 8005946:	701a      	strb	r2, [r3, #0]
  uint8_t ret[2];
  this->read(reg, ret, 2);
 8005948:	210c      	movs	r1, #12
 800594a:	000c      	movs	r4, r1
 800594c:	187a      	adds	r2, r7, r1
 800594e:	1cfb      	adds	r3, r7, #3
 8005950:	7819      	ldrb	r1, [r3, #0]
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	2302      	movs	r3, #2
 8005956:	f000 f80f 	bl	8005978 <_ZN8APDS99604readEhPhh>

  return (ret[1] << 8) | ret[0];
 800595a:	0021      	movs	r1, r4
 800595c:	187b      	adds	r3, r7, r1
 800595e:	785b      	ldrb	r3, [r3, #1]
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	b21a      	sxth	r2, r3
 8005964:	187b      	adds	r3, r7, r1
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	b21b      	sxth	r3, r3
 800596a:	4313      	orrs	r3, r2
 800596c:	b21b      	sxth	r3, r3
 800596e:	b29b      	uxth	r3, r3
}
 8005970:	0018      	movs	r0, r3
 8005972:	46bd      	mov	sp, r7
 8005974:	b005      	add	sp, #20
 8005976:	bd90      	pop	{r4, r7, pc}

08005978 <_ZN8APDS99604readEhPhh>:
 *          Buffer
 *  @param  num
 *          Number of bytes
 *  @return Position after reading
 */
void APDS9960::read(uint8_t reg, uint8_t *buf, uint8_t num) {
 8005978:	b5b0      	push	{r4, r5, r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	0008      	movs	r0, r1
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	0019      	movs	r1, r3
 8005986:	240b      	movs	r4, #11
 8005988:	193b      	adds	r3, r7, r4
 800598a:	1c02      	adds	r2, r0, #0
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	250a      	movs	r5, #10
 8005990:	197b      	adds	r3, r7, r5
 8005992:	1c0a      	adds	r2, r1, #0
 8005994:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, APDS9960_ADDRESS, &reg, 1, HAL_MAX_DELAY);
 8005996:	193a      	adds	r2, r7, r4
 8005998:	481d      	ldr	r0, [pc, #116]	; (8005a10 <_ZN8APDS99604readEhPhh+0x98>)
 800599a:	2301      	movs	r3, #1
 800599c:	425b      	negs	r3, r3
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	2301      	movs	r3, #1
 80059a2:	2172      	movs	r1, #114	; 0x72
 80059a4:	f7fc fd0a 	bl	80023bc <HAL_I2C_Master_Transmit>
    HAL_Delay(5);
 80059a8:	2005      	movs	r0, #5
 80059aa:	f7fc f967 	bl	8001c7c <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, APDS9960_ADDRESS, &tempbuf[0], num, HAL_MAX_DELAY);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	197b      	adds	r3, r7, r5
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	b299      	uxth	r1, r3
 80059b8:	4815      	ldr	r0, [pc, #84]	; (8005a10 <_ZN8APDS99604readEhPhh+0x98>)
 80059ba:	2301      	movs	r3, #1
 80059bc:	425b      	negs	r3, r3
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	000b      	movs	r3, r1
 80059c2:	2172      	movs	r1, #114	; 0x72
 80059c4:	f7fc fe02 	bl	80025cc <HAL_I2C_Master_Receive>
    for (uint8_t i=0; i<num; i++) {
 80059c8:	2317      	movs	r3, #23
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	2317      	movs	r3, #23
 80059d2:	18fa      	adds	r2, r7, r3
 80059d4:	230a      	movs	r3, #10
 80059d6:	18fb      	adds	r3, r7, r3
 80059d8:	7812      	ldrb	r2, [r2, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d210      	bcs.n	8005a02 <_ZN8APDS99604readEhPhh+0x8a>
      buf[i] = tempbuf[i];
 80059e0:	2017      	movs	r0, #23
 80059e2:	183b      	adds	r3, r7, r0
 80059e4:	781a      	ldrb	r2, [r3, #0]
 80059e6:	183b      	adds	r3, r7, r0
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	18cb      	adds	r3, r1, r3
 80059ee:	68f9      	ldr	r1, [r7, #12]
 80059f0:	188a      	adds	r2, r1, r2
 80059f2:	7852      	ldrb	r2, [r2, #1]
 80059f4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i<num; i++) {
 80059f6:	183b      	adds	r3, r7, r0
 80059f8:	781a      	ldrb	r2, [r3, #0]
 80059fa:	183b      	adds	r3, r7, r0
 80059fc:	3201      	adds	r2, #1
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	e7e6      	b.n	80059d0 <_ZN8APDS99604readEhPhh+0x58>
    }
    HAL_Delay(5);
 8005a02:	2005      	movs	r0, #5
 8005a04:	f7fc f93a 	bl	8001c7c <HAL_Delay>
}
 8005a08:	46c0      	nop			; (mov r8, r8)
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	b006      	add	sp, #24
 8005a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8005a10:	200000b4 	.word	0x200000b4

08005a14 <_ZN8APDS99605writeEhhh>:
 *  @param  *buf
 *          Buffer
 *  @param  num
 *          Number of bytes
 */
void APDS9960::write(uint8_t reg, uint8_t value, uint8_t num) {
 8005a14:	b590      	push	{r4, r7, lr}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	000c      	movs	r4, r1
 8005a1e:	0010      	movs	r0, r2
 8005a20:	0019      	movs	r1, r3
 8005a22:	1cfb      	adds	r3, r7, #3
 8005a24:	1c22      	adds	r2, r4, #0
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	1cbb      	adds	r3, r7, #2
 8005a2a:	1c02      	adds	r2, r0, #0
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	1c7b      	adds	r3, r7, #1
 8005a30:	1c0a      	adds	r2, r1, #0
 8005a32:	701a      	strb	r2, [r3, #0]
  uint8_t writedata[2] = {reg, value};
 8005a34:	200c      	movs	r0, #12
 8005a36:	183b      	adds	r3, r7, r0
 8005a38:	1cfa      	adds	r2, r7, #3
 8005a3a:	7812      	ldrb	r2, [r2, #0]
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	183b      	adds	r3, r7, r0
 8005a40:	1cba      	adds	r2, r7, #2
 8005a42:	7812      	ldrb	r2, [r2, #0]
 8005a44:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, APDS9960_ADDRESS, &writedata[0], num, HAL_MAX_DELAY);
 8005a46:	1c7b      	adds	r3, r7, #1
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	b299      	uxth	r1, r3
 8005a4c:	183a      	adds	r2, r7, r0
 8005a4e:	4806      	ldr	r0, [pc, #24]	; (8005a68 <_ZN8APDS99605writeEhhh+0x54>)
 8005a50:	2301      	movs	r3, #1
 8005a52:	425b      	negs	r3, r3
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	000b      	movs	r3, r1
 8005a58:	2172      	movs	r1, #114	; 0x72
 8005a5a:	f7fc fcaf 	bl	80023bc <HAL_I2C_Master_Transmit>
}
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	46bd      	mov	sp, r7
 8005a62:	b005      	add	sp, #20
 8005a64:	bd90      	pop	{r4, r7, pc}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	200000b4 	.word	0x200000b4

08005a6c <_ZN8APDS99609colorSortEtttmh>:

color_t APDS9960::colorSort(uint16_t r, uint16_t g, uint16_t b, uint32_t color_total, uint8_t color_to_find) {
 8005a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a6e:	b08b      	sub	sp, #44	; 0x2c
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	000c      	movs	r4, r1
 8005a76:	0010      	movs	r0, r2
 8005a78:	0019      	movs	r1, r3
 8005a7a:	250a      	movs	r5, #10
 8005a7c:	197b      	adds	r3, r7, r5
 8005a7e:	1c22      	adds	r2, r4, #0
 8005a80:	801a      	strh	r2, [r3, #0]
 8005a82:	2608      	movs	r6, #8
 8005a84:	19bb      	adds	r3, r7, r6
 8005a86:	1c02      	adds	r2, r0, #0
 8005a88:	801a      	strh	r2, [r3, #0]
 8005a8a:	1dbb      	adds	r3, r7, #6
 8005a8c:	1c0a      	adds	r2, r1, #0
 8005a8e:	801a      	strh	r2, [r3, #0]
  uint32_t rgb_total = r + g + b;
 8005a90:	0029      	movs	r1, r5
 8005a92:	187b      	adds	r3, r7, r1
 8005a94:	881a      	ldrh	r2, [r3, #0]
 8005a96:	19bb      	adds	r3, r7, r6
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	18d2      	adds	r2, r2, r3
 8005a9c:	1dbb      	adds	r3, r7, #6
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	18d3      	adds	r3, r2, r3
 8005aa2:	613b      	str	r3, [r7, #16]
  float rPer = 1.0*r/rgb_total*100.0;
 8005aa4:	187b      	adds	r3, r7, r1
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f7fb ff1b 	bl	80018e4 <__aeabi_i2d>
 8005aae:	0004      	movs	r4, r0
 8005ab0:	000d      	movs	r5, r1
 8005ab2:	6938      	ldr	r0, [r7, #16]
 8005ab4:	f7fb ff50 	bl	8001958 <__aeabi_ui2d>
 8005ab8:	0002      	movs	r2, r0
 8005aba:	000b      	movs	r3, r1
 8005abc:	0020      	movs	r0, r4
 8005abe:	0029      	movs	r1, r5
 8005ac0:	f7fb f966 	bl	8000d90 <__aeabi_ddiv>
 8005ac4:	0003      	movs	r3, r0
 8005ac6:	000c      	movs	r4, r1
 8005ac8:	0018      	movs	r0, r3
 8005aca:	0021      	movs	r1, r4
 8005acc:	2200      	movs	r2, #0
 8005ace:	4bd1      	ldr	r3, [pc, #836]	; (8005e14 <_ZN8APDS99609colorSortEtttmh+0x3a8>)
 8005ad0:	f7fb fc60 	bl	8001394 <__aeabi_dmul>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	000c      	movs	r4, r1
 8005ad8:	0018      	movs	r0, r3
 8005ada:	0021      	movs	r1, r4
 8005adc:	f7fb ffc0 	bl	8001a60 <__aeabi_d2f>
 8005ae0:	1c03      	adds	r3, r0, #0
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
  float gPer = 1.0*g/rgb_total*100.0;
 8005ae4:	19bb      	adds	r3, r7, r6
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f7fb fefb 	bl	80018e4 <__aeabi_i2d>
 8005aee:	0004      	movs	r4, r0
 8005af0:	000d      	movs	r5, r1
 8005af2:	6938      	ldr	r0, [r7, #16]
 8005af4:	f7fb ff30 	bl	8001958 <__aeabi_ui2d>
 8005af8:	0002      	movs	r2, r0
 8005afa:	000b      	movs	r3, r1
 8005afc:	0020      	movs	r0, r4
 8005afe:	0029      	movs	r1, r5
 8005b00:	f7fb f946 	bl	8000d90 <__aeabi_ddiv>
 8005b04:	0003      	movs	r3, r0
 8005b06:	000c      	movs	r4, r1
 8005b08:	0018      	movs	r0, r3
 8005b0a:	0021      	movs	r1, r4
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	4bc1      	ldr	r3, [pc, #772]	; (8005e14 <_ZN8APDS99609colorSortEtttmh+0x3a8>)
 8005b10:	f7fb fc40 	bl	8001394 <__aeabi_dmul>
 8005b14:	0003      	movs	r3, r0
 8005b16:	000c      	movs	r4, r1
 8005b18:	0018      	movs	r0, r3
 8005b1a:	0021      	movs	r1, r4
 8005b1c:	f7fb ffa0 	bl	8001a60 <__aeabi_d2f>
 8005b20:	1c03      	adds	r3, r0, #0
 8005b22:	623b      	str	r3, [r7, #32]
  float bPer = 1.0*b/rgb_total*100.0;
 8005b24:	1dbb      	adds	r3, r7, #6
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f7fb fedb 	bl	80018e4 <__aeabi_i2d>
 8005b2e:	0004      	movs	r4, r0
 8005b30:	000d      	movs	r5, r1
 8005b32:	6938      	ldr	r0, [r7, #16]
 8005b34:	f7fb ff10 	bl	8001958 <__aeabi_ui2d>
 8005b38:	0002      	movs	r2, r0
 8005b3a:	000b      	movs	r3, r1
 8005b3c:	0020      	movs	r0, r4
 8005b3e:	0029      	movs	r1, r5
 8005b40:	f7fb f926 	bl	8000d90 <__aeabi_ddiv>
 8005b44:	0003      	movs	r3, r0
 8005b46:	000c      	movs	r4, r1
 8005b48:	0018      	movs	r0, r3
 8005b4a:	0021      	movs	r1, r4
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	4bb1      	ldr	r3, [pc, #708]	; (8005e14 <_ZN8APDS99609colorSortEtttmh+0x3a8>)
 8005b50:	f7fb fc20 	bl	8001394 <__aeabi_dmul>
 8005b54:	0003      	movs	r3, r0
 8005b56:	000c      	movs	r4, r1
 8005b58:	0018      	movs	r0, r3
 8005b5a:	0021      	movs	r1, r4
 8005b5c:	f7fb ff80 	bl	8001a60 <__aeabi_d2f>
 8005b60:	1c03      	adds	r3, r0, #0
 8005b62:	61fb      	str	r3, [r7, #28]
  color_t color;

  // Add fudge factor to improve probability of success
  if (color_to_find == RED) {
 8005b64:	233c      	movs	r3, #60	; 0x3c
 8005b66:	2208      	movs	r2, #8
 8005b68:	4694      	mov	ip, r2
 8005b6a:	44bc      	add	ip, r7
 8005b6c:	4463      	add	r3, ip
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10e      	bne.n	8005b92 <_ZN8APDS99609colorSortEtttmh+0x126>
    rPer = rPer + 2;
 8005b74:	2180      	movs	r1, #128	; 0x80
 8005b76:	05c9      	lsls	r1, r1, #23
 8005b78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b7a:	f7fa fc85 	bl	8000488 <__aeabi_fadd>
 8005b7e:	1c03      	adds	r3, r0, #0
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
    gPer = gPer - 2;
 8005b82:	2180      	movs	r1, #128	; 0x80
 8005b84:	05c9      	lsls	r1, r1, #23
 8005b86:	6a38      	ldr	r0, [r7, #32]
 8005b88:	f7fa fede 	bl	8000948 <__aeabi_fsub>
 8005b8c:	1c03      	adds	r3, r0, #0
 8005b8e:	623b      	str	r3, [r7, #32]
 8005b90:	e07a      	b.n	8005c88 <_ZN8APDS99609colorSortEtttmh+0x21c>
  } else if (color_to_find == ORANGE) {
 8005b92:	233c      	movs	r3, #60	; 0x3c
 8005b94:	2208      	movs	r2, #8
 8005b96:	4694      	mov	ip, r2
 8005b98:	44bc      	add	ip, r7
 8005b9a:	4463      	add	r3, ip
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b06      	cmp	r3, #6
 8005ba0:	d10e      	bne.n	8005bc0 <_ZN8APDS99609colorSortEtttmh+0x154>
    rPer = rPer + 2;
 8005ba2:	2180      	movs	r1, #128	; 0x80
 8005ba4:	05c9      	lsls	r1, r1, #23
 8005ba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ba8:	f7fa fc6e 	bl	8000488 <__aeabi_fadd>
 8005bac:	1c03      	adds	r3, r0, #0
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
    gPer = gPer + 2;
 8005bb0:	2180      	movs	r1, #128	; 0x80
 8005bb2:	05c9      	lsls	r1, r1, #23
 8005bb4:	6a38      	ldr	r0, [r7, #32]
 8005bb6:	f7fa fc67 	bl	8000488 <__aeabi_fadd>
 8005bba:	1c03      	adds	r3, r0, #0
 8005bbc:	623b      	str	r3, [r7, #32]
 8005bbe:	e063      	b.n	8005c88 <_ZN8APDS99609colorSortEtttmh+0x21c>
  } else if (color_to_find == BLUE) {
 8005bc0:	233c      	movs	r3, #60	; 0x3c
 8005bc2:	2208      	movs	r2, #8
 8005bc4:	4694      	mov	ip, r2
 8005bc6:	44bc      	add	ip, r7
 8005bc8:	4463      	add	r3, ip
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d10e      	bne.n	8005bee <_ZN8APDS99609colorSortEtttmh+0x182>
    bPer = bPer + 2;
 8005bd0:	2180      	movs	r1, #128	; 0x80
 8005bd2:	05c9      	lsls	r1, r1, #23
 8005bd4:	69f8      	ldr	r0, [r7, #28]
 8005bd6:	f7fa fc57 	bl	8000488 <__aeabi_fadd>
 8005bda:	1c03      	adds	r3, r0, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
    rPer = rPer - 2;
 8005bde:	2180      	movs	r1, #128	; 0x80
 8005be0:	05c9      	lsls	r1, r1, #23
 8005be2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005be4:	f7fa feb0 	bl	8000948 <__aeabi_fsub>
 8005be8:	1c03      	adds	r3, r0, #0
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
 8005bec:	e04c      	b.n	8005c88 <_ZN8APDS99609colorSortEtttmh+0x21c>
  } else if (color_to_find == GREEN) {
 8005bee:	233c      	movs	r3, #60	; 0x3c
 8005bf0:	2208      	movs	r2, #8
 8005bf2:	4694      	mov	ip, r2
 8005bf4:	44bc      	add	ip, r7
 8005bf6:	4463      	add	r3, ip
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d107      	bne.n	8005c0e <_ZN8APDS99609colorSortEtttmh+0x1a2>
    gPer = gPer + 2;
 8005bfe:	2180      	movs	r1, #128	; 0x80
 8005c00:	05c9      	lsls	r1, r1, #23
 8005c02:	6a38      	ldr	r0, [r7, #32]
 8005c04:	f7fa fc40 	bl	8000488 <__aeabi_fadd>
 8005c08:	1c03      	adds	r3, r0, #0
 8005c0a:	623b      	str	r3, [r7, #32]
 8005c0c:	e03c      	b.n	8005c88 <_ZN8APDS99609colorSortEtttmh+0x21c>
  } else if (color_to_find == YELLOW) {
 8005c0e:	233c      	movs	r3, #60	; 0x3c
 8005c10:	2208      	movs	r2, #8
 8005c12:	4694      	mov	ip, r2
 8005c14:	44bc      	add	ip, r7
 8005c16:	4463      	add	r3, ip
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d10e      	bne.n	8005c3c <_ZN8APDS99609colorSortEtttmh+0x1d0>
    rPer = rPer + 2;
 8005c1e:	2180      	movs	r1, #128	; 0x80
 8005c20:	05c9      	lsls	r1, r1, #23
 8005c22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c24:	f7fa fc30 	bl	8000488 <__aeabi_fadd>
 8005c28:	1c03      	adds	r3, r0, #0
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
    gPer = gPer - 2;
 8005c2c:	2180      	movs	r1, #128	; 0x80
 8005c2e:	05c9      	lsls	r1, r1, #23
 8005c30:	6a38      	ldr	r0, [r7, #32]
 8005c32:	f7fa fe89 	bl	8000948 <__aeabi_fsub>
 8005c36:	1c03      	adds	r3, r0, #0
 8005c38:	623b      	str	r3, [r7, #32]
 8005c3a:	e025      	b.n	8005c88 <_ZN8APDS99609colorSortEtttmh+0x21c>
  } else if (color_to_find == PURPLE) {
 8005c3c:	233c      	movs	r3, #60	; 0x3c
 8005c3e:	2208      	movs	r2, #8
 8005c40:	4694      	mov	ip, r2
 8005c42:	44bc      	add	ip, r7
 8005c44:	4463      	add	r3, ip
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d10e      	bne.n	8005c6a <_ZN8APDS99609colorSortEtttmh+0x1fe>
    bPer = bPer + 2;
 8005c4c:	2180      	movs	r1, #128	; 0x80
 8005c4e:	05c9      	lsls	r1, r1, #23
 8005c50:	69f8      	ldr	r0, [r7, #28]
 8005c52:	f7fa fc19 	bl	8000488 <__aeabi_fadd>
 8005c56:	1c03      	adds	r3, r0, #0
 8005c58:	61fb      	str	r3, [r7, #28]
    rPer = rPer + 2;
 8005c5a:	2180      	movs	r1, #128	; 0x80
 8005c5c:	05c9      	lsls	r1, r1, #23
 8005c5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c60:	f7fa fc12 	bl	8000488 <__aeabi_fadd>
 8005c64:	1c03      	adds	r3, r0, #0
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
 8005c68:	e00e      	b.n	8005c88 <_ZN8APDS99609colorSortEtttmh+0x21c>
  } else if (color_to_find == PINK) {
 8005c6a:	233c      	movs	r3, #60	; 0x3c
 8005c6c:	2208      	movs	r2, #8
 8005c6e:	4694      	mov	ip, r2
 8005c70:	44bc      	add	ip, r7
 8005c72:	4463      	add	r3, ip
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b05      	cmp	r3, #5
 8005c78:	d106      	bne.n	8005c88 <_ZN8APDS99609colorSortEtttmh+0x21c>
    rPer = rPer + 2;
 8005c7a:	2180      	movs	r1, #128	; 0x80
 8005c7c:	05c9      	lsls	r1, r1, #23
 8005c7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c80:	f7fa fc02 	bl	8000488 <__aeabi_fadd>
 8005c84:	1c03      	adds	r3, r0, #0
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if ((rPer > 35.0) & (gPer <= 28.0)) {
 8005c88:	2301      	movs	r3, #1
 8005c8a:	1c1c      	adds	r4, r3, #0
 8005c8c:	4962      	ldr	r1, [pc, #392]	; (8005e18 <_ZN8APDS99609colorSortEtttmh+0x3ac>)
 8005c8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c90:	f7fa faec 	bl	800026c <__aeabi_fcmpgt>
 8005c94:	1e03      	subs	r3, r0, #0
 8005c96:	d101      	bne.n	8005c9c <_ZN8APDS99609colorSortEtttmh+0x230>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	1c1c      	adds	r4, r3, #0
 8005c9c:	b2e4      	uxtb	r4, r4
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	1c1d      	adds	r5, r3, #0
 8005ca2:	495e      	ldr	r1, [pc, #376]	; (8005e1c <_ZN8APDS99609colorSortEtttmh+0x3b0>)
 8005ca4:	6a38      	ldr	r0, [r7, #32]
 8005ca6:	f7fa fad7 	bl	8000258 <__aeabi_fcmple>
 8005caa:	1e03      	subs	r3, r0, #0
 8005cac:	d101      	bne.n	8005cb2 <_ZN8APDS99609colorSortEtttmh+0x246>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	1c1d      	adds	r5, r3, #0
 8005cb2:	b2eb      	uxtb	r3, r5
 8005cb4:	4023      	ands	r3, r4
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <_ZN8APDS99609colorSortEtttmh+0x25a>
    color = RED;
 8005cbc:	231b      	movs	r3, #27
 8005cbe:	18fb      	adds	r3, r7, r3
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]
 8005cc4:	e0c2      	b.n	8005e4c <_ZN8APDS99609colorSortEtttmh+0x3e0>
  } else if ((rPer > 36.0) & (gPer > 28.0)) {
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	1c1c      	adds	r4, r3, #0
 8005cca:	4955      	ldr	r1, [pc, #340]	; (8005e20 <_ZN8APDS99609colorSortEtttmh+0x3b4>)
 8005ccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cce:	f7fa facd 	bl	800026c <__aeabi_fcmpgt>
 8005cd2:	1e03      	subs	r3, r0, #0
 8005cd4:	d101      	bne.n	8005cda <_ZN8APDS99609colorSortEtttmh+0x26e>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	1c1c      	adds	r4, r3, #0
 8005cda:	b2e4      	uxtb	r4, r4
 8005cdc:	2301      	movs	r3, #1
 8005cde:	1c1d      	adds	r5, r3, #0
 8005ce0:	494e      	ldr	r1, [pc, #312]	; (8005e1c <_ZN8APDS99609colorSortEtttmh+0x3b0>)
 8005ce2:	6a38      	ldr	r0, [r7, #32]
 8005ce4:	f7fa fac2 	bl	800026c <__aeabi_fcmpgt>
 8005ce8:	1e03      	subs	r3, r0, #0
 8005cea:	d101      	bne.n	8005cf0 <_ZN8APDS99609colorSortEtttmh+0x284>
 8005cec:	2300      	movs	r3, #0
 8005cee:	1c1d      	adds	r5, r3, #0
 8005cf0:	b2eb      	uxtb	r3, r5
 8005cf2:	4023      	ands	r3, r4
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d004      	beq.n	8005d04 <_ZN8APDS99609colorSortEtttmh+0x298>
    color = ORANGE;
 8005cfa:	231b      	movs	r3, #27
 8005cfc:	18fb      	adds	r3, r7, r3
 8005cfe:	2206      	movs	r2, #6
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	e0a3      	b.n	8005e4c <_ZN8APDS99609colorSortEtttmh+0x3e0>
  } else if ((bPer > 49.0) & (rPer < 20.0)) {
 8005d04:	2301      	movs	r3, #1
 8005d06:	1c1c      	adds	r4, r3, #0
 8005d08:	4946      	ldr	r1, [pc, #280]	; (8005e24 <_ZN8APDS99609colorSortEtttmh+0x3b8>)
 8005d0a:	69f8      	ldr	r0, [r7, #28]
 8005d0c:	f7fa faae 	bl	800026c <__aeabi_fcmpgt>
 8005d10:	1e03      	subs	r3, r0, #0
 8005d12:	d101      	bne.n	8005d18 <_ZN8APDS99609colorSortEtttmh+0x2ac>
 8005d14:	2300      	movs	r3, #0
 8005d16:	1c1c      	adds	r4, r3, #0
 8005d18:	b2e4      	uxtb	r4, r4
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	1c1d      	adds	r5, r3, #0
 8005d1e:	4942      	ldr	r1, [pc, #264]	; (8005e28 <_ZN8APDS99609colorSortEtttmh+0x3bc>)
 8005d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d22:	f7fa fa8f 	bl	8000244 <__aeabi_fcmplt>
 8005d26:	1e03      	subs	r3, r0, #0
 8005d28:	d101      	bne.n	8005d2e <_ZN8APDS99609colorSortEtttmh+0x2c2>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	1c1d      	adds	r5, r3, #0
 8005d2e:	b2eb      	uxtb	r3, r5
 8005d30:	4023      	ands	r3, r4
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d004      	beq.n	8005d42 <_ZN8APDS99609colorSortEtttmh+0x2d6>
    color = BLUE;
 8005d38:	231b      	movs	r3, #27
 8005d3a:	18fb      	adds	r3, r7, r3
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	e084      	b.n	8005e4c <_ZN8APDS99609colorSortEtttmh+0x3e0>
  } else if (gPer > 38.5) {
 8005d42:	493a      	ldr	r1, [pc, #232]	; (8005e2c <_ZN8APDS99609colorSortEtttmh+0x3c0>)
 8005d44:	6a38      	ldr	r0, [r7, #32]
 8005d46:	f7fa fa91 	bl	800026c <__aeabi_fcmpgt>
 8005d4a:	1e03      	subs	r3, r0, #0
 8005d4c:	d004      	beq.n	8005d58 <_ZN8APDS99609colorSortEtttmh+0x2ec>
    color = GREEN;
 8005d4e:	231b      	movs	r3, #27
 8005d50:	18fb      	adds	r3, r7, r3
 8005d52:	2201      	movs	r2, #1
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	e079      	b.n	8005e4c <_ZN8APDS99609colorSortEtttmh+0x3e0>
  } else if ((gPer > 34.0) & (rPer > 26.0)) {
 8005d58:	2301      	movs	r3, #1
 8005d5a:	1c1c      	adds	r4, r3, #0
 8005d5c:	4934      	ldr	r1, [pc, #208]	; (8005e30 <_ZN8APDS99609colorSortEtttmh+0x3c4>)
 8005d5e:	6a38      	ldr	r0, [r7, #32]
 8005d60:	f7fa fa84 	bl	800026c <__aeabi_fcmpgt>
 8005d64:	1e03      	subs	r3, r0, #0
 8005d66:	d101      	bne.n	8005d6c <_ZN8APDS99609colorSortEtttmh+0x300>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	1c1c      	adds	r4, r3, #0
 8005d6c:	b2e4      	uxtb	r4, r4
 8005d6e:	2301      	movs	r3, #1
 8005d70:	1c1d      	adds	r5, r3, #0
 8005d72:	4930      	ldr	r1, [pc, #192]	; (8005e34 <_ZN8APDS99609colorSortEtttmh+0x3c8>)
 8005d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d76:	f7fa fa79 	bl	800026c <__aeabi_fcmpgt>
 8005d7a:	1e03      	subs	r3, r0, #0
 8005d7c:	d101      	bne.n	8005d82 <_ZN8APDS99609colorSortEtttmh+0x316>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	1c1d      	adds	r5, r3, #0
 8005d82:	b2eb      	uxtb	r3, r5
 8005d84:	4023      	ands	r3, r4
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d004      	beq.n	8005d96 <_ZN8APDS99609colorSortEtttmh+0x32a>
    color = YELLOW;
 8005d8c:	231b      	movs	r3, #27
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	2203      	movs	r2, #3
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	e05a      	b.n	8005e4c <_ZN8APDS99609colorSortEtttmh+0x3e0>
  } else if ((bPer > 48.0) & (rPer > 21.0)) {
 8005d96:	2301      	movs	r3, #1
 8005d98:	1c1c      	adds	r4, r3, #0
 8005d9a:	4927      	ldr	r1, [pc, #156]	; (8005e38 <_ZN8APDS99609colorSortEtttmh+0x3cc>)
 8005d9c:	69f8      	ldr	r0, [r7, #28]
 8005d9e:	f7fa fa65 	bl	800026c <__aeabi_fcmpgt>
 8005da2:	1e03      	subs	r3, r0, #0
 8005da4:	d101      	bne.n	8005daa <_ZN8APDS99609colorSortEtttmh+0x33e>
 8005da6:	2300      	movs	r3, #0
 8005da8:	1c1c      	adds	r4, r3, #0
 8005daa:	b2e4      	uxtb	r4, r4
 8005dac:	2301      	movs	r3, #1
 8005dae:	1c1d      	adds	r5, r3, #0
 8005db0:	4922      	ldr	r1, [pc, #136]	; (8005e3c <_ZN8APDS99609colorSortEtttmh+0x3d0>)
 8005db2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005db4:	f7fa fa5a 	bl	800026c <__aeabi_fcmpgt>
 8005db8:	1e03      	subs	r3, r0, #0
 8005dba:	d101      	bne.n	8005dc0 <_ZN8APDS99609colorSortEtttmh+0x354>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	1c1d      	adds	r5, r3, #0
 8005dc0:	b2eb      	uxtb	r3, r5
 8005dc2:	4023      	ands	r3, r4
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d004      	beq.n	8005dd4 <_ZN8APDS99609colorSortEtttmh+0x368>
      color = PURPLE;
 8005dca:	231b      	movs	r3, #27
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	2204      	movs	r2, #4
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	e03b      	b.n	8005e4c <_ZN8APDS99609colorSortEtttmh+0x3e0>
  } else if ((rPer > 28.0) & (bPer > 39.0)){
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	1c1c      	adds	r4, r3, #0
 8005dd8:	4910      	ldr	r1, [pc, #64]	; (8005e1c <_ZN8APDS99609colorSortEtttmh+0x3b0>)
 8005dda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ddc:	f7fa fa46 	bl	800026c <__aeabi_fcmpgt>
 8005de0:	1e03      	subs	r3, r0, #0
 8005de2:	d101      	bne.n	8005de8 <_ZN8APDS99609colorSortEtttmh+0x37c>
 8005de4:	2300      	movs	r3, #0
 8005de6:	1c1c      	adds	r4, r3, #0
 8005de8:	b2e4      	uxtb	r4, r4
 8005dea:	2301      	movs	r3, #1
 8005dec:	1c1d      	adds	r5, r3, #0
 8005dee:	4914      	ldr	r1, [pc, #80]	; (8005e40 <_ZN8APDS99609colorSortEtttmh+0x3d4>)
 8005df0:	69f8      	ldr	r0, [r7, #28]
 8005df2:	f7fa fa3b 	bl	800026c <__aeabi_fcmpgt>
 8005df6:	1e03      	subs	r3, r0, #0
 8005df8:	d101      	bne.n	8005dfe <_ZN8APDS99609colorSortEtttmh+0x392>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	1c1d      	adds	r5, r3, #0
 8005dfe:	b2eb      	uxtb	r3, r5
 8005e00:	4023      	ands	r3, r4
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01d      	beq.n	8005e44 <_ZN8APDS99609colorSortEtttmh+0x3d8>
    color = PINK;
 8005e08:	231b      	movs	r3, #27
 8005e0a:	18fb      	adds	r3, r7, r3
 8005e0c:	2205      	movs	r2, #5
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	e01c      	b.n	8005e4c <_ZN8APDS99609colorSortEtttmh+0x3e0>
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	40590000 	.word	0x40590000
 8005e18:	420c0000 	.word	0x420c0000
 8005e1c:	41e00000 	.word	0x41e00000
 8005e20:	42100000 	.word	0x42100000
 8005e24:	42440000 	.word	0x42440000
 8005e28:	41a00000 	.word	0x41a00000
 8005e2c:	421a0000 	.word	0x421a0000
 8005e30:	42080000 	.word	0x42080000
 8005e34:	41d00000 	.word	0x41d00000
 8005e38:	42400000 	.word	0x42400000
 8005e3c:	41a80000 	.word	0x41a80000
 8005e40:	421c0000 	.word	0x421c0000
  } else {
    color = UNKNOWN;
 8005e44:	231b      	movs	r3, #27
 8005e46:	18fb      	adds	r3, r7, r3
 8005e48:	22ff      	movs	r2, #255	; 0xff
 8005e4a:	701a      	strb	r2, [r3, #0]
  }

  // shift new value into color filter
  for (uint8_t i = 1; i < len_color_filt; i++) {
 8005e4c:	231a      	movs	r3, #26
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	2201      	movs	r2, #1
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	231a      	movs	r3, #26
 8005e56:	18fb      	adds	r3, r7, r3
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d812      	bhi.n	8005e84 <_ZN8APDS99609colorSortEtttmh+0x418>
    color_filt[i-1] = color_filt[i];
 8005e5e:	201a      	movs	r0, #26
 8005e60:	183b      	adds	r3, r7, r0
 8005e62:	781a      	ldrb	r2, [r3, #0]
 8005e64:	183b      	adds	r3, r7, r0
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	68f9      	ldr	r1, [r7, #12]
 8005e6c:	188a      	adds	r2, r1, r2
 8005e6e:	7e11      	ldrb	r1, [r2, #24]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	18d3      	adds	r3, r2, r3
 8005e74:	1c0a      	adds	r2, r1, #0
 8005e76:	761a      	strb	r2, [r3, #24]
  for (uint8_t i = 1; i < len_color_filt; i++) {
 8005e78:	183b      	adds	r3, r7, r0
 8005e7a:	781a      	ldrb	r2, [r3, #0]
 8005e7c:	183b      	adds	r3, r7, r0
 8005e7e:	3201      	adds	r2, #1
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	e7e7      	b.n	8005e54 <_ZN8APDS99609colorSortEtttmh+0x3e8>
  }
  color_filt[len_color_filt-1] = color;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	221b      	movs	r2, #27
 8005e88:	18ba      	adds	r2, r7, r2
 8005e8a:	7812      	ldrb	r2, [r2, #0]
 8005e8c:	76da      	strb	r2, [r3, #27]

  // check if all values in filter match
  uint8_t match = 0;
 8005e8e:	2319      	movs	r3, #25
 8005e90:	18fb      	adds	r3, r7, r3
 8005e92:	2200      	movs	r2, #0
 8005e94:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 1; i < len_color_filt; i++) {
 8005e96:	2318      	movs	r3, #24
 8005e98:	18fb      	adds	r3, r7, r3
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	2318      	movs	r3, #24
 8005ea0:	18fb      	adds	r3, r7, r3
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d81a      	bhi.n	8005ede <_ZN8APDS99609colorSortEtttmh+0x472>
    if (color_filt[i-1] == color_filt[i]) {
 8005ea8:	2118      	movs	r1, #24
 8005eaa:	187b      	adds	r3, r7, r1
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	18d3      	adds	r3, r2, r3
 8005eb4:	7e1a      	ldrb	r2, [r3, #24]
 8005eb6:	187b      	adds	r3, r7, r1
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	68f9      	ldr	r1, [r7, #12]
 8005ebc:	18cb      	adds	r3, r1, r3
 8005ebe:	7e1b      	ldrb	r3, [r3, #24]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d105      	bne.n	8005ed0 <_ZN8APDS99609colorSortEtttmh+0x464>
      match = match + 1;
 8005ec4:	2219      	movs	r2, #25
 8005ec6:	18bb      	adds	r3, r7, r2
 8005ec8:	18ba      	adds	r2, r7, r2
 8005eca:	7812      	ldrb	r2, [r2, #0]
 8005ecc:	3201      	adds	r2, #1
 8005ece:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 1; i < len_color_filt; i++) {
 8005ed0:	2118      	movs	r1, #24
 8005ed2:	187b      	adds	r3, r7, r1
 8005ed4:	781a      	ldrb	r2, [r3, #0]
 8005ed6:	187b      	adds	r3, r7, r1
 8005ed8:	3201      	adds	r2, #1
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	e7df      	b.n	8005e9e <_ZN8APDS99609colorSortEtttmh+0x432>
    }
  }
  if (match == len_color_filt-1) {
 8005ede:	2319      	movs	r3, #25
 8005ee0:	18fb      	adds	r3, r7, r3
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d119      	bne.n	8005f1c <_ZN8APDS99609colorSortEtttmh+0x4b0>
    for (uint8_t i = 0; i < len_color_filt; i++) {
 8005ee8:	2317      	movs	r3, #23
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	2200      	movs	r2, #0
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	2317      	movs	r3, #23
 8005ef2:	18fb      	adds	r3, r7, r3
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d80c      	bhi.n	8005f14 <_ZN8APDS99609colorSortEtttmh+0x4a8>
	  color_filt[i] = UNKNOWN;
 8005efa:	2117      	movs	r1, #23
 8005efc:	187b      	adds	r3, r7, r1
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	18d3      	adds	r3, r2, r3
 8005f04:	22ff      	movs	r2, #255	; 0xff
 8005f06:	761a      	strb	r2, [r3, #24]
    for (uint8_t i = 0; i < len_color_filt; i++) {
 8005f08:	187b      	adds	r3, r7, r1
 8005f0a:	781a      	ldrb	r2, [r3, #0]
 8005f0c:	187b      	adds	r3, r7, r1
 8005f0e:	3201      	adds	r2, #1
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	e7ed      	b.n	8005ef0 <_ZN8APDS99609colorSortEtttmh+0x484>
	}
	return color;
 8005f14:	231b      	movs	r3, #27
 8005f16:	18fb      	adds	r3, r7, r3
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	e000      	b.n	8005f1e <_ZN8APDS99609colorSortEtttmh+0x4b2>
  } else {
    return UNKNOWN;
 8005f1c:	23ff      	movs	r3, #255	; 0xff
  }
}
 8005f1e:	0018      	movs	r0, r3
 8005f20:	46bd      	mov	sp, r7
 8005f22:	b00b      	add	sp, #44	; 0x2c
 8005f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f26:	46c0      	nop			; (mov r8, r8)

08005f28 <_ZN8APDS996016calibrate_sensorEPtS0_Pm>:

void APDS9960::calibrate_sensor(uint16_t *g_cal, uint16_t *b_cal, uint32_t *total_cal) {
 8005f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f2a:	b091      	sub	sp, #68	; 0x44
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
  uint16_t c_samp;
  uint16_t r_avg; 
  uint16_t g_avg; 
  uint16_t b_avg; 
  uint16_t c_avg; 
  uint32_t r_total = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t g_total = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t b_total = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t c_total = 0;
 8005f42:	2300      	movs	r3, #0
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28

  for (uint8_t i = 0; i<4; i++) {
 8005f46:	2327      	movs	r3, #39	; 0x27
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	2327      	movs	r3, #39	; 0x27
 8005f50:	18fb      	adds	r3, r7, r3
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d830      	bhi.n	8005fba <_ZN8APDS996016calibrate_sensorEPtS0_Pm+0x92>
    getColorData(&r_samp, &g_samp, &b_samp, &c_samp);
 8005f58:	2518      	movs	r5, #24
 8005f5a:	197c      	adds	r4, r7, r5
 8005f5c:	261a      	movs	r6, #26
 8005f5e:	19ba      	adds	r2, r7, r6
 8005f60:	231c      	movs	r3, #28
 8005f62:	18f9      	adds	r1, r7, r3
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	2316      	movs	r3, #22
 8005f68:	18fb      	adds	r3, r7, r3
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	0023      	movs	r3, r4
 8005f6e:	f7ff fc61 	bl	8005834 <_ZN8APDS996012getColorDataEPtS0_S0_S0_>
    r_total = r_total + r_samp;
 8005f72:	231c      	movs	r3, #28
 8005f74:	18fb      	adds	r3, r7, r3
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	001a      	movs	r2, r3
 8005f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7c:	189b      	adds	r3, r3, r2
 8005f7e:	637b      	str	r3, [r7, #52]	; 0x34
    g_total = g_total + g_samp;
 8005f80:	19bb      	adds	r3, r7, r6
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	001a      	movs	r2, r3
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	189b      	adds	r3, r3, r2
 8005f8a:	633b      	str	r3, [r7, #48]	; 0x30
    b_total = b_total + b_samp;
 8005f8c:	197b      	adds	r3, r7, r5
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	001a      	movs	r2, r3
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	189b      	adds	r3, r3, r2
 8005f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    c_total = c_total + c_samp;
 8005f98:	2316      	movs	r3, #22
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	001a      	movs	r2, r3
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	189b      	adds	r3, r3, r2
 8005fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_Delay(50);
 8005fa6:	2032      	movs	r0, #50	; 0x32
 8005fa8:	f7fb fe68 	bl	8001c7c <HAL_Delay>
  for (uint8_t i = 0; i<4; i++) {
 8005fac:	2127      	movs	r1, #39	; 0x27
 8005fae:	187b      	adds	r3, r7, r1
 8005fb0:	781a      	ldrb	r2, [r3, #0]
 8005fb2:	187b      	adds	r3, r7, r1
 8005fb4:	3201      	adds	r2, #1
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	e7c9      	b.n	8005f4e <_ZN8APDS996016calibrate_sensorEPtS0_Pm+0x26>
  }
  r_avg = r_total/4;
 8005fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbc:	089a      	lsrs	r2, r3, #2
 8005fbe:	2124      	movs	r1, #36	; 0x24
 8005fc0:	187b      	adds	r3, r7, r1
 8005fc2:	801a      	strh	r2, [r3, #0]
  g_avg = g_total/4;
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	089a      	lsrs	r2, r3, #2
 8005fc8:	2022      	movs	r0, #34	; 0x22
 8005fca:	183b      	adds	r3, r7, r0
 8005fcc:	801a      	strh	r2, [r3, #0]
  b_avg = b_total/4;
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	089a      	lsrs	r2, r3, #2
 8005fd2:	2420      	movs	r4, #32
 8005fd4:	193b      	adds	r3, r7, r4
 8005fd6:	801a      	strh	r2, [r3, #0]
  c_avg = c_total/4;
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	089a      	lsrs	r2, r3, #2
 8005fdc:	251e      	movs	r5, #30
 8005fde:	197b      	adds	r3, r7, r5
 8005fe0:	801a      	strh	r2, [r3, #0]
  *g_cal = g_avg-r_avg;
 8005fe2:	183a      	adds	r2, r7, r0
 8005fe4:	187b      	adds	r3, r7, r1
 8005fe6:	8812      	ldrh	r2, [r2, #0]
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	801a      	strh	r2, [r3, #0]
  *b_cal = b_avg-r_avg;
 8005ff2:	193a      	adds	r2, r7, r4
 8005ff4:	187b      	adds	r3, r7, r1
 8005ff6:	8812      	ldrh	r2, [r2, #0]
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	801a      	strh	r2, [r3, #0]
  *total_cal = r_avg + g_avg + b_avg + c_avg;
 8006002:	187b      	adds	r3, r7, r1
 8006004:	881a      	ldrh	r2, [r3, #0]
 8006006:	183b      	adds	r3, r7, r0
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	18d2      	adds	r2, r2, r3
 800600c:	193b      	adds	r3, r7, r4
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	18d2      	adds	r2, r2, r3
 8006012:	197b      	adds	r3, r7, r5
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	18d3      	adds	r3, r2, r3
 8006018:	001a      	movs	r2, r3
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	601a      	str	r2, [r3, #0]
}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	46bd      	mov	sp, r7
 8006022:	b00f      	add	sp, #60	; 0x3c
 8006024:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006026 <_ZN10LedControlC1Ei>:
#define OP_INTENSITY   10
#define OP_SCANLIMIT   11
#define OP_SHUTDOWN    12
#define OP_DISPLAYTEST 15

LedControl::LedControl(int numDevices) {
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6039      	str	r1, [r7, #0]
    if(numDevices<=0 || numDevices>8 )
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	dd02      	ble.n	800603c <_ZN10LedControlC1Ei+0x16>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b08      	cmp	r3, #8
 800603a:	dd01      	ble.n	8006040 <_ZN10LedControlC1Ei+0x1a>
        numDevices=8;
 800603c:	2308      	movs	r3, #8
 800603e:	603b      	str	r3, [r7, #0]
    maxDevices=numDevices;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	645a      	str	r2, [r3, #68]	; 0x44
    for(int i=0;i<64;i++) 
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b3f      	cmp	r3, #63	; 0x3f
 800604e:	dc09      	bgt.n	8006064 <_ZN10LedControlC1Ei+0x3e>
        status[i]=0x00;
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	18d3      	adds	r3, r2, r3
 8006056:	3302      	adds	r3, #2
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<64;i++) 
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	e7f2      	b.n	800604a <_ZN10LedControlC1Ei+0x24>
    for(int i=0;i<maxDevices;i++) {
 8006064:	2300      	movs	r3, #0
 8006066:	60bb      	str	r3, [r7, #8]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	429a      	cmp	r2, r3
 8006070:	da21      	bge.n	80060b6 <_ZN10LedControlC1Ei+0x90>
        spiTransfer(i,OP_DISPLAYTEST,0);
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	2300      	movs	r3, #0
 8006078:	220f      	movs	r2, #15
 800607a:	f000 f927 	bl	80062cc <_ZN10LedControl11spiTransferEihh>
        //scanlimit is set to max on startup
        setScanLimit(i,7);
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2207      	movs	r2, #7
 8006084:	0018      	movs	r0, r3
 8006086:	f000 f840 	bl	800610a <_ZN10LedControl12setScanLimitEii>
        //decode is done in source
        spiTransfer(i,OP_DECODEMODE,0);
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	2300      	movs	r3, #0
 8006090:	2209      	movs	r2, #9
 8006092:	f000 f91b 	bl	80062cc <_ZN10LedControl11spiTransferEihh>
        clearDisplay(i);
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	0011      	movs	r1, r2
 800609c:	0018      	movs	r0, r3
 800609e:	f000 f874 	bl	800618a <_ZN10LedControl12clearDisplayEi>
        //we go into shutdown-mode on startup
        shutdown(i,true);
 80060a2:	68b9      	ldr	r1, [r7, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	0018      	movs	r0, r3
 80060aa:	f000 f809 	bl	80060c0 <_ZN10LedControl8shutdownEib>
    for(int i=0;i<maxDevices;i++) {
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	3301      	adds	r3, #1
 80060b2:	60bb      	str	r3, [r7, #8]
 80060b4:	e7d8      	b.n	8006068 <_ZN10LedControlC1Ei+0x42>
    }
}
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	0018      	movs	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	b004      	add	sp, #16
 80060be:	bd80      	pop	{r7, pc}

080060c0 <_ZN10LedControl8shutdownEib>:

int LedControl::getDeviceCount() {
    return maxDevices;
}

void LedControl::shutdown(int addr, bool b) {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	1dfb      	adds	r3, r7, #7
 80060cc:	701a      	strb	r2, [r3, #0]
    if(addr<0 || addr>=maxDevices)
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	db16      	blt.n	8006102 <_ZN10LedControl8shutdownEib+0x42>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	429a      	cmp	r2, r3
 80060dc:	da11      	bge.n	8006102 <_ZN10LedControl8shutdownEib+0x42>
        return;
    if(b)
 80060de:	1dfb      	adds	r3, r7, #7
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d006      	beq.n	80060f4 <_ZN10LedControl8shutdownEib+0x34>
        spiTransfer(addr, OP_SHUTDOWN,0);
 80060e6:	68b9      	ldr	r1, [r7, #8]
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	2300      	movs	r3, #0
 80060ec:	220c      	movs	r2, #12
 80060ee:	f000 f8ed 	bl	80062cc <_ZN10LedControl11spiTransferEihh>
 80060f2:	e007      	b.n	8006104 <_ZN10LedControl8shutdownEib+0x44>
    else
        spiTransfer(addr, OP_SHUTDOWN,1);
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	2301      	movs	r3, #1
 80060fa:	220c      	movs	r2, #12
 80060fc:	f000 f8e6 	bl	80062cc <_ZN10LedControl11spiTransferEihh>
 8006100:	e000      	b.n	8006104 <_ZN10LedControl8shutdownEib+0x44>
        return;
 8006102:	46c0      	nop			; (mov r8, r8)
}
 8006104:	46bd      	mov	sp, r7
 8006106:	b004      	add	sp, #16
 8006108:	bd80      	pop	{r7, pc}

0800610a <_ZN10LedControl12setScanLimitEii>:

void LedControl::setScanLimit(int addr, int limit) {
 800610a:	b580      	push	{r7, lr}
 800610c:	b084      	sub	sp, #16
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	607a      	str	r2, [r7, #4]
    if(addr<0 || addr>=maxDevices)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	db12      	blt.n	8006142 <_ZN10LedControl12setScanLimitEii+0x38>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	429a      	cmp	r2, r3
 8006124:	da0d      	bge.n	8006142 <_ZN10LedControl12setScanLimitEii+0x38>
        return;
    if(limit>=0 && limit<8)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	db0b      	blt.n	8006144 <_ZN10LedControl12setScanLimitEii+0x3a>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b07      	cmp	r3, #7
 8006130:	dc08      	bgt.n	8006144 <_ZN10LedControl12setScanLimitEii+0x3a>
        spiTransfer(addr, OP_SCANLIMIT,limit);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	68b9      	ldr	r1, [r7, #8]
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	220b      	movs	r2, #11
 800613c:	f000 f8c6 	bl	80062cc <_ZN10LedControl11spiTransferEihh>
 8006140:	e000      	b.n	8006144 <_ZN10LedControl12setScanLimitEii+0x3a>
        return;
 8006142:	46c0      	nop			; (mov r8, r8)
}
 8006144:	46bd      	mov	sp, r7
 8006146:	b004      	add	sp, #16
 8006148:	bd80      	pop	{r7, pc}

0800614a <_ZN10LedControl12setIntensityEii>:

void LedControl::setIntensity(int addr, int intensity) {
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]
    if(addr<0 || addr>=maxDevices)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	db12      	blt.n	8006182 <_ZN10LedControl12setIntensityEii+0x38>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	429a      	cmp	r2, r3
 8006164:	da0d      	bge.n	8006182 <_ZN10LedControl12setIntensityEii+0x38>
        return;
    if(intensity>=0 && intensity<16)	
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	db0b      	blt.n	8006184 <_ZN10LedControl12setIntensityEii+0x3a>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b0f      	cmp	r3, #15
 8006170:	dc08      	bgt.n	8006184 <_ZN10LedControl12setIntensityEii+0x3a>
        spiTransfer(addr, OP_INTENSITY,intensity);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	68b9      	ldr	r1, [r7, #8]
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	220a      	movs	r2, #10
 800617c:	f000 f8a6 	bl	80062cc <_ZN10LedControl11spiTransferEihh>
 8006180:	e000      	b.n	8006184 <_ZN10LedControl12setIntensityEii+0x3a>
        return;
 8006182:	46c0      	nop			; (mov r8, r8)
}
 8006184:	46bd      	mov	sp, r7
 8006186:	b004      	add	sp, #16
 8006188:	bd80      	pop	{r7, pc}

0800618a <_ZN10LedControl12clearDisplayEi>:

void LedControl::clearDisplay(int addr) {
 800618a:	b590      	push	{r4, r7, lr}
 800618c:	b085      	sub	sp, #20
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	6039      	str	r1, [r7, #0]
    int offset;

    if(addr<0 || addr>=maxDevices)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	db26      	blt.n	80061e8 <_ZN10LedControl12clearDisplayEi+0x5e>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	da21      	bge.n	80061e8 <_ZN10LedControl12clearDisplayEi+0x5e>
        return;
    offset=addr*8;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	60bb      	str	r3, [r7, #8]
    for(int i=0;i<8;i++) {
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b07      	cmp	r3, #7
 80061b2:	dc1a      	bgt.n	80061ea <_ZN10LedControl12clearDisplayEi+0x60>
        status[offset+i]=0;
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	18d3      	adds	r3, r2, r3
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	18d3      	adds	r3, r2, r3
 80061be:	2200      	movs	r2, #0
 80061c0:	709a      	strb	r2, [r3, #2]
        spiTransfer(addr, i+1,status[offset+i]);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	3301      	adds	r3, #1
 80061c8:	b2dc      	uxtb	r4, r3
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	18d3      	adds	r3, r2, r3
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	18d3      	adds	r3, r2, r3
 80061d4:	789b      	ldrb	r3, [r3, #2]
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	0022      	movs	r2, r4
 80061dc:	f000 f876 	bl	80062cc <_ZN10LedControl11spiTransferEihh>
    for(int i=0;i<8;i++) {
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e7e2      	b.n	80061ae <_ZN10LedControl12clearDisplayEi+0x24>
        return;
 80061e8:	46c0      	nop			; (mov r8, r8)
    }
}
 80061ea:	46bd      	mov	sp, r7
 80061ec:	b005      	add	sp, #20
 80061ee:	bd90      	pop	{r4, r7, pc}

080061f0 <_ZN10LedControl6setLedEiiib>:

void LedControl::setLed(int addr, int row, int column, bool state) {
 80061f0:	b590      	push	{r4, r7, lr}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
    int offset;
    uint8_t val=0x00;
 80061fe:	2317      	movs	r3, #23
 8006200:	18fb      	adds	r3, r7, r3
 8006202:	2200      	movs	r2, #0
 8006204:	701a      	strb	r2, [r3, #0]

    if(addr<0 || addr>=maxDevices)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	db58      	blt.n	80062be <_ZN10LedControl6setLedEiiib+0xce>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	429a      	cmp	r2, r3
 8006214:	da53      	bge.n	80062be <_ZN10LedControl6setLedEiiib+0xce>
        return;
    if(row<0 || row>7 || column<0 || column>7)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	db52      	blt.n	80062c2 <_ZN10LedControl6setLedEiiib+0xd2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b07      	cmp	r3, #7
 8006220:	dc4f      	bgt.n	80062c2 <_ZN10LedControl6setLedEiiib+0xd2>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	db4c      	blt.n	80062c2 <_ZN10LedControl6setLedEiiib+0xd2>
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b07      	cmp	r3, #7
 800622c:	dc49      	bgt.n	80062c2 <_ZN10LedControl6setLedEiiib+0xd2>
        return;
    offset=addr*8;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	613b      	str	r3, [r7, #16]
    val=0b10000000 >> column;
 8006234:	2280      	movs	r2, #128	; 0x80
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	411a      	asrs	r2, r3
 800623a:	2317      	movs	r3, #23
 800623c:	18fb      	adds	r3, r7, r3
 800623e:	701a      	strb	r2, [r3, #0]
    if(state)
 8006240:	2328      	movs	r3, #40	; 0x28
 8006242:	18fb      	adds	r3, r7, r3
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d012      	beq.n	8006270 <_ZN10LedControl6setLedEiiib+0x80>
        status[offset+row]=status[offset+row]|val;
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	18d3      	adds	r3, r2, r3
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	18d3      	adds	r3, r2, r3
 8006254:	7899      	ldrb	r1, [r3, #2]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	18d3      	adds	r3, r2, r3
 800625c:	2217      	movs	r2, #23
 800625e:	18ba      	adds	r2, r7, r2
 8006260:	7812      	ldrb	r2, [r2, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	b2d1      	uxtb	r1, r2
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	18d3      	adds	r3, r2, r3
 800626a:	1c0a      	adds	r2, r1, #0
 800626c:	709a      	strb	r2, [r3, #2]
 800626e:	e016      	b.n	800629e <_ZN10LedControl6setLedEiiib+0xae>
    else {
        val=~val;
 8006270:	2017      	movs	r0, #23
 8006272:	183b      	adds	r3, r7, r0
 8006274:	183a      	adds	r2, r7, r0
 8006276:	7812      	ldrb	r2, [r2, #0]
 8006278:	43d2      	mvns	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]
        status[offset+row]=status[offset+row]&val;
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	18d3      	adds	r3, r2, r3
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	18d3      	adds	r3, r2, r3
 8006286:	789a      	ldrb	r2, [r3, #2]
 8006288:	6939      	ldr	r1, [r7, #16]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	18cb      	adds	r3, r1, r3
 800628e:	1839      	adds	r1, r7, r0
 8006290:	7809      	ldrb	r1, [r1, #0]
 8006292:	400a      	ands	r2, r1
 8006294:	b2d1      	uxtb	r1, r2
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	18d3      	adds	r3, r2, r3
 800629a:	1c0a      	adds	r2, r1, #0
 800629c:	709a      	strb	r2, [r3, #2]
    }
    spiTransfer(addr, row+1,status[offset+row]);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	3301      	adds	r3, #1
 80062a4:	b2dc      	uxtb	r4, r3
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	18d3      	adds	r3, r2, r3
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	18d3      	adds	r3, r2, r3
 80062b0:	789b      	ldrb	r3, [r3, #2]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	0022      	movs	r2, r4
 80062b8:	f000 f808 	bl	80062cc <_ZN10LedControl11spiTransferEihh>
 80062bc:	e002      	b.n	80062c4 <_ZN10LedControl6setLedEiiib+0xd4>
        return;
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	e000      	b.n	80062c4 <_ZN10LedControl6setLedEiiib+0xd4>
        return;
 80062c2:	46c0      	nop			; (mov r8, r8)
}
 80062c4:	46bd      	mov	sp, r7
 80062c6:	b007      	add	sp, #28
 80062c8:	bd90      	pop	{r4, r7, pc}
	...

080062cc <_ZN10LedControl11spiTransferEihh>:
        setLed(addr,row,col,val);
    }
}


void LedControl::spiTransfer(int addr, uint8_t opcode, uint8_t data) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	0019      	movs	r1, r3
 80062d8:	1dfb      	adds	r3, r7, #7
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	1dbb      	adds	r3, r7, #6
 80062de:	1c0a      	adds	r2, r1, #0
 80062e0:	701a      	strb	r2, [r3, #0]

    //put our device data into the array
    spidata[1]=opcode;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1dfa      	adds	r2, r7, #7
 80062e6:	7812      	ldrb	r2, [r2, #0]
 80062e8:	705a      	strb	r2, [r3, #1]
    spidata[0]=data;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1dba      	adds	r2, r7, #6
 80062ee:	7812      	ldrb	r2, [r2, #0]
 80062f0:	701a      	strb	r2, [r3, #0]

    //Now shift out the data 
    HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80062f2:	23a0      	movs	r3, #160	; 0xa0
 80062f4:	05db      	lsls	r3, r3, #23
 80062f6:	2200      	movs	r2, #0
 80062f8:	2110      	movs	r1, #16
 80062fa:	0018      	movs	r0, r3
 80062fc:	f7fb ffab 	bl	8002256 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &spidata[0], 1, 1);
 8006300:	68f9      	ldr	r1, [r7, #12]
 8006302:	480e      	ldr	r0, [pc, #56]	; (800633c <_ZN10LedControl11spiTransferEihh+0x70>)
 8006304:	2301      	movs	r3, #1
 8006306:	2201      	movs	r2, #1
 8006308:	f7fd fcd2 	bl	8003cb0 <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <_ZN10LedControl11spiTransferEihh+0x70>)
 800630e:	0018      	movs	r0, r3
 8006310:	f7fd fe1c 	bl	8003f4c <HAL_SPI_GetState>
 8006314:	0003      	movs	r3, r0
 8006316:	3b01      	subs	r3, #1
 8006318:	1e5a      	subs	r2, r3, #1
 800631a:	4193      	sbcs	r3, r2
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d000      	beq.n	8006324 <_ZN10LedControl11spiTransferEihh+0x58>
 8006322:	e7f3      	b.n	800630c <_ZN10LedControl11spiTransferEihh+0x40>
    HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8006324:	23a0      	movs	r3, #160	; 0xa0
 8006326:	05db      	lsls	r3, r3, #23
 8006328:	2201      	movs	r2, #1
 800632a:	2110      	movs	r1, #16
 800632c:	0018      	movs	r0, r3
 800632e:	f7fb ff92 	bl	8002256 <HAL_GPIO_WritePin>
}    
 8006332:	46c0      	nop			; (mov r8, r8)
 8006334:	46bd      	mov	sp, r7
 8006336:	b004      	add	sp, #16
 8006338:	bd80      	pop	{r7, pc}
 800633a:	46c0      	nop			; (mov r8, r8)
 800633c:	20000110 	.word	0x20000110

08006340 <_ZN8BarGraphC1Ehh>:
#include "stm32l0xx_hal.h"
#include "spi.h"
#include "math.h"

// Constructor
BarGraph::BarGraph(uint8_t num_switch, uint8_t num_led) {
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	0008      	movs	r0, r1
 800634a:	0011      	movs	r1, r2
 800634c:	1cfb      	adds	r3, r7, #3
 800634e:	1c02      	adds	r2, r0, #0
 8006350:	701a      	strb	r2, [r3, #0]
 8006352:	1cbb      	adds	r3, r7, #2
 8006354:	1c0a      	adds	r2, r1, #0
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	709a      	strb	r2, [r3, #2]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3304      	adds	r3, #4
 8006362:	2101      	movs	r1, #1
 8006364:	0018      	movs	r0, r3
 8006366:	f7ff fe5e 	bl	8006026 <_ZN10LedControlC1Ei>
  max_switch = num_switch;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	1cfa      	adds	r2, r7, #3
 800636e:	7812      	ldrb	r2, [r2, #0]
 8006370:	701a      	strb	r2, [r3, #0]
  max_led = num_led;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	1cba      	adds	r2, r7, #2
 8006376:	7812      	ldrb	r2, [r2, #0]
 8006378:	705a      	strb	r2, [r3, #1]
  incr = num_led/num_switch;
 800637a:	1cba      	adds	r2, r7, #2
 800637c:	1cfb      	adds	r3, r7, #3
 800637e:	7812      	ldrb	r2, [r2, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	0019      	movs	r1, r3
 8006384:	0010      	movs	r0, r2
 8006386:	f7f9 febf 	bl	8000108 <__udivsi3>
 800638a:	0003      	movs	r3, r0
 800638c:	b2da      	uxtb	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	70da      	strb	r2, [r3, #3]
}
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	0018      	movs	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	b002      	add	sp, #8
 800639a:	bd80      	pop	{r7, pc}

0800639c <_ZN8BarGraph5beginEv>:

void BarGraph::begin() {
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /*
   The MAX72XX is in power-saving mode on startup,
   we have to do a wakeup call
   */
  lc.shutdown(0,false);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3304      	adds	r3, #4
 80063a8:	2200      	movs	r2, #0
 80063aa:	2100      	movs	r1, #0
 80063ac:	0018      	movs	r0, r3
 80063ae:	f7ff fe87 	bl	80060c0 <_ZN10LedControl8shutdownEib>
  /* Set the brightness to a medium values */
  lc.setIntensity(0,8);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3304      	adds	r3, #4
 80063b6:	2208      	movs	r2, #8
 80063b8:	2100      	movs	r1, #0
 80063ba:	0018      	movs	r0, r3
 80063bc:	f7ff fec5 	bl	800614a <_ZN10LedControl12setIntensityEii>
  /* and clear the display */
  lc.clearDisplay(0);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3304      	adds	r3, #4
 80063c4:	2100      	movs	r1, #0
 80063c6:	0018      	movs	r0, r3
 80063c8:	f7ff fedf 	bl	800618a <_ZN10LedControl12clearDisplayEi>

}
 80063cc:	46c0      	nop			; (mov r8, r8)
 80063ce:	46bd      	mov	sp, r7
 80063d0:	b002      	add	sp, #8
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <_ZN8BarGraph6updateEPh>:

void BarGraph::update(uint8_t *sw_state) {
 80063d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af02      	add	r7, sp, #8
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint8_t cur_switch = 0;
 80063de:	230f      	movs	r3, #15
 80063e0:	18fb      	adds	r3, r7, r3
 80063e2:	2200      	movs	r2, #0
 80063e4:	701a      	strb	r2, [r3, #0]
  for (uint8_t i=0; i<max_switch; i++) {
 80063e6:	230e      	movs	r3, #14
 80063e8:	18fb      	adds	r3, r7, r3
 80063ea:	2200      	movs	r2, #0
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	220e      	movs	r2, #14
 80063f4:	18ba      	adds	r2, r7, r2
 80063f6:	7812      	ldrb	r2, [r2, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d215      	bcs.n	8006428 <_ZN8BarGraph6updateEPh+0x54>
    if (sw_state[i] == 1) {
 80063fc:	230e      	movs	r3, #14
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	18d3      	adds	r3, r2, r3
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d106      	bne.n	800641a <_ZN8BarGraph6updateEPh+0x46>
      cur_switch = i;
 800640c:	230f      	movs	r3, #15
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	220e      	movs	r2, #14
 8006412:	18ba      	adds	r2, r7, r2
 8006414:	7812      	ldrb	r2, [r2, #0]
 8006416:	701a      	strb	r2, [r3, #0]
      break;
 8006418:	e006      	b.n	8006428 <_ZN8BarGraph6updateEPh+0x54>
  for (uint8_t i=0; i<max_switch; i++) {
 800641a:	210e      	movs	r1, #14
 800641c:	187b      	adds	r3, r7, r1
 800641e:	781a      	ldrb	r2, [r3, #0]
 8006420:	187b      	adds	r3, r7, r1
 8006422:	3201      	adds	r2, #1
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	e7e2      	b.n	80063ee <_ZN8BarGraph6updateEPh+0x1a>
    }
  }
  if (cur_switch != last_switch) {
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	789b      	ldrb	r3, [r3, #2]
 800642c:	220f      	movs	r2, #15
 800642e:	18ba      	adds	r2, r7, r2
 8006430:	7812      	ldrb	r2, [r2, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d047      	beq.n	80064c6 <_ZN8BarGraph6updateEPh+0xf2>
    last_switch = cur_switch;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	210f      	movs	r1, #15
 800643a:	187a      	adds	r2, r7, r1
 800643c:	7812      	ldrb	r2, [r2, #0]
 800643e:	709a      	strb	r2, [r3, #2]
    uint8_t num_led = incr*(cur_switch+1);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	78da      	ldrb	r2, [r3, #3]
 8006444:	187b      	adds	r3, r7, r1
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	3301      	adds	r3, #1
 800644a:	b2d9      	uxtb	r1, r3
 800644c:	230c      	movs	r3, #12
 800644e:	18fb      	adds	r3, r7, r3
 8006450:	434a      	muls	r2, r1
 8006452:	701a      	strb	r2, [r3, #0]
    lc.clearDisplay(0);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3304      	adds	r3, #4
 8006458:	2100      	movs	r1, #0
 800645a:	0018      	movs	r0, r3
 800645c:	f7ff fe95 	bl	800618a <_ZN10LedControl12clearDisplayEi>
    for (uint8_t i=0; i<num_led; i++) {
 8006460:	230d      	movs	r3, #13
 8006462:	18fb      	adds	r3, r7, r3
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	230d      	movs	r3, #13
 800646a:	18fa      	adds	r2, r7, r3
 800646c:	230c      	movs	r3, #12
 800646e:	18fb      	adds	r3, r7, r3
 8006470:	7812      	ldrb	r2, [r2, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d226      	bcs.n	80064c6 <_ZN8BarGraph6updateEPh+0xf2>
      lc.setLed(0,i%8, floor((i/8)%8), true);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	1d1c      	adds	r4, r3, #4
 800647c:	260d      	movs	r6, #13
 800647e:	19bb      	adds	r3, r7, r6
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2207      	movs	r2, #7
 8006484:	4013      	ands	r3, r2
 8006486:	001d      	movs	r5, r3
 8006488:	19bb      	adds	r3, r7, r6
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	08db      	lsrs	r3, r3, #3
 800648e:	b2db      	uxtb	r3, r3
 8006490:	001a      	movs	r2, r3
 8006492:	2307      	movs	r3, #7
 8006494:	4013      	ands	r3, r2
 8006496:	0018      	movs	r0, r3
 8006498:	f000 f82a 	bl	80064f0 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800649c:	0002      	movs	r2, r0
 800649e:	000b      	movs	r3, r1
 80064a0:	0010      	movs	r0, r2
 80064a2:	0019      	movs	r1, r3
 80064a4:	f7fb f9e8 	bl	8001878 <__aeabi_d2iz>
 80064a8:	0002      	movs	r2, r0
 80064aa:	2301      	movs	r3, #1
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	0013      	movs	r3, r2
 80064b0:	002a      	movs	r2, r5
 80064b2:	2100      	movs	r1, #0
 80064b4:	0020      	movs	r0, r4
 80064b6:	f7ff fe9b 	bl	80061f0 <_ZN10LedControl6setLedEiiib>
    for (uint8_t i=0; i<num_led; i++) {
 80064ba:	19bb      	adds	r3, r7, r6
 80064bc:	781a      	ldrb	r2, [r3, #0]
 80064be:	19bb      	adds	r3, r7, r6
 80064c0:	3201      	adds	r2, #1
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	e7d0      	b.n	8006468 <_ZN8BarGraph6updateEPh+0x94>
    }
  }
}
 80064c6:	46c0      	nop			; (mov r8, r8)
 80064c8:	46bd      	mov	sp, r7
 80064ca:	b005      	add	sp, #20
 80064cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064ce <_ZN8BarGraph13clear_displayEv>:

void BarGraph::clear_display() {
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b082      	sub	sp, #8
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  lc.clearDisplay(0);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3304      	adds	r3, #4
 80064da:	2100      	movs	r1, #0
 80064dc:	0018      	movs	r0, r3
 80064de:	f7ff fe54 	bl	800618a <_ZN10LedControl12clearDisplayEi>
  last_switch = 8;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2208      	movs	r2, #8
 80064e6:	709a      	strb	r2, [r3, #2]
 80064e8:	46c0      	nop			; (mov r8, r8)
 80064ea:	46bd      	mov	sp, r7
 80064ec:	b002      	add	sp, #8
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
 80064f0:	b590      	push	{r4, r7, lr}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7fb f9f3 	bl	80018e4 <__aeabi_i2d>
 80064fe:	0003      	movs	r3, r0
 8006500:	000c      	movs	r4, r1
 8006502:	0018      	movs	r0, r3
 8006504:	0021      	movs	r1, r4
 8006506:	46bd      	mov	sp, r7
 8006508:	b003      	add	sp, #12
 800650a:	bd90      	pop	{r4, r7, pc}

0800650c <_ZN7DotStarC1Ehh>:
#include "dotstar.hpp"
#include "gpio.h"
#include <stdlib.h>

// Constructor for 'soft' (bitbang) SPI -- any two pins can be used
DotStar::DotStar(uint8_t n, uint8_t o) :
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	0008      	movs	r0, r1
 8006516:	0011      	movs	r1, r2
 8006518:	1cfb      	adds	r3, r7, #3
 800651a:	1c02      	adds	r2, r0, #0
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	1cbb      	adds	r3, r7, #2
 8006520:	1c0a      	adds	r2, r1, #0
 8006522:	701a      	strb	r2, [r3, #0]
 brightness(0), pixels(NULL), rOffset(o & 3), gOffset((o >> 2) & 3),
 bOffset((o >> 4) & 3)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	705a      	strb	r2, [r3, #1]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	605a      	str	r2, [r3, #4]
 brightness(0), pixels(NULL), rOffset(o & 3), gOffset((o >> 2) & 3),
 8006530:	1cbb      	adds	r3, r7, #2
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2203      	movs	r2, #3
 8006536:	4013      	ands	r3, r2
 8006538:	b2da      	uxtb	r2, r3
 bOffset((o >> 4) & 3)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	721a      	strb	r2, [r3, #8]
 brightness(0), pixels(NULL), rOffset(o & 3), gOffset((o >> 2) & 3),
 800653e:	1cbb      	adds	r3, r7, #2
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	109b      	asrs	r3, r3, #2
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2203      	movs	r2, #3
 8006548:	4013      	ands	r3, r2
 800654a:	b2da      	uxtb	r2, r3
 bOffset((o >> 4) & 3)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	725a      	strb	r2, [r3, #9]
 8006550:	1cbb      	adds	r3, r7, #2
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	111b      	asrs	r3, r3, #4
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2203      	movs	r2, #3
 800655a:	4013      	ands	r3, r2
 800655c:	b2da      	uxtb	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	729a      	strb	r2, [r3, #10]
{
  updateLength(n);
 8006562:	1cfb      	adds	r3, r7, #3
 8006564:	781a      	ldrb	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	0011      	movs	r1, r2
 800656a:	0018      	movs	r0, r3
 800656c:	f000 f814 	bl	8006598 <_ZN7DotStar12updateLengthEh>
  ringIndex = 0;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	72da      	strb	r2, [r3, #11]
}
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	0018      	movs	r0, r3
 800657a:	46bd      	mov	sp, r7
 800657c:	b002      	add	sp, #8
 800657e:	bd80      	pop	{r7, pc}

08006580 <_ZN7DotStar5beginEv>:

DotStar::~DotStar(void) { // Destructor
  sw_spi_end();
}

void DotStar::begin(void) { // Initialize SPI
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  sw_spi_init();
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	0018      	movs	r0, r3
 800658c:	f000 f840 	bl	8006610 <_ZN7DotStar11sw_spi_initEv>
}
 8006590:	46c0      	nop			; (mov r8, r8)
 8006592:	46bd      	mov	sp, r7
 8006594:	b002      	add	sp, #8
 8006596:	bd80      	pop	{r7, pc}

08006598 <_ZN7DotStar12updateLengthEh>:

// Length can be changed post-constructor for similar reasons (sketch
// config not hardcoded).  But DON'T use this for "recycling" strip RAM...
// all that reallocation is likely to fragment and eventually fail.
// Instead, set length once to longest strip.
void DotStar::updateLength(uint8_t n) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	000a      	movs	r2, r1
 80065a2:	1cfb      	adds	r3, r7, #3
 80065a4:	701a      	strb	r2, [r3, #0]
	uint16_t bytes = (rOffset == gOffset) ?
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	7a1a      	ldrb	r2, [r3, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	7a5b      	ldrb	r3, [r3, #9]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d10d      	bne.n	80065ce <_ZN7DotStar12updateLengthEh+0x36>
	    n + ((n + 3) / 4) : // MONO: 10 bits/pixel, round up to next byte
 80065b2:	1cfb      	adds	r3, r7, #3
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	1cfb      	adds	r3, r7, #3
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	3303      	adds	r3, #3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	da00      	bge.n	80065c4 <_ZN7DotStar12updateLengthEh+0x2c>
 80065c2:	3303      	adds	r3, #3
 80065c4:	109b      	asrs	r3, r3, #2
 80065c6:	b29b      	uxth	r3, r3
	uint16_t bytes = (rOffset == gOffset) ?
 80065c8:	18d3      	adds	r3, r2, r3
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	e007      	b.n	80065de <_ZN7DotStar12updateLengthEh+0x46>
 80065ce:	1cfb      	adds	r3, r7, #3
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	1c1a      	adds	r2, r3, #0
 80065d6:	1c13      	adds	r3, r2, #0
 80065d8:	18db      	adds	r3, r3, r3
 80065da:	189b      	adds	r3, r3, r2
 80065dc:	b29b      	uxth	r3, r3
 80065de:	210e      	movs	r1, #14
 80065e0:	187a      	adds	r2, r7, r1
 80065e2:	8013      	strh	r3, [r2, #0]
	    n * 3;              // COLOR: 3 bytes/pixel
	pixels = (uint8_t *)malloc(bytes);
 80065e4:	187b      	adds	r3, r7, r1
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	0018      	movs	r0, r3
 80065ea:	f001 fd7b 	bl	80080e4 <malloc>
 80065ee:	0003      	movs	r3, r0
 80065f0:	001a      	movs	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	605a      	str	r2, [r3, #4]
	numLEDs = n;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	1cfa      	adds	r2, r7, #3
 80065fa:	7812      	ldrb	r2, [r2, #0]
 80065fc:	701a      	strb	r2, [r3, #0]
	clear();
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	0018      	movs	r0, r3
 8006602:	f000 f974 	bl	80068ee <_ZN7DotStar5clearEv>
}
 8006606:	46c0      	nop			; (mov r8, r8)
 8006608:	46bd      	mov	sp, r7
 800660a:	b004      	add	sp, #16
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <_ZN7DotStar11sw_spi_initEv>:

// SPI STUFF ---------------------------------------------------------------

void DotStar::sw_spi_init(void) { // Init 'soft' (bitbang) SPI
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(Data_Port, Data_Pin, GPIO_PIN_RESET);
 8006618:	4b07      	ldr	r3, [pc, #28]	; (8006638 <_ZN7DotStar11sw_spi_initEv+0x28>)
 800661a:	2200      	movs	r2, #0
 800661c:	2101      	movs	r1, #1
 800661e:	0018      	movs	r0, r3
 8006620:	f7fb fe19 	bl	8002256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Data_Port, Clock_Pin, GPIO_PIN_RESET);
 8006624:	4b04      	ldr	r3, [pc, #16]	; (8006638 <_ZN7DotStar11sw_spi_initEv+0x28>)
 8006626:	2200      	movs	r2, #0
 8006628:	2102      	movs	r1, #2
 800662a:	0018      	movs	r0, r3
 800662c:	f7fb fe13 	bl	8002256 <HAL_GPIO_WritePin>
}
 8006630:	46c0      	nop			; (mov r8, r8)
 8006632:	46bd      	mov	sp, r7
 8006634:	b002      	add	sp, #8
 8006636:	bd80      	pop	{r7, pc}
 8006638:	50000400 	.word	0x50000400

0800663c <_ZN7DotStar10sw_spi_outEh>:
void DotStar::sw_spi_end() { // Stop 'soft' SPI
  HAL_GPIO_WritePin(Data_Port, Data_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(Clock_Port, Clock_Pin, GPIO_PIN_RESET);
}

void DotStar::sw_spi_out(uint8_t n) { // Bitbang SPI write
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	000a      	movs	r2, r1
 8006646:	1cfb      	adds	r3, r7, #3
 8006648:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=8; i--; n <<= 1) {
 800664a:	230f      	movs	r3, #15
 800664c:	18fb      	adds	r3, r7, r3
 800664e:	2208      	movs	r2, #8
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	220f      	movs	r2, #15
 8006654:	18bb      	adds	r3, r7, r2
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	18ba      	adds	r2, r7, r2
 800665a:	1e59      	subs	r1, r3, #1
 800665c:	7011      	strb	r1, [r2, #0]
 800665e:	1e5a      	subs	r2, r3, #1
 8006660:	4193      	sbcs	r3, r2
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d023      	beq.n	80066b0 <_ZN7DotStar10sw_spi_outEh+0x74>
    if(n & 0x80) HAL_GPIO_WritePin(Data_Port, Data_Pin, GPIO_PIN_SET);
 8006668:	1cfb      	adds	r3, r7, #3
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b25b      	sxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	da06      	bge.n	8006680 <_ZN7DotStar10sw_spi_outEh+0x44>
 8006672:	4b11      	ldr	r3, [pc, #68]	; (80066b8 <_ZN7DotStar10sw_spi_outEh+0x7c>)
 8006674:	2201      	movs	r2, #1
 8006676:	2101      	movs	r1, #1
 8006678:	0018      	movs	r0, r3
 800667a:	f7fb fdec 	bl	8002256 <HAL_GPIO_WritePin>
 800667e:	e005      	b.n	800668c <_ZN7DotStar10sw_spi_outEh+0x50>
    else         HAL_GPIO_WritePin(Data_Port, Data_Pin, GPIO_PIN_RESET);
 8006680:	4b0d      	ldr	r3, [pc, #52]	; (80066b8 <_ZN7DotStar10sw_spi_outEh+0x7c>)
 8006682:	2200      	movs	r2, #0
 8006684:	2101      	movs	r1, #1
 8006686:	0018      	movs	r0, r3
 8006688:	f7fb fde5 	bl	8002256 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Clock_Port, Clock_Pin, GPIO_PIN_SET);
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <_ZN7DotStar10sw_spi_outEh+0x7c>)
 800668e:	2201      	movs	r2, #1
 8006690:	2102      	movs	r1, #2
 8006692:	0018      	movs	r0, r3
 8006694:	f7fb fddf 	bl	8002256 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Clock_Port, Clock_Pin, GPIO_PIN_RESET);
 8006698:	4b07      	ldr	r3, [pc, #28]	; (80066b8 <_ZN7DotStar10sw_spi_outEh+0x7c>)
 800669a:	2200      	movs	r2, #0
 800669c:	2102      	movs	r1, #2
 800669e:	0018      	movs	r0, r3
 80066a0:	f7fb fdd9 	bl	8002256 <HAL_GPIO_WritePin>
  for(uint8_t i=8; i--; n <<= 1) {
 80066a4:	1cfa      	adds	r2, r7, #3
 80066a6:	1cfb      	adds	r3, r7, #3
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	18db      	adds	r3, r3, r3
 80066ac:	7013      	strb	r3, [r2, #0]
 80066ae:	e7d0      	b.n	8006652 <_ZN7DotStar10sw_spi_outEh+0x16>
  }
}
 80066b0:	46c0      	nop			; (mov r8, r8)
 80066b2:	46bd      	mov	sp, r7
 80066b4:	b004      	add	sp, #16
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	50000400 	.word	0x50000400

080066bc <_ZN7DotStar4showEv>:
  already handled better in one's sketch code.  If you really can't live
  without this abomination, you can fork the library and add it for your
  own use, but any pull requests for this will NOT be merged, nuh uh!
*/

void DotStar::show(void) {
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]

  if(!pixels) return;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d100      	bne.n	80066ce <_ZN7DotStar4showEv+0x12>
 80066cc:	e0a0      	b.n	8006810 <_ZN7DotStar4showEv+0x154>

  uint8_t *ptr = pixels, i;            // -> LED data
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	60fb      	str	r3, [r7, #12]
  uint8_t n   = numLEDs;              // Counter
 80066d4:	230a      	movs	r3, #10
 80066d6:	18fb      	adds	r3, r7, r3
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	7812      	ldrb	r2, [r2, #0]
 80066dc:	701a      	strb	r2, [r3, #0]
  uint16_t b16 = (uint16_t)brightness; // Type-convert for fixed-point math
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	785a      	ldrb	r2, [r3, #1]
 80066e2:	2308      	movs	r3, #8
 80066e4:	18fb      	adds	r3, r7, r3
 80066e6:	801a      	strh	r2, [r3, #0]

  for(i=0; i<4; i++) sw_spi_out(0);    // Start-frame marker
 80066e8:	230b      	movs	r3, #11
 80066ea:	18fb      	adds	r3, r7, r3
 80066ec:	2200      	movs	r2, #0
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	230b      	movs	r3, #11
 80066f2:	18fb      	adds	r3, r7, r3
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d80b      	bhi.n	8006712 <_ZN7DotStar4showEv+0x56>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2100      	movs	r1, #0
 80066fe:	0018      	movs	r0, r3
 8006700:	f7ff ff9c 	bl	800663c <_ZN7DotStar10sw_spi_outEh>
 8006704:	210b      	movs	r1, #11
 8006706:	187b      	adds	r3, r7, r1
 8006708:	781a      	ldrb	r2, [r3, #0]
 800670a:	187b      	adds	r3, r7, r1
 800670c:	3201      	adds	r2, #1
 800670e:	701a      	strb	r2, [r3, #0]
 8006710:	e7ee      	b.n	80066f0 <_ZN7DotStar4showEv+0x34>
  if(brightness) {                     // Scale pixel brightness on output
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	785b      	ldrb	r3, [r3, #1]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d032      	beq.n	8006780 <_ZN7DotStar4showEv+0xc4>
    do {                               // For each pixel...
      sw_spi_out(0xFF);                //  Pixel start
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	21ff      	movs	r1, #255	; 0xff
 800671e:	0018      	movs	r0, r3
 8006720:	f7ff ff8c 	bl	800663c <_ZN7DotStar10sw_spi_outEh>
      for(i=0; i<3; i++) sw_spi_out((*ptr++ * b16) >> 8); // Scale, write
 8006724:	230b      	movs	r3, #11
 8006726:	18fb      	adds	r3, r7, r3
 8006728:	2200      	movs	r2, #0
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	230b      	movs	r3, #11
 800672e:	18fb      	adds	r3, r7, r3
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d816      	bhi.n	8006764 <_ZN7DotStar4showEv+0xa8>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	60fa      	str	r2, [r7, #12]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	001a      	movs	r2, r3
 8006740:	2308      	movs	r3, #8
 8006742:	18fb      	adds	r3, r7, r3
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	4353      	muls	r3, r2
 8006748:	121b      	asrs	r3, r3, #8
 800674a:	b2da      	uxtb	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	0011      	movs	r1, r2
 8006750:	0018      	movs	r0, r3
 8006752:	f7ff ff73 	bl	800663c <_ZN7DotStar10sw_spi_outEh>
 8006756:	210b      	movs	r1, #11
 8006758:	187b      	adds	r3, r7, r1
 800675a:	781a      	ldrb	r2, [r3, #0]
 800675c:	187b      	adds	r3, r7, r1
 800675e:	3201      	adds	r2, #1
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	e7e3      	b.n	800672c <_ZN7DotStar4showEv+0x70>
    } while(--n);
 8006764:	210a      	movs	r1, #10
 8006766:	187b      	adds	r3, r7, r1
 8006768:	187a      	adds	r2, r7, r1
 800676a:	7812      	ldrb	r2, [r2, #0]
 800676c:	3a01      	subs	r2, #1
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	187b      	adds	r3, r7, r1
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	1e5a      	subs	r2, r3, #1
 8006776:	4193      	sbcs	r3, r2
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d02c      	beq.n	80067d8 <_ZN7DotStar4showEv+0x11c>
    do {                               // For each pixel...
 800677e:	e7cc      	b.n	800671a <_ZN7DotStar4showEv+0x5e>
  } else {                             // Full brightness (no scaling)
    do {                               // For each pixel...
      sw_spi_out(0xFF);                //  Pixel start
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	21ff      	movs	r1, #255	; 0xff
 8006784:	0018      	movs	r0, r3
 8006786:	f7ff ff59 	bl	800663c <_ZN7DotStar10sw_spi_outEh>
      for(i=0; i<3; i++) sw_spi_out(*ptr++); // R,G,B
 800678a:	230b      	movs	r3, #11
 800678c:	18fb      	adds	r3, r7, r3
 800678e:	2200      	movs	r2, #0
 8006790:	701a      	strb	r2, [r3, #0]
 8006792:	230b      	movs	r3, #11
 8006794:	18fb      	adds	r3, r7, r3
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b02      	cmp	r3, #2
 800679a:	d80f      	bhi.n	80067bc <_ZN7DotStar4showEv+0x100>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	60fa      	str	r2, [r7, #12]
 80067a2:	781a      	ldrb	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	0011      	movs	r1, r2
 80067a8:	0018      	movs	r0, r3
 80067aa:	f7ff ff47 	bl	800663c <_ZN7DotStar10sw_spi_outEh>
 80067ae:	210b      	movs	r1, #11
 80067b0:	187b      	adds	r3, r7, r1
 80067b2:	781a      	ldrb	r2, [r3, #0]
 80067b4:	187b      	adds	r3, r7, r1
 80067b6:	3201      	adds	r2, #1
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	e7ea      	b.n	8006792 <_ZN7DotStar4showEv+0xd6>
    } while(--n);
 80067bc:	210a      	movs	r1, #10
 80067be:	187b      	adds	r3, r7, r1
 80067c0:	187a      	adds	r2, r7, r1
 80067c2:	7812      	ldrb	r2, [r2, #0]
 80067c4:	3a01      	subs	r2, #1
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	187b      	adds	r3, r7, r1
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	1e5a      	subs	r2, r3, #1
 80067ce:	4193      	sbcs	r3, r2
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d000      	beq.n	80067d8 <_ZN7DotStar4showEv+0x11c>
    do {                               // For each pixel...
 80067d6:	e7d3      	b.n	8006780 <_ZN7DotStar4showEv+0xc4>
  }
  for(i=0; i<((numLEDs + 15) / 16); i++) sw_spi_out(0xFF); // End-frame marker (see note above)
 80067d8:	230b      	movs	r3, #11
 80067da:	18fb      	adds	r3, r7, r3
 80067dc:	2200      	movs	r2, #0
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	230b      	movs	r3, #11
 80067e2:	18fb      	adds	r3, r7, r3
 80067e4:	781a      	ldrb	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	330f      	adds	r3, #15
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	da00      	bge.n	80067f2 <_ZN7DotStar4showEv+0x136>
 80067f0:	330f      	adds	r3, #15
 80067f2:	111b      	asrs	r3, r3, #4
 80067f4:	429a      	cmp	r2, r3
 80067f6:	da0c      	bge.n	8006812 <_ZN7DotStar4showEv+0x156>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	21ff      	movs	r1, #255	; 0xff
 80067fc:	0018      	movs	r0, r3
 80067fe:	f7ff ff1d 	bl	800663c <_ZN7DotStar10sw_spi_outEh>
 8006802:	210b      	movs	r1, #11
 8006804:	187b      	adds	r3, r7, r1
 8006806:	781a      	ldrb	r2, [r3, #0]
 8006808:	187b      	adds	r3, r7, r1
 800680a:	3201      	adds	r2, #1
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	e7e7      	b.n	80067e0 <_ZN7DotStar4showEv+0x124>
  if(!pixels) return;
 8006810:	46c0      	nop			; (mov r8, r8)
}
 8006812:	46bd      	mov	sp, r7
 8006814:	b004      	add	sp, #16
 8006816:	bd80      	pop	{r7, pc}

08006818 <_ZN7DotStar8incrRingE8RGB_VALS>:

void DotStar::incrRing(RGB_VALS rgb) {
 8006818:	b590      	push	{r4, r7, lr}
 800681a:	b085      	sub	sp, #20
 800681c:	af02      	add	r7, sp, #8
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	003b      	movs	r3, r7
 8006822:	6019      	str	r1, [r3, #0]
  setPixelColor(ringIndex, 0, 0, 0);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	7ad9      	ldrb	r1, [r3, #11]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	2300      	movs	r3, #0
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	2300      	movs	r3, #0
 8006830:	2200      	movs	r2, #0
 8006832:	f000 f864 	bl	80068fe <_ZN7DotStar13setPixelColorEhhhh>
  if (ringIndex == numLEDs-1) {
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	7adb      	ldrb	r3, [r3, #11]
 800683a:	001a      	movs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	3b01      	subs	r3, #1
 8006842:	429a      	cmp	r2, r3
 8006844:	d103      	bne.n	800684e <_ZN7DotStar8incrRingE8RGB_VALS+0x36>
    ringIndex = 0;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	72da      	strb	r2, [r3, #11]
 800684c:	e005      	b.n	800685a <_ZN7DotStar8incrRingE8RGB_VALS+0x42>
  } else {
    ringIndex++;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	7adb      	ldrb	r3, [r3, #11]
 8006852:	3301      	adds	r3, #1
 8006854:	b2da      	uxtb	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	72da      	strb	r2, [r3, #11]
  }
  setPixelColor(ringIndex, rgb.r, rgb.g, rgb.b);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	7ad9      	ldrb	r1, [r3, #11]
 800685e:	003b      	movs	r3, r7
 8006860:	781a      	ldrb	r2, [r3, #0]
 8006862:	003b      	movs	r3, r7
 8006864:	785c      	ldrb	r4, [r3, #1]
 8006866:	003b      	movs	r3, r7
 8006868:	789b      	ldrb	r3, [r3, #2]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	0023      	movs	r3, r4
 8006870:	f000 f845 	bl	80068fe <_ZN7DotStar13setPixelColorEhhhh>
  show();
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	0018      	movs	r0, r3
 8006878:	f7ff ff20 	bl	80066bc <_ZN7DotStar4showEv>
}
 800687c:	46c0      	nop			; (mov r8, r8)
 800687e:	46bd      	mov	sp, r7
 8006880:	b003      	add	sp, #12
 8006882:	bd90      	pop	{r4, r7, pc}

08006884 <_ZN7DotStar8decrRingE8RGB_VALS>:

void DotStar::decrRing(RGB_VALS rgb) {
 8006884:	b590      	push	{r4, r7, lr}
 8006886:	b085      	sub	sp, #20
 8006888:	af02      	add	r7, sp, #8
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	003b      	movs	r3, r7
 800688e:	6019      	str	r1, [r3, #0]
  setPixelColor(ringIndex, 0, 0, 0);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	7ad9      	ldrb	r1, [r3, #11]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	2300      	movs	r3, #0
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	2300      	movs	r3, #0
 800689c:	2200      	movs	r2, #0
 800689e:	f000 f82e 	bl	80068fe <_ZN7DotStar13setPixelColorEhhhh>
  if (ringIndex == 0) {
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	7adb      	ldrb	r3, [r3, #11]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <_ZN7DotStar8decrRingE8RGB_VALS+0x34>
    ringIndex = numLEDs-1;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	72da      	strb	r2, [r3, #11]
 80068b6:	e005      	b.n	80068c4 <_ZN7DotStar8decrRingE8RGB_VALS+0x40>
  } else {
    ringIndex--;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	7adb      	ldrb	r3, [r3, #11]
 80068bc:	3b01      	subs	r3, #1
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	72da      	strb	r2, [r3, #11]
  }
  setPixelColor(ringIndex, rgb.r, rgb.g, rgb.b);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	7ad9      	ldrb	r1, [r3, #11]
 80068c8:	003b      	movs	r3, r7
 80068ca:	781a      	ldrb	r2, [r3, #0]
 80068cc:	003b      	movs	r3, r7
 80068ce:	785c      	ldrb	r4, [r3, #1]
 80068d0:	003b      	movs	r3, r7
 80068d2:	789b      	ldrb	r3, [r3, #2]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	0023      	movs	r3, r4
 80068da:	f000 f810 	bl	80068fe <_ZN7DotStar13setPixelColorEhhhh>
  show();
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	0018      	movs	r0, r3
 80068e2:	f7ff feeb 	bl	80066bc <_ZN7DotStar4showEv>
}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	46bd      	mov	sp, r7
 80068ea:	b003      	add	sp, #12
 80068ec:	bd90      	pop	{r4, r7, pc}

080068ee <_ZN7DotStar5clearEv>:

void DotStar::clear() { // Write 0s (off) to full pixel buffer
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b082      	sub	sp, #8
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  //memset(pixels, 0, (rOffset == gOffset) ?
    //numLEDs + ((numLEDs + 3) / 4) : // MONO: 10 bits/pixel
    //numLEDs * 3);                   // COLOR: 3 bytes/pixel
}
 80068f6:	46c0      	nop			; (mov r8, r8)
 80068f8:	46bd      	mov	sp, r7
 80068fa:	b002      	add	sp, #8
 80068fc:	bd80      	pop	{r7, pc}

080068fe <_ZN7DotStar13setPixelColorEhhhh>:

// Set pixel color, separate R,G,B values (0-255 ea.)
void DotStar::setPixelColor(
 uint8_t n, uint8_t r, uint8_t g, uint8_t b) {
 80068fe:	b590      	push	{r4, r7, lr}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	000c      	movs	r4, r1
 8006908:	0010      	movs	r0, r2
 800690a:	0019      	movs	r1, r3
 800690c:	1cfb      	adds	r3, r7, #3
 800690e:	1c22      	adds	r2, r4, #0
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	1cbb      	adds	r3, r7, #2
 8006914:	1c02      	adds	r2, r0, #0
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	1c7b      	adds	r3, r7, #1
 800691a:	1c0a      	adds	r2, r1, #0
 800691c:	701a      	strb	r2, [r3, #0]
  if(n < numLEDs) {
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	1cfa      	adds	r2, r7, #3
 8006924:	7812      	ldrb	r2, [r2, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d221      	bcs.n	800696e <_ZN7DotStar13setPixelColorEhhhh+0x70>
    uint8_t *p = &pixels[n * 3];
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6859      	ldr	r1, [r3, #4]
 800692e:	1cfb      	adds	r3, r7, #3
 8006930:	781a      	ldrb	r2, [r3, #0]
 8006932:	0013      	movs	r3, r2
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	189b      	adds	r3, r3, r2
 8006938:	18cb      	adds	r3, r1, r3
 800693a:	60fb      	str	r3, [r7, #12]
    p[rOffset] = r;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	7a1b      	ldrb	r3, [r3, #8]
 8006940:	001a      	movs	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	189b      	adds	r3, r3, r2
 8006946:	1cba      	adds	r2, r7, #2
 8006948:	7812      	ldrb	r2, [r2, #0]
 800694a:	701a      	strb	r2, [r3, #0]
    p[gOffset] = g;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	7a5b      	ldrb	r3, [r3, #9]
 8006950:	001a      	movs	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	189b      	adds	r3, r3, r2
 8006956:	1c7a      	adds	r2, r7, #1
 8006958:	7812      	ldrb	r2, [r2, #0]
 800695a:	701a      	strb	r2, [r3, #0]
    p[bOffset] = b;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	7a9b      	ldrb	r3, [r3, #10]
 8006960:	001a      	movs	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	189b      	adds	r3, r3, r2
 8006966:	2220      	movs	r2, #32
 8006968:	18ba      	adds	r2, r7, r2
 800696a:	7812      	ldrb	r2, [r2, #0]
 800696c:	701a      	strb	r2, [r3, #0]
  }
}
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	46bd      	mov	sp, r7
 8006972:	b005      	add	sp, #20
 8006974:	bd90      	pop	{r4, r7, pc}

08006976 <_ZN7DotStar9numPixelsEv>:
  return ((uint32_t)p[rOffset] << 16) |
         ((uint32_t)p[gOffset] <<  8) |
          (uint32_t)p[bOffset];
}

uint8_t DotStar::numPixels(void) { // Ret. strip length
 8006976:	b580      	push	{r7, lr}
 8006978:	b082      	sub	sp, #8
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  return numLEDs;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	781b      	ldrb	r3, [r3, #0]
}
 8006982:	0018      	movs	r0, r3
 8006984:	46bd      	mov	sp, r7
 8006986:	b002      	add	sp, #8
 8006988:	bd80      	pop	{r7, pc}

0800698a <_ZN7DotStar13setBrightnessEh>:
// reasons I think it's better handled in one's sketch, but it's here for
// parity with the NeoPixel library.  Good news is that brightness setting
// in this library is 'non destructive' -- it's applied as color data is
// being issued to the strip, not during setPixel(), and also means that
// getPixelColor() returns the exact value originally stored.
void DotStar::setBrightness(uint8_t b) {
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	000a      	movs	r2, r1
 8006994:	1cfb      	adds	r3, r7, #3
 8006996:	701a      	strb	r2, [r3, #0]
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB.  'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  brightness = b + 1;
 8006998:	1cfb      	adds	r3, r7, #3
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	3301      	adds	r3, #1
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	705a      	strb	r2, [r3, #1]
}
 80069a4:	46c0      	nop			; (mov r8, r8)
 80069a6:	46bd      	mov	sp, r7
 80069a8:	b002      	add	sp, #8
 80069aa:	bd80      	pop	{r7, pc}

080069ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80069ac:	b590      	push	{r4, r7, lr}
 80069ae:	b089      	sub	sp, #36	; 0x24
 80069b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069b2:	240c      	movs	r4, #12
 80069b4:	193b      	adds	r3, r7, r4
 80069b6:	0018      	movs	r0, r3
 80069b8:	2314      	movs	r3, #20
 80069ba:	001a      	movs	r2, r3
 80069bc:	2100      	movs	r1, #0
 80069be:	f001 fb9b 	bl	80080f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80069c2:	4b45      	ldr	r3, [pc, #276]	; (8006ad8 <MX_GPIO_Init+0x12c>)
 80069c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c6:	4b44      	ldr	r3, [pc, #272]	; (8006ad8 <MX_GPIO_Init+0x12c>)
 80069c8:	2101      	movs	r1, #1
 80069ca:	430a      	orrs	r2, r1
 80069cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80069ce:	4b42      	ldr	r3, [pc, #264]	; (8006ad8 <MX_GPIO_Init+0x12c>)
 80069d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d2:	2201      	movs	r2, #1
 80069d4:	4013      	ands	r3, r2
 80069d6:	60bb      	str	r3, [r7, #8]
 80069d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80069da:	4b3f      	ldr	r3, [pc, #252]	; (8006ad8 <MX_GPIO_Init+0x12c>)
 80069dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069de:	4b3e      	ldr	r3, [pc, #248]	; (8006ad8 <MX_GPIO_Init+0x12c>)
 80069e0:	2102      	movs	r1, #2
 80069e2:	430a      	orrs	r2, r1
 80069e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80069e6:	4b3c      	ldr	r3, [pc, #240]	; (8006ad8 <MX_GPIO_Init+0x12c>)
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	2202      	movs	r2, #2
 80069ec:	4013      	ands	r3, r2
 80069ee:	607b      	str	r3, [r7, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_0_Pin|LED_1_Pin|LED_2_Pin|TEST_LED_Pin 
 80069f2:	493a      	ldr	r1, [pc, #232]	; (8006adc <MX_GPIO_Init+0x130>)
 80069f4:	23a0      	movs	r3, #160	; 0xa0
 80069f6:	05db      	lsls	r3, r3, #23
 80069f8:	2200      	movs	r2, #0
 80069fa:	0018      	movs	r0, r3
 80069fc:	f7fb fc2b 	bl	8002256 <HAL_GPIO_WritePin>
                          |LED_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8006a00:	23a0      	movs	r3, #160	; 0xa0
 8006a02:	05db      	lsls	r3, r3, #23
 8006a04:	2201      	movs	r2, #1
 8006a06:	2110      	movs	r1, #16
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f7fb fc24 	bl	8002256 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DOTSTAR_DATA_Pin|DOTSTAR_CLK_Pin, GPIO_PIN_RESET);
 8006a0e:	4b34      	ldr	r3, [pc, #208]	; (8006ae0 <MX_GPIO_Init+0x134>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	2103      	movs	r1, #3
 8006a14:	0018      	movs	r0, r3
 8006a16:	f7fb fc1e 	bl	8002256 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|SPI_SS_Pin|LED_2_Pin 
 8006a1a:	193b      	adds	r3, r7, r4
 8006a1c:	4a31      	ldr	r2, [pc, #196]	; (8006ae4 <MX_GPIO_Init+0x138>)
 8006a1e:	601a      	str	r2, [r3, #0]
                          |TEST_LED_Pin|LED_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a20:	193b      	adds	r3, r7, r4
 8006a22:	2201      	movs	r2, #1
 8006a24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a26:	193b      	adds	r3, r7, r4
 8006a28:	2200      	movs	r2, #0
 8006a2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a2c:	193b      	adds	r3, r7, r4
 8006a2e:	2200      	movs	r2, #0
 8006a30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a32:	193a      	adds	r2, r7, r4
 8006a34:	23a0      	movs	r3, #160	; 0xa0
 8006a36:	05db      	lsls	r3, r3, #23
 8006a38:	0011      	movs	r1, r2
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f7fb fa78 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WKUP_Pin;
 8006a40:	193b      	adds	r3, r7, r4
 8006a42:	2201      	movs	r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a46:	193b      	adds	r3, r7, r4
 8006a48:	2200      	movs	r2, #0
 8006a4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a4c:	193b      	adds	r3, r7, r4
 8006a4e:	2201      	movs	r2, #1
 8006a50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a52:	193a      	adds	r2, r7, r4
 8006a54:	23a0      	movs	r3, #160	; 0xa0
 8006a56:	05db      	lsls	r3, r3, #23
 8006a58:	0011      	movs	r1, r2
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f7fb fa68 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DOTSTAR_DATA_Pin|DOTSTAR_CLK_Pin;
 8006a60:	0021      	movs	r1, r4
 8006a62:	187b      	adds	r3, r7, r1
 8006a64:	2203      	movs	r2, #3
 8006a66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a68:	187b      	adds	r3, r7, r1
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a6e:	187b      	adds	r3, r7, r1
 8006a70:	2200      	movs	r2, #0
 8006a72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a74:	187b      	adds	r3, r7, r1
 8006a76:	2200      	movs	r2, #0
 8006a78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a7a:	000c      	movs	r4, r1
 8006a7c:	187b      	adds	r3, r7, r1
 8006a7e:	4a18      	ldr	r2, [pc, #96]	; (8006ae0 <MX_GPIO_Init+0x134>)
 8006a80:	0019      	movs	r1, r3
 8006a82:	0010      	movs	r0, r2
 8006a84:	f7fb fa54 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BG_SW_0_Pin|BG_SW_6_Pin|BG_SW_7_Pin|SW_0_Pin 
 8006a88:	0021      	movs	r1, r4
 8006a8a:	187b      	adds	r3, r7, r1
 8006a8c:	4a16      	ldr	r2, [pc, #88]	; (8006ae8 <MX_GPIO_Init+0x13c>)
 8006a8e:	601a      	str	r2, [r3, #0]
                          |SW_1_Pin|SW_2_Pin|SW_3_Pin|BG_SW_1_Pin 
                          |BG_SW_2_Pin|BG_SW_3_Pin|BG_SW_4_Pin|BG_SW_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a90:	187b      	adds	r3, r7, r1
 8006a92:	2200      	movs	r2, #0
 8006a94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a96:	187b      	adds	r3, r7, r1
 8006a98:	2200      	movs	r2, #0
 8006a9a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a9c:	000c      	movs	r4, r1
 8006a9e:	187b      	adds	r3, r7, r1
 8006aa0:	4a0f      	ldr	r2, [pc, #60]	; (8006ae0 <MX_GPIO_Init+0x134>)
 8006aa2:	0019      	movs	r1, r3
 8006aa4:	0010      	movs	r0, r2
 8006aa6:	f7fb fa43 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COLOR_INT_Pin;
 8006aaa:	0021      	movs	r1, r4
 8006aac:	187b      	adds	r3, r7, r1
 8006aae:	2280      	movs	r2, #128	; 0x80
 8006ab0:	0212      	lsls	r2, r2, #8
 8006ab2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ab4:	187b      	adds	r3, r7, r1
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aba:	187b      	adds	r3, r7, r1
 8006abc:	2200      	movs	r2, #0
 8006abe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(COLOR_INT_GPIO_Port, &GPIO_InitStruct);
 8006ac0:	187a      	adds	r2, r7, r1
 8006ac2:	23a0      	movs	r3, #160	; 0xa0
 8006ac4:	05db      	lsls	r3, r3, #23
 8006ac6:	0011      	movs	r1, r2
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f7fb fa31 	bl	8001f30 <HAL_GPIO_Init>

}
 8006ace:	46c0      	nop			; (mov r8, r8)
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	b009      	add	sp, #36	; 0x24
 8006ad4:	bd90      	pop	{r4, r7, pc}
 8006ad6:	46c0      	nop			; (mov r8, r8)
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	00001906 	.word	0x00001906
 8006ae0:	50000400 	.word	0x50000400
 8006ae4:	00001916 	.word	0x00001916
 8006ae8:	0000ff3c 	.word	0x0000ff3c

08006aec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8006af0:	4b1b      	ldr	r3, [pc, #108]	; (8006b60 <MX_I2C1_Init+0x74>)
 8006af2:	4a1c      	ldr	r2, [pc, #112]	; (8006b64 <MX_I2C1_Init+0x78>)
 8006af4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8006af6:	4b1a      	ldr	r3, [pc, #104]	; (8006b60 <MX_I2C1_Init+0x74>)
 8006af8:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <MX_I2C1_Init+0x7c>)
 8006afa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006afc:	4b18      	ldr	r3, [pc, #96]	; (8006b60 <MX_I2C1_Init+0x74>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006b02:	4b17      	ldr	r3, [pc, #92]	; (8006b60 <MX_I2C1_Init+0x74>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006b08:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <MX_I2C1_Init+0x74>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006b0e:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <MX_I2C1_Init+0x74>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006b14:	4b12      	ldr	r3, [pc, #72]	; (8006b60 <MX_I2C1_Init+0x74>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006b1a:	4b11      	ldr	r3, [pc, #68]	; (8006b60 <MX_I2C1_Init+0x74>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006b20:	4b0f      	ldr	r3, [pc, #60]	; (8006b60 <MX_I2C1_Init+0x74>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006b26:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <MX_I2C1_Init+0x74>)
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f7fb fbb1 	bl	8002290 <HAL_I2C_Init>
 8006b2e:	1e03      	subs	r3, r0, #0
 8006b30:	d001      	beq.n	8006b36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006b32:	f001 f85f 	bl	8007bf4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006b36:	4b0a      	ldr	r3, [pc, #40]	; (8006b60 <MX_I2C1_Init+0x74>)
 8006b38:	2100      	movs	r1, #0
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	f7fc f832 	bl	8002ba4 <HAL_I2CEx_ConfigAnalogFilter>
 8006b40:	1e03      	subs	r3, r0, #0
 8006b42:	d001      	beq.n	8006b48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006b44:	f001 f856 	bl	8007bf4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006b48:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <MX_I2C1_Init+0x74>)
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	f7fc f875 	bl	8002c3c <HAL_I2CEx_ConfigDigitalFilter>
 8006b52:	1e03      	subs	r3, r0, #0
 8006b54:	d001      	beq.n	8006b5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006b56:	f001 f84d 	bl	8007bf4 <Error_Handler>
  }

}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	200000b4 	.word	0x200000b4
 8006b64:	40005400 	.word	0x40005400
 8006b68:	00707cbb 	.word	0x00707cbb

08006b6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006b6c:	b590      	push	{r4, r7, lr}
 8006b6e:	b089      	sub	sp, #36	; 0x24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b74:	230c      	movs	r3, #12
 8006b76:	18fb      	adds	r3, r7, r3
 8006b78:	0018      	movs	r0, r3
 8006b7a:	2314      	movs	r3, #20
 8006b7c:	001a      	movs	r2, r3
 8006b7e:	2100      	movs	r1, #0
 8006b80:	f001 faba 	bl	80080f8 <memset>
  if(i2cHandle->Instance==I2C1)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a23      	ldr	r2, [pc, #140]	; (8006c18 <HAL_I2C_MspInit+0xac>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d13f      	bne.n	8006c0e <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b8e:	4b23      	ldr	r3, [pc, #140]	; (8006c1c <HAL_I2C_MspInit+0xb0>)
 8006b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b92:	4b22      	ldr	r3, [pc, #136]	; (8006c1c <HAL_I2C_MspInit+0xb0>)
 8006b94:	2102      	movs	r1, #2
 8006b96:	430a      	orrs	r2, r1
 8006b98:	62da      	str	r2, [r3, #44]	; 0x2c
 8006b9a:	4b20      	ldr	r3, [pc, #128]	; (8006c1c <HAL_I2C_MspInit+0xb0>)
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	60bb      	str	r3, [r7, #8]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006ba6:	210c      	movs	r1, #12
 8006ba8:	187b      	adds	r3, r7, r1
 8006baa:	2240      	movs	r2, #64	; 0x40
 8006bac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006bae:	187b      	adds	r3, r7, r1
 8006bb0:	2212      	movs	r2, #18
 8006bb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb4:	187b      	adds	r3, r7, r1
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bba:	187b      	adds	r3, r7, r1
 8006bbc:	2203      	movs	r2, #3
 8006bbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006bc0:	187b      	adds	r3, r7, r1
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bc6:	000c      	movs	r4, r1
 8006bc8:	187b      	adds	r3, r7, r1
 8006bca:	4a15      	ldr	r2, [pc, #84]	; (8006c20 <HAL_I2C_MspInit+0xb4>)
 8006bcc:	0019      	movs	r1, r3
 8006bce:	0010      	movs	r0, r2
 8006bd0:	f7fb f9ae 	bl	8001f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006bd4:	0021      	movs	r1, r4
 8006bd6:	187b      	adds	r3, r7, r1
 8006bd8:	2280      	movs	r2, #128	; 0x80
 8006bda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006bdc:	187b      	adds	r3, r7, r1
 8006bde:	2212      	movs	r2, #18
 8006be0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006be2:	187b      	adds	r3, r7, r1
 8006be4:	2201      	movs	r2, #1
 8006be6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006be8:	187b      	adds	r3, r7, r1
 8006bea:	2203      	movs	r2, #3
 8006bec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006bee:	187b      	adds	r3, r7, r1
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bf4:	187b      	adds	r3, r7, r1
 8006bf6:	4a0a      	ldr	r2, [pc, #40]	; (8006c20 <HAL_I2C_MspInit+0xb4>)
 8006bf8:	0019      	movs	r1, r3
 8006bfa:	0010      	movs	r0, r2
 8006bfc:	f7fb f998 	bl	8001f30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c00:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <HAL_I2C_MspInit+0xb0>)
 8006c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c04:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <HAL_I2C_MspInit+0xb0>)
 8006c06:	2180      	movs	r1, #128	; 0x80
 8006c08:	0389      	lsls	r1, r1, #14
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	46bd      	mov	sp, r7
 8006c12:	b009      	add	sp, #36	; 0x24
 8006c14:	bd90      	pop	{r4, r7, pc}
 8006c16:	46c0      	nop			; (mov r8, r8)
 8006c18:	40005400 	.word	0x40005400
 8006c1c:	40021000 	.word	0x40021000
 8006c20:	50000400 	.word	0x50000400

08006c24 <read_tog_sw_states>:
#include "rng.h"
#include "APDS9960.h"
#include "usart.h"
#include "ring_effects.hpp"

void read_tog_sw_states(void) {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  tog_sw_states[0] = HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin);
 8006c28:	2380      	movs	r3, #128	; 0x80
 8006c2a:	015b      	lsls	r3, r3, #5
 8006c2c:	4a10      	ldr	r2, [pc, #64]	; (8006c70 <read_tog_sw_states+0x4c>)
 8006c2e:	0019      	movs	r1, r3
 8006c30:	0010      	movs	r0, r2
 8006c32:	f7fb faf3 	bl	800221c <HAL_GPIO_ReadPin>
 8006c36:	0003      	movs	r3, r0
 8006c38:	001a      	movs	r2, r3
 8006c3a:	4b0e      	ldr	r3, [pc, #56]	; (8006c74 <read_tog_sw_states+0x50>)
 8006c3c:	701a      	strb	r2, [r3, #0]
  tog_sw_states[1] = HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);
 8006c3e:	2380      	movs	r3, #128	; 0x80
 8006c40:	019b      	lsls	r3, r3, #6
 8006c42:	4a0b      	ldr	r2, [pc, #44]	; (8006c70 <read_tog_sw_states+0x4c>)
 8006c44:	0019      	movs	r1, r3
 8006c46:	0010      	movs	r0, r2
 8006c48:	f7fb fae8 	bl	800221c <HAL_GPIO_ReadPin>
 8006c4c:	0003      	movs	r3, r0
 8006c4e:	001a      	movs	r2, r3
 8006c50:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <read_tog_sw_states+0x50>)
 8006c52:	705a      	strb	r2, [r3, #1]
  tog_sw_states[2] = HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);
 8006c54:	2380      	movs	r3, #128	; 0x80
 8006c56:	01db      	lsls	r3, r3, #7
 8006c58:	4a05      	ldr	r2, [pc, #20]	; (8006c70 <read_tog_sw_states+0x4c>)
 8006c5a:	0019      	movs	r1, r3
 8006c5c:	0010      	movs	r0, r2
 8006c5e:	f7fb fadd 	bl	800221c <HAL_GPIO_ReadPin>
 8006c62:	0003      	movs	r3, r0
 8006c64:	001a      	movs	r2, r3
 8006c66:	4b03      	ldr	r3, [pc, #12]	; (8006c74 <read_tog_sw_states+0x50>)
 8006c68:	709a      	strb	r2, [r3, #2]
}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	50000400 	.word	0x50000400
 8006c74:	2000009c 	.word	0x2000009c

08006c78 <check_tog_sw_states>:

uint8_t check_tog_sw_states(void) {
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
  GPIO_PinState tog_sw_states_new[3];
  tog_sw_states_new[0] = HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin);
 8006c7e:	2380      	movs	r3, #128	; 0x80
 8006c80:	015b      	lsls	r3, r3, #5
 8006c82:	4a1e      	ldr	r2, [pc, #120]	; (8006cfc <check_tog_sw_states+0x84>)
 8006c84:	0019      	movs	r1, r3
 8006c86:	0010      	movs	r0, r2
 8006c88:	f7fb fac8 	bl	800221c <HAL_GPIO_ReadPin>
 8006c8c:	0003      	movs	r3, r0
 8006c8e:	001a      	movs	r2, r3
 8006c90:	1d3b      	adds	r3, r7, #4
 8006c92:	701a      	strb	r2, [r3, #0]
  tog_sw_states_new[1] = HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);
 8006c94:	2380      	movs	r3, #128	; 0x80
 8006c96:	019b      	lsls	r3, r3, #6
 8006c98:	4a18      	ldr	r2, [pc, #96]	; (8006cfc <check_tog_sw_states+0x84>)
 8006c9a:	0019      	movs	r1, r3
 8006c9c:	0010      	movs	r0, r2
 8006c9e:	f7fb fabd 	bl	800221c <HAL_GPIO_ReadPin>
 8006ca2:	0003      	movs	r3, r0
 8006ca4:	001a      	movs	r2, r3
 8006ca6:	1d3b      	adds	r3, r7, #4
 8006ca8:	705a      	strb	r2, [r3, #1]
  tog_sw_states_new[2] = HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);
 8006caa:	2380      	movs	r3, #128	; 0x80
 8006cac:	01db      	lsls	r3, r3, #7
 8006cae:	4a13      	ldr	r2, [pc, #76]	; (8006cfc <check_tog_sw_states+0x84>)
 8006cb0:	0019      	movs	r1, r3
 8006cb2:	0010      	movs	r0, r2
 8006cb4:	f7fb fab2 	bl	800221c <HAL_GPIO_ReadPin>
 8006cb8:	0003      	movs	r3, r0
 8006cba:	001a      	movs	r2, r3
 8006cbc:	1d3b      	adds	r3, r7, #4
 8006cbe:	709a      	strb	r2, [r3, #2]

  for (uint8_t sw_i = 0; sw_i < 3; sw_i++) {
 8006cc0:	1dfb      	adds	r3, r7, #7
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	701a      	strb	r2, [r3, #0]
 8006cc6:	1dfb      	adds	r3, r7, #7
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d811      	bhi.n	8006cf2 <check_tog_sw_states+0x7a>
    if (tog_sw_states_new[sw_i] != tog_sw_states[sw_i]) {
 8006cce:	1dfb      	adds	r3, r7, #7
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	1d3a      	adds	r2, r7, #4
 8006cd4:	5cd2      	ldrb	r2, [r2, r3]
 8006cd6:	1dfb      	adds	r3, r7, #7
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	4909      	ldr	r1, [pc, #36]	; (8006d00 <check_tog_sw_states+0x88>)
 8006cdc:	5ccb      	ldrb	r3, [r1, r3]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d001      	beq.n	8006ce6 <check_tog_sw_states+0x6e>
      return 1;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e006      	b.n	8006cf4 <check_tog_sw_states+0x7c>
  for (uint8_t sw_i = 0; sw_i < 3; sw_i++) {
 8006ce6:	1dfb      	adds	r3, r7, #7
 8006ce8:	781a      	ldrb	r2, [r3, #0]
 8006cea:	1dfb      	adds	r3, r7, #7
 8006cec:	3201      	adds	r2, #1
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	e7e9      	b.n	8006cc6 <check_tog_sw_states+0x4e>
    }
  }
  return 0;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	b002      	add	sp, #8
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	50000400 	.word	0x50000400
 8006d00:	2000009c 	.word	0x2000009c

08006d04 <update_tog_sw_states>:

void update_tog_sw_states(void) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
  GPIO_PinState tog_sw_states_new[3];
  tog_sw_states_new[0] = HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin);
 8006d0a:	2380      	movs	r3, #128	; 0x80
 8006d0c:	015b      	lsls	r3, r3, #5
 8006d0e:	4a31      	ldr	r2, [pc, #196]	; (8006dd4 <update_tog_sw_states+0xd0>)
 8006d10:	0019      	movs	r1, r3
 8006d12:	0010      	movs	r0, r2
 8006d14:	f7fb fa82 	bl	800221c <HAL_GPIO_ReadPin>
 8006d18:	0003      	movs	r3, r0
 8006d1a:	001a      	movs	r2, r3
 8006d1c:	1d3b      	adds	r3, r7, #4
 8006d1e:	701a      	strb	r2, [r3, #0]
  tog_sw_states_new[1] = HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);
 8006d20:	2380      	movs	r3, #128	; 0x80
 8006d22:	019b      	lsls	r3, r3, #6
 8006d24:	4a2b      	ldr	r2, [pc, #172]	; (8006dd4 <update_tog_sw_states+0xd0>)
 8006d26:	0019      	movs	r1, r3
 8006d28:	0010      	movs	r0, r2
 8006d2a:	f7fb fa77 	bl	800221c <HAL_GPIO_ReadPin>
 8006d2e:	0003      	movs	r3, r0
 8006d30:	001a      	movs	r2, r3
 8006d32:	1d3b      	adds	r3, r7, #4
 8006d34:	705a      	strb	r2, [r3, #1]
  tog_sw_states_new[2] = HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);
 8006d36:	2380      	movs	r3, #128	; 0x80
 8006d38:	01db      	lsls	r3, r3, #7
 8006d3a:	4a26      	ldr	r2, [pc, #152]	; (8006dd4 <update_tog_sw_states+0xd0>)
 8006d3c:	0019      	movs	r1, r3
 8006d3e:	0010      	movs	r0, r2
 8006d40:	f7fb fa6c 	bl	800221c <HAL_GPIO_ReadPin>
 8006d44:	0003      	movs	r3, r0
 8006d46:	001a      	movs	r2, r3
 8006d48:	1d3b      	adds	r3, r7, #4
 8006d4a:	709a      	strb	r2, [r3, #2]

  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, tog_sw_states_new[0]);
 8006d4c:	1d3b      	adds	r3, r7, #4
 8006d4e:	781a      	ldrb	r2, [r3, #0]
 8006d50:	23a0      	movs	r3, #160	; 0xa0
 8006d52:	05db      	lsls	r3, r3, #23
 8006d54:	2102      	movs	r1, #2
 8006d56:	0018      	movs	r0, r3
 8006d58:	f7fb fa7d 	bl	8002256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, tog_sw_states_new[1]);
 8006d5c:	1d3b      	adds	r3, r7, #4
 8006d5e:	785a      	ldrb	r2, [r3, #1]
 8006d60:	23a0      	movs	r3, #160	; 0xa0
 8006d62:	05db      	lsls	r3, r3, #23
 8006d64:	2104      	movs	r1, #4
 8006d66:	0018      	movs	r0, r3
 8006d68:	f7fb fa75 	bl	8002256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, tog_sw_states_new[2]);
 8006d6c:	1d3b      	adds	r3, r7, #4
 8006d6e:	789a      	ldrb	r2, [r3, #2]
 8006d70:	2380      	movs	r3, #128	; 0x80
 8006d72:	0059      	lsls	r1, r3, #1
 8006d74:	23a0      	movs	r3, #160	; 0xa0
 8006d76:	05db      	lsls	r3, r3, #23
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f7fb fa6c 	bl	8002256 <HAL_GPIO_WritePin>

  for (uint8_t sw_i = 0; sw_i < 3; sw_i++) {
 8006d7e:	1dfb      	adds	r3, r7, #7
 8006d80:	2200      	movs	r2, #0
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	1dfb      	adds	r3, r7, #7
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d81e      	bhi.n	8006dca <update_tog_sw_states+0xc6>
    if ((tog_sw_states_new[sw_i] == GPIO_PIN_SET) && (tog_sw_states[sw_i] == GPIO_PIN_RESET)) {
 8006d8c:	1dfb      	adds	r3, r7, #7
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	1d3a      	adds	r2, r7, #4
 8006d92:	5cd3      	ldrb	r3, [r2, r3]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d10a      	bne.n	8006dae <update_tog_sw_states+0xaa>
 8006d98:	1dfb      	adds	r3, r7, #7
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	4a0e      	ldr	r2, [pc, #56]	; (8006dd8 <update_tog_sw_states+0xd4>)
 8006d9e:	5cd3      	ldrb	r3, [r2, r3]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d104      	bne.n	8006dae <update_tog_sw_states+0xaa>
      send_audio(sw_i);
 8006da4:	1dfb      	adds	r3, r7, #7
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	0018      	movs	r0, r3
 8006daa:	f000 fb8f 	bl	80074cc <send_audio>
    }
    tog_sw_states[sw_i] = tog_sw_states_new[sw_i];
 8006dae:	1dfb      	adds	r3, r7, #7
 8006db0:	781a      	ldrb	r2, [r3, #0]
 8006db2:	1dfb      	adds	r3, r7, #7
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	1d39      	adds	r1, r7, #4
 8006db8:	5c89      	ldrb	r1, [r1, r2]
 8006dba:	4a07      	ldr	r2, [pc, #28]	; (8006dd8 <update_tog_sw_states+0xd4>)
 8006dbc:	54d1      	strb	r1, [r2, r3]
  for (uint8_t sw_i = 0; sw_i < 3; sw_i++) {
 8006dbe:	1dfb      	adds	r3, r7, #7
 8006dc0:	781a      	ldrb	r2, [r3, #0]
 8006dc2:	1dfb      	adds	r3, r7, #7
 8006dc4:	3201      	adds	r2, #1
 8006dc6:	701a      	strb	r2, [r3, #0]
 8006dc8:	e7dc      	b.n	8006d84 <update_tog_sw_states+0x80>
  }
}
 8006dca:	46c0      	nop			; (mov r8, r8)
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	b002      	add	sp, #8
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	46c0      	nop			; (mov r8, r8)
 8006dd4:	50000400 	.word	0x50000400
 8006dd8:	2000009c 	.word	0x2000009c

08006ddc <read_bg_sw_states>:

static uint8_t bg_sw_states_last[8];
void read_bg_sw_states(void) {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
  bg_sw_states[0] = !HAL_GPIO_ReadPin(BG_SW_0_GPIO_Port, BG_SW_0_Pin);
 8006de2:	4b40      	ldr	r3, [pc, #256]	; (8006ee4 <read_bg_sw_states+0x108>)
 8006de4:	2104      	movs	r1, #4
 8006de6:	0018      	movs	r0, r3
 8006de8:	f7fb fa18 	bl	800221c <HAL_GPIO_ReadPin>
 8006dec:	0003      	movs	r3, r0
 8006dee:	425a      	negs	r2, r3
 8006df0:	4153      	adcs	r3, r2
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	001a      	movs	r2, r3
 8006df6:	4b3c      	ldr	r3, [pc, #240]	; (8006ee8 <read_bg_sw_states+0x10c>)
 8006df8:	701a      	strb	r2, [r3, #0]
  bg_sw_states[1] = !HAL_GPIO_ReadPin(BG_SW_1_GPIO_Port, BG_SW_1_Pin);
 8006dfa:	4b3a      	ldr	r3, [pc, #232]	; (8006ee4 <read_bg_sw_states+0x108>)
 8006dfc:	2108      	movs	r1, #8
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f7fb fa0c 	bl	800221c <HAL_GPIO_ReadPin>
 8006e04:	0003      	movs	r3, r0
 8006e06:	425a      	negs	r2, r3
 8006e08:	4153      	adcs	r3, r2
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	001a      	movs	r2, r3
 8006e0e:	4b36      	ldr	r3, [pc, #216]	; (8006ee8 <read_bg_sw_states+0x10c>)
 8006e10:	705a      	strb	r2, [r3, #1]
  bg_sw_states[2] = !HAL_GPIO_ReadPin(BG_SW_2_GPIO_Port, BG_SW_2_Pin);
 8006e12:	4b34      	ldr	r3, [pc, #208]	; (8006ee4 <read_bg_sw_states+0x108>)
 8006e14:	2110      	movs	r1, #16
 8006e16:	0018      	movs	r0, r3
 8006e18:	f7fb fa00 	bl	800221c <HAL_GPIO_ReadPin>
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	425a      	negs	r2, r3
 8006e20:	4153      	adcs	r3, r2
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	001a      	movs	r2, r3
 8006e26:	4b30      	ldr	r3, [pc, #192]	; (8006ee8 <read_bg_sw_states+0x10c>)
 8006e28:	709a      	strb	r2, [r3, #2]
  bg_sw_states[3] = !HAL_GPIO_ReadPin(BG_SW_3_GPIO_Port, BG_SW_3_Pin);
 8006e2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ee4 <read_bg_sw_states+0x108>)
 8006e2c:	2120      	movs	r1, #32
 8006e2e:	0018      	movs	r0, r3
 8006e30:	f7fb f9f4 	bl	800221c <HAL_GPIO_ReadPin>
 8006e34:	0003      	movs	r3, r0
 8006e36:	425a      	negs	r2, r3
 8006e38:	4153      	adcs	r3, r2
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	001a      	movs	r2, r3
 8006e3e:	4b2a      	ldr	r3, [pc, #168]	; (8006ee8 <read_bg_sw_states+0x10c>)
 8006e40:	70da      	strb	r2, [r3, #3]
  bg_sw_states[4] = !HAL_GPIO_ReadPin(BG_SW_4_GPIO_Port, BG_SW_4_Pin);
 8006e42:	2380      	movs	r3, #128	; 0x80
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	4a27      	ldr	r2, [pc, #156]	; (8006ee4 <read_bg_sw_states+0x108>)
 8006e48:	0019      	movs	r1, r3
 8006e4a:	0010      	movs	r0, r2
 8006e4c:	f7fb f9e6 	bl	800221c <HAL_GPIO_ReadPin>
 8006e50:	0003      	movs	r3, r0
 8006e52:	425a      	negs	r2, r3
 8006e54:	4153      	adcs	r3, r2
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	001a      	movs	r2, r3
 8006e5a:	4b23      	ldr	r3, [pc, #140]	; (8006ee8 <read_bg_sw_states+0x10c>)
 8006e5c:	711a      	strb	r2, [r3, #4]
  bg_sw_states[5] = !HAL_GPIO_ReadPin(BG_SW_5_GPIO_Port, BG_SW_5_Pin);
 8006e5e:	2380      	movs	r3, #128	; 0x80
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4a20      	ldr	r2, [pc, #128]	; (8006ee4 <read_bg_sw_states+0x108>)
 8006e64:	0019      	movs	r1, r3
 8006e66:	0010      	movs	r0, r2
 8006e68:	f7fb f9d8 	bl	800221c <HAL_GPIO_ReadPin>
 8006e6c:	0003      	movs	r3, r0
 8006e6e:	425a      	negs	r2, r3
 8006e70:	4153      	adcs	r3, r2
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	001a      	movs	r2, r3
 8006e76:	4b1c      	ldr	r3, [pc, #112]	; (8006ee8 <read_bg_sw_states+0x10c>)
 8006e78:	715a      	strb	r2, [r3, #5]
  bg_sw_states[6] = !HAL_GPIO_ReadPin(BG_SW_6_GPIO_Port, BG_SW_6_Pin);
 8006e7a:	2380      	movs	r3, #128	; 0x80
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	4a19      	ldr	r2, [pc, #100]	; (8006ee4 <read_bg_sw_states+0x108>)
 8006e80:	0019      	movs	r1, r3
 8006e82:	0010      	movs	r0, r2
 8006e84:	f7fb f9ca 	bl	800221c <HAL_GPIO_ReadPin>
 8006e88:	0003      	movs	r3, r0
 8006e8a:	425a      	negs	r2, r3
 8006e8c:	4153      	adcs	r3, r2
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	001a      	movs	r2, r3
 8006e92:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <read_bg_sw_states+0x10c>)
 8006e94:	719a      	strb	r2, [r3, #6]
  bg_sw_states[7] = !HAL_GPIO_ReadPin(BG_SW_7_GPIO_Port, BG_SW_7_Pin);
 8006e96:	2380      	movs	r3, #128	; 0x80
 8006e98:	011b      	lsls	r3, r3, #4
 8006e9a:	4a12      	ldr	r2, [pc, #72]	; (8006ee4 <read_bg_sw_states+0x108>)
 8006e9c:	0019      	movs	r1, r3
 8006e9e:	0010      	movs	r0, r2
 8006ea0:	f7fb f9bc 	bl	800221c <HAL_GPIO_ReadPin>
 8006ea4:	0003      	movs	r3, r0
 8006ea6:	425a      	negs	r2, r3
 8006ea8:	4153      	adcs	r3, r2
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	001a      	movs	r2, r3
 8006eae:	4b0e      	ldr	r3, [pc, #56]	; (8006ee8 <read_bg_sw_states+0x10c>)
 8006eb0:	71da      	strb	r2, [r3, #7]

  for (uint8_t i = 0; i < 8; i++) {
 8006eb2:	1dfb      	adds	r3, r7, #7
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	1dfb      	adds	r3, r7, #7
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	2b07      	cmp	r3, #7
 8006ebe:	d80d      	bhi.n	8006edc <read_bg_sw_states+0x100>
    bg_sw_states_last[i] = bg_sw_states[i];
 8006ec0:	1dfb      	adds	r3, r7, #7
 8006ec2:	781a      	ldrb	r2, [r3, #0]
 8006ec4:	1dfb      	adds	r3, r7, #7
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	4907      	ldr	r1, [pc, #28]	; (8006ee8 <read_bg_sw_states+0x10c>)
 8006eca:	5c89      	ldrb	r1, [r1, r2]
 8006ecc:	4a07      	ldr	r2, [pc, #28]	; (8006eec <read_bg_sw_states+0x110>)
 8006ece:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < 8; i++) {
 8006ed0:	1dfb      	adds	r3, r7, #7
 8006ed2:	781a      	ldrb	r2, [r3, #0]
 8006ed4:	1dfb      	adds	r3, r7, #7
 8006ed6:	3201      	adds	r2, #1
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	e7ed      	b.n	8006eb8 <read_bg_sw_states+0xdc>
  }

}
 8006edc:	46c0      	nop			; (mov r8, r8)
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	b002      	add	sp, #8
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	50000400 	.word	0x50000400
 8006ee8:	20000094 	.word	0x20000094
 8006eec:	20000088 	.word	0x20000088

08006ef0 <check_bg_sw_states>:

uint8_t check_bg_sw_states(void) {
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
  uint8_t bg_sw_states_new[8];
  bg_sw_states_new[0] = !HAL_GPIO_ReadPin(BG_SW_0_GPIO_Port, BG_SW_0_Pin);
 8006ef6:	4b45      	ldr	r3, [pc, #276]	; (800700c <check_bg_sw_states+0x11c>)
 8006ef8:	2104      	movs	r1, #4
 8006efa:	0018      	movs	r0, r3
 8006efc:	f7fb f98e 	bl	800221c <HAL_GPIO_ReadPin>
 8006f00:	0003      	movs	r3, r0
 8006f02:	425a      	negs	r2, r3
 8006f04:	4153      	adcs	r3, r2
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	001a      	movs	r2, r3
 8006f0a:	1d3b      	adds	r3, r7, #4
 8006f0c:	701a      	strb	r2, [r3, #0]
  bg_sw_states_new[1] = !HAL_GPIO_ReadPin(BG_SW_1_GPIO_Port, BG_SW_1_Pin);
 8006f0e:	4b3f      	ldr	r3, [pc, #252]	; (800700c <check_bg_sw_states+0x11c>)
 8006f10:	2108      	movs	r1, #8
 8006f12:	0018      	movs	r0, r3
 8006f14:	f7fb f982 	bl	800221c <HAL_GPIO_ReadPin>
 8006f18:	0003      	movs	r3, r0
 8006f1a:	425a      	negs	r2, r3
 8006f1c:	4153      	adcs	r3, r2
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	001a      	movs	r2, r3
 8006f22:	1d3b      	adds	r3, r7, #4
 8006f24:	705a      	strb	r2, [r3, #1]
  bg_sw_states_new[2] = !HAL_GPIO_ReadPin(BG_SW_2_GPIO_Port, BG_SW_2_Pin);
 8006f26:	4b39      	ldr	r3, [pc, #228]	; (800700c <check_bg_sw_states+0x11c>)
 8006f28:	2110      	movs	r1, #16
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	f7fb f976 	bl	800221c <HAL_GPIO_ReadPin>
 8006f30:	0003      	movs	r3, r0
 8006f32:	425a      	negs	r2, r3
 8006f34:	4153      	adcs	r3, r2
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	001a      	movs	r2, r3
 8006f3a:	1d3b      	adds	r3, r7, #4
 8006f3c:	709a      	strb	r2, [r3, #2]
  bg_sw_states_new[3] = !HAL_GPIO_ReadPin(BG_SW_3_GPIO_Port, BG_SW_3_Pin);
 8006f3e:	4b33      	ldr	r3, [pc, #204]	; (800700c <check_bg_sw_states+0x11c>)
 8006f40:	2120      	movs	r1, #32
 8006f42:	0018      	movs	r0, r3
 8006f44:	f7fb f96a 	bl	800221c <HAL_GPIO_ReadPin>
 8006f48:	0003      	movs	r3, r0
 8006f4a:	425a      	negs	r2, r3
 8006f4c:	4153      	adcs	r3, r2
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	001a      	movs	r2, r3
 8006f52:	1d3b      	adds	r3, r7, #4
 8006f54:	70da      	strb	r2, [r3, #3]
  bg_sw_states_new[4] = !HAL_GPIO_ReadPin(BG_SW_4_GPIO_Port, BG_SW_4_Pin);
 8006f56:	2380      	movs	r3, #128	; 0x80
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	4a2c      	ldr	r2, [pc, #176]	; (800700c <check_bg_sw_states+0x11c>)
 8006f5c:	0019      	movs	r1, r3
 8006f5e:	0010      	movs	r0, r2
 8006f60:	f7fb f95c 	bl	800221c <HAL_GPIO_ReadPin>
 8006f64:	0003      	movs	r3, r0
 8006f66:	425a      	negs	r2, r3
 8006f68:	4153      	adcs	r3, r2
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	001a      	movs	r2, r3
 8006f6e:	1d3b      	adds	r3, r7, #4
 8006f70:	711a      	strb	r2, [r3, #4]
  bg_sw_states_new[5] = !HAL_GPIO_ReadPin(BG_SW_5_GPIO_Port, BG_SW_5_Pin);
 8006f72:	2380      	movs	r3, #128	; 0x80
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4a25      	ldr	r2, [pc, #148]	; (800700c <check_bg_sw_states+0x11c>)
 8006f78:	0019      	movs	r1, r3
 8006f7a:	0010      	movs	r0, r2
 8006f7c:	f7fb f94e 	bl	800221c <HAL_GPIO_ReadPin>
 8006f80:	0003      	movs	r3, r0
 8006f82:	425a      	negs	r2, r3
 8006f84:	4153      	adcs	r3, r2
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	001a      	movs	r2, r3
 8006f8a:	1d3b      	adds	r3, r7, #4
 8006f8c:	715a      	strb	r2, [r3, #5]
  bg_sw_states_new[6] = !HAL_GPIO_ReadPin(BG_SW_6_GPIO_Port, BG_SW_6_Pin);
 8006f8e:	2380      	movs	r3, #128	; 0x80
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	4a1e      	ldr	r2, [pc, #120]	; (800700c <check_bg_sw_states+0x11c>)
 8006f94:	0019      	movs	r1, r3
 8006f96:	0010      	movs	r0, r2
 8006f98:	f7fb f940 	bl	800221c <HAL_GPIO_ReadPin>
 8006f9c:	0003      	movs	r3, r0
 8006f9e:	425a      	negs	r2, r3
 8006fa0:	4153      	adcs	r3, r2
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	001a      	movs	r2, r3
 8006fa6:	1d3b      	adds	r3, r7, #4
 8006fa8:	719a      	strb	r2, [r3, #6]
  bg_sw_states_new[7] = !HAL_GPIO_ReadPin(BG_SW_7_GPIO_Port, BG_SW_7_Pin);
 8006faa:	2380      	movs	r3, #128	; 0x80
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	4a17      	ldr	r2, [pc, #92]	; (800700c <check_bg_sw_states+0x11c>)
 8006fb0:	0019      	movs	r1, r3
 8006fb2:	0010      	movs	r0, r2
 8006fb4:	f7fb f932 	bl	800221c <HAL_GPIO_ReadPin>
 8006fb8:	0003      	movs	r3, r0
 8006fba:	425a      	negs	r2, r3
 8006fbc:	4153      	adcs	r3, r2
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	001a      	movs	r2, r3
 8006fc2:	1d3b      	adds	r3, r7, #4
 8006fc4:	71da      	strb	r2, [r3, #7]

  for (uint8_t i = 0; i < 8; i++) {
 8006fc6:	230f      	movs	r3, #15
 8006fc8:	18fb      	adds	r3, r7, r3
 8006fca:	2200      	movs	r2, #0
 8006fcc:	701a      	strb	r2, [r3, #0]
 8006fce:	230f      	movs	r3, #15
 8006fd0:	18fb      	adds	r3, r7, r3
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b07      	cmp	r3, #7
 8006fd6:	d813      	bhi.n	8007000 <check_bg_sw_states+0x110>
    if (bg_sw_states_new[i] != bg_sw_states[i]) {
 8006fd8:	210f      	movs	r1, #15
 8006fda:	187b      	adds	r3, r7, r1
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	1d3a      	adds	r2, r7, #4
 8006fe0:	5cd2      	ldrb	r2, [r2, r3]
 8006fe2:	187b      	adds	r3, r7, r1
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	490a      	ldr	r1, [pc, #40]	; (8007010 <check_bg_sw_states+0x120>)
 8006fe8:	5ccb      	ldrb	r3, [r1, r3]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d001      	beq.n	8006ff2 <check_bg_sw_states+0x102>
      return 1;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e007      	b.n	8007002 <check_bg_sw_states+0x112>
  for (uint8_t i = 0; i < 8; i++) {
 8006ff2:	210f      	movs	r1, #15
 8006ff4:	187b      	adds	r3, r7, r1
 8006ff6:	781a      	ldrb	r2, [r3, #0]
 8006ff8:	187b      	adds	r3, r7, r1
 8006ffa:	3201      	adds	r2, #1
 8006ffc:	701a      	strb	r2, [r3, #0]
 8006ffe:	e7e6      	b.n	8006fce <check_bg_sw_states+0xde>
    }
  }

  return 0;
 8007000:	2300      	movs	r3, #0
}
 8007002:	0018      	movs	r0, r3
 8007004:	46bd      	mov	sp, r7
 8007006:	b004      	add	sp, #16
 8007008:	bd80      	pop	{r7, pc}
 800700a:	46c0      	nop			; (mov r8, r8)
 800700c:	50000400 	.word	0x50000400
 8007010:	20000094 	.word	0x20000094

08007014 <update_bg>:

static uint8_t bg_change_det_cnt = bg_debounce;
static uint8_t bg_change_det = 1;

void update_bg(BarGraph& bg) {
 8007014:	b590      	push	{r4, r7, lr}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint8_t bg_sw_states_new[8];
  bg_sw_states_new[0] = !HAL_GPIO_ReadPin(BG_SW_0_GPIO_Port, BG_SW_0_Pin);
 800701c:	4b7b      	ldr	r3, [pc, #492]	; (800720c <update_bg+0x1f8>)
 800701e:	2104      	movs	r1, #4
 8007020:	0018      	movs	r0, r3
 8007022:	f7fb f8fb 	bl	800221c <HAL_GPIO_ReadPin>
 8007026:	0003      	movs	r3, r0
 8007028:	425a      	negs	r2, r3
 800702a:	4153      	adcs	r3, r2
 800702c:	b2db      	uxtb	r3, r3
 800702e:	001a      	movs	r2, r3
 8007030:	240c      	movs	r4, #12
 8007032:	193b      	adds	r3, r7, r4
 8007034:	701a      	strb	r2, [r3, #0]
  bg_sw_states_new[1] = !HAL_GPIO_ReadPin(BG_SW_1_GPIO_Port, BG_SW_1_Pin);
 8007036:	4b75      	ldr	r3, [pc, #468]	; (800720c <update_bg+0x1f8>)
 8007038:	2108      	movs	r1, #8
 800703a:	0018      	movs	r0, r3
 800703c:	f7fb f8ee 	bl	800221c <HAL_GPIO_ReadPin>
 8007040:	0003      	movs	r3, r0
 8007042:	425a      	negs	r2, r3
 8007044:	4153      	adcs	r3, r2
 8007046:	b2db      	uxtb	r3, r3
 8007048:	001a      	movs	r2, r3
 800704a:	193b      	adds	r3, r7, r4
 800704c:	705a      	strb	r2, [r3, #1]
  bg_sw_states_new[2] = !HAL_GPIO_ReadPin(BG_SW_2_GPIO_Port, BG_SW_2_Pin);
 800704e:	4b6f      	ldr	r3, [pc, #444]	; (800720c <update_bg+0x1f8>)
 8007050:	2110      	movs	r1, #16
 8007052:	0018      	movs	r0, r3
 8007054:	f7fb f8e2 	bl	800221c <HAL_GPIO_ReadPin>
 8007058:	0003      	movs	r3, r0
 800705a:	425a      	negs	r2, r3
 800705c:	4153      	adcs	r3, r2
 800705e:	b2db      	uxtb	r3, r3
 8007060:	001a      	movs	r2, r3
 8007062:	193b      	adds	r3, r7, r4
 8007064:	709a      	strb	r2, [r3, #2]
  bg_sw_states_new[3] = !HAL_GPIO_ReadPin(BG_SW_3_GPIO_Port, BG_SW_3_Pin);
 8007066:	4b69      	ldr	r3, [pc, #420]	; (800720c <update_bg+0x1f8>)
 8007068:	2120      	movs	r1, #32
 800706a:	0018      	movs	r0, r3
 800706c:	f7fb f8d6 	bl	800221c <HAL_GPIO_ReadPin>
 8007070:	0003      	movs	r3, r0
 8007072:	425a      	negs	r2, r3
 8007074:	4153      	adcs	r3, r2
 8007076:	b2db      	uxtb	r3, r3
 8007078:	001a      	movs	r2, r3
 800707a:	193b      	adds	r3, r7, r4
 800707c:	70da      	strb	r2, [r3, #3]
  bg_sw_states_new[4] = !HAL_GPIO_ReadPin(BG_SW_4_GPIO_Port, BG_SW_4_Pin);
 800707e:	2380      	movs	r3, #128	; 0x80
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	4a62      	ldr	r2, [pc, #392]	; (800720c <update_bg+0x1f8>)
 8007084:	0019      	movs	r1, r3
 8007086:	0010      	movs	r0, r2
 8007088:	f7fb f8c8 	bl	800221c <HAL_GPIO_ReadPin>
 800708c:	0003      	movs	r3, r0
 800708e:	425a      	negs	r2, r3
 8007090:	4153      	adcs	r3, r2
 8007092:	b2db      	uxtb	r3, r3
 8007094:	001a      	movs	r2, r3
 8007096:	193b      	adds	r3, r7, r4
 8007098:	711a      	strb	r2, [r3, #4]
  bg_sw_states_new[5] = !HAL_GPIO_ReadPin(BG_SW_5_GPIO_Port, BG_SW_5_Pin);
 800709a:	2380      	movs	r3, #128	; 0x80
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4a5b      	ldr	r2, [pc, #364]	; (800720c <update_bg+0x1f8>)
 80070a0:	0019      	movs	r1, r3
 80070a2:	0010      	movs	r0, r2
 80070a4:	f7fb f8ba 	bl	800221c <HAL_GPIO_ReadPin>
 80070a8:	0003      	movs	r3, r0
 80070aa:	425a      	negs	r2, r3
 80070ac:	4153      	adcs	r3, r2
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	001a      	movs	r2, r3
 80070b2:	193b      	adds	r3, r7, r4
 80070b4:	715a      	strb	r2, [r3, #5]
  bg_sw_states_new[6] = !HAL_GPIO_ReadPin(BG_SW_6_GPIO_Port, BG_SW_6_Pin);
 80070b6:	2380      	movs	r3, #128	; 0x80
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	4a54      	ldr	r2, [pc, #336]	; (800720c <update_bg+0x1f8>)
 80070bc:	0019      	movs	r1, r3
 80070be:	0010      	movs	r0, r2
 80070c0:	f7fb f8ac 	bl	800221c <HAL_GPIO_ReadPin>
 80070c4:	0003      	movs	r3, r0
 80070c6:	425a      	negs	r2, r3
 80070c8:	4153      	adcs	r3, r2
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	001a      	movs	r2, r3
 80070ce:	193b      	adds	r3, r7, r4
 80070d0:	719a      	strb	r2, [r3, #6]
  bg_sw_states_new[7] = !HAL_GPIO_ReadPin(BG_SW_7_GPIO_Port, BG_SW_7_Pin);
 80070d2:	2380      	movs	r3, #128	; 0x80
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	4a4d      	ldr	r2, [pc, #308]	; (800720c <update_bg+0x1f8>)
 80070d8:	0019      	movs	r1, r3
 80070da:	0010      	movs	r0, r2
 80070dc:	f7fb f89e 	bl	800221c <HAL_GPIO_ReadPin>
 80070e0:	0003      	movs	r3, r0
 80070e2:	425a      	negs	r2, r3
 80070e4:	4153      	adcs	r3, r2
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	001a      	movs	r2, r3
 80070ea:	193b      	adds	r3, r7, r4
 80070ec:	71da      	strb	r2, [r3, #7]

  for (uint8_t i = 0; i < 8; i++) {
 80070ee:	2317      	movs	r3, #23
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	2317      	movs	r3, #23
 80070f8:	18fb      	adds	r3, r7, r3
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b07      	cmp	r3, #7
 80070fe:	d819      	bhi.n	8007134 <update_bg+0x120>
    if (bg_sw_states_new[i] != bg_sw_states[i]) {
 8007100:	2117      	movs	r1, #23
 8007102:	187b      	adds	r3, r7, r1
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	220c      	movs	r2, #12
 8007108:	18ba      	adds	r2, r7, r2
 800710a:	5cd2      	ldrb	r2, [r2, r3]
 800710c:	187b      	adds	r3, r7, r1
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	493f      	ldr	r1, [pc, #252]	; (8007210 <update_bg+0x1fc>)
 8007112:	5ccb      	ldrb	r3, [r1, r3]
 8007114:	429a      	cmp	r2, r3
 8007116:	d006      	beq.n	8007126 <update_bg+0x112>
      bg_change_det_cnt = 0;
 8007118:	4b3e      	ldr	r3, [pc, #248]	; (8007214 <update_bg+0x200>)
 800711a:	2200      	movs	r2, #0
 800711c:	701a      	strb	r2, [r3, #0]
      bg_change_det = 1;
 800711e:	4b3e      	ldr	r3, [pc, #248]	; (8007218 <update_bg+0x204>)
 8007120:	2201      	movs	r2, #1
 8007122:	701a      	strb	r2, [r3, #0]
      break;
 8007124:	e006      	b.n	8007134 <update_bg+0x120>
  for (uint8_t i = 0; i < 8; i++) {
 8007126:	2117      	movs	r1, #23
 8007128:	187b      	adds	r3, r7, r1
 800712a:	781a      	ldrb	r2, [r3, #0]
 800712c:	187b      	adds	r3, r7, r1
 800712e:	3201      	adds	r2, #1
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	e7e0      	b.n	80070f6 <update_bg+0xe2>
    }
  }

  if (bg_change_det_cnt == bg_debounce) {
 8007134:	4b37      	ldr	r3, [pc, #220]	; (8007214 <update_bg+0x200>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b04      	cmp	r3, #4
 800713a:	d144      	bne.n	80071c6 <update_bg+0x1b2>
    if (bg_change_det) {
 800713c:	4b36      	ldr	r3, [pc, #216]	; (8007218 <update_bg+0x204>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d046      	beq.n	80071d2 <update_bg+0x1be>
      bg_change_det = 0;
 8007144:	4b34      	ldr	r3, [pc, #208]	; (8007218 <update_bg+0x204>)
 8007146:	2200      	movs	r2, #0
 8007148:	701a      	strb	r2, [r3, #0]
      bg.update(&bg_sw_states_new[0]);
 800714a:	230c      	movs	r3, #12
 800714c:	18fa      	adds	r2, r7, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	0011      	movs	r1, r2
 8007152:	0018      	movs	r0, r3
 8007154:	f7ff f93e 	bl	80063d4 <_ZN8BarGraph6updateEPh>
      for (uint8_t i = 0; i < 8; i++) {
 8007158:	2316      	movs	r3, #22
 800715a:	18fb      	adds	r3, r7, r3
 800715c:	2200      	movs	r2, #0
 800715e:	701a      	strb	r2, [r3, #0]
 8007160:	2316      	movs	r3, #22
 8007162:	18fb      	adds	r3, r7, r3
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b07      	cmp	r3, #7
 8007168:	d833      	bhi.n	80071d2 <update_bg+0x1be>
        if (bg_sw_states_new[i] != bg_sw_states_last[i]) {
 800716a:	2116      	movs	r1, #22
 800716c:	187b      	adds	r3, r7, r1
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	220c      	movs	r2, #12
 8007172:	18ba      	adds	r2, r7, r2
 8007174:	5cd2      	ldrb	r2, [r2, r3]
 8007176:	187b      	adds	r3, r7, r1
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	4928      	ldr	r1, [pc, #160]	; (800721c <update_bg+0x208>)
 800717c:	5ccb      	ldrb	r3, [r1, r3]
 800717e:	429a      	cmp	r2, r3
 8007180:	d012      	beq.n	80071a8 <update_bg+0x194>
          if (bg_sw_states_new[i] > bg_sw_states_last[i]) {
 8007182:	2116      	movs	r1, #22
 8007184:	187b      	adds	r3, r7, r1
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	220c      	movs	r2, #12
 800718a:	18ba      	adds	r2, r7, r2
 800718c:	5cd2      	ldrb	r2, [r2, r3]
 800718e:	187b      	adds	r3, r7, r1
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	4922      	ldr	r1, [pc, #136]	; (800721c <update_bg+0x208>)
 8007194:	5ccb      	ldrb	r3, [r1, r3]
 8007196:	429a      	cmp	r2, r3
 8007198:	d903      	bls.n	80071a2 <update_bg+0x18e>
            send_audio(AUDIO_TRIG_BG_DOWN);
 800719a:	2005      	movs	r0, #5
 800719c:	f000 f996 	bl	80074cc <send_audio>
 80071a0:	e002      	b.n	80071a8 <update_bg+0x194>
          } else {
            send_audio(AUDIO_TRIG_BG_UP);
 80071a2:	2004      	movs	r0, #4
 80071a4:	f000 f992 	bl	80074cc <send_audio>
          }
        }
        bg_sw_states_last[i] = bg_sw_states[i]; 
 80071a8:	2016      	movs	r0, #22
 80071aa:	183b      	adds	r3, r7, r0
 80071ac:	781a      	ldrb	r2, [r3, #0]
 80071ae:	183b      	adds	r3, r7, r0
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	4917      	ldr	r1, [pc, #92]	; (8007210 <update_bg+0x1fc>)
 80071b4:	5c89      	ldrb	r1, [r1, r2]
 80071b6:	4a19      	ldr	r2, [pc, #100]	; (800721c <update_bg+0x208>)
 80071b8:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i = 0; i < 8; i++) {
 80071ba:	183b      	adds	r3, r7, r0
 80071bc:	781a      	ldrb	r2, [r3, #0]
 80071be:	183b      	adds	r3, r7, r0
 80071c0:	3201      	adds	r2, #1
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	e7cc      	b.n	8007160 <update_bg+0x14c>
      }
    }
  } else {
    bg_change_det_cnt++;
 80071c6:	4b13      	ldr	r3, [pc, #76]	; (8007214 <update_bg+0x200>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	3301      	adds	r3, #1
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	4b11      	ldr	r3, [pc, #68]	; (8007214 <update_bg+0x200>)
 80071d0:	701a      	strb	r2, [r3, #0]
  }

  for (uint8_t i = 0; i < 8; i++) {
 80071d2:	2315      	movs	r3, #21
 80071d4:	18fb      	adds	r3, r7, r3
 80071d6:	2200      	movs	r2, #0
 80071d8:	701a      	strb	r2, [r3, #0]
 80071da:	2315      	movs	r3, #21
 80071dc:	18fb      	adds	r3, r7, r3
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b07      	cmp	r3, #7
 80071e2:	d80f      	bhi.n	8007204 <update_bg+0x1f0>
    bg_sw_states[i] = bg_sw_states_new[i];
 80071e4:	2015      	movs	r0, #21
 80071e6:	183b      	adds	r3, r7, r0
 80071e8:	781a      	ldrb	r2, [r3, #0]
 80071ea:	183b      	adds	r3, r7, r0
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	210c      	movs	r1, #12
 80071f0:	1879      	adds	r1, r7, r1
 80071f2:	5c89      	ldrb	r1, [r1, r2]
 80071f4:	4a06      	ldr	r2, [pc, #24]	; (8007210 <update_bg+0x1fc>)
 80071f6:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < 8; i++) {
 80071f8:	183b      	adds	r3, r7, r0
 80071fa:	781a      	ldrb	r2, [r3, #0]
 80071fc:	183b      	adds	r3, r7, r0
 80071fe:	3201      	adds	r2, #1
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	e7ea      	b.n	80071da <update_bg+0x1c6>
  }

}
 8007204:	46c0      	nop			; (mov r8, r8)
 8007206:	46bd      	mov	sp, r7
 8007208:	b007      	add	sp, #28
 800720a:	bd90      	pop	{r4, r7, pc}
 800720c:	50000400 	.word	0x50000400
 8007210:	20000094 	.word	0x20000094
 8007214:	20000000 	.word	0x20000000
 8007218:	20000001 	.word	0x20000001
 800721c:	20000088 	.word	0x20000088

08007220 <read_push_sw_state>:

void read_push_sw_state(void) {
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  push_sw_state = HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin);
 8007224:	2380      	movs	r3, #128	; 0x80
 8007226:	021b      	lsls	r3, r3, #8
 8007228:	4a05      	ldr	r2, [pc, #20]	; (8007240 <read_push_sw_state+0x20>)
 800722a:	0019      	movs	r1, r3
 800722c:	0010      	movs	r0, r2
 800722e:	f7fa fff5 	bl	800221c <HAL_GPIO_ReadPin>
 8007232:	0003      	movs	r3, r0
 8007234:	001a      	movs	r2, r3
 8007236:	4b03      	ldr	r3, [pc, #12]	; (8007244 <read_push_sw_state+0x24>)
 8007238:	701a      	strb	r2, [r3, #0]
}
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	50000400 	.word	0x50000400
 8007244:	2000009f 	.word	0x2000009f

08007248 <check_push_sw_state>:

uint8_t check_push_sw_state(void) {
 8007248:	b590      	push	{r4, r7, lr}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
  GPIO_PinState push_sw_state_new = HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin);
 800724e:	1dfc      	adds	r4, r7, #7
 8007250:	2380      	movs	r3, #128	; 0x80
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	4a09      	ldr	r2, [pc, #36]	; (800727c <check_push_sw_state+0x34>)
 8007256:	0019      	movs	r1, r3
 8007258:	0010      	movs	r0, r2
 800725a:	f7fa ffdf 	bl	800221c <HAL_GPIO_ReadPin>
 800725e:	0003      	movs	r3, r0
 8007260:	7023      	strb	r3, [r4, #0]
  if (push_sw_state_new != push_sw_state) {
 8007262:	4b07      	ldr	r3, [pc, #28]	; (8007280 <check_push_sw_state+0x38>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	1dfa      	adds	r2, r7, #7
 8007268:	7812      	ldrb	r2, [r2, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d001      	beq.n	8007272 <check_push_sw_state+0x2a>
    return 1;
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <check_push_sw_state+0x2c>
  } else {
    return 0;
 8007272:	2300      	movs	r3, #0
  }
}
 8007274:	0018      	movs	r0, r3
 8007276:	46bd      	mov	sp, r7
 8007278:	b003      	add	sp, #12
 800727a:	bd90      	pop	{r4, r7, pc}
 800727c:	50000400 	.word	0x50000400
 8007280:	2000009f 	.word	0x2000009f

08007284 <update_push_sw_state>:

void update_push_sw_state(uint8_t * ring_dir) {
 8007284:	b5b0      	push	{r4, r5, r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  GPIO_PinState push_sw_state_new = HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin);
 800728c:	250e      	movs	r5, #14
 800728e:	197c      	adds	r4, r7, r5
 8007290:	2380      	movs	r3, #128	; 0x80
 8007292:	021b      	lsls	r3, r3, #8
 8007294:	4a16      	ldr	r2, [pc, #88]	; (80072f0 <update_push_sw_state+0x6c>)
 8007296:	0019      	movs	r1, r3
 8007298:	0010      	movs	r0, r2
 800729a:	f7fa ffbf 	bl	800221c <HAL_GPIO_ReadPin>
 800729e:	0003      	movs	r3, r0
 80072a0:	7023      	strb	r3, [r4, #0]
  uint8_t ring_dir_new;
  if ((push_sw_state_new == GPIO_PIN_SET) && (push_sw_state == GPIO_PIN_RESET)) {
 80072a2:	197b      	adds	r3, r7, r5
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d10f      	bne.n	80072ca <update_push_sw_state+0x46>
 80072aa:	4b12      	ldr	r3, [pc, #72]	; (80072f4 <update_push_sw_state+0x70>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10b      	bne.n	80072ca <update_push_sw_state+0x46>
    ring_dir_new = !(*ring_dir);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	425a      	negs	r2, r3
 80072b8:	4153      	adcs	r3, r2
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	230f      	movs	r3, #15
 80072be:	18fb      	adds	r3, r7, r3
 80072c0:	701a      	strb	r2, [r3, #0]
    send_audio(AUDIO_TRIG_SW3);
 80072c2:	2003      	movs	r0, #3
 80072c4:	f000 f902 	bl	80074cc <send_audio>
 80072c8:	e004      	b.n	80072d4 <update_push_sw_state+0x50>
  } else {
    ring_dir_new = *ring_dir;
 80072ca:	230f      	movs	r3, #15
 80072cc:	18fb      	adds	r3, r7, r3
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	7812      	ldrb	r2, [r2, #0]
 80072d2:	701a      	strb	r2, [r3, #0]
  }
  push_sw_state = push_sw_state_new;
 80072d4:	4b07      	ldr	r3, [pc, #28]	; (80072f4 <update_push_sw_state+0x70>)
 80072d6:	220e      	movs	r2, #14
 80072d8:	18ba      	adds	r2, r7, r2
 80072da:	7812      	ldrb	r2, [r2, #0]
 80072dc:	701a      	strb	r2, [r3, #0]
  *ring_dir = ring_dir_new;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	220f      	movs	r2, #15
 80072e2:	18ba      	adds	r2, r7, r2
 80072e4:	7812      	ldrb	r2, [r2, #0]
 80072e6:	701a      	strb	r2, [r3, #0]
}
 80072e8:	46c0      	nop			; (mov r8, r8)
 80072ea:	46bd      	mov	sp, r7
 80072ec:	b004      	add	sp, #16
 80072ee:	bdb0      	pop	{r4, r5, r7, pc}
 80072f0:	50000400 	.word	0x50000400
 80072f4:	2000009f 	.word	0x2000009f

080072f8 <rgb_lut>:

RGB_VALS rgb_lut(uint8_t color) {
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	0002      	movs	r2, r0
 8007300:	1dfb      	adds	r3, r7, #7
 8007302:	701a      	strb	r2, [r3, #0]
  RGB_VALS rgb;
  if (color == RED) {
 8007304:	1dfb      	adds	r3, r7, #7
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10a      	bne.n	8007322 <rgb_lut+0x2a>
    rgb = RED_RGB;
 800730c:	2108      	movs	r1, #8
 800730e:	187b      	adds	r3, r7, r1
 8007310:	22b4      	movs	r2, #180	; 0xb4
 8007312:	701a      	strb	r2, [r3, #0]
 8007314:	187b      	adds	r3, r7, r1
 8007316:	2200      	movs	r2, #0
 8007318:	705a      	strb	r2, [r3, #1]
 800731a:	187b      	adds	r3, r7, r1
 800731c:	2200      	movs	r2, #0
 800731e:	709a      	strb	r2, [r3, #2]
 8007320:	e04c      	b.n	80073bc <rgb_lut+0xc4>
  } else if (color == ORANGE) {
 8007322:	1dfb      	adds	r3, r7, #7
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b06      	cmp	r3, #6
 8007328:	d107      	bne.n	800733a <rgb_lut+0x42>
    rgb = ORANGE_RGB;
 800732a:	2308      	movs	r3, #8
 800732c:	18fb      	adds	r3, r7, r3
 800732e:	4a34      	ldr	r2, [pc, #208]	; (8007400 <rgb_lut+0x108>)
 8007330:	8811      	ldrh	r1, [r2, #0]
 8007332:	8019      	strh	r1, [r3, #0]
 8007334:	7892      	ldrb	r2, [r2, #2]
 8007336:	709a      	strb	r2, [r3, #2]
 8007338:	e040      	b.n	80073bc <rgb_lut+0xc4>
  } else if (color == BLUE) {
 800733a:	1dfb      	adds	r3, r7, #7
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b02      	cmp	r3, #2
 8007340:	d10a      	bne.n	8007358 <rgb_lut+0x60>
    rgb = BLUE_RGB;
 8007342:	2108      	movs	r1, #8
 8007344:	187b      	adds	r3, r7, r1
 8007346:	2200      	movs	r2, #0
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	187b      	adds	r3, r7, r1
 800734c:	2200      	movs	r2, #0
 800734e:	705a      	strb	r2, [r3, #1]
 8007350:	187b      	adds	r3, r7, r1
 8007352:	22b4      	movs	r2, #180	; 0xb4
 8007354:	709a      	strb	r2, [r3, #2]
 8007356:	e031      	b.n	80073bc <rgb_lut+0xc4>
  } else if (color == GREEN) {
 8007358:	1dfb      	adds	r3, r7, #7
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d10a      	bne.n	8007376 <rgb_lut+0x7e>
    rgb = GREEN_RGB;
 8007360:	2108      	movs	r1, #8
 8007362:	187b      	adds	r3, r7, r1
 8007364:	2200      	movs	r2, #0
 8007366:	701a      	strb	r2, [r3, #0]
 8007368:	187b      	adds	r3, r7, r1
 800736a:	22b4      	movs	r2, #180	; 0xb4
 800736c:	705a      	strb	r2, [r3, #1]
 800736e:	187b      	adds	r3, r7, r1
 8007370:	2200      	movs	r2, #0
 8007372:	709a      	strb	r2, [r3, #2]
 8007374:	e022      	b.n	80073bc <rgb_lut+0xc4>
  } else if (color == PINK) {
 8007376:	1dfb      	adds	r3, r7, #7
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b05      	cmp	r3, #5
 800737c:	d107      	bne.n	800738e <rgb_lut+0x96>
    rgb = PINK_RGB;
 800737e:	2308      	movs	r3, #8
 8007380:	18fb      	adds	r3, r7, r3
 8007382:	4a20      	ldr	r2, [pc, #128]	; (8007404 <rgb_lut+0x10c>)
 8007384:	8811      	ldrh	r1, [r2, #0]
 8007386:	8019      	strh	r1, [r3, #0]
 8007388:	7892      	ldrb	r2, [r2, #2]
 800738a:	709a      	strb	r2, [r3, #2]
 800738c:	e016      	b.n	80073bc <rgb_lut+0xc4>
  } else if (color == PURPLE) {
 800738e:	1dfb      	adds	r3, r7, #7
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b04      	cmp	r3, #4
 8007394:	d107      	bne.n	80073a6 <rgb_lut+0xae>
    rgb = PURPLE_RGB;
 8007396:	2308      	movs	r3, #8
 8007398:	18fb      	adds	r3, r7, r3
 800739a:	4a1b      	ldr	r2, [pc, #108]	; (8007408 <rgb_lut+0x110>)
 800739c:	8811      	ldrh	r1, [r2, #0]
 800739e:	8019      	strh	r1, [r3, #0]
 80073a0:	7892      	ldrb	r2, [r2, #2]
 80073a2:	709a      	strb	r2, [r3, #2]
 80073a4:	e00a      	b.n	80073bc <rgb_lut+0xc4>
  } else if (color == YELLOW) {
 80073a6:	1dfb      	adds	r3, r7, #7
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d106      	bne.n	80073bc <rgb_lut+0xc4>
    rgb = YELLOW_RGB;
 80073ae:	2308      	movs	r3, #8
 80073b0:	18fb      	adds	r3, r7, r3
 80073b2:	4a16      	ldr	r2, [pc, #88]	; (800740c <rgb_lut+0x114>)
 80073b4:	8811      	ldrh	r1, [r2, #0]
 80073b6:	8019      	strh	r1, [r3, #0]
 80073b8:	7892      	ldrb	r2, [r2, #2]
 80073ba:	709a      	strb	r2, [r3, #2]
  }
  return rgb;
 80073bc:	200c      	movs	r0, #12
 80073be:	183b      	adds	r3, r7, r0
 80073c0:	2208      	movs	r2, #8
 80073c2:	18ba      	adds	r2, r7, r2
 80073c4:	8811      	ldrh	r1, [r2, #0]
 80073c6:	8019      	strh	r1, [r3, #0]
 80073c8:	7892      	ldrb	r2, [r2, #2]
 80073ca:	709a      	strb	r2, [r3, #2]
 80073cc:	183a      	adds	r2, r7, r0
 80073ce:	2300      	movs	r3, #0
 80073d0:	7811      	ldrb	r1, [r2, #0]
 80073d2:	20ff      	movs	r0, #255	; 0xff
 80073d4:	4001      	ands	r1, r0
 80073d6:	20ff      	movs	r0, #255	; 0xff
 80073d8:	4383      	bics	r3, r0
 80073da:	430b      	orrs	r3, r1
 80073dc:	7851      	ldrb	r1, [r2, #1]
 80073de:	20ff      	movs	r0, #255	; 0xff
 80073e0:	4001      	ands	r1, r0
 80073e2:	0209      	lsls	r1, r1, #8
 80073e4:	480a      	ldr	r0, [pc, #40]	; (8007410 <rgb_lut+0x118>)
 80073e6:	4003      	ands	r3, r0
 80073e8:	430b      	orrs	r3, r1
 80073ea:	7892      	ldrb	r2, [r2, #2]
 80073ec:	21ff      	movs	r1, #255	; 0xff
 80073ee:	400a      	ands	r2, r1
 80073f0:	0412      	lsls	r2, r2, #16
 80073f2:	4908      	ldr	r1, [pc, #32]	; (8007414 <rgb_lut+0x11c>)
 80073f4:	400b      	ands	r3, r1
 80073f6:	4313      	orrs	r3, r2
}
 80073f8:	0018      	movs	r0, r3
 80073fa:	46bd      	mov	sp, r7
 80073fc:	b004      	add	sp, #16
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	080082cc 	.word	0x080082cc
 8007404:	080082d0 	.word	0x080082d0
 8007408:	080082d4 	.word	0x080082d4
 800740c:	080082d8 	.word	0x080082d8
 8007410:	ffff00ff 	.word	0xffff00ff
 8007414:	ff00ffff 	.word	0xff00ffff

08007418 <set_all_pixels>:

void set_all_pixels(DotStar& ring, RGB_VALS rgb) {
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	003b      	movs	r3, r7
 8007422:	6019      	str	r1, [r3, #0]
  ring.setBrightness(100);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2164      	movs	r1, #100	; 0x64
 8007428:	0018      	movs	r0, r3
 800742a:	f7ff faae 	bl	800698a <_ZN7DotStar13setBrightnessEh>
  ring_set_all_pixels(ring, rgb);
 800742e:	003b      	movs	r3, r7
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	6819      	ldr	r1, [r3, #0]
 8007434:	0010      	movs	r0, r2
 8007436:	f000 fbe2 	bl	8007bfe <_Z19ring_set_all_pixelsR7DotStar8RGB_VALS>
  ring.show();
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	0018      	movs	r0, r3
 800743e:	f7ff f93d 	bl	80066bc <_ZN7DotStar4showEv>
  ring.setBrightness(200);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	21c8      	movs	r1, #200	; 0xc8
 8007446:	0018      	movs	r0, r3
 8007448:	f7ff fa9f 	bl	800698a <_ZN7DotStar13setBrightnessEh>
}
 800744c:	46c0      	nop			; (mov r8, r8)
 800744e:	46bd      	mov	sp, r7
 8007450:	b002      	add	sp, #8
 8007452:	bd80      	pop	{r7, pc}

08007454 <turn_all_leds_off>:

void turn_all_leds_off(DotStar& ring, BarGraph& bg) {
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  RGB_VALS rgb = {0, 0, 0};
 800745e:	210c      	movs	r1, #12
 8007460:	187b      	adds	r3, r7, r1
 8007462:	2200      	movs	r2, #0
 8007464:	701a      	strb	r2, [r3, #0]
 8007466:	187b      	adds	r3, r7, r1
 8007468:	2200      	movs	r2, #0
 800746a:	705a      	strb	r2, [r3, #1]
 800746c:	187b      	adds	r3, r7, r1
 800746e:	2200      	movs	r2, #0
 8007470:	709a      	strb	r2, [r3, #2]
  ring_set_all_pixels(ring, rgb);
 8007472:	187b      	adds	r3, r7, r1
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6819      	ldr	r1, [r3, #0]
 8007478:	0010      	movs	r0, r2
 800747a:	f000 fbc0 	bl	8007bfe <_Z19ring_set_all_pixelsR7DotStar8RGB_VALS>
  bg.clear_display();
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	0018      	movs	r0, r3
 8007482:	f7ff f824 	bl	80064ce <_ZN8BarGraph13clear_displayEv>
  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8007486:	23a0      	movs	r3, #160	; 0xa0
 8007488:	05db      	lsls	r3, r3, #23
 800748a:	2200      	movs	r2, #0
 800748c:	2102      	movs	r1, #2
 800748e:	0018      	movs	r0, r3
 8007490:	f7fa fee1 	bl	8002256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8007494:	23a0      	movs	r3, #160	; 0xa0
 8007496:	05db      	lsls	r3, r3, #23
 8007498:	2200      	movs	r2, #0
 800749a:	2104      	movs	r1, #4
 800749c:	0018      	movs	r0, r3
 800749e:	f7fa feda 	bl	8002256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80074a2:	2380      	movs	r3, #128	; 0x80
 80074a4:	0059      	lsls	r1, r3, #1
 80074a6:	23a0      	movs	r3, #160	; 0xa0
 80074a8:	05db      	lsls	r3, r3, #23
 80074aa:	2200      	movs	r2, #0
 80074ac:	0018      	movs	r0, r3
 80074ae:	f7fa fed2 	bl	8002256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80074b2:	2380      	movs	r3, #128	; 0x80
 80074b4:	0159      	lsls	r1, r3, #5
 80074b6:	23a0      	movs	r3, #160	; 0xa0
 80074b8:	05db      	lsls	r3, r3, #23
 80074ba:	2200      	movs	r2, #0
 80074bc:	0018      	movs	r0, r3
 80074be:	f7fa feca 	bl	8002256 <HAL_GPIO_WritePin>
}
 80074c2:	46c0      	nop			; (mov r8, r8)
 80074c4:	46bd      	mov	sp, r7
 80074c6:	b004      	add	sp, #16
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <send_audio>:

void send_audio(uint8_t audio_trig_index) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	0002      	movs	r2, r0
 80074d4:	1dfb      	adds	r3, r7, #7
 80074d6:	701a      	strb	r2, [r3, #0]
  if ((color_state != ST_color_wait_for_song) && (color_state != ST_color_wait_for_request)) {
 80074d8:	4b09      	ldr	r3, [pc, #36]	; (8007500 <send_audio+0x34>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b06      	cmp	r3, #6
 80074de:	d00a      	beq.n	80074f6 <send_audio+0x2a>
 80074e0:	4b07      	ldr	r3, [pc, #28]	; (8007500 <send_audio+0x34>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b05      	cmp	r3, #5
 80074e6:	d006      	beq.n	80074f6 <send_audio+0x2a>
    HAL_UART_Transmit(&huart1, &audio_trig_index, 1, HAL_MAX_DELAY);
 80074e8:	2301      	movs	r3, #1
 80074ea:	425b      	negs	r3, r3
 80074ec:	1df9      	adds	r1, r7, #7
 80074ee:	4805      	ldr	r0, [pc, #20]	; (8007504 <send_audio+0x38>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	f7fc fe39 	bl	8004168 <HAL_UART_Transmit>
  }
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	46bd      	mov	sp, r7
 80074fa:	b002      	add	sp, #8
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	46c0      	nop			; (mov r8, r8)
 8007500:	200000a0 	.word	0x200000a0
 8007504:	20000168 	.word	0x20000168

08007508 <_ZN8APDS9960C1Ev>:
  APDS9960(){};
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	0018      	movs	r0, r3
 8007514:	46bd      	mov	sp, r7
 8007516:	b002      	add	sp, #8
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <main>:
  * @brief  The application entry point
  *
  * @retval None
  */
int main(void)
{
 800751c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800751e:	b0b1      	sub	sp, #196	; 0xc4
 8007520:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick */
  HAL_Init();
 8007522:	f7fa fb4b 	bl	8001bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007526:	f000 fad9 	bl	8007adc <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800752a:	f7ff fa3f 	bl	80069ac <MX_GPIO_Init>
  MX_I2C1_Init();
 800752e:	f7ff fadd 	bl	8006aec <MX_I2C1_Init>
  MX_SPI1_Init();
 8007532:	f000 fbd1 	bl	8007cd8 <MX_SPI1_Init>
  MX_RNG_Init();
 8007536:	f000 fb9b 	bl	8007c70 <MX_RNG_Init>
  MX_USART1_UART_Init();
 800753a:	f000 fd03 	bl	8007f44 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 800753e:	20c8      	movs	r0, #200	; 0xc8
 8007540:	f7fa fb9c 	bl	8001c7c <HAL_Delay>

  // Setup and initialize Dotstars
  DotStar ring = DotStar(20, DOTSTAR_BGR);
 8007544:	248c      	movs	r4, #140	; 0x8c
 8007546:	193b      	adds	r3, r7, r4
 8007548:	2206      	movs	r2, #6
 800754a:	2114      	movs	r1, #20
 800754c:	0018      	movs	r0, r3
 800754e:	f7fe ffdd 	bl	800650c <_ZN7DotStarC1Ehh>
  ring.begin(); // Initialize pins for output
 8007552:	193b      	adds	r3, r7, r4
 8007554:	0018      	movs	r0, r3
 8007556:	f7ff f813 	bl	8006580 <_ZN7DotStar5beginEv>
  RGB_VALS rgb_off;
  rgb_off.r = 0; rgb_off.g = 0; rgb_off.b = 0;
 800755a:	2188      	movs	r1, #136	; 0x88
 800755c:	187b      	adds	r3, r7, r1
 800755e:	2200      	movs	r2, #0
 8007560:	701a      	strb	r2, [r3, #0]
 8007562:	187b      	adds	r3, r7, r1
 8007564:	2200      	movs	r2, #0
 8007566:	705a      	strb	r2, [r3, #1]
 8007568:	187b      	adds	r3, r7, r1
 800756a:	2200      	movs	r2, #0
 800756c:	709a      	strb	r2, [r3, #2]
  ring.setBrightness(200);
 800756e:	193b      	adds	r3, r7, r4
 8007570:	21c8      	movs	r1, #200	; 0xc8
 8007572:	0018      	movs	r0, r3
 8007574:	f7ff fa09 	bl	800698a <_ZN7DotStar13setBrightnessEh>
  uint8_t ring_dir = 0;
 8007578:	2387      	movs	r3, #135	; 0x87
 800757a:	18fb      	adds	r3, r7, r3
 800757c:	2200      	movs	r2, #0
 800757e:	701a      	strb	r2, [r3, #0]

  // Initialize LED driver
  BarGraph bg=BarGraph(8,40);
 8007580:	2538      	movs	r5, #56	; 0x38
 8007582:	197b      	adds	r3, r7, r5
 8007584:	2228      	movs	r2, #40	; 0x28
 8007586:	2108      	movs	r1, #8
 8007588:	0018      	movs	r0, r3
 800758a:	f7fe fed9 	bl	8006340 <_ZN8BarGraphC1Ehh>
  bg.begin();
 800758e:	197b      	adds	r3, r7, r5
 8007590:	0018      	movs	r0, r3
 8007592:	f7fe ff03 	bl	800639c <_ZN8BarGraph5beginEv>

  // Setup Color Sensor
  APDS9960 apds;
 8007596:	261c      	movs	r6, #28
 8007598:	19bb      	adds	r3, r7, r6
 800759a:	0018      	movs	r0, r3
 800759c:	f7ff ffb4 	bl	8007508 <_ZN8APDS9960C1Ev>
  apds.begin();
 80075a0:	19b8      	adds	r0, r7, r6
 80075a2:	2372      	movs	r3, #114	; 0x72
 80075a4:	2202      	movs	r2, #2
 80075a6:	21c8      	movs	r1, #200	; 0xc8
 80075a8:	f7fd feef 	bl	800538a <_ZN8APDS99605beginEt15apds9960AGain_th>
  //enable color sensing mode
  apds.enableColor(true);
 80075ac:	19bb      	adds	r3, r7, r6
 80075ae:	2101      	movs	r1, #1
 80075b0:	0018      	movs	r0, r3
 80075b2:	f7fe f91b 	bl	80057ec <_ZN8APDS996011enableColorEb>
  uint16_t g_cal;
  uint16_t b_cal;
  uint32_t total_cal;
  
  // Setup find color application
  uint16_t color_request_timeout = 50;
 80075b6:	21aa      	movs	r1, #170	; 0xaa
 80075b8:	187b      	adds	r3, r7, r1
 80075ba:	2232      	movs	r2, #50	; 0x32
 80075bc:	801a      	strh	r2, [r3, #0]
  uint16_t color_request_timer = color_request_timeout;
 80075be:	23b6      	movs	r3, #182	; 0xb6
 80075c0:	18fb      	adds	r3, r7, r3
 80075c2:	187a      	adds	r2, r7, r1
 80075c4:	8812      	ldrh	r2, [r2, #0]
 80075c6:	801a      	strh	r2, [r3, #0]
  uint16_t color_search_timeout = 20000;
 80075c8:	21a8      	movs	r1, #168	; 0xa8
 80075ca:	187b      	adds	r3, r7, r1
 80075cc:	4aab      	ldr	r2, [pc, #684]	; (800787c <main+0x360>)
 80075ce:	801a      	strh	r2, [r3, #0]
  uint16_t color_search_timer = color_search_timeout;
 80075d0:	23b4      	movs	r3, #180	; 0xb4
 80075d2:	18fb      	adds	r3, r7, r3
 80075d4:	187a      	adds	r2, r7, r1
 80075d6:	8812      	ldrh	r2, [r2, #0]
 80075d8:	801a      	strh	r2, [r3, #0]
  uint16_t song_wait_timeout = 1000;
 80075da:	21a6      	movs	r1, #166	; 0xa6
 80075dc:	187b      	adds	r3, r7, r1
 80075de:	22fa      	movs	r2, #250	; 0xfa
 80075e0:	0092      	lsls	r2, r2, #2
 80075e2:	801a      	strh	r2, [r3, #0]
  uint16_t song_wait_timer = song_wait_timeout;
 80075e4:	23b2      	movs	r3, #178	; 0xb2
 80075e6:	18fb      	adds	r3, r7, r3
 80075e8:	187a      	adds	r2, r7, r1
 80075ea:	8812      	ldrh	r2, [r2, #0]
 80075ec:	801a      	strh	r2, [r3, #0]
  uint16_t request_wait_timeout = 250;
 80075ee:	21a4      	movs	r1, #164	; 0xa4
 80075f0:	187b      	adds	r3, r7, r1
 80075f2:	22fa      	movs	r2, #250	; 0xfa
 80075f4:	801a      	strh	r2, [r3, #0]
  uint16_t request_wait_timer = request_wait_timeout;
 80075f6:	23b0      	movs	r3, #176	; 0xb0
 80075f8:	18fb      	adds	r3, r7, r3
 80075fa:	187a      	adds	r2, r7, r1
 80075fc:	8812      	ldrh	r2, [r2, #0]
 80075fe:	801a      	strh	r2, [r3, #0]
  RGB_VALS rgb_new;
  uint8_t color_to_find;
  uint8_t color_audio_message;

  // Wake switch
  GPIO_PinState wake_sw_state = GPIO_PIN_SET;
 8007600:	23ad      	movs	r3, #173	; 0xad
 8007602:	18fb      	adds	r3, r7, r3
 8007604:	2201      	movs	r2, #1
 8007606:	701a      	strb	r2, [r3, #0]
  GPIO_PinState wake_sw_state_new;

  // States
  typedef enum pwr_states {ST_pwr_off, ST_pwr_sleep, ST_pwr_awake} pwr_states;
  pwr_states pwr_state = ST_pwr_off;
 8007608:	23ac      	movs	r3, #172	; 0xac
 800760a:	18fb      	adds	r3, r7, r3
 800760c:	2200      	movs	r2, #0
 800760e:	701a      	strb	r2, [r3, #0]

  uint8_t tog_sw_change; 
  uint8_t bg_sw_change;
  uint8_t push_sw_change;

  turn_all_leds_off(ring, bg);
 8007610:	197a      	adds	r2, r7, r5
 8007612:	193b      	adds	r3, r7, r4
 8007614:	0011      	movs	r1, r2
 8007616:	0018      	movs	r0, r3
 8007618:	f7ff ff1c 	bl	8007454 <turn_all_leds_off>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Check wake/sleep switch
    wake_sw_state_new = HAL_GPIO_ReadPin(WKUP_GPIO_Port, WKUP_Pin);
 800761c:	25a3      	movs	r5, #163	; 0xa3
 800761e:	197c      	adds	r4, r7, r5
 8007620:	23a0      	movs	r3, #160	; 0xa0
 8007622:	05db      	lsls	r3, r3, #23
 8007624:	2101      	movs	r1, #1
 8007626:	0018      	movs	r0, r3
 8007628:	f7fa fdf8 	bl	800221c <HAL_GPIO_ReadPin>
 800762c:	0003      	movs	r3, r0
 800762e:	7023      	strb	r3, [r4, #0]
    if ((wake_sw_state_new == GPIO_PIN_SET) && (wake_sw_state == GPIO_PIN_RESET)) {
 8007630:	197b      	adds	r3, r7, r5
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d110      	bne.n	800765a <main+0x13e>
 8007638:	23ad      	movs	r3, #173	; 0xad
 800763a:	18fb      	adds	r3, r7, r3
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10b      	bne.n	800765a <main+0x13e>
      turn_all_leds_off(ring, bg);
 8007642:	2338      	movs	r3, #56	; 0x38
 8007644:	18fa      	adds	r2, r7, r3
 8007646:	238c      	movs	r3, #140	; 0x8c
 8007648:	18fb      	adds	r3, r7, r3
 800764a:	0011      	movs	r1, r2
 800764c:	0018      	movs	r0, r3
 800764e:	f7ff ff01 	bl	8007454 <turn_all_leds_off>
      pwr_state = ST_pwr_off;
 8007652:	23ac      	movs	r3, #172	; 0xac
 8007654:	18fb      	adds	r3, r7, r3
 8007656:	2200      	movs	r2, #0
 8007658:	701a      	strb	r2, [r3, #0]
    }
    wake_sw_state = wake_sw_state_new;
 800765a:	23ad      	movs	r3, #173	; 0xad
 800765c:	18fb      	adds	r3, r7, r3
 800765e:	22a3      	movs	r2, #163	; 0xa3
 8007660:	18ba      	adds	r2, r7, r2
 8007662:	7812      	ldrb	r2, [r2, #0]
 8007664:	701a      	strb	r2, [r3, #0]

    switch(pwr_state) {
 8007666:	23ac      	movs	r3, #172	; 0xac
 8007668:	18fb      	adds	r3, r7, r3
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d01f      	beq.n	80076b0 <main+0x194>
 8007670:	2b02      	cmp	r3, #2
 8007672:	d05e      	beq.n	8007732 <main+0x216>
 8007674:	2b00      	cmp	r3, #0
 8007676:	d000      	beq.n	800767a <main+0x15e>
 8007678:	e222      	b.n	8007ac0 <main+0x5a4>
      
      case ST_pwr_off:
        if (wake_sw_state == GPIO_PIN_RESET) {
 800767a:	23ad      	movs	r3, #173	; 0xad
 800767c:	18fb      	adds	r3, r7, r3
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d000      	beq.n	8007686 <main+0x16a>
 8007684:	e21b      	b.n	8007abe <main+0x5a2>
          read_tog_sw_states();
 8007686:	f7ff facd 	bl	8006c24 <read_tog_sw_states>
          read_bg_sw_states();
 800768a:	f7ff fba7 	bl	8006ddc <read_bg_sw_states>
          read_push_sw_state();
 800768e:	f7ff fdc7 	bl	8007220 <read_push_sw_state>
          bg.update(&bg_sw_states[0]);
 8007692:	4a7b      	ldr	r2, [pc, #492]	; (8007880 <main+0x364>)
 8007694:	2338      	movs	r3, #56	; 0x38
 8007696:	18fb      	adds	r3, r7, r3
 8007698:	0011      	movs	r1, r2
 800769a:	0018      	movs	r0, r3
 800769c:	f7fe fe9a 	bl	80063d4 <_ZN8BarGraph6updateEPh>
          color_state = ST_color_calibrate;
 80076a0:	4b78      	ldr	r3, [pc, #480]	; (8007884 <main+0x368>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	701a      	strb	r2, [r3, #0]
          pwr_state = ST_pwr_awake;
 80076a6:	23ac      	movs	r3, #172	; 0xac
 80076a8:	18fb      	adds	r3, r7, r3
 80076aa:	2202      	movs	r2, #2
 80076ac:	701a      	strb	r2, [r3, #0]
        }
        break;
 80076ae:	e206      	b.n	8007abe <main+0x5a2>

      case ST_pwr_sleep:
        HAL_UART_Receive_IT(&huart1, &uart_data, 1);
 80076b0:	4975      	ldr	r1, [pc, #468]	; (8007888 <main+0x36c>)
 80076b2:	4b76      	ldr	r3, [pc, #472]	; (800788c <main+0x370>)
 80076b4:	2201      	movs	r2, #1
 80076b6:	0018      	movs	r0, r3
 80076b8:	f7fc fdfe 	bl	80042b8 <HAL_UART_Receive_IT>
        tog_sw_change = check_tog_sw_states();
 80076bc:	259b      	movs	r5, #155	; 0x9b
 80076be:	197c      	adds	r4, r7, r5
 80076c0:	f7ff fada 	bl	8006c78 <check_tog_sw_states>
 80076c4:	0003      	movs	r3, r0
 80076c6:	7023      	strb	r3, [r4, #0]
        bg_sw_change = check_bg_sw_states();
 80076c8:	239a      	movs	r3, #154	; 0x9a
 80076ca:	18fc      	adds	r4, r7, r3
 80076cc:	f7ff fc10 	bl	8006ef0 <check_bg_sw_states>
 80076d0:	0003      	movs	r3, r0
 80076d2:	7023      	strb	r3, [r4, #0]
        push_sw_change = check_push_sw_state();
 80076d4:	2399      	movs	r3, #153	; 0x99
 80076d6:	18fc      	adds	r4, r7, r3
 80076d8:	f7ff fdb6 	bl	8007248 <check_push_sw_state>
 80076dc:	0003      	movs	r3, r0
 80076de:	7023      	strb	r3, [r4, #0]
        if (tog_sw_change || bg_sw_change || push_sw_change || uart_ready) {
 80076e0:	197b      	adds	r3, r7, r5
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10d      	bne.n	8007704 <main+0x1e8>
 80076e8:	239a      	movs	r3, #154	; 0x9a
 80076ea:	18fb      	adds	r3, r7, r3
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d108      	bne.n	8007704 <main+0x1e8>
 80076f2:	2399      	movs	r3, #153	; 0x99
 80076f4:	18fb      	adds	r3, r7, r3
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d103      	bne.n	8007704 <main+0x1e8>
 80076fc:	4b64      	ldr	r3, [pc, #400]	; (8007890 <main+0x374>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d012      	beq.n	800772a <main+0x20e>
          uart_ready = 0;
 8007704:	4b62      	ldr	r3, [pc, #392]	; (8007890 <main+0x374>)
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
          uint8_t wakeup_message = 0;
 800770a:	1dfb      	adds	r3, r7, #7
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
          HAL_UART_Transmit(&huart1, &wakeup_message, 1, HAL_MAX_DELAY);
 8007710:	2301      	movs	r3, #1
 8007712:	425b      	negs	r3, r3
 8007714:	1df9      	adds	r1, r7, #7
 8007716:	485d      	ldr	r0, [pc, #372]	; (800788c <main+0x370>)
 8007718:	2201      	movs	r2, #1
 800771a:	f7fc fd25 	bl	8004168 <HAL_UART_Transmit>
          pwr_state = ST_pwr_off;
 800771e:	23ac      	movs	r3, #172	; 0xac
 8007720:	18fb      	adds	r3, r7, r3
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	46c0      	nop			; (mov r8, r8)
        } else {
          HAL_Delay(100);
        }
        break;
 8007728:	e1ca      	b.n	8007ac0 <main+0x5a4>
          HAL_Delay(100);
 800772a:	2064      	movs	r0, #100	; 0x64
 800772c:	f7fa faa6 	bl	8001c7c <HAL_Delay>
        break;
 8007730:	e1c6      	b.n	8007ac0 <main+0x5a4>
      case ST_pwr_awake:

        ///////////////////////////////////////////////////////////////////////////////////
        // Get new switch states
        ///////////////////////////////////////////////////////////////////////////////////
        update_tog_sw_states();
 8007732:	f7ff fae7 	bl	8006d04 <update_tog_sw_states>
        update_bg(bg);
 8007736:	2338      	movs	r3, #56	; 0x38
 8007738:	18fb      	adds	r3, r7, r3
 800773a:	0018      	movs	r0, r3
 800773c:	f7ff fc6a 	bl	8007014 <update_bg>
        update_push_sw_state(&ring_dir);
 8007740:	2387      	movs	r3, #135	; 0x87
 8007742:	18fb      	adds	r3, r7, r3
 8007744:	0018      	movs	r0, r3
 8007746:	f7ff fd9d 	bl	8007284 <update_push_sw_state>

        ///////////////////////////////////////////////////////////////////////////////////
        // Color State Machine
        ///////////////////////////////////////////////////////////////////////////////////
        switch(color_state) {
 800774a:	4b4e      	ldr	r3, [pc, #312]	; (8007884 <main+0x368>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	2b06      	cmp	r3, #6
 8007750:	d900      	bls.n	8007754 <main+0x238>
 8007752:	e196      	b.n	8007a82 <main+0x566>
 8007754:	009a      	lsls	r2, r3, #2
 8007756:	4b4f      	ldr	r3, [pc, #316]	; (8007894 <main+0x378>)
 8007758:	18d3      	adds	r3, r2, r3
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	469f      	mov	pc, r3
          
          /////////////////////////// Calibrate sensor ////////////////////////////////////
          case ST_color_calibrate:
            HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800775e:	2380      	movs	r3, #128	; 0x80
 8007760:	0159      	lsls	r1, r3, #5
 8007762:	23a0      	movs	r3, #160	; 0xa0
 8007764:	05db      	lsls	r3, r3, #23
 8007766:	2201      	movs	r2, #1
 8007768:	0018      	movs	r0, r3
 800776a:	f7fa fd74 	bl	8002256 <HAL_GPIO_WritePin>
            HAL_Delay(3000);
 800776e:	4b4a      	ldr	r3, [pc, #296]	; (8007898 <main+0x37c>)
 8007770:	0018      	movs	r0, r3
 8007772:	f7fa fa83 	bl	8001c7c <HAL_Delay>
            apds.calibrate_sensor(&g_cal, &b_cal, &total_cal);
 8007776:	230c      	movs	r3, #12
 8007778:	18fb      	adds	r3, r7, r3
 800777a:	2210      	movs	r2, #16
 800777c:	18ba      	adds	r2, r7, r2
 800777e:	2112      	movs	r1, #18
 8007780:	1879      	adds	r1, r7, r1
 8007782:	201c      	movs	r0, #28
 8007784:	1838      	adds	r0, r7, r0
 8007786:	f7fe fbcf 	bl	8005f28 <_ZN8APDS996016calibrate_sensorEPtS0_Pm>
            color_state = ST_color_request;
 800778a:	4b3e      	ldr	r3, [pc, #248]	; (8007884 <main+0x368>)
 800778c:	2201      	movs	r2, #1
 800778e:	701a      	strb	r2, [r3, #0]
            break;
 8007790:	e177      	b.n	8007a82 <main+0x566>
          
          /////////////////////// Request a new color ////////////////////////////////////
          case ST_color_request:
            if (color_request_timer == 0) {
 8007792:	23b6      	movs	r3, #182	; 0xb6
 8007794:	18fb      	adds	r3, r7, r3
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d13a      	bne.n	8007812 <main+0x2f6>
              color_to_find = (HAL_RNG_GetRandomNumber(&hrng) % 7);
 800779c:	4b3f      	ldr	r3, [pc, #252]	; (800789c <main+0x380>)
 800779e:	0018      	movs	r0, r3
 80077a0:	f7fc fa05 	bl	8003bae <HAL_RNG_GetRandomNumber>
 80077a4:	0003      	movs	r3, r0
 80077a6:	2107      	movs	r1, #7
 80077a8:	0018      	movs	r0, r3
 80077aa:	f7f8 fd33 	bl	8000214 <__aeabi_uidivmod>
 80077ae:	000b      	movs	r3, r1
 80077b0:	001a      	movs	r2, r3
 80077b2:	24ae      	movs	r4, #174	; 0xae
 80077b4:	193b      	adds	r3, r7, r4
 80077b6:	701a      	strb	r2, [r3, #0]
              rgb_new = rgb_lut(color_to_find);
 80077b8:	193b      	adds	r3, r7, r4
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	0018      	movs	r0, r3
 80077be:	f7ff fd9b 	bl	80072f8 <rgb_lut>
 80077c2:	0003      	movs	r3, r0
 80077c4:	001a      	movs	r2, r3
 80077c6:	2008      	movs	r0, #8
 80077c8:	183b      	adds	r3, r7, r0
 80077ca:	1c11      	adds	r1, r2, #0
 80077cc:	7019      	strb	r1, [r3, #0]
 80077ce:	0411      	lsls	r1, r2, #16
 80077d0:	0e09      	lsrs	r1, r1, #24
 80077d2:	7059      	strb	r1, [r3, #1]
 80077d4:	0212      	lsls	r2, r2, #8
 80077d6:	0e12      	lsrs	r2, r2, #24
 80077d8:	709a      	strb	r2, [r3, #2]
              set_all_pixels(ring, rgb_new);
 80077da:	183b      	adds	r3, r7, r0
 80077dc:	228c      	movs	r2, #140	; 0x8c
 80077de:	18ba      	adds	r2, r7, r2
 80077e0:	6819      	ldr	r1, [r3, #0]
 80077e2:	0010      	movs	r0, r2
 80077e4:	f7ff fe18 	bl	8007418 <set_all_pixels>
              color_audio_message = color_to_find + 7;
 80077e8:	21a2      	movs	r1, #162	; 0xa2
 80077ea:	187b      	adds	r3, r7, r1
 80077ec:	193a      	adds	r2, r7, r4
 80077ee:	7812      	ldrb	r2, [r2, #0]
 80077f0:	3207      	adds	r2, #7
 80077f2:	701a      	strb	r2, [r3, #0]
              send_audio(color_audio_message);
 80077f4:	187b      	adds	r3, r7, r1
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	0018      	movs	r0, r3
 80077fa:	f7ff fe67 	bl	80074cc <send_audio>
              color_request_timer = color_request_timeout;
 80077fe:	23b6      	movs	r3, #182	; 0xb6
 8007800:	18fb      	adds	r3, r7, r3
 8007802:	22aa      	movs	r2, #170	; 0xaa
 8007804:	18ba      	adds	r2, r7, r2
 8007806:	8812      	ldrh	r2, [r2, #0]
 8007808:	801a      	strh	r2, [r3, #0]
              color_state = ST_color_wait_for_request;
 800780a:	4b1e      	ldr	r3, [pc, #120]	; (8007884 <main+0x368>)
 800780c:	2205      	movs	r2, #5
 800780e:	701a      	strb	r2, [r3, #0]
            } else {
              color_request_timer--;
            }
            break;
 8007810:	e137      	b.n	8007a82 <main+0x566>
              color_request_timer--;
 8007812:	21b6      	movs	r1, #182	; 0xb6
 8007814:	187b      	adds	r3, r7, r1
 8007816:	881a      	ldrh	r2, [r3, #0]
 8007818:	187b      	adds	r3, r7, r1
 800781a:	3a01      	subs	r2, #1
 800781c:	801a      	strh	r2, [r3, #0]
            break;
 800781e:	e130      	b.n	8007a82 <main+0x566>

          //////////////////// Read color sensor and process /////////////////////////////
          case ST_color_search:
            
            // Update ring
            if (ring_dir == 0) {
 8007820:	2387      	movs	r3, #135	; 0x87
 8007822:	18fb      	adds	r3, r7, r3
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d108      	bne.n	800783c <main+0x320>
              ring.incrRing(rgb_new);
 800782a:	2308      	movs	r3, #8
 800782c:	18fb      	adds	r3, r7, r3
 800782e:	228c      	movs	r2, #140	; 0x8c
 8007830:	18ba      	adds	r2, r7, r2
 8007832:	6819      	ldr	r1, [r3, #0]
 8007834:	0010      	movs	r0, r2
 8007836:	f7fe ffef 	bl	8006818 <_ZN7DotStar8incrRingE8RGB_VALS>
 800783a:	e007      	b.n	800784c <main+0x330>
            } else {
              ring.decrRing(rgb_new);
 800783c:	2308      	movs	r3, #8
 800783e:	18fb      	adds	r3, r7, r3
 8007840:	228c      	movs	r2, #140	; 0x8c
 8007842:	18ba      	adds	r2, r7, r2
 8007844:	6819      	ldr	r1, [r3, #0]
 8007846:	0010      	movs	r0, r2
 8007848:	f7ff f81c 	bl	8006884 <_ZN7DotStar8decrRingE8RGB_VALS>
            }

            // Repeat request after timeout
            if (color_search_timer == 0) {
 800784c:	23b4      	movs	r3, #180	; 0xb4
 800784e:	18fb      	adds	r3, r7, r3
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d124      	bne.n	80078a0 <main+0x384>
              color_search_timer = color_search_timeout;
 8007856:	23b4      	movs	r3, #180	; 0xb4
 8007858:	18fb      	adds	r3, r7, r3
 800785a:	22a8      	movs	r2, #168	; 0xa8
 800785c:	18ba      	adds	r2, r7, r2
 800785e:	8812      	ldrh	r2, [r2, #0]
 8007860:	801a      	strh	r2, [r3, #0]
              color_audio_message = color_to_find + 7;
 8007862:	21a2      	movs	r1, #162	; 0xa2
 8007864:	187b      	adds	r3, r7, r1
 8007866:	22ae      	movs	r2, #174	; 0xae
 8007868:	18ba      	adds	r2, r7, r2
 800786a:	7812      	ldrb	r2, [r2, #0]
 800786c:	3207      	adds	r2, #7
 800786e:	701a      	strb	r2, [r3, #0]
              send_audio(color_audio_message);
 8007870:	187b      	adds	r3, r7, r1
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	0018      	movs	r0, r3
 8007876:	f7ff fe29 	bl	80074cc <send_audio>
 800787a:	e017      	b.n	80078ac <main+0x390>
 800787c:	00004e20 	.word	0x00004e20
 8007880:	20000094 	.word	0x20000094
 8007884:	200000a0 	.word	0x200000a0
 8007888:	20000090 	.word	0x20000090
 800788c:	20000168 	.word	0x20000168
 8007890:	20000002 	.word	0x20000002
 8007894:	080082dc 	.word	0x080082dc
 8007898:	00000bb8 	.word	0x00000bb8
 800789c:	20000100 	.word	0x20000100
            } else {
              color_search_timer--;
 80078a0:	21b4      	movs	r1, #180	; 0xb4
 80078a2:	187b      	adds	r3, r7, r1
 80078a4:	881a      	ldrh	r2, [r3, #0]
 80078a6:	187b      	adds	r3, r7, r1
 80078a8:	3a01      	subs	r2, #1
 80078aa:	801a      	strh	r2, [r3, #0]
            }
            
            apds.getColorData(&r, &g, &b, &c);
 80078ac:	2516      	movs	r5, #22
 80078ae:	197c      	adds	r4, r7, r5
 80078b0:	2618      	movs	r6, #24
 80078b2:	19ba      	adds	r2, r7, r6
 80078b4:	231a      	movs	r3, #26
 80078b6:	18f9      	adds	r1, r7, r3
 80078b8:	201c      	movs	r0, #28
 80078ba:	1838      	adds	r0, r7, r0
 80078bc:	2314      	movs	r3, #20
 80078be:	18fb      	adds	r3, r7, r3
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	0023      	movs	r3, r4
 80078c4:	f7fd ffb6 	bl	8005834 <_ZN8APDS996012getColorDataEPtS0_S0_S0_>
            color_total = r + g + b + c;
 80078c8:	231a      	movs	r3, #26
 80078ca:	18fb      	adds	r3, r7, r3
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	001a      	movs	r2, r3
 80078d0:	19bb      	adds	r3, r7, r6
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	18d3      	adds	r3, r2, r3
 80078d6:	197a      	adds	r2, r7, r5
 80078d8:	8812      	ldrh	r2, [r2, #0]
 80078da:	189b      	adds	r3, r3, r2
 80078dc:	2214      	movs	r2, #20
 80078de:	18ba      	adds	r2, r7, r2
 80078e0:	8812      	ldrh	r2, [r2, #0]
 80078e2:	189b      	adds	r3, r3, r2
 80078e4:	229c      	movs	r2, #156	; 0x9c
 80078e6:	18b9      	adds	r1, r7, r2
 80078e8:	600b      	str	r3, [r1, #0]
            if (color_total > (total_cal + 5000)) {
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4976      	ldr	r1, [pc, #472]	; (8007ac8 <main+0x5ac>)
 80078ee:	468c      	mov	ip, r1
 80078f0:	4463      	add	r3, ip
 80078f2:	18ba      	adds	r2, r7, r2
 80078f4:	6812      	ldr	r2, [r2, #0]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d800      	bhi.n	80078fc <main+0x3e0>
 80078fa:	e0c1      	b.n	8007a80 <main+0x564>
              g = g - g_cal; //Adjust for offset from blue PCB 
 80078fc:	2018      	movs	r0, #24
 80078fe:	183b      	adds	r3, r7, r0
 8007900:	881a      	ldrh	r2, [r3, #0]
 8007902:	2312      	movs	r3, #18
 8007904:	18fb      	adds	r3, r7, r3
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	b29a      	uxth	r2, r3
 800790c:	183b      	adds	r3, r7, r0
 800790e:	801a      	strh	r2, [r3, #0]
              b = b - b_cal; //Adjust for offset from blue PCB
 8007910:	2416      	movs	r4, #22
 8007912:	193b      	adds	r3, r7, r4
 8007914:	881a      	ldrh	r2, [r3, #0]
 8007916:	2310      	movs	r3, #16
 8007918:	18fb      	adds	r3, r7, r3
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	b29a      	uxth	r2, r3
 8007920:	193b      	adds	r3, r7, r4
 8007922:	801a      	strh	r2, [r3, #0]
              color = apds.colorSort(r, g, b, color_total, color_to_find);
 8007924:	231a      	movs	r3, #26
 8007926:	18fb      	adds	r3, r7, r3
 8007928:	8819      	ldrh	r1, [r3, #0]
 800792a:	183b      	adds	r3, r7, r0
 800792c:	881a      	ldrh	r2, [r3, #0]
 800792e:	193b      	adds	r3, r7, r4
 8007930:	881d      	ldrh	r5, [r3, #0]
 8007932:	26af      	movs	r6, #175	; 0xaf
 8007934:	19bc      	adds	r4, r7, r6
 8007936:	231c      	movs	r3, #28
 8007938:	18f8      	adds	r0, r7, r3
 800793a:	23ae      	movs	r3, #174	; 0xae
 800793c:	18fb      	adds	r3, r7, r3
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	239c      	movs	r3, #156	; 0x9c
 8007944:	18fb      	adds	r3, r7, r3
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	002b      	movs	r3, r5
 800794c:	f7fe f88e 	bl	8005a6c <_ZN8APDS99609colorSortEtttmh>
 8007950:	0003      	movs	r3, r0
 8007952:	7023      	strb	r3, [r4, #0]
              if (color != UNKNOWN) {
 8007954:	19bb      	adds	r3, r7, r6
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2bff      	cmp	r3, #255	; 0xff
 800795a:	d100      	bne.n	800795e <main+0x442>
 800795c:	e090      	b.n	8007a80 <main+0x564>
                if (color == color_to_find) {
 800795e:	23af      	movs	r3, #175	; 0xaf
 8007960:	18fa      	adds	r2, r7, r3
 8007962:	23ae      	movs	r3, #174	; 0xae
 8007964:	18fb      	adds	r3, r7, r3
 8007966:	7812      	ldrb	r2, [r2, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d103      	bne.n	8007976 <main+0x45a>
                  color_state = ST_color_response_success;
 800796e:	4b57      	ldr	r3, [pc, #348]	; (8007acc <main+0x5b0>)
 8007970:	2203      	movs	r2, #3
 8007972:	701a      	strb	r2, [r3, #0]
                } else {
                  color_state = ST_color_response_fail;
                }
              }
            }
            break;
 8007974:	e084      	b.n	8007a80 <main+0x564>
                  color_state = ST_color_response_fail;
 8007976:	4b55      	ldr	r3, [pc, #340]	; (8007acc <main+0x5b0>)
 8007978:	2204      	movs	r2, #4
 800797a:	701a      	strb	r2, [r3, #0]
            break;
 800797c:	e080      	b.n	8007a80 <main+0x564>

          ////////////////////////////// Color found! /////////////////////////////////
          case ST_color_response_success:
            color_audio_message = color_to_find + 14;
 800797e:	21a2      	movs	r1, #162	; 0xa2
 8007980:	187b      	adds	r3, r7, r1
 8007982:	22ae      	movs	r2, #174	; 0xae
 8007984:	18ba      	adds	r2, r7, r2
 8007986:	7812      	ldrb	r2, [r2, #0]
 8007988:	320e      	adds	r2, #14
 800798a:	701a      	strb	r2, [r3, #0]
            send_audio(color_audio_message);
 800798c:	187b      	adds	r3, r7, r1
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	0018      	movs	r0, r3
 8007992:	f7ff fd9b 	bl	80074cc <send_audio>
            set_all_pixels(ring, rgb_new);
 8007996:	2308      	movs	r3, #8
 8007998:	18fb      	adds	r3, r7, r3
 800799a:	228c      	movs	r2, #140	; 0x8c
 800799c:	18ba      	adds	r2, r7, r2
 800799e:	6819      	ldr	r1, [r3, #0]
 80079a0:	0010      	movs	r0, r2
 80079a2:	f7ff fd39 	bl	8007418 <set_all_pixels>
            color_state = ST_color_wait_for_song;
 80079a6:	4b49      	ldr	r3, [pc, #292]	; (8007acc <main+0x5b0>)
 80079a8:	2206      	movs	r2, #6
 80079aa:	701a      	strb	r2, [r3, #0]
            break;
 80079ac:	e069      	b.n	8007a82 <main+0x566>

          ////////////////////////// Wrong color found! //////////////////////////////
          case ST_color_response_fail:
            color_audio_message = color + 21;
 80079ae:	21a2      	movs	r1, #162	; 0xa2
 80079b0:	187b      	adds	r3, r7, r1
 80079b2:	24af      	movs	r4, #175	; 0xaf
 80079b4:	193a      	adds	r2, r7, r4
 80079b6:	7812      	ldrb	r2, [r2, #0]
 80079b8:	3215      	adds	r2, #21
 80079ba:	701a      	strb	r2, [r3, #0]
            send_audio(color_audio_message);
 80079bc:	187b      	adds	r3, r7, r1
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	0018      	movs	r0, r3
 80079c2:	f7ff fd83 	bl	80074cc <send_audio>
            rgb_new = rgb_lut(color);
 80079c6:	193b      	adds	r3, r7, r4
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	0018      	movs	r0, r3
 80079cc:	f7ff fc94 	bl	80072f8 <rgb_lut>
 80079d0:	0003      	movs	r3, r0
 80079d2:	001a      	movs	r2, r3
 80079d4:	2008      	movs	r0, #8
 80079d6:	183b      	adds	r3, r7, r0
 80079d8:	1c11      	adds	r1, r2, #0
 80079da:	7019      	strb	r1, [r3, #0]
 80079dc:	0411      	lsls	r1, r2, #16
 80079de:	0e09      	lsrs	r1, r1, #24
 80079e0:	7059      	strb	r1, [r3, #1]
 80079e2:	0212      	lsls	r2, r2, #8
 80079e4:	0e12      	lsrs	r2, r2, #24
 80079e6:	709a      	strb	r2, [r3, #2]
            set_all_pixels(ring, rgb_new);
 80079e8:	183b      	adds	r3, r7, r0
 80079ea:	228c      	movs	r2, #140	; 0x8c
 80079ec:	18ba      	adds	r2, r7, r2
 80079ee:	6819      	ldr	r1, [r3, #0]
 80079f0:	0010      	movs	r0, r2
 80079f2:	f7ff fd11 	bl	8007418 <set_all_pixels>
            color_state = ST_color_wait_for_song;
 80079f6:	4b35      	ldr	r3, [pc, #212]	; (8007acc <main+0x5b0>)
 80079f8:	2206      	movs	r2, #6
 80079fa:	701a      	strb	r2, [r3, #0]
            break;
 80079fc:	e041      	b.n	8007a82 <main+0x566>

          ////////////////////////// Wait for request to play ////////////////////////////
          case ST_color_wait_for_request:
            if (request_wait_timer == 0) {
 80079fe:	23b0      	movs	r3, #176	; 0xb0
 8007a00:	18fb      	adds	r3, r7, r3
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d109      	bne.n	8007a1c <main+0x500>
              request_wait_timer = request_wait_timeout;
 8007a08:	23b0      	movs	r3, #176	; 0xb0
 8007a0a:	18fb      	adds	r3, r7, r3
 8007a0c:	22a4      	movs	r2, #164	; 0xa4
 8007a0e:	18ba      	adds	r2, r7, r2
 8007a10:	8812      	ldrh	r2, [r2, #0]
 8007a12:	801a      	strh	r2, [r3, #0]
              color_state = ST_color_search;
 8007a14:	4b2d      	ldr	r3, [pc, #180]	; (8007acc <main+0x5b0>)
 8007a16:	2202      	movs	r2, #2
 8007a18:	701a      	strb	r2, [r3, #0]
            } else {
              request_wait_timer--;
            }
            break;
 8007a1a:	e032      	b.n	8007a82 <main+0x566>
              request_wait_timer--;
 8007a1c:	21b0      	movs	r1, #176	; 0xb0
 8007a1e:	187b      	adds	r3, r7, r1
 8007a20:	881a      	ldrh	r2, [r3, #0]
 8007a22:	187b      	adds	r3, r7, r1
 8007a24:	3a01      	subs	r2, #1
 8007a26:	801a      	strh	r2, [r3, #0]
            break;
 8007a28:	e02b      	b.n	8007a82 <main+0x566>
          
          ////////////////////////// Wait for song to play ////////////////////////////
          case ST_color_wait_for_song:
            HAL_UART_Receive_IT(&huart1, &uart_data, 1);
 8007a2a:	4929      	ldr	r1, [pc, #164]	; (8007ad0 <main+0x5b4>)
 8007a2c:	4b29      	ldr	r3, [pc, #164]	; (8007ad4 <main+0x5b8>)
 8007a2e:	2201      	movs	r2, #1
 8007a30:	0018      	movs	r0, r3
 8007a32:	f7fc fc41 	bl	80042b8 <HAL_UART_Receive_IT>
            if ((song_wait_timer == 0) || (uart_ready == 1)) {
 8007a36:	23b2      	movs	r3, #178	; 0xb2
 8007a38:	18fb      	adds	r3, r7, r3
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d003      	beq.n	8007a48 <main+0x52c>
 8007a40:	4b25      	ldr	r3, [pc, #148]	; (8007ad8 <main+0x5bc>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d114      	bne.n	8007a72 <main+0x556>
              song_wait_timer = song_wait_timeout;
 8007a48:	23b2      	movs	r3, #178	; 0xb2
 8007a4a:	18fb      	adds	r3, r7, r3
 8007a4c:	22a6      	movs	r2, #166	; 0xa6
 8007a4e:	18ba      	adds	r2, r7, r2
 8007a50:	8812      	ldrh	r2, [r2, #0]
 8007a52:	801a      	strh	r2, [r3, #0]
              set_all_pixels(ring, rgb_off);
 8007a54:	2388      	movs	r3, #136	; 0x88
 8007a56:	18fb      	adds	r3, r7, r3
 8007a58:	228c      	movs	r2, #140	; 0x8c
 8007a5a:	18ba      	adds	r2, r7, r2
 8007a5c:	6819      	ldr	r1, [r3, #0]
 8007a5e:	0010      	movs	r0, r2
 8007a60:	f7ff fcda 	bl	8007418 <set_all_pixels>
              uart_ready = 0;
 8007a64:	4b1c      	ldr	r3, [pc, #112]	; (8007ad8 <main+0x5bc>)
 8007a66:	2200      	movs	r2, #0
 8007a68:	701a      	strb	r2, [r3, #0]
              color_state = ST_color_request;
 8007a6a:	4b18      	ldr	r3, [pc, #96]	; (8007acc <main+0x5b0>)
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	701a      	strb	r2, [r3, #0]
            } else {
              song_wait_timer--;
            }
            break;
 8007a70:	e007      	b.n	8007a82 <main+0x566>
              song_wait_timer--;
 8007a72:	21b2      	movs	r1, #178	; 0xb2
 8007a74:	187b      	adds	r3, r7, r1
 8007a76:	881a      	ldrh	r2, [r3, #0]
 8007a78:	187b      	adds	r3, r7, r1
 8007a7a:	3a01      	subs	r2, #1
 8007a7c:	801a      	strh	r2, [r3, #0]
            break;
 8007a7e:	e000      	b.n	8007a82 <main+0x566>
            break;
 8007a80:	46c0      	nop			; (mov r8, r8)
        }

        ///////////////////////////////////////////////////////////////////////////////////
        // Check if inactivity detected
        ///////////////////////////////////////////////////////////////////////////////////
        HAL_UART_Receive_IT(&huart1, &uart_data, 1);
 8007a82:	4913      	ldr	r1, [pc, #76]	; (8007ad0 <main+0x5b4>)
 8007a84:	4b13      	ldr	r3, [pc, #76]	; (8007ad4 <main+0x5b8>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f7fc fc15 	bl	80042b8 <HAL_UART_Receive_IT>
        if (uart_ready == 1) {
 8007a8e:	4b12      	ldr	r3, [pc, #72]	; (8007ad8 <main+0x5bc>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d114      	bne.n	8007ac0 <main+0x5a4>
          if (uart_data == 3) {
 8007a96:	4b0e      	ldr	r3, [pc, #56]	; (8007ad0 <main+0x5b4>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d10b      	bne.n	8007ab6 <main+0x59a>
            turn_all_leds_off(ring, bg);
 8007a9e:	2338      	movs	r3, #56	; 0x38
 8007aa0:	18fa      	adds	r2, r7, r3
 8007aa2:	238c      	movs	r3, #140	; 0x8c
 8007aa4:	18fb      	adds	r3, r7, r3
 8007aa6:	0011      	movs	r1, r2
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	f7ff fcd3 	bl	8007454 <turn_all_leds_off>
            pwr_state = ST_pwr_sleep;
 8007aae:	23ac      	movs	r3, #172	; 0xac
 8007ab0:	18fb      	adds	r3, r7, r3
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	701a      	strb	r2, [r3, #0]
          }
          uart_ready = 0;
 8007ab6:	4b08      	ldr	r3, [pc, #32]	; (8007ad8 <main+0x5bc>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	e000      	b.n	8007ac0 <main+0x5a4>
        break;
 8007abe:	46c0      	nop			; (mov r8, r8)
        }
    }
    
    // Slow down loop
    HAL_Delay(15);
 8007ac0:	200f      	movs	r0, #15
 8007ac2:	f7fa f8db 	bl	8001c7c <HAL_Delay>
    
  }
 8007ac6:	e5a9      	b.n	800761c <main+0x100>
 8007ac8:	00001388 	.word	0x00001388
 8007acc:	200000a0 	.word	0x200000a0
 8007ad0:	20000090 	.word	0x20000090
 8007ad4:	20000168 	.word	0x20000168
 8007ad8:	20000002 	.word	0x20000002

08007adc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b09c      	sub	sp, #112	; 0x70
 8007ae0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  
    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ae2:	4b3b      	ldr	r3, [pc, #236]	; (8007bd0 <_Z18SystemClock_Configv+0xf4>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a3b      	ldr	r2, [pc, #236]	; (8007bd4 <_Z18SystemClock_Configv+0xf8>)
 8007ae8:	401a      	ands	r2, r3
 8007aea:	4b39      	ldr	r3, [pc, #228]	; (8007bd0 <_Z18SystemClock_Configv+0xf4>)
 8007aec:	2180      	movs	r1, #128	; 0x80
 8007aee:	0109      	lsls	r1, r1, #4
 8007af0:	430a      	orrs	r2, r1
 8007af2:	601a      	str	r2, [r3, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007af4:	2138      	movs	r1, #56	; 0x38
 8007af6:	187b      	adds	r3, r7, r1
 8007af8:	2202      	movs	r2, #2
 8007afa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007afc:	187b      	adds	r3, r7, r1
 8007afe:	2201      	movs	r2, #1
 8007b00:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8007b02:	187b      	adds	r3, r7, r1
 8007b04:	2210      	movs	r2, #16
 8007b06:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b08:	187b      	adds	r3, r7, r1
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007b0e:	187b      	adds	r3, r7, r1
 8007b10:	2200      	movs	r2, #0
 8007b12:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8007b14:	187b      	adds	r3, r7, r1
 8007b16:	2280      	movs	r2, #128	; 0x80
 8007b18:	02d2      	lsls	r2, r2, #11
 8007b1a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8007b1c:	187b      	adds	r3, r7, r1
 8007b1e:	2280      	movs	r2, #128	; 0x80
 8007b20:	03d2      	lsls	r2, r2, #15
 8007b22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b24:	187b      	adds	r3, r7, r1
 8007b26:	0018      	movs	r0, r3
 8007b28:	f7fb f8d4 	bl	8002cd4 <HAL_RCC_OscConfig>
 8007b2c:	0003      	movs	r3, r0
 8007b2e:	1e5a      	subs	r2, r3, #1
 8007b30:	4193      	sbcs	r3, r2
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <_Z18SystemClock_Configv+0x60>
  {
	  Error_Handler();
 8007b38:	f000 f85c 	bl	8007bf4 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b3c:	2124      	movs	r1, #36	; 0x24
 8007b3e:	187b      	adds	r3, r7, r1
 8007b40:	220f      	movs	r2, #15
 8007b42:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b44:	187b      	adds	r3, r7, r1
 8007b46:	2203      	movs	r2, #3
 8007b48:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007b4a:	187b      	adds	r3, r7, r1
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007b50:	187b      	adds	r3, r7, r1
 8007b52:	2200      	movs	r2, #0
 8007b54:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007b56:	187b      	adds	r3, r7, r1
 8007b58:	2200      	movs	r2, #0
 8007b5a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007b5c:	187b      	adds	r3, r7, r1
 8007b5e:	2101      	movs	r1, #1
 8007b60:	0018      	movs	r0, r3
 8007b62:	f7fb fc77 	bl	8003454 <HAL_RCC_ClockConfig>
 8007b66:	0003      	movs	r3, r0
 8007b68:	1e5a      	subs	r2, r3, #1
 8007b6a:	4193      	sbcs	r3, r2
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <_Z18SystemClock_Configv+0x9a>
  {
	  Error_Handler();
 8007b72:	f000 f83f 	bl	8007bf4 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007b76:	1d3b      	adds	r3, r7, #4
 8007b78:	2208      	movs	r2, #8
 8007b7a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8007b7c:	1d3b      	adds	r3, r7, #4
 8007b7e:	2280      	movs	r2, #128	; 0x80
 8007b80:	0192      	lsls	r2, r2, #6
 8007b82:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007b84:	1d3b      	adds	r3, r7, #4
 8007b86:	0018      	movs	r0, r3
 8007b88:	f7fb fe48 	bl	800381c <HAL_RCCEx_PeriphCLKConfig>
 8007b8c:	0003      	movs	r3, r0
 8007b8e:	1e5a      	subs	r2, r3, #1
 8007b90:	4193      	sbcs	r3, r2
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <_Z18SystemClock_Configv+0xc0>
  {
	  Error_Handler();
 8007b98:	f000 f82c 	bl	8007bf4 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8007b9c:	f7fb fe08 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 8007ba0:	0002      	movs	r2, r0
 8007ba2:	23fa      	movs	r3, #250	; 0xfa
 8007ba4:	0099      	lsls	r1, r3, #2
 8007ba6:	0010      	movs	r0, r2
 8007ba8:	f7f8 faae 	bl	8000108 <__udivsi3>
 8007bac:	0003      	movs	r3, r0
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f7fa f94f 	bl	8001e52 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007bb4:	2004      	movs	r0, #4
 8007bb6:	f7fa f959 	bl	8001e6c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007bba:	2301      	movs	r3, #1
 8007bbc:	425b      	negs	r3, r3
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	f7fa f920 	bl	8001e08 <HAL_NVIC_SetPriority>
}
 8007bc8:	46c0      	nop			; (mov r8, r8)
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	b01c      	add	sp, #112	; 0x70
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	40007000 	.word	0x40007000
 8007bd4:	ffffe7ff 	.word	0xffffe7ff

08007bd8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uart_ready = 1;
 8007be0:	4b03      	ldr	r3, [pc, #12]	; (8007bf0 <HAL_UART_RxCpltCallback+0x18>)
 8007be2:	2201      	movs	r2, #1
 8007be4:	701a      	strb	r2, [r3, #0]
}
 8007be6:	46c0      	nop			; (mov r8, r8)
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b002      	add	sp, #8
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	46c0      	nop			; (mov r8, r8)
 8007bf0:	20000002 	.word	0x20000002

08007bf4 <Error_Handler>:

void Error_Handler(void){
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	af00      	add	r7, sp, #0
}
 8007bf8:	46c0      	nop			; (mov r8, r8)
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <_Z19ring_set_all_pixelsR7DotStar8RGB_VALS>:
        }
    }
    return;
}

void ring_set_all_pixels(DotStar& ring, RGB_VALS rgb) {
 8007bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c00:	b087      	sub	sp, #28
 8007c02:	af02      	add	r7, sp, #8
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	003b      	movs	r3, r7
 8007c08:	6019      	str	r1, [r3, #0]
    uint8_t ring_size = ring.numPixels();
 8007c0a:	230e      	movs	r3, #14
 8007c0c:	18fc      	adds	r4, r7, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	0018      	movs	r0, r3
 8007c12:	f7fe feb0 	bl	8006976 <_ZN7DotStar9numPixelsEv>
 8007c16:	0003      	movs	r3, r0
 8007c18:	7023      	strb	r3, [r4, #0]
    for (uint8_t j = 0; j < ring_size; j++)
 8007c1a:	230f      	movs	r3, #15
 8007c1c:	18fb      	adds	r3, r7, r3
 8007c1e:	2200      	movs	r2, #0
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	230f      	movs	r3, #15
 8007c24:	18fa      	adds	r2, r7, r3
 8007c26:	230e      	movs	r3, #14
 8007c28:	18fb      	adds	r3, r7, r3
 8007c2a:	7812      	ldrb	r2, [r2, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d216      	bcs.n	8007c60 <_Z19ring_set_all_pixelsR7DotStar8RGB_VALS+0x62>
    {
        ring.setPixelColor(j, rgb.r, rgb.g, rgb.b);
 8007c32:	003b      	movs	r3, r7
 8007c34:	781c      	ldrb	r4, [r3, #0]
 8007c36:	003b      	movs	r3, r7
 8007c38:	785d      	ldrb	r5, [r3, #1]
 8007c3a:	003b      	movs	r3, r7
 8007c3c:	789b      	ldrb	r3, [r3, #2]
 8007c3e:	210f      	movs	r1, #15
 8007c40:	000e      	movs	r6, r1
 8007c42:	187a      	adds	r2, r7, r1
 8007c44:	7811      	ldrb	r1, [r2, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	002b      	movs	r3, r5
 8007c4c:	0022      	movs	r2, r4
 8007c4e:	f7fe fe56 	bl	80068fe <_ZN7DotStar13setPixelColorEhhhh>
    for (uint8_t j = 0; j < ring_size; j++)
 8007c52:	0031      	movs	r1, r6
 8007c54:	187b      	adds	r3, r7, r1
 8007c56:	781a      	ldrb	r2, [r3, #0]
 8007c58:	187b      	adds	r3, r7, r1
 8007c5a:	3201      	adds	r2, #1
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	e7e0      	b.n	8007c22 <_Z19ring_set_all_pixelsR7DotStar8RGB_VALS+0x24>
    }
    ring.show();
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	0018      	movs	r0, r3
 8007c64:	f7fe fd2a 	bl	80066bc <_ZN7DotStar4showEv>
}
 8007c68:	46c0      	nop			; (mov r8, r8)
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	b005      	add	sp, #20
 8007c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c70 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8007c74:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <MX_RNG_Init+0x20>)
 8007c76:	4a07      	ldr	r2, [pc, #28]	; (8007c94 <MX_RNG_Init+0x24>)
 8007c78:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8007c7a:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <MX_RNG_Init+0x20>)
 8007c7c:	0018      	movs	r0, r3
 8007c7e:	f7fb ff15 	bl	8003aac <HAL_RNG_Init>
 8007c82:	1e03      	subs	r3, r0, #0
 8007c84:	d001      	beq.n	8007c8a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8007c86:	f7ff ffb5 	bl	8007bf4 <Error_Handler>
  }

}
 8007c8a:	46c0      	nop			; (mov r8, r8)
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20000100 	.word	0x20000100
 8007c94:	40025000 	.word	0x40025000

08007c98 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a0a      	ldr	r2, [pc, #40]	; (8007cd0 <HAL_RNG_MspInit+0x38>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d10d      	bne.n	8007cc6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8007caa:	4b0a      	ldr	r3, [pc, #40]	; (8007cd4 <HAL_RNG_MspInit+0x3c>)
 8007cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cae:	4b09      	ldr	r3, [pc, #36]	; (8007cd4 <HAL_RNG_MspInit+0x3c>)
 8007cb0:	2180      	movs	r1, #128	; 0x80
 8007cb2:	0349      	lsls	r1, r1, #13
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8007cb8:	4b06      	ldr	r3, [pc, #24]	; (8007cd4 <HAL_RNG_MspInit+0x3c>)
 8007cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cbc:	2380      	movs	r3, #128	; 0x80
 8007cbe:	035b      	lsls	r3, r3, #13
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8007cc6:	46c0      	nop			; (mov r8, r8)
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	b004      	add	sp, #16
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	46c0      	nop			; (mov r8, r8)
 8007cd0:	40025000 	.word	0x40025000
 8007cd4:	40021000 	.word	0x40021000

08007cd8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8007cdc:	4b18      	ldr	r3, [pc, #96]	; (8007d40 <MX_SPI1_Init+0x68>)
 8007cde:	4a19      	ldr	r2, [pc, #100]	; (8007d44 <MX_SPI1_Init+0x6c>)
 8007ce0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007ce2:	4b17      	ldr	r3, [pc, #92]	; (8007d40 <MX_SPI1_Init+0x68>)
 8007ce4:	2282      	movs	r2, #130	; 0x82
 8007ce6:	0052      	lsls	r2, r2, #1
 8007ce8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007cea:	4b15      	ldr	r3, [pc, #84]	; (8007d40 <MX_SPI1_Init+0x68>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8007cf0:	4b13      	ldr	r3, [pc, #76]	; (8007d40 <MX_SPI1_Init+0x68>)
 8007cf2:	2280      	movs	r2, #128	; 0x80
 8007cf4:	0112      	lsls	r2, r2, #4
 8007cf6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007cf8:	4b11      	ldr	r3, [pc, #68]	; (8007d40 <MX_SPI1_Init+0x68>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007cfe:	4b10      	ldr	r3, [pc, #64]	; (8007d40 <MX_SPI1_Init+0x68>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007d04:	4b0e      	ldr	r3, [pc, #56]	; (8007d40 <MX_SPI1_Init+0x68>)
 8007d06:	2280      	movs	r2, #128	; 0x80
 8007d08:	0092      	lsls	r2, r2, #2
 8007d0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007d0c:	4b0c      	ldr	r3, [pc, #48]	; (8007d40 <MX_SPI1_Init+0x68>)
 8007d0e:	2210      	movs	r2, #16
 8007d10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007d12:	4b0b      	ldr	r3, [pc, #44]	; (8007d40 <MX_SPI1_Init+0x68>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007d18:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <MX_SPI1_Init+0x68>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d1e:	4b08      	ldr	r3, [pc, #32]	; (8007d40 <MX_SPI1_Init+0x68>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007d24:	4b06      	ldr	r3, [pc, #24]	; (8007d40 <MX_SPI1_Init+0x68>)
 8007d26:	2207      	movs	r2, #7
 8007d28:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007d2a:	4b05      	ldr	r3, [pc, #20]	; (8007d40 <MX_SPI1_Init+0x68>)
 8007d2c:	0018      	movs	r0, r3
 8007d2e:	f7fb ff55 	bl	8003bdc <HAL_SPI_Init>
 8007d32:	1e03      	subs	r3, r0, #0
 8007d34:	d001      	beq.n	8007d3a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8007d36:	f7ff ff5d 	bl	8007bf4 <Error_Handler>
  }

}
 8007d3a:	46c0      	nop			; (mov r8, r8)
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	20000110 	.word	0x20000110
 8007d44:	40013000 	.word	0x40013000

08007d48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b088      	sub	sp, #32
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d50:	230c      	movs	r3, #12
 8007d52:	18fb      	adds	r3, r7, r3
 8007d54:	0018      	movs	r0, r3
 8007d56:	2314      	movs	r3, #20
 8007d58:	001a      	movs	r2, r3
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	f000 f9cc 	bl	80080f8 <memset>
  if(spiHandle->Instance==SPI1)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <HAL_SPI_MspInit+0x80>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d129      	bne.n	8007dbe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007d6a:	4b18      	ldr	r3, [pc, #96]	; (8007dcc <HAL_SPI_MspInit+0x84>)
 8007d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d6e:	4b17      	ldr	r3, [pc, #92]	; (8007dcc <HAL_SPI_MspInit+0x84>)
 8007d70:	2180      	movs	r1, #128	; 0x80
 8007d72:	0149      	lsls	r1, r1, #5
 8007d74:	430a      	orrs	r2, r1
 8007d76:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d78:	4b14      	ldr	r3, [pc, #80]	; (8007dcc <HAL_SPI_MspInit+0x84>)
 8007d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7c:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <HAL_SPI_MspInit+0x84>)
 8007d7e:	2101      	movs	r1, #1
 8007d80:	430a      	orrs	r2, r1
 8007d82:	62da      	str	r2, [r3, #44]	; 0x2c
 8007d84:	4b11      	ldr	r3, [pc, #68]	; (8007dcc <HAL_SPI_MspInit+0x84>)
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	2201      	movs	r2, #1
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	60bb      	str	r3, [r7, #8]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007d90:	210c      	movs	r1, #12
 8007d92:	187b      	adds	r3, r7, r1
 8007d94:	22e0      	movs	r2, #224	; 0xe0
 8007d96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d98:	187b      	adds	r3, r7, r1
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d9e:	187b      	adds	r3, r7, r1
 8007da0:	2200      	movs	r2, #0
 8007da2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007da4:	187b      	adds	r3, r7, r1
 8007da6:	2203      	movs	r2, #3
 8007da8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8007daa:	187b      	adds	r3, r7, r1
 8007dac:	2200      	movs	r2, #0
 8007dae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007db0:	187a      	adds	r2, r7, r1
 8007db2:	23a0      	movs	r3, #160	; 0xa0
 8007db4:	05db      	lsls	r3, r3, #23
 8007db6:	0011      	movs	r1, r2
 8007db8:	0018      	movs	r0, r3
 8007dba:	f7fa f8b9 	bl	8001f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	b008      	add	sp, #32
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	46c0      	nop			; (mov r8, r8)
 8007dc8:	40013000 	.word	0x40013000
 8007dcc:	40021000 	.word	0x40021000

08007dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dd4:	4b12      	ldr	r3, [pc, #72]	; (8007e20 <HAL_MspInit+0x50>)
 8007dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dd8:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <HAL_MspInit+0x50>)
 8007dda:	2101      	movs	r1, #1
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8007de0:	4b0f      	ldr	r3, [pc, #60]	; (8007e20 <HAL_MspInit+0x50>)
 8007de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007de4:	4b0e      	ldr	r3, [pc, #56]	; (8007e20 <HAL_MspInit+0x50>)
 8007de6:	2180      	movs	r1, #128	; 0x80
 8007de8:	0549      	lsls	r1, r1, #21
 8007dea:	430a      	orrs	r2, r1
 8007dec:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8007dee:	2305      	movs	r3, #5
 8007df0:	425b      	negs	r3, r3
 8007df2:	2200      	movs	r2, #0
 8007df4:	2100      	movs	r1, #0
 8007df6:	0018      	movs	r0, r3
 8007df8:	f7fa f806 	bl	8001e08 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	425b      	negs	r3, r3
 8007e00:	2200      	movs	r2, #0
 8007e02:	2100      	movs	r1, #0
 8007e04:	0018      	movs	r0, r3
 8007e06:	f7f9 ffff 	bl	8001e08 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	425b      	negs	r3, r3
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2100      	movs	r1, #0
 8007e12:	0018      	movs	r0, r3
 8007e14:	f7f9 fff8 	bl	8001e08 <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e18:	46c0      	nop			; (mov r8, r8)
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	46c0      	nop			; (mov r8, r8)
 8007e20:	40021000 	.word	0x40021000

08007e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007e28:	46c0      	nop			; (mov r8, r8)
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007e32:	e7fe      	b.n	8007e32 <HardFault_Handler+0x4>

08007e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007e38:	46c0      	nop			; (mov r8, r8)
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007e42:	46c0      	nop			; (mov r8, r8)
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007e4c:	f7f9 ff00 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007e50:	46c0      	nop			; (mov r8, r8)
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <USART1_IRQHandler>:
/******************************************************************************/
/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007e5c:	4b03      	ldr	r3, [pc, #12]	; (8007e6c <USART1_IRQHandler+0x14>)
 8007e5e:	0018      	movs	r0, r3
 8007e60:	f7fc fae2 	bl	8004428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007e64:	46c0      	nop			; (mov r8, r8)
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	46c0      	nop			; (mov r8, r8)
 8007e6c:	20000168 	.word	0x20000168

08007e70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007e78:	4b11      	ldr	r3, [pc, #68]	; (8007ec0 <_sbrk+0x50>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d102      	bne.n	8007e86 <_sbrk+0x16>
		heap_end = &end;
 8007e80:	4b0f      	ldr	r3, [pc, #60]	; (8007ec0 <_sbrk+0x50>)
 8007e82:	4a10      	ldr	r2, [pc, #64]	; (8007ec4 <_sbrk+0x54>)
 8007e84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007e86:	4b0e      	ldr	r3, [pc, #56]	; (8007ec0 <_sbrk+0x50>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007e8c:	4b0c      	ldr	r3, [pc, #48]	; (8007ec0 <_sbrk+0x50>)
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	18d3      	adds	r3, r2, r3
 8007e94:	466a      	mov	r2, sp
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d907      	bls.n	8007eaa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007e9a:	f000 f8f9 	bl	8008090 <__errno>
 8007e9e:	0003      	movs	r3, r0
 8007ea0:	220c      	movs	r2, #12
 8007ea2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	425b      	negs	r3, r3
 8007ea8:	e006      	b.n	8007eb8 <_sbrk+0x48>
	}

	heap_end += incr;
 8007eaa:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <_sbrk+0x50>)
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	18d2      	adds	r2, r2, r3
 8007eb2:	4b03      	ldr	r3, [pc, #12]	; (8007ec0 <_sbrk+0x50>)
 8007eb4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
}
 8007eb8:	0018      	movs	r0, r3
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	b004      	add	sp, #16
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	200000a4 	.word	0x200000a4
 8007ec4:	200001f0 	.word	0x200001f0

08007ec8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8007ecc:	4b17      	ldr	r3, [pc, #92]	; (8007f2c <SystemInit+0x64>)
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	4b16      	ldr	r3, [pc, #88]	; (8007f2c <SystemInit+0x64>)
 8007ed2:	2180      	movs	r1, #128	; 0x80
 8007ed4:	0049      	lsls	r1, r1, #1
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8007eda:	4b14      	ldr	r3, [pc, #80]	; (8007f2c <SystemInit+0x64>)
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	4b13      	ldr	r3, [pc, #76]	; (8007f2c <SystemInit+0x64>)
 8007ee0:	4913      	ldr	r1, [pc, #76]	; (8007f30 <SystemInit+0x68>)
 8007ee2:	400a      	ands	r2, r1
 8007ee4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8007ee6:	4b11      	ldr	r3, [pc, #68]	; (8007f2c <SystemInit+0x64>)
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	4b10      	ldr	r3, [pc, #64]	; (8007f2c <SystemInit+0x64>)
 8007eec:	4911      	ldr	r1, [pc, #68]	; (8007f34 <SystemInit+0x6c>)
 8007eee:	400a      	ands	r2, r1
 8007ef0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007ef2:	4b0e      	ldr	r3, [pc, #56]	; (8007f2c <SystemInit+0x64>)
 8007ef4:	689a      	ldr	r2, [r3, #8]
 8007ef6:	4b0d      	ldr	r3, [pc, #52]	; (8007f2c <SystemInit+0x64>)
 8007ef8:	2101      	movs	r1, #1
 8007efa:	438a      	bics	r2, r1
 8007efc:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8007efe:	4b0b      	ldr	r3, [pc, #44]	; (8007f2c <SystemInit+0x64>)
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <SystemInit+0x64>)
 8007f04:	490c      	ldr	r1, [pc, #48]	; (8007f38 <SystemInit+0x70>)
 8007f06:	400a      	ands	r2, r1
 8007f08:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8007f0a:	4b08      	ldr	r3, [pc, #32]	; (8007f2c <SystemInit+0x64>)
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	4b07      	ldr	r3, [pc, #28]	; (8007f2c <SystemInit+0x64>)
 8007f10:	490a      	ldr	r1, [pc, #40]	; (8007f3c <SystemInit+0x74>)
 8007f12:	400a      	ands	r2, r1
 8007f14:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007f16:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <SystemInit+0x64>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007f1c:	4b08      	ldr	r3, [pc, #32]	; (8007f40 <SystemInit+0x78>)
 8007f1e:	2280      	movs	r2, #128	; 0x80
 8007f20:	0512      	lsls	r2, r2, #20
 8007f22:	609a      	str	r2, [r3, #8]
#endif
}
 8007f24:	46c0      	nop			; (mov r8, r8)
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	46c0      	nop			; (mov r8, r8)
 8007f2c:	40021000 	.word	0x40021000
 8007f30:	88ff400c 	.word	0x88ff400c
 8007f34:	fef6fff6 	.word	0xfef6fff6
 8007f38:	fffbffff 	.word	0xfffbffff
 8007f3c:	ff02ffff 	.word	0xff02ffff
 8007f40:	e000ed00 	.word	0xe000ed00

08007f44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007f48:	4b14      	ldr	r3, [pc, #80]	; (8007f9c <MX_USART1_UART_Init+0x58>)
 8007f4a:	4a15      	ldr	r2, [pc, #84]	; (8007fa0 <MX_USART1_UART_Init+0x5c>)
 8007f4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007f4e:	4b13      	ldr	r3, [pc, #76]	; (8007f9c <MX_USART1_UART_Init+0x58>)
 8007f50:	22e1      	movs	r2, #225	; 0xe1
 8007f52:	0252      	lsls	r2, r2, #9
 8007f54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007f56:	4b11      	ldr	r3, [pc, #68]	; (8007f9c <MX_USART1_UART_Init+0x58>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007f5c:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <MX_USART1_UART_Init+0x58>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007f62:	4b0e      	ldr	r3, [pc, #56]	; (8007f9c <MX_USART1_UART_Init+0x58>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007f68:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <MX_USART1_UART_Init+0x58>)
 8007f6a:	220c      	movs	r2, #12
 8007f6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f6e:	4b0b      	ldr	r3, [pc, #44]	; (8007f9c <MX_USART1_UART_Init+0x58>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f74:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <MX_USART1_UART_Init+0x58>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f7a:	4b08      	ldr	r3, [pc, #32]	; (8007f9c <MX_USART1_UART_Init+0x58>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f80:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <MX_USART1_UART_Init+0x58>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007f86:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <MX_USART1_UART_Init+0x58>)
 8007f88:	0018      	movs	r0, r3
 8007f8a:	f7fc f899 	bl	80040c0 <HAL_UART_Init>
 8007f8e:	1e03      	subs	r3, r0, #0
 8007f90:	d001      	beq.n	8007f96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8007f92:	f7ff fe2f 	bl	8007bf4 <Error_Handler>
  }

}
 8007f96:	46c0      	nop			; (mov r8, r8)
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20000168 	.word	0x20000168
 8007fa0:	40013800 	.word	0x40013800

08007fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b088      	sub	sp, #32
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fac:	230c      	movs	r3, #12
 8007fae:	18fb      	adds	r3, r7, r3
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	2314      	movs	r3, #20
 8007fb4:	001a      	movs	r2, r3
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	f000 f89e 	bl	80080f8 <memset>
  if(uartHandle->Instance==USART1)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a1c      	ldr	r2, [pc, #112]	; (8008034 <HAL_UART_MspInit+0x90>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d132      	bne.n	800802c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007fc6:	4b1c      	ldr	r3, [pc, #112]	; (8008038 <HAL_UART_MspInit+0x94>)
 8007fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fca:	4b1b      	ldr	r3, [pc, #108]	; (8008038 <HAL_UART_MspInit+0x94>)
 8007fcc:	2180      	movs	r1, #128	; 0x80
 8007fce:	01c9      	lsls	r1, r1, #7
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fd4:	4b18      	ldr	r3, [pc, #96]	; (8008038 <HAL_UART_MspInit+0x94>)
 8007fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd8:	4b17      	ldr	r3, [pc, #92]	; (8008038 <HAL_UART_MspInit+0x94>)
 8007fda:	2101      	movs	r1, #1
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	62da      	str	r2, [r3, #44]	; 0x2c
 8007fe0:	4b15      	ldr	r3, [pc, #84]	; (8008038 <HAL_UART_MspInit+0x94>)
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	60bb      	str	r3, [r7, #8]
 8007fea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007fec:	210c      	movs	r1, #12
 8007fee:	187b      	adds	r3, r7, r1
 8007ff0:	22c0      	movs	r2, #192	; 0xc0
 8007ff2:	00d2      	lsls	r2, r2, #3
 8007ff4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ff6:	187b      	adds	r3, r7, r1
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ffc:	187b      	adds	r3, r7, r1
 8007ffe:	2200      	movs	r2, #0
 8008000:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008002:	187b      	adds	r3, r7, r1
 8008004:	2203      	movs	r2, #3
 8008006:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8008008:	187b      	adds	r3, r7, r1
 800800a:	2204      	movs	r2, #4
 800800c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800800e:	187a      	adds	r2, r7, r1
 8008010:	23a0      	movs	r3, #160	; 0xa0
 8008012:	05db      	lsls	r3, r3, #23
 8008014:	0011      	movs	r1, r2
 8008016:	0018      	movs	r0, r3
 8008018:	f7f9 ff8a 	bl	8001f30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800801c:	2200      	movs	r2, #0
 800801e:	2100      	movs	r1, #0
 8008020:	201b      	movs	r0, #27
 8008022:	f7f9 fef1 	bl	8001e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008026:	201b      	movs	r0, #27
 8008028:	f7f9 ff03 	bl	8001e32 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800802c:	46c0      	nop			; (mov r8, r8)
 800802e:	46bd      	mov	sp, r7
 8008030:	b008      	add	sp, #32
 8008032:	bd80      	pop	{r7, pc}
 8008034:	40013800 	.word	0x40013800
 8008038:	40021000 	.word	0x40021000

0800803c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800803c:	480d      	ldr	r0, [pc, #52]	; (8008074 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800803e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8008040:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008042:	e003      	b.n	800804c <LoopCopyDataInit>

08008044 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008044:	4b0c      	ldr	r3, [pc, #48]	; (8008078 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8008046:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008048:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800804a:	3104      	adds	r1, #4

0800804c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800804c:	480b      	ldr	r0, [pc, #44]	; (800807c <LoopForever+0xa>)
  ldr  r3, =_edata
 800804e:	4b0c      	ldr	r3, [pc, #48]	; (8008080 <LoopForever+0xe>)
  adds  r2, r0, r1
 8008050:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008052:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008054:	d3f6      	bcc.n	8008044 <CopyDataInit>
  ldr  r2, =_sbss
 8008056:	4a0b      	ldr	r2, [pc, #44]	; (8008084 <LoopForever+0x12>)
  b  LoopFillZerobss
 8008058:	e002      	b.n	8008060 <LoopFillZerobss>

0800805a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800805a:	2300      	movs	r3, #0
  str  r3, [r2]
 800805c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800805e:	3204      	adds	r2, #4

08008060 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8008060:	4b09      	ldr	r3, [pc, #36]	; (8008088 <LoopForever+0x16>)
  cmp  r2, r3
 8008062:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008064:	d3f9      	bcc.n	800805a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008066:	f7ff ff2f 	bl	8007ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800806a:	f000 f817 	bl	800809c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800806e:	f7ff fa55 	bl	800751c <main>

08008072 <LoopForever>:

LoopForever:
    b LoopForever
 8008072:	e7fe      	b.n	8008072 <LoopForever>
   ldr   r0, =_estack
 8008074:	20001fff 	.word	0x20001fff
  ldr  r3, =_sidata
 8008078:	0800832c 	.word	0x0800832c
  ldr  r0, =_sdata
 800807c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008080:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8008084:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8008088:	200001ec 	.word	0x200001ec

0800808c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800808c:	e7fe      	b.n	800808c <ADC1_COMP_IRQHandler>
	...

08008090 <__errno>:
 8008090:	4b01      	ldr	r3, [pc, #4]	; (8008098 <__errno+0x8>)
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	4770      	bx	lr
 8008096:	46c0      	nop			; (mov r8, r8)
 8008098:	20000008 	.word	0x20000008

0800809c <__libc_init_array>:
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	2600      	movs	r6, #0
 80080a0:	4d0c      	ldr	r5, [pc, #48]	; (80080d4 <__libc_init_array+0x38>)
 80080a2:	4c0d      	ldr	r4, [pc, #52]	; (80080d8 <__libc_init_array+0x3c>)
 80080a4:	1b64      	subs	r4, r4, r5
 80080a6:	10a4      	asrs	r4, r4, #2
 80080a8:	42a6      	cmp	r6, r4
 80080aa:	d109      	bne.n	80080c0 <__libc_init_array+0x24>
 80080ac:	2600      	movs	r6, #0
 80080ae:	f000 f89d 	bl	80081ec <_init>
 80080b2:	4d0a      	ldr	r5, [pc, #40]	; (80080dc <__libc_init_array+0x40>)
 80080b4:	4c0a      	ldr	r4, [pc, #40]	; (80080e0 <__libc_init_array+0x44>)
 80080b6:	1b64      	subs	r4, r4, r5
 80080b8:	10a4      	asrs	r4, r4, #2
 80080ba:	42a6      	cmp	r6, r4
 80080bc:	d105      	bne.n	80080ca <__libc_init_array+0x2e>
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	00b3      	lsls	r3, r6, #2
 80080c2:	58eb      	ldr	r3, [r5, r3]
 80080c4:	4798      	blx	r3
 80080c6:	3601      	adds	r6, #1
 80080c8:	e7ee      	b.n	80080a8 <__libc_init_array+0xc>
 80080ca:	00b3      	lsls	r3, r6, #2
 80080cc:	58eb      	ldr	r3, [r5, r3]
 80080ce:	4798      	blx	r3
 80080d0:	3601      	adds	r6, #1
 80080d2:	e7f2      	b.n	80080ba <__libc_init_array+0x1e>
 80080d4:	08008324 	.word	0x08008324
 80080d8:	08008324 	.word	0x08008324
 80080dc:	08008324 	.word	0x08008324
 80080e0:	08008328 	.word	0x08008328

080080e4 <malloc>:
 80080e4:	b510      	push	{r4, lr}
 80080e6:	4b03      	ldr	r3, [pc, #12]	; (80080f4 <malloc+0x10>)
 80080e8:	0001      	movs	r1, r0
 80080ea:	6818      	ldr	r0, [r3, #0]
 80080ec:	f000 f80c 	bl	8008108 <_malloc_r>
 80080f0:	bd10      	pop	{r4, pc}
 80080f2:	46c0      	nop			; (mov r8, r8)
 80080f4:	20000008 	.word	0x20000008

080080f8 <memset>:
 80080f8:	0003      	movs	r3, r0
 80080fa:	1812      	adds	r2, r2, r0
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d100      	bne.n	8008102 <memset+0xa>
 8008100:	4770      	bx	lr
 8008102:	7019      	strb	r1, [r3, #0]
 8008104:	3301      	adds	r3, #1
 8008106:	e7f9      	b.n	80080fc <memset+0x4>

08008108 <_malloc_r>:
 8008108:	2303      	movs	r3, #3
 800810a:	b570      	push	{r4, r5, r6, lr}
 800810c:	1ccd      	adds	r5, r1, #3
 800810e:	439d      	bics	r5, r3
 8008110:	3508      	adds	r5, #8
 8008112:	0006      	movs	r6, r0
 8008114:	2d0c      	cmp	r5, #12
 8008116:	d21e      	bcs.n	8008156 <_malloc_r+0x4e>
 8008118:	250c      	movs	r5, #12
 800811a:	42a9      	cmp	r1, r5
 800811c:	d81d      	bhi.n	800815a <_malloc_r+0x52>
 800811e:	0030      	movs	r0, r6
 8008120:	f000 f862 	bl	80081e8 <__malloc_lock>
 8008124:	4a25      	ldr	r2, [pc, #148]	; (80081bc <_malloc_r+0xb4>)
 8008126:	6814      	ldr	r4, [r2, #0]
 8008128:	0021      	movs	r1, r4
 800812a:	2900      	cmp	r1, #0
 800812c:	d119      	bne.n	8008162 <_malloc_r+0x5a>
 800812e:	4c24      	ldr	r4, [pc, #144]	; (80081c0 <_malloc_r+0xb8>)
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d103      	bne.n	800813e <_malloc_r+0x36>
 8008136:	0030      	movs	r0, r6
 8008138:	f000 f844 	bl	80081c4 <_sbrk_r>
 800813c:	6020      	str	r0, [r4, #0]
 800813e:	0029      	movs	r1, r5
 8008140:	0030      	movs	r0, r6
 8008142:	f000 f83f 	bl	80081c4 <_sbrk_r>
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	d12b      	bne.n	80081a2 <_malloc_r+0x9a>
 800814a:	230c      	movs	r3, #12
 800814c:	0030      	movs	r0, r6
 800814e:	6033      	str	r3, [r6, #0]
 8008150:	f000 f84b 	bl	80081ea <__malloc_unlock>
 8008154:	e003      	b.n	800815e <_malloc_r+0x56>
 8008156:	2d00      	cmp	r5, #0
 8008158:	dadf      	bge.n	800811a <_malloc_r+0x12>
 800815a:	230c      	movs	r3, #12
 800815c:	6033      	str	r3, [r6, #0]
 800815e:	2000      	movs	r0, #0
 8008160:	bd70      	pop	{r4, r5, r6, pc}
 8008162:	680b      	ldr	r3, [r1, #0]
 8008164:	1b5b      	subs	r3, r3, r5
 8008166:	d419      	bmi.n	800819c <_malloc_r+0x94>
 8008168:	2b0b      	cmp	r3, #11
 800816a:	d903      	bls.n	8008174 <_malloc_r+0x6c>
 800816c:	600b      	str	r3, [r1, #0]
 800816e:	18cc      	adds	r4, r1, r3
 8008170:	6025      	str	r5, [r4, #0]
 8008172:	e003      	b.n	800817c <_malloc_r+0x74>
 8008174:	684b      	ldr	r3, [r1, #4]
 8008176:	428c      	cmp	r4, r1
 8008178:	d10d      	bne.n	8008196 <_malloc_r+0x8e>
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	0030      	movs	r0, r6
 800817e:	f000 f834 	bl	80081ea <__malloc_unlock>
 8008182:	0020      	movs	r0, r4
 8008184:	2207      	movs	r2, #7
 8008186:	300b      	adds	r0, #11
 8008188:	1d23      	adds	r3, r4, #4
 800818a:	4390      	bics	r0, r2
 800818c:	1ac3      	subs	r3, r0, r3
 800818e:	d0e7      	beq.n	8008160 <_malloc_r+0x58>
 8008190:	425a      	negs	r2, r3
 8008192:	50e2      	str	r2, [r4, r3]
 8008194:	e7e4      	b.n	8008160 <_malloc_r+0x58>
 8008196:	6063      	str	r3, [r4, #4]
 8008198:	000c      	movs	r4, r1
 800819a:	e7ef      	b.n	800817c <_malloc_r+0x74>
 800819c:	000c      	movs	r4, r1
 800819e:	6849      	ldr	r1, [r1, #4]
 80081a0:	e7c3      	b.n	800812a <_malloc_r+0x22>
 80081a2:	2303      	movs	r3, #3
 80081a4:	1cc4      	adds	r4, r0, #3
 80081a6:	439c      	bics	r4, r3
 80081a8:	42a0      	cmp	r0, r4
 80081aa:	d0e1      	beq.n	8008170 <_malloc_r+0x68>
 80081ac:	1a21      	subs	r1, r4, r0
 80081ae:	0030      	movs	r0, r6
 80081b0:	f000 f808 	bl	80081c4 <_sbrk_r>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d1db      	bne.n	8008170 <_malloc_r+0x68>
 80081b8:	e7c7      	b.n	800814a <_malloc_r+0x42>
 80081ba:	46c0      	nop			; (mov r8, r8)
 80081bc:	200000a8 	.word	0x200000a8
 80081c0:	200000ac 	.word	0x200000ac

080081c4 <_sbrk_r>:
 80081c4:	2300      	movs	r3, #0
 80081c6:	b570      	push	{r4, r5, r6, lr}
 80081c8:	4c06      	ldr	r4, [pc, #24]	; (80081e4 <_sbrk_r+0x20>)
 80081ca:	0005      	movs	r5, r0
 80081cc:	0008      	movs	r0, r1
 80081ce:	6023      	str	r3, [r4, #0]
 80081d0:	f7ff fe4e 	bl	8007e70 <_sbrk>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d103      	bne.n	80081e0 <_sbrk_r+0x1c>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d000      	beq.n	80081e0 <_sbrk_r+0x1c>
 80081de:	602b      	str	r3, [r5, #0]
 80081e0:	bd70      	pop	{r4, r5, r6, pc}
 80081e2:	46c0      	nop			; (mov r8, r8)
 80081e4:	200001e8 	.word	0x200001e8

080081e8 <__malloc_lock>:
 80081e8:	4770      	bx	lr

080081ea <__malloc_unlock>:
 80081ea:	4770      	bx	lr

080081ec <_init>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	46c0      	nop			; (mov r8, r8)
 80081f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f2:	bc08      	pop	{r3}
 80081f4:	469e      	mov	lr, r3
 80081f6:	4770      	bx	lr

080081f8 <_fini>:
 80081f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fa:	46c0      	nop			; (mov r8, r8)
 80081fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081fe:	bc08      	pop	{r3}
 8008200:	469e      	mov	lr, r3
 8008202:	4770      	bx	lr
