
CommandCenter_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004fac  08004fac  00014fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005008  08005008  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005008  08005008  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005008  08005008  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005008  08005008  00015008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800500c  0800500c  0001500c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000068  08005078  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08005078  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f58  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cda  00000000  00000000  00031fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  00034cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  00035978  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016591  00000000  00000000  000364d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ce8c  00000000  00000000  0004ca61  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b239  00000000  00000000  000598ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d4b26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed4  00000000  00000000  000d4ba4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004f94 	.word	0x08004f94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004f94 	.word	0x08004f94

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f8c1 	bl	80003b0 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f843 	bl	80002c4 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f8b3 	bl	80003b0 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f8a9 	bl	80003b0 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f851 	bl	8000314 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f847 	bl	8000314 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	; 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fa97 	bl	80007d8 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	; 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 f8cd 	bl	8000450 <__aeabi_fsub>
 80002b6:	f000 fa8f 	bl	80007d8 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__eqsf2>:
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	0042      	lsls	r2, r0, #1
 80002c8:	024e      	lsls	r6, r1, #9
 80002ca:	004c      	lsls	r4, r1, #1
 80002cc:	0245      	lsls	r5, r0, #9
 80002ce:	0a6d      	lsrs	r5, r5, #9
 80002d0:	0e12      	lsrs	r2, r2, #24
 80002d2:	0fc3      	lsrs	r3, r0, #31
 80002d4:	0a76      	lsrs	r6, r6, #9
 80002d6:	0e24      	lsrs	r4, r4, #24
 80002d8:	0fc9      	lsrs	r1, r1, #31
 80002da:	2aff      	cmp	r2, #255	; 0xff
 80002dc:	d00f      	beq.n	80002fe <__eqsf2+0x3a>
 80002de:	2cff      	cmp	r4, #255	; 0xff
 80002e0:	d011      	beq.n	8000306 <__eqsf2+0x42>
 80002e2:	2001      	movs	r0, #1
 80002e4:	42a2      	cmp	r2, r4
 80002e6:	d000      	beq.n	80002ea <__eqsf2+0x26>
 80002e8:	bd70      	pop	{r4, r5, r6, pc}
 80002ea:	42b5      	cmp	r5, r6
 80002ec:	d1fc      	bne.n	80002e8 <__eqsf2+0x24>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d00d      	beq.n	800030e <__eqsf2+0x4a>
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d1f8      	bne.n	80002e8 <__eqsf2+0x24>
 80002f6:	0028      	movs	r0, r5
 80002f8:	1e45      	subs	r5, r0, #1
 80002fa:	41a8      	sbcs	r0, r5
 80002fc:	e7f4      	b.n	80002e8 <__eqsf2+0x24>
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d1f1      	bne.n	80002e8 <__eqsf2+0x24>
 8000304:	e7eb      	b.n	80002de <__eqsf2+0x1a>
 8000306:	2001      	movs	r0, #1
 8000308:	2e00      	cmp	r6, #0
 800030a:	d1ed      	bne.n	80002e8 <__eqsf2+0x24>
 800030c:	e7e9      	b.n	80002e2 <__eqsf2+0x1e>
 800030e:	2000      	movs	r0, #0
 8000310:	e7ea      	b.n	80002e8 <__eqsf2+0x24>
 8000312:	46c0      	nop			; (mov r8, r8)

08000314 <__gesf2>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	004a      	lsls	r2, r1, #1
 8000318:	024e      	lsls	r6, r1, #9
 800031a:	0245      	lsls	r5, r0, #9
 800031c:	0044      	lsls	r4, r0, #1
 800031e:	0a6d      	lsrs	r5, r5, #9
 8000320:	0e24      	lsrs	r4, r4, #24
 8000322:	0fc3      	lsrs	r3, r0, #31
 8000324:	0a76      	lsrs	r6, r6, #9
 8000326:	0e12      	lsrs	r2, r2, #24
 8000328:	0fc9      	lsrs	r1, r1, #31
 800032a:	2cff      	cmp	r4, #255	; 0xff
 800032c:	d015      	beq.n	800035a <__gesf2+0x46>
 800032e:	2aff      	cmp	r2, #255	; 0xff
 8000330:	d00e      	beq.n	8000350 <__gesf2+0x3c>
 8000332:	2c00      	cmp	r4, #0
 8000334:	d115      	bne.n	8000362 <__gesf2+0x4e>
 8000336:	2a00      	cmp	r2, #0
 8000338:	d101      	bne.n	800033e <__gesf2+0x2a>
 800033a:	2e00      	cmp	r6, #0
 800033c:	d01c      	beq.n	8000378 <__gesf2+0x64>
 800033e:	2d00      	cmp	r5, #0
 8000340:	d014      	beq.n	800036c <__gesf2+0x58>
 8000342:	428b      	cmp	r3, r1
 8000344:	d027      	beq.n	8000396 <__gesf2+0x82>
 8000346:	2002      	movs	r0, #2
 8000348:	3b01      	subs	r3, #1
 800034a:	4018      	ands	r0, r3
 800034c:	3801      	subs	r0, #1
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0ee      	beq.n	8000332 <__gesf2+0x1e>
 8000354:	2002      	movs	r0, #2
 8000356:	4240      	negs	r0, r0
 8000358:	e7f9      	b.n	800034e <__gesf2+0x3a>
 800035a:	2d00      	cmp	r5, #0
 800035c:	d1fa      	bne.n	8000354 <__gesf2+0x40>
 800035e:	2aff      	cmp	r2, #255	; 0xff
 8000360:	d00e      	beq.n	8000380 <__gesf2+0x6c>
 8000362:	2a00      	cmp	r2, #0
 8000364:	d10e      	bne.n	8000384 <__gesf2+0x70>
 8000366:	2e00      	cmp	r6, #0
 8000368:	d0ed      	beq.n	8000346 <__gesf2+0x32>
 800036a:	e00b      	b.n	8000384 <__gesf2+0x70>
 800036c:	2301      	movs	r3, #1
 800036e:	3901      	subs	r1, #1
 8000370:	4399      	bics	r1, r3
 8000372:	0008      	movs	r0, r1
 8000374:	3001      	adds	r0, #1
 8000376:	e7ea      	b.n	800034e <__gesf2+0x3a>
 8000378:	2000      	movs	r0, #0
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e7      	beq.n	800034e <__gesf2+0x3a>
 800037e:	e7e2      	b.n	8000346 <__gesf2+0x32>
 8000380:	2e00      	cmp	r6, #0
 8000382:	d1e7      	bne.n	8000354 <__gesf2+0x40>
 8000384:	428b      	cmp	r3, r1
 8000386:	d1de      	bne.n	8000346 <__gesf2+0x32>
 8000388:	4294      	cmp	r4, r2
 800038a:	dd05      	ble.n	8000398 <__gesf2+0x84>
 800038c:	2102      	movs	r1, #2
 800038e:	1e58      	subs	r0, r3, #1
 8000390:	4008      	ands	r0, r1
 8000392:	3801      	subs	r0, #1
 8000394:	e7db      	b.n	800034e <__gesf2+0x3a>
 8000396:	2400      	movs	r4, #0
 8000398:	42a2      	cmp	r2, r4
 800039a:	dc04      	bgt.n	80003a6 <__gesf2+0x92>
 800039c:	42b5      	cmp	r5, r6
 800039e:	d8d2      	bhi.n	8000346 <__gesf2+0x32>
 80003a0:	2000      	movs	r0, #0
 80003a2:	42b5      	cmp	r5, r6
 80003a4:	d2d3      	bcs.n	800034e <__gesf2+0x3a>
 80003a6:	1e58      	subs	r0, r3, #1
 80003a8:	2301      	movs	r3, #1
 80003aa:	4398      	bics	r0, r3
 80003ac:	3001      	adds	r0, #1
 80003ae:	e7ce      	b.n	800034e <__gesf2+0x3a>

080003b0 <__lesf2>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	0042      	lsls	r2, r0, #1
 80003b4:	0244      	lsls	r4, r0, #9
 80003b6:	024d      	lsls	r5, r1, #9
 80003b8:	0fc3      	lsrs	r3, r0, #31
 80003ba:	0048      	lsls	r0, r1, #1
 80003bc:	0a64      	lsrs	r4, r4, #9
 80003be:	0e12      	lsrs	r2, r2, #24
 80003c0:	0a6d      	lsrs	r5, r5, #9
 80003c2:	0e00      	lsrs	r0, r0, #24
 80003c4:	0fc9      	lsrs	r1, r1, #31
 80003c6:	2aff      	cmp	r2, #255	; 0xff
 80003c8:	d012      	beq.n	80003f0 <__lesf2+0x40>
 80003ca:	28ff      	cmp	r0, #255	; 0xff
 80003cc:	d00c      	beq.n	80003e8 <__lesf2+0x38>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d112      	bne.n	80003f8 <__lesf2+0x48>
 80003d2:	2800      	cmp	r0, #0
 80003d4:	d119      	bne.n	800040a <__lesf2+0x5a>
 80003d6:	2d00      	cmp	r5, #0
 80003d8:	d117      	bne.n	800040a <__lesf2+0x5a>
 80003da:	2c00      	cmp	r4, #0
 80003dc:	d02b      	beq.n	8000436 <__lesf2+0x86>
 80003de:	2002      	movs	r0, #2
 80003e0:	3b01      	subs	r3, #1
 80003e2:	4018      	ands	r0, r3
 80003e4:	3801      	subs	r0, #1
 80003e6:	e026      	b.n	8000436 <__lesf2+0x86>
 80003e8:	2d00      	cmp	r5, #0
 80003ea:	d0f0      	beq.n	80003ce <__lesf2+0x1e>
 80003ec:	2002      	movs	r0, #2
 80003ee:	e022      	b.n	8000436 <__lesf2+0x86>
 80003f0:	2c00      	cmp	r4, #0
 80003f2:	d1fb      	bne.n	80003ec <__lesf2+0x3c>
 80003f4:	28ff      	cmp	r0, #255	; 0xff
 80003f6:	d01f      	beq.n	8000438 <__lesf2+0x88>
 80003f8:	2800      	cmp	r0, #0
 80003fa:	d11f      	bne.n	800043c <__lesf2+0x8c>
 80003fc:	2d00      	cmp	r5, #0
 80003fe:	d11d      	bne.n	800043c <__lesf2+0x8c>
 8000400:	2002      	movs	r0, #2
 8000402:	3b01      	subs	r3, #1
 8000404:	4018      	ands	r0, r3
 8000406:	3801      	subs	r0, #1
 8000408:	e015      	b.n	8000436 <__lesf2+0x86>
 800040a:	2c00      	cmp	r4, #0
 800040c:	d00e      	beq.n	800042c <__lesf2+0x7c>
 800040e:	428b      	cmp	r3, r1
 8000410:	d1e5      	bne.n	80003de <__lesf2+0x2e>
 8000412:	2200      	movs	r2, #0
 8000414:	4290      	cmp	r0, r2
 8000416:	dc04      	bgt.n	8000422 <__lesf2+0x72>
 8000418:	42ac      	cmp	r4, r5
 800041a:	d8e0      	bhi.n	80003de <__lesf2+0x2e>
 800041c:	2000      	movs	r0, #0
 800041e:	42ac      	cmp	r4, r5
 8000420:	d209      	bcs.n	8000436 <__lesf2+0x86>
 8000422:	1e58      	subs	r0, r3, #1
 8000424:	2301      	movs	r3, #1
 8000426:	4398      	bics	r0, r3
 8000428:	3001      	adds	r0, #1
 800042a:	e004      	b.n	8000436 <__lesf2+0x86>
 800042c:	2301      	movs	r3, #1
 800042e:	3901      	subs	r1, #1
 8000430:	4399      	bics	r1, r3
 8000432:	0008      	movs	r0, r1
 8000434:	3001      	adds	r0, #1
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	2d00      	cmp	r5, #0
 800043a:	d1d7      	bne.n	80003ec <__lesf2+0x3c>
 800043c:	428b      	cmp	r3, r1
 800043e:	d1ce      	bne.n	80003de <__lesf2+0x2e>
 8000440:	4282      	cmp	r2, r0
 8000442:	dde7      	ble.n	8000414 <__lesf2+0x64>
 8000444:	2102      	movs	r1, #2
 8000446:	1e58      	subs	r0, r3, #1
 8000448:	4008      	ands	r0, r1
 800044a:	3801      	subs	r0, #1
 800044c:	e7f3      	b.n	8000436 <__lesf2+0x86>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fsub>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	4647      	mov	r7, r8
 8000454:	46ce      	mov	lr, r9
 8000456:	0044      	lsls	r4, r0, #1
 8000458:	0fc2      	lsrs	r2, r0, #31
 800045a:	b580      	push	{r7, lr}
 800045c:	0247      	lsls	r7, r0, #9
 800045e:	0248      	lsls	r0, r1, #9
 8000460:	0a40      	lsrs	r0, r0, #9
 8000462:	4684      	mov	ip, r0
 8000464:	4666      	mov	r6, ip
 8000466:	0048      	lsls	r0, r1, #1
 8000468:	0a7f      	lsrs	r7, r7, #9
 800046a:	0e24      	lsrs	r4, r4, #24
 800046c:	00f6      	lsls	r6, r6, #3
 800046e:	0025      	movs	r5, r4
 8000470:	4690      	mov	r8, r2
 8000472:	00fb      	lsls	r3, r7, #3
 8000474:	0e00      	lsrs	r0, r0, #24
 8000476:	0fc9      	lsrs	r1, r1, #31
 8000478:	46b1      	mov	r9, r6
 800047a:	28ff      	cmp	r0, #255	; 0xff
 800047c:	d100      	bne.n	8000480 <__aeabi_fsub+0x30>
 800047e:	e085      	b.n	800058c <__aeabi_fsub+0x13c>
 8000480:	2601      	movs	r6, #1
 8000482:	4071      	eors	r1, r6
 8000484:	1a26      	subs	r6, r4, r0
 8000486:	4291      	cmp	r1, r2
 8000488:	d057      	beq.n	800053a <__aeabi_fsub+0xea>
 800048a:	2e00      	cmp	r6, #0
 800048c:	dd43      	ble.n	8000516 <__aeabi_fsub+0xc6>
 800048e:	2800      	cmp	r0, #0
 8000490:	d000      	beq.n	8000494 <__aeabi_fsub+0x44>
 8000492:	e07f      	b.n	8000594 <__aeabi_fsub+0x144>
 8000494:	4649      	mov	r1, r9
 8000496:	2900      	cmp	r1, #0
 8000498:	d100      	bne.n	800049c <__aeabi_fsub+0x4c>
 800049a:	e0aa      	b.n	80005f2 <__aeabi_fsub+0x1a2>
 800049c:	3e01      	subs	r6, #1
 800049e:	2e00      	cmp	r6, #0
 80004a0:	d000      	beq.n	80004a4 <__aeabi_fsub+0x54>
 80004a2:	e0f7      	b.n	8000694 <__aeabi_fsub+0x244>
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	015a      	lsls	r2, r3, #5
 80004a8:	d400      	bmi.n	80004ac <__aeabi_fsub+0x5c>
 80004aa:	e08b      	b.n	80005c4 <__aeabi_fsub+0x174>
 80004ac:	019b      	lsls	r3, r3, #6
 80004ae:	099c      	lsrs	r4, r3, #6
 80004b0:	0020      	movs	r0, r4
 80004b2:	f000 fe39 	bl	8001128 <__clzsi2>
 80004b6:	3805      	subs	r0, #5
 80004b8:	4084      	lsls	r4, r0
 80004ba:	4285      	cmp	r5, r0
 80004bc:	dd00      	ble.n	80004c0 <__aeabi_fsub+0x70>
 80004be:	e0d3      	b.n	8000668 <__aeabi_fsub+0x218>
 80004c0:	1b45      	subs	r5, r0, r5
 80004c2:	0023      	movs	r3, r4
 80004c4:	2020      	movs	r0, #32
 80004c6:	3501      	adds	r5, #1
 80004c8:	40eb      	lsrs	r3, r5
 80004ca:	1b45      	subs	r5, r0, r5
 80004cc:	40ac      	lsls	r4, r5
 80004ce:	1e62      	subs	r2, r4, #1
 80004d0:	4194      	sbcs	r4, r2
 80004d2:	4323      	orrs	r3, r4
 80004d4:	2407      	movs	r4, #7
 80004d6:	2500      	movs	r5, #0
 80004d8:	401c      	ands	r4, r3
 80004da:	2201      	movs	r2, #1
 80004dc:	4641      	mov	r1, r8
 80004de:	400a      	ands	r2, r1
 80004e0:	2c00      	cmp	r4, #0
 80004e2:	d004      	beq.n	80004ee <__aeabi_fsub+0x9e>
 80004e4:	210f      	movs	r1, #15
 80004e6:	4019      	ands	r1, r3
 80004e8:	2904      	cmp	r1, #4
 80004ea:	d000      	beq.n	80004ee <__aeabi_fsub+0x9e>
 80004ec:	3304      	adds	r3, #4
 80004ee:	0159      	lsls	r1, r3, #5
 80004f0:	d400      	bmi.n	80004f4 <__aeabi_fsub+0xa4>
 80004f2:	e080      	b.n	80005f6 <__aeabi_fsub+0x1a6>
 80004f4:	3501      	adds	r5, #1
 80004f6:	b2ec      	uxtb	r4, r5
 80004f8:	2dff      	cmp	r5, #255	; 0xff
 80004fa:	d000      	beq.n	80004fe <__aeabi_fsub+0xae>
 80004fc:	e0a3      	b.n	8000646 <__aeabi_fsub+0x1f6>
 80004fe:	24ff      	movs	r4, #255	; 0xff
 8000500:	2300      	movs	r3, #0
 8000502:	025b      	lsls	r3, r3, #9
 8000504:	05e4      	lsls	r4, r4, #23
 8000506:	0a58      	lsrs	r0, r3, #9
 8000508:	07d2      	lsls	r2, r2, #31
 800050a:	4320      	orrs	r0, r4
 800050c:	4310      	orrs	r0, r2
 800050e:	bc0c      	pop	{r2, r3}
 8000510:	4690      	mov	r8, r2
 8000512:	4699      	mov	r9, r3
 8000514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000516:	2e00      	cmp	r6, #0
 8000518:	d174      	bne.n	8000604 <__aeabi_fsub+0x1b4>
 800051a:	1c60      	adds	r0, r4, #1
 800051c:	b2c0      	uxtb	r0, r0
 800051e:	2801      	cmp	r0, #1
 8000520:	dc00      	bgt.n	8000524 <__aeabi_fsub+0xd4>
 8000522:	e0a7      	b.n	8000674 <__aeabi_fsub+0x224>
 8000524:	464a      	mov	r2, r9
 8000526:	1a9c      	subs	r4, r3, r2
 8000528:	0162      	lsls	r2, r4, #5
 800052a:	d500      	bpl.n	800052e <__aeabi_fsub+0xde>
 800052c:	e0b6      	b.n	800069c <__aeabi_fsub+0x24c>
 800052e:	2c00      	cmp	r4, #0
 8000530:	d1be      	bne.n	80004b0 <__aeabi_fsub+0x60>
 8000532:	2200      	movs	r2, #0
 8000534:	2400      	movs	r4, #0
 8000536:	2300      	movs	r3, #0
 8000538:	e7e3      	b.n	8000502 <__aeabi_fsub+0xb2>
 800053a:	2e00      	cmp	r6, #0
 800053c:	dc00      	bgt.n	8000540 <__aeabi_fsub+0xf0>
 800053e:	e085      	b.n	800064c <__aeabi_fsub+0x1fc>
 8000540:	2800      	cmp	r0, #0
 8000542:	d046      	beq.n	80005d2 <__aeabi_fsub+0x182>
 8000544:	2cff      	cmp	r4, #255	; 0xff
 8000546:	d049      	beq.n	80005dc <__aeabi_fsub+0x18c>
 8000548:	2280      	movs	r2, #128	; 0x80
 800054a:	4648      	mov	r0, r9
 800054c:	04d2      	lsls	r2, r2, #19
 800054e:	4310      	orrs	r0, r2
 8000550:	4681      	mov	r9, r0
 8000552:	2201      	movs	r2, #1
 8000554:	2e1b      	cmp	r6, #27
 8000556:	dc09      	bgt.n	800056c <__aeabi_fsub+0x11c>
 8000558:	2020      	movs	r0, #32
 800055a:	464c      	mov	r4, r9
 800055c:	1b80      	subs	r0, r0, r6
 800055e:	4084      	lsls	r4, r0
 8000560:	464a      	mov	r2, r9
 8000562:	0020      	movs	r0, r4
 8000564:	40f2      	lsrs	r2, r6
 8000566:	1e44      	subs	r4, r0, #1
 8000568:	41a0      	sbcs	r0, r4
 800056a:	4302      	orrs	r2, r0
 800056c:	189b      	adds	r3, r3, r2
 800056e:	015a      	lsls	r2, r3, #5
 8000570:	d528      	bpl.n	80005c4 <__aeabi_fsub+0x174>
 8000572:	3501      	adds	r5, #1
 8000574:	2dff      	cmp	r5, #255	; 0xff
 8000576:	d100      	bne.n	800057a <__aeabi_fsub+0x12a>
 8000578:	e0a8      	b.n	80006cc <__aeabi_fsub+0x27c>
 800057a:	2201      	movs	r2, #1
 800057c:	2407      	movs	r4, #7
 800057e:	4994      	ldr	r1, [pc, #592]	; (80007d0 <__aeabi_fsub+0x380>)
 8000580:	401a      	ands	r2, r3
 8000582:	085b      	lsrs	r3, r3, #1
 8000584:	400b      	ands	r3, r1
 8000586:	4313      	orrs	r3, r2
 8000588:	401c      	ands	r4, r3
 800058a:	e7a6      	b.n	80004da <__aeabi_fsub+0x8a>
 800058c:	2e00      	cmp	r6, #0
 800058e:	d000      	beq.n	8000592 <__aeabi_fsub+0x142>
 8000590:	e778      	b.n	8000484 <__aeabi_fsub+0x34>
 8000592:	e775      	b.n	8000480 <__aeabi_fsub+0x30>
 8000594:	2cff      	cmp	r4, #255	; 0xff
 8000596:	d054      	beq.n	8000642 <__aeabi_fsub+0x1f2>
 8000598:	2280      	movs	r2, #128	; 0x80
 800059a:	4649      	mov	r1, r9
 800059c:	04d2      	lsls	r2, r2, #19
 800059e:	4311      	orrs	r1, r2
 80005a0:	4689      	mov	r9, r1
 80005a2:	2201      	movs	r2, #1
 80005a4:	2e1b      	cmp	r6, #27
 80005a6:	dc09      	bgt.n	80005bc <__aeabi_fsub+0x16c>
 80005a8:	2120      	movs	r1, #32
 80005aa:	4648      	mov	r0, r9
 80005ac:	1b89      	subs	r1, r1, r6
 80005ae:	4088      	lsls	r0, r1
 80005b0:	464a      	mov	r2, r9
 80005b2:	0001      	movs	r1, r0
 80005b4:	40f2      	lsrs	r2, r6
 80005b6:	1e48      	subs	r0, r1, #1
 80005b8:	4181      	sbcs	r1, r0
 80005ba:	430a      	orrs	r2, r1
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	015a      	lsls	r2, r3, #5
 80005c0:	d500      	bpl.n	80005c4 <__aeabi_fsub+0x174>
 80005c2:	e773      	b.n	80004ac <__aeabi_fsub+0x5c>
 80005c4:	2201      	movs	r2, #1
 80005c6:	4641      	mov	r1, r8
 80005c8:	400a      	ands	r2, r1
 80005ca:	0759      	lsls	r1, r3, #29
 80005cc:	d000      	beq.n	80005d0 <__aeabi_fsub+0x180>
 80005ce:	e789      	b.n	80004e4 <__aeabi_fsub+0x94>
 80005d0:	e011      	b.n	80005f6 <__aeabi_fsub+0x1a6>
 80005d2:	4648      	mov	r0, r9
 80005d4:	2800      	cmp	r0, #0
 80005d6:	d158      	bne.n	800068a <__aeabi_fsub+0x23a>
 80005d8:	2cff      	cmp	r4, #255	; 0xff
 80005da:	d10c      	bne.n	80005f6 <__aeabi_fsub+0x1a6>
 80005dc:	08db      	lsrs	r3, r3, #3
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d100      	bne.n	80005e4 <__aeabi_fsub+0x194>
 80005e2:	e78c      	b.n	80004fe <__aeabi_fsub+0xae>
 80005e4:	2080      	movs	r0, #128	; 0x80
 80005e6:	03c0      	lsls	r0, r0, #15
 80005e8:	4303      	orrs	r3, r0
 80005ea:	025b      	lsls	r3, r3, #9
 80005ec:	0a5b      	lsrs	r3, r3, #9
 80005ee:	24ff      	movs	r4, #255	; 0xff
 80005f0:	e787      	b.n	8000502 <__aeabi_fsub+0xb2>
 80005f2:	2cff      	cmp	r4, #255	; 0xff
 80005f4:	d025      	beq.n	8000642 <__aeabi_fsub+0x1f2>
 80005f6:	08db      	lsrs	r3, r3, #3
 80005f8:	2dff      	cmp	r5, #255	; 0xff
 80005fa:	d0f0      	beq.n	80005de <__aeabi_fsub+0x18e>
 80005fc:	025b      	lsls	r3, r3, #9
 80005fe:	0a5b      	lsrs	r3, r3, #9
 8000600:	b2ec      	uxtb	r4, r5
 8000602:	e77e      	b.n	8000502 <__aeabi_fsub+0xb2>
 8000604:	2c00      	cmp	r4, #0
 8000606:	d04d      	beq.n	80006a4 <__aeabi_fsub+0x254>
 8000608:	28ff      	cmp	r0, #255	; 0xff
 800060a:	d018      	beq.n	800063e <__aeabi_fsub+0x1ee>
 800060c:	2480      	movs	r4, #128	; 0x80
 800060e:	04e4      	lsls	r4, r4, #19
 8000610:	4272      	negs	r2, r6
 8000612:	4323      	orrs	r3, r4
 8000614:	2a1b      	cmp	r2, #27
 8000616:	dd00      	ble.n	800061a <__aeabi_fsub+0x1ca>
 8000618:	e0c4      	b.n	80007a4 <__aeabi_fsub+0x354>
 800061a:	001c      	movs	r4, r3
 800061c:	2520      	movs	r5, #32
 800061e:	40d4      	lsrs	r4, r2
 8000620:	1aaa      	subs	r2, r5, r2
 8000622:	4093      	lsls	r3, r2
 8000624:	1e5a      	subs	r2, r3, #1
 8000626:	4193      	sbcs	r3, r2
 8000628:	4323      	orrs	r3, r4
 800062a:	464a      	mov	r2, r9
 800062c:	0005      	movs	r5, r0
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	4688      	mov	r8, r1
 8000632:	e738      	b.n	80004a6 <__aeabi_fsub+0x56>
 8000634:	1c72      	adds	r2, r6, #1
 8000636:	d0f8      	beq.n	800062a <__aeabi_fsub+0x1da>
 8000638:	43f2      	mvns	r2, r6
 800063a:	28ff      	cmp	r0, #255	; 0xff
 800063c:	d1ea      	bne.n	8000614 <__aeabi_fsub+0x1c4>
 800063e:	000a      	movs	r2, r1
 8000640:	464b      	mov	r3, r9
 8000642:	25ff      	movs	r5, #255	; 0xff
 8000644:	e7d7      	b.n	80005f6 <__aeabi_fsub+0x1a6>
 8000646:	019b      	lsls	r3, r3, #6
 8000648:	0a5b      	lsrs	r3, r3, #9
 800064a:	e75a      	b.n	8000502 <__aeabi_fsub+0xb2>
 800064c:	2e00      	cmp	r6, #0
 800064e:	d141      	bne.n	80006d4 <__aeabi_fsub+0x284>
 8000650:	1c65      	adds	r5, r4, #1
 8000652:	b2e9      	uxtb	r1, r5
 8000654:	2901      	cmp	r1, #1
 8000656:	dd45      	ble.n	80006e4 <__aeabi_fsub+0x294>
 8000658:	2dff      	cmp	r5, #255	; 0xff
 800065a:	d100      	bne.n	800065e <__aeabi_fsub+0x20e>
 800065c:	e74f      	b.n	80004fe <__aeabi_fsub+0xae>
 800065e:	2407      	movs	r4, #7
 8000660:	444b      	add	r3, r9
 8000662:	085b      	lsrs	r3, r3, #1
 8000664:	401c      	ands	r4, r3
 8000666:	e738      	b.n	80004da <__aeabi_fsub+0x8a>
 8000668:	2207      	movs	r2, #7
 800066a:	4b5a      	ldr	r3, [pc, #360]	; (80007d4 <__aeabi_fsub+0x384>)
 800066c:	1a2d      	subs	r5, r5, r0
 800066e:	4023      	ands	r3, r4
 8000670:	4014      	ands	r4, r2
 8000672:	e732      	b.n	80004da <__aeabi_fsub+0x8a>
 8000674:	2c00      	cmp	r4, #0
 8000676:	d11d      	bne.n	80006b4 <__aeabi_fsub+0x264>
 8000678:	2b00      	cmp	r3, #0
 800067a:	d17a      	bne.n	8000772 <__aeabi_fsub+0x322>
 800067c:	464b      	mov	r3, r9
 800067e:	2b00      	cmp	r3, #0
 8000680:	d100      	bne.n	8000684 <__aeabi_fsub+0x234>
 8000682:	e091      	b.n	80007a8 <__aeabi_fsub+0x358>
 8000684:	000a      	movs	r2, r1
 8000686:	2500      	movs	r5, #0
 8000688:	e7b5      	b.n	80005f6 <__aeabi_fsub+0x1a6>
 800068a:	3e01      	subs	r6, #1
 800068c:	2e00      	cmp	r6, #0
 800068e:	d119      	bne.n	80006c4 <__aeabi_fsub+0x274>
 8000690:	444b      	add	r3, r9
 8000692:	e76c      	b.n	800056e <__aeabi_fsub+0x11e>
 8000694:	2cff      	cmp	r4, #255	; 0xff
 8000696:	d184      	bne.n	80005a2 <__aeabi_fsub+0x152>
 8000698:	25ff      	movs	r5, #255	; 0xff
 800069a:	e7ac      	b.n	80005f6 <__aeabi_fsub+0x1a6>
 800069c:	464a      	mov	r2, r9
 800069e:	4688      	mov	r8, r1
 80006a0:	1ad4      	subs	r4, r2, r3
 80006a2:	e705      	b.n	80004b0 <__aeabi_fsub+0x60>
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1c5      	bne.n	8000634 <__aeabi_fsub+0x1e4>
 80006a8:	000a      	movs	r2, r1
 80006aa:	28ff      	cmp	r0, #255	; 0xff
 80006ac:	d0c8      	beq.n	8000640 <__aeabi_fsub+0x1f0>
 80006ae:	0005      	movs	r5, r0
 80006b0:	464b      	mov	r3, r9
 80006b2:	e7a0      	b.n	80005f6 <__aeabi_fsub+0x1a6>
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d149      	bne.n	800074c <__aeabi_fsub+0x2fc>
 80006b8:	464b      	mov	r3, r9
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d077      	beq.n	80007ae <__aeabi_fsub+0x35e>
 80006be:	000a      	movs	r2, r1
 80006c0:	25ff      	movs	r5, #255	; 0xff
 80006c2:	e798      	b.n	80005f6 <__aeabi_fsub+0x1a6>
 80006c4:	2cff      	cmp	r4, #255	; 0xff
 80006c6:	d000      	beq.n	80006ca <__aeabi_fsub+0x27a>
 80006c8:	e743      	b.n	8000552 <__aeabi_fsub+0x102>
 80006ca:	e787      	b.n	80005dc <__aeabi_fsub+0x18c>
 80006cc:	000a      	movs	r2, r1
 80006ce:	24ff      	movs	r4, #255	; 0xff
 80006d0:	2300      	movs	r3, #0
 80006d2:	e716      	b.n	8000502 <__aeabi_fsub+0xb2>
 80006d4:	2c00      	cmp	r4, #0
 80006d6:	d115      	bne.n	8000704 <__aeabi_fsub+0x2b4>
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d157      	bne.n	800078c <__aeabi_fsub+0x33c>
 80006dc:	28ff      	cmp	r0, #255	; 0xff
 80006de:	d1e6      	bne.n	80006ae <__aeabi_fsub+0x25e>
 80006e0:	464b      	mov	r3, r9
 80006e2:	e77b      	b.n	80005dc <__aeabi_fsub+0x18c>
 80006e4:	2c00      	cmp	r4, #0
 80006e6:	d120      	bne.n	800072a <__aeabi_fsub+0x2da>
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d057      	beq.n	800079c <__aeabi_fsub+0x34c>
 80006ec:	4649      	mov	r1, r9
 80006ee:	2900      	cmp	r1, #0
 80006f0:	d053      	beq.n	800079a <__aeabi_fsub+0x34a>
 80006f2:	444b      	add	r3, r9
 80006f4:	015a      	lsls	r2, r3, #5
 80006f6:	d568      	bpl.n	80007ca <__aeabi_fsub+0x37a>
 80006f8:	2407      	movs	r4, #7
 80006fa:	4a36      	ldr	r2, [pc, #216]	; (80007d4 <__aeabi_fsub+0x384>)
 80006fc:	401c      	ands	r4, r3
 80006fe:	2501      	movs	r5, #1
 8000700:	4013      	ands	r3, r2
 8000702:	e6ea      	b.n	80004da <__aeabi_fsub+0x8a>
 8000704:	28ff      	cmp	r0, #255	; 0xff
 8000706:	d0eb      	beq.n	80006e0 <__aeabi_fsub+0x290>
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	04d2      	lsls	r2, r2, #19
 800070c:	4276      	negs	r6, r6
 800070e:	4313      	orrs	r3, r2
 8000710:	2e1b      	cmp	r6, #27
 8000712:	dc53      	bgt.n	80007bc <__aeabi_fsub+0x36c>
 8000714:	2520      	movs	r5, #32
 8000716:	1bad      	subs	r5, r5, r6
 8000718:	001a      	movs	r2, r3
 800071a:	40ab      	lsls	r3, r5
 800071c:	40f2      	lsrs	r2, r6
 800071e:	1e5c      	subs	r4, r3, #1
 8000720:	41a3      	sbcs	r3, r4
 8000722:	4313      	orrs	r3, r2
 8000724:	444b      	add	r3, r9
 8000726:	0005      	movs	r5, r0
 8000728:	e721      	b.n	800056e <__aeabi_fsub+0x11e>
 800072a:	2b00      	cmp	r3, #0
 800072c:	d0d8      	beq.n	80006e0 <__aeabi_fsub+0x290>
 800072e:	4649      	mov	r1, r9
 8000730:	2900      	cmp	r1, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_fsub+0x2e6>
 8000734:	e752      	b.n	80005dc <__aeabi_fsub+0x18c>
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	03c9      	lsls	r1, r1, #15
 800073a:	420f      	tst	r7, r1
 800073c:	d100      	bne.n	8000740 <__aeabi_fsub+0x2f0>
 800073e:	e74d      	b.n	80005dc <__aeabi_fsub+0x18c>
 8000740:	4660      	mov	r0, ip
 8000742:	4208      	tst	r0, r1
 8000744:	d000      	beq.n	8000748 <__aeabi_fsub+0x2f8>
 8000746:	e749      	b.n	80005dc <__aeabi_fsub+0x18c>
 8000748:	464b      	mov	r3, r9
 800074a:	e747      	b.n	80005dc <__aeabi_fsub+0x18c>
 800074c:	4648      	mov	r0, r9
 800074e:	25ff      	movs	r5, #255	; 0xff
 8000750:	2800      	cmp	r0, #0
 8000752:	d100      	bne.n	8000756 <__aeabi_fsub+0x306>
 8000754:	e74f      	b.n	80005f6 <__aeabi_fsub+0x1a6>
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	03d2      	lsls	r2, r2, #15
 800075a:	4217      	tst	r7, r2
 800075c:	d004      	beq.n	8000768 <__aeabi_fsub+0x318>
 800075e:	4660      	mov	r0, ip
 8000760:	4210      	tst	r0, r2
 8000762:	d101      	bne.n	8000768 <__aeabi_fsub+0x318>
 8000764:	464b      	mov	r3, r9
 8000766:	4688      	mov	r8, r1
 8000768:	2201      	movs	r2, #1
 800076a:	4641      	mov	r1, r8
 800076c:	25ff      	movs	r5, #255	; 0xff
 800076e:	400a      	ands	r2, r1
 8000770:	e741      	b.n	80005f6 <__aeabi_fsub+0x1a6>
 8000772:	4648      	mov	r0, r9
 8000774:	2800      	cmp	r0, #0
 8000776:	d01f      	beq.n	80007b8 <__aeabi_fsub+0x368>
 8000778:	1a1a      	subs	r2, r3, r0
 800077a:	0150      	lsls	r0, r2, #5
 800077c:	d520      	bpl.n	80007c0 <__aeabi_fsub+0x370>
 800077e:	464a      	mov	r2, r9
 8000780:	2407      	movs	r4, #7
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	401c      	ands	r4, r3
 8000786:	4688      	mov	r8, r1
 8000788:	2500      	movs	r5, #0
 800078a:	e6a6      	b.n	80004da <__aeabi_fsub+0x8a>
 800078c:	1c74      	adds	r4, r6, #1
 800078e:	d0c9      	beq.n	8000724 <__aeabi_fsub+0x2d4>
 8000790:	43f6      	mvns	r6, r6
 8000792:	28ff      	cmp	r0, #255	; 0xff
 8000794:	d1bc      	bne.n	8000710 <__aeabi_fsub+0x2c0>
 8000796:	464b      	mov	r3, r9
 8000798:	e720      	b.n	80005dc <__aeabi_fsub+0x18c>
 800079a:	4699      	mov	r9, r3
 800079c:	464b      	mov	r3, r9
 800079e:	2500      	movs	r5, #0
 80007a0:	08db      	lsrs	r3, r3, #3
 80007a2:	e72b      	b.n	80005fc <__aeabi_fsub+0x1ac>
 80007a4:	2301      	movs	r3, #1
 80007a6:	e740      	b.n	800062a <__aeabi_fsub+0x1da>
 80007a8:	2200      	movs	r2, #0
 80007aa:	2300      	movs	r3, #0
 80007ac:	e6a9      	b.n	8000502 <__aeabi_fsub+0xb2>
 80007ae:	2380      	movs	r3, #128	; 0x80
 80007b0:	2200      	movs	r2, #0
 80007b2:	03db      	lsls	r3, r3, #15
 80007b4:	24ff      	movs	r4, #255	; 0xff
 80007b6:	e6a4      	b.n	8000502 <__aeabi_fsub+0xb2>
 80007b8:	2500      	movs	r5, #0
 80007ba:	e71c      	b.n	80005f6 <__aeabi_fsub+0x1a6>
 80007bc:	2301      	movs	r3, #1
 80007be:	e7b1      	b.n	8000724 <__aeabi_fsub+0x2d4>
 80007c0:	2a00      	cmp	r2, #0
 80007c2:	d0f1      	beq.n	80007a8 <__aeabi_fsub+0x358>
 80007c4:	0013      	movs	r3, r2
 80007c6:	2500      	movs	r5, #0
 80007c8:	e6fc      	b.n	80005c4 <__aeabi_fsub+0x174>
 80007ca:	2500      	movs	r5, #0
 80007cc:	e6fa      	b.n	80005c4 <__aeabi_fsub+0x174>
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	7dffffff 	.word	0x7dffffff
 80007d4:	fbffffff 	.word	0xfbffffff

080007d8 <__aeabi_f2iz>:
 80007d8:	0241      	lsls	r1, r0, #9
 80007da:	0042      	lsls	r2, r0, #1
 80007dc:	0fc3      	lsrs	r3, r0, #31
 80007de:	0a49      	lsrs	r1, r1, #9
 80007e0:	0e12      	lsrs	r2, r2, #24
 80007e2:	2000      	movs	r0, #0
 80007e4:	2a7e      	cmp	r2, #126	; 0x7e
 80007e6:	d90d      	bls.n	8000804 <__aeabi_f2iz+0x2c>
 80007e8:	2a9d      	cmp	r2, #157	; 0x9d
 80007ea:	d80c      	bhi.n	8000806 <__aeabi_f2iz+0x2e>
 80007ec:	2080      	movs	r0, #128	; 0x80
 80007ee:	0400      	lsls	r0, r0, #16
 80007f0:	4301      	orrs	r1, r0
 80007f2:	2a95      	cmp	r2, #149	; 0x95
 80007f4:	dc0a      	bgt.n	800080c <__aeabi_f2iz+0x34>
 80007f6:	2096      	movs	r0, #150	; 0x96
 80007f8:	1a82      	subs	r2, r0, r2
 80007fa:	40d1      	lsrs	r1, r2
 80007fc:	4248      	negs	r0, r1
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_f2iz+0x2c>
 8000802:	0008      	movs	r0, r1
 8000804:	4770      	bx	lr
 8000806:	4a03      	ldr	r2, [pc, #12]	; (8000814 <__aeabi_f2iz+0x3c>)
 8000808:	1898      	adds	r0, r3, r2
 800080a:	e7fb      	b.n	8000804 <__aeabi_f2iz+0x2c>
 800080c:	3a96      	subs	r2, #150	; 0x96
 800080e:	4091      	lsls	r1, r2
 8000810:	e7f4      	b.n	80007fc <__aeabi_f2iz+0x24>
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	7fffffff 	.word	0x7fffffff

08000818 <__aeabi_ui2f>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	1e04      	subs	r4, r0, #0
 800081c:	d034      	beq.n	8000888 <__aeabi_ui2f+0x70>
 800081e:	f000 fc83 	bl	8001128 <__clzsi2>
 8000822:	229e      	movs	r2, #158	; 0x9e
 8000824:	1a12      	subs	r2, r2, r0
 8000826:	2a96      	cmp	r2, #150	; 0x96
 8000828:	dc07      	bgt.n	800083a <__aeabi_ui2f+0x22>
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	2808      	cmp	r0, #8
 800082e:	dd2e      	ble.n	800088e <__aeabi_ui2f+0x76>
 8000830:	3808      	subs	r0, #8
 8000832:	4084      	lsls	r4, r0
 8000834:	0260      	lsls	r0, r4, #9
 8000836:	0a40      	lsrs	r0, r0, #9
 8000838:	e021      	b.n	800087e <__aeabi_ui2f+0x66>
 800083a:	2a99      	cmp	r2, #153	; 0x99
 800083c:	dd09      	ble.n	8000852 <__aeabi_ui2f+0x3a>
 800083e:	0003      	movs	r3, r0
 8000840:	0021      	movs	r1, r4
 8000842:	331b      	adds	r3, #27
 8000844:	4099      	lsls	r1, r3
 8000846:	1e4b      	subs	r3, r1, #1
 8000848:	4199      	sbcs	r1, r3
 800084a:	2305      	movs	r3, #5
 800084c:	1a1b      	subs	r3, r3, r0
 800084e:	40dc      	lsrs	r4, r3
 8000850:	430c      	orrs	r4, r1
 8000852:	2805      	cmp	r0, #5
 8000854:	dd01      	ble.n	800085a <__aeabi_ui2f+0x42>
 8000856:	1f43      	subs	r3, r0, #5
 8000858:	409c      	lsls	r4, r3
 800085a:	0023      	movs	r3, r4
 800085c:	490d      	ldr	r1, [pc, #52]	; (8000894 <__aeabi_ui2f+0x7c>)
 800085e:	400b      	ands	r3, r1
 8000860:	0765      	lsls	r5, r4, #29
 8000862:	d009      	beq.n	8000878 <__aeabi_ui2f+0x60>
 8000864:	250f      	movs	r5, #15
 8000866:	402c      	ands	r4, r5
 8000868:	2c04      	cmp	r4, #4
 800086a:	d005      	beq.n	8000878 <__aeabi_ui2f+0x60>
 800086c:	3304      	adds	r3, #4
 800086e:	015c      	lsls	r4, r3, #5
 8000870:	d502      	bpl.n	8000878 <__aeabi_ui2f+0x60>
 8000872:	229f      	movs	r2, #159	; 0x9f
 8000874:	400b      	ands	r3, r1
 8000876:	1a12      	subs	r2, r2, r0
 8000878:	019b      	lsls	r3, r3, #6
 800087a:	0a58      	lsrs	r0, r3, #9
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	0240      	lsls	r0, r0, #9
 8000880:	05d2      	lsls	r2, r2, #23
 8000882:	0a40      	lsrs	r0, r0, #9
 8000884:	4310      	orrs	r0, r2
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	2200      	movs	r2, #0
 800088a:	2000      	movs	r0, #0
 800088c:	e7f7      	b.n	800087e <__aeabi_ui2f+0x66>
 800088e:	0260      	lsls	r0, r4, #9
 8000890:	0a40      	lsrs	r0, r0, #9
 8000892:	e7f4      	b.n	800087e <__aeabi_ui2f+0x66>
 8000894:	fbffffff 	.word	0xfbffffff

08000898 <__aeabi_ddiv>:
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	4657      	mov	r7, sl
 800089c:	46de      	mov	lr, fp
 800089e:	464e      	mov	r6, r9
 80008a0:	4645      	mov	r5, r8
 80008a2:	b5e0      	push	{r5, r6, r7, lr}
 80008a4:	4683      	mov	fp, r0
 80008a6:	0007      	movs	r7, r0
 80008a8:	030e      	lsls	r6, r1, #12
 80008aa:	0048      	lsls	r0, r1, #1
 80008ac:	b085      	sub	sp, #20
 80008ae:	4692      	mov	sl, r2
 80008b0:	001c      	movs	r4, r3
 80008b2:	0b36      	lsrs	r6, r6, #12
 80008b4:	0d40      	lsrs	r0, r0, #21
 80008b6:	0fcd      	lsrs	r5, r1, #31
 80008b8:	2800      	cmp	r0, #0
 80008ba:	d100      	bne.n	80008be <__aeabi_ddiv+0x26>
 80008bc:	e09d      	b.n	80009fa <__aeabi_ddiv+0x162>
 80008be:	4b95      	ldr	r3, [pc, #596]	; (8000b14 <__aeabi_ddiv+0x27c>)
 80008c0:	4298      	cmp	r0, r3
 80008c2:	d039      	beq.n	8000938 <__aeabi_ddiv+0xa0>
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	00f6      	lsls	r6, r6, #3
 80008c8:	041b      	lsls	r3, r3, #16
 80008ca:	431e      	orrs	r6, r3
 80008cc:	4a92      	ldr	r2, [pc, #584]	; (8000b18 <__aeabi_ddiv+0x280>)
 80008ce:	0f7b      	lsrs	r3, r7, #29
 80008d0:	4333      	orrs	r3, r6
 80008d2:	4699      	mov	r9, r3
 80008d4:	4694      	mov	ip, r2
 80008d6:	0003      	movs	r3, r0
 80008d8:	4463      	add	r3, ip
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2300      	movs	r3, #0
 80008de:	2600      	movs	r6, #0
 80008e0:	00ff      	lsls	r7, r7, #3
 80008e2:	9302      	str	r3, [sp, #8]
 80008e4:	0323      	lsls	r3, r4, #12
 80008e6:	0b1b      	lsrs	r3, r3, #12
 80008e8:	4698      	mov	r8, r3
 80008ea:	0063      	lsls	r3, r4, #1
 80008ec:	0fe4      	lsrs	r4, r4, #31
 80008ee:	4652      	mov	r2, sl
 80008f0:	0d5b      	lsrs	r3, r3, #21
 80008f2:	9401      	str	r4, [sp, #4]
 80008f4:	d100      	bne.n	80008f8 <__aeabi_ddiv+0x60>
 80008f6:	e0b3      	b.n	8000a60 <__aeabi_ddiv+0x1c8>
 80008f8:	4986      	ldr	r1, [pc, #536]	; (8000b14 <__aeabi_ddiv+0x27c>)
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d100      	bne.n	8000900 <__aeabi_ddiv+0x68>
 80008fe:	e09e      	b.n	8000a3e <__aeabi_ddiv+0x1a6>
 8000900:	4642      	mov	r2, r8
 8000902:	00d1      	lsls	r1, r2, #3
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	0412      	lsls	r2, r2, #16
 8000908:	430a      	orrs	r2, r1
 800090a:	4651      	mov	r1, sl
 800090c:	0f49      	lsrs	r1, r1, #29
 800090e:	4311      	orrs	r1, r2
 8000910:	468b      	mov	fp, r1
 8000912:	4981      	ldr	r1, [pc, #516]	; (8000b18 <__aeabi_ddiv+0x280>)
 8000914:	4652      	mov	r2, sl
 8000916:	468c      	mov	ip, r1
 8000918:	9900      	ldr	r1, [sp, #0]
 800091a:	4463      	add	r3, ip
 800091c:	1acb      	subs	r3, r1, r3
 800091e:	2100      	movs	r1, #0
 8000920:	00d2      	lsls	r2, r2, #3
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	002b      	movs	r3, r5
 8000926:	4063      	eors	r3, r4
 8000928:	469a      	mov	sl, r3
 800092a:	2e0f      	cmp	r6, #15
 800092c:	d900      	bls.n	8000930 <__aeabi_ddiv+0x98>
 800092e:	e105      	b.n	8000b3c <__aeabi_ddiv+0x2a4>
 8000930:	4b7a      	ldr	r3, [pc, #488]	; (8000b1c <__aeabi_ddiv+0x284>)
 8000932:	00b6      	lsls	r6, r6, #2
 8000934:	599b      	ldr	r3, [r3, r6]
 8000936:	469f      	mov	pc, r3
 8000938:	465b      	mov	r3, fp
 800093a:	4333      	orrs	r3, r6
 800093c:	4699      	mov	r9, r3
 800093e:	d000      	beq.n	8000942 <__aeabi_ddiv+0xaa>
 8000940:	e0b8      	b.n	8000ab4 <__aeabi_ddiv+0x21c>
 8000942:	2302      	movs	r3, #2
 8000944:	2608      	movs	r6, #8
 8000946:	2700      	movs	r7, #0
 8000948:	9000      	str	r0, [sp, #0]
 800094a:	9302      	str	r3, [sp, #8]
 800094c:	e7ca      	b.n	80008e4 <__aeabi_ddiv+0x4c>
 800094e:	46cb      	mov	fp, r9
 8000950:	003a      	movs	r2, r7
 8000952:	9902      	ldr	r1, [sp, #8]
 8000954:	9501      	str	r5, [sp, #4]
 8000956:	9b01      	ldr	r3, [sp, #4]
 8000958:	469a      	mov	sl, r3
 800095a:	2902      	cmp	r1, #2
 800095c:	d027      	beq.n	80009ae <__aeabi_ddiv+0x116>
 800095e:	2903      	cmp	r1, #3
 8000960:	d100      	bne.n	8000964 <__aeabi_ddiv+0xcc>
 8000962:	e280      	b.n	8000e66 <__aeabi_ddiv+0x5ce>
 8000964:	2901      	cmp	r1, #1
 8000966:	d044      	beq.n	80009f2 <__aeabi_ddiv+0x15a>
 8000968:	496d      	ldr	r1, [pc, #436]	; (8000b20 <__aeabi_ddiv+0x288>)
 800096a:	9b00      	ldr	r3, [sp, #0]
 800096c:	468c      	mov	ip, r1
 800096e:	4463      	add	r3, ip
 8000970:	001c      	movs	r4, r3
 8000972:	2c00      	cmp	r4, #0
 8000974:	dd38      	ble.n	80009e8 <__aeabi_ddiv+0x150>
 8000976:	0753      	lsls	r3, r2, #29
 8000978:	d000      	beq.n	800097c <__aeabi_ddiv+0xe4>
 800097a:	e213      	b.n	8000da4 <__aeabi_ddiv+0x50c>
 800097c:	08d2      	lsrs	r2, r2, #3
 800097e:	465b      	mov	r3, fp
 8000980:	01db      	lsls	r3, r3, #7
 8000982:	d509      	bpl.n	8000998 <__aeabi_ddiv+0x100>
 8000984:	4659      	mov	r1, fp
 8000986:	4b67      	ldr	r3, [pc, #412]	; (8000b24 <__aeabi_ddiv+0x28c>)
 8000988:	4019      	ands	r1, r3
 800098a:	468b      	mov	fp, r1
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	00c9      	lsls	r1, r1, #3
 8000990:	468c      	mov	ip, r1
 8000992:	9b00      	ldr	r3, [sp, #0]
 8000994:	4463      	add	r3, ip
 8000996:	001c      	movs	r4, r3
 8000998:	4b63      	ldr	r3, [pc, #396]	; (8000b28 <__aeabi_ddiv+0x290>)
 800099a:	429c      	cmp	r4, r3
 800099c:	dc07      	bgt.n	80009ae <__aeabi_ddiv+0x116>
 800099e:	465b      	mov	r3, fp
 80009a0:	0564      	lsls	r4, r4, #21
 80009a2:	075f      	lsls	r7, r3, #29
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	4317      	orrs	r7, r2
 80009a8:	0b1b      	lsrs	r3, r3, #12
 80009aa:	0d62      	lsrs	r2, r4, #21
 80009ac:	e002      	b.n	80009b4 <__aeabi_ddiv+0x11c>
 80009ae:	2300      	movs	r3, #0
 80009b0:	2700      	movs	r7, #0
 80009b2:	4a58      	ldr	r2, [pc, #352]	; (8000b14 <__aeabi_ddiv+0x27c>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	031b      	lsls	r3, r3, #12
 80009b8:	0b1c      	lsrs	r4, r3, #12
 80009ba:	0d0b      	lsrs	r3, r1, #20
 80009bc:	051b      	lsls	r3, r3, #20
 80009be:	4323      	orrs	r3, r4
 80009c0:	0514      	lsls	r4, r2, #20
 80009c2:	4a5a      	ldr	r2, [pc, #360]	; (8000b2c <__aeabi_ddiv+0x294>)
 80009c4:	0038      	movs	r0, r7
 80009c6:	4013      	ands	r3, r2
 80009c8:	431c      	orrs	r4, r3
 80009ca:	4653      	mov	r3, sl
 80009cc:	0064      	lsls	r4, r4, #1
 80009ce:	07db      	lsls	r3, r3, #31
 80009d0:	0864      	lsrs	r4, r4, #1
 80009d2:	431c      	orrs	r4, r3
 80009d4:	0021      	movs	r1, r4
 80009d6:	b005      	add	sp, #20
 80009d8:	bc3c      	pop	{r2, r3, r4, r5}
 80009da:	4690      	mov	r8, r2
 80009dc:	4699      	mov	r9, r3
 80009de:	46a2      	mov	sl, r4
 80009e0:	46ab      	mov	fp, r5
 80009e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e4:	2201      	movs	r2, #1
 80009e6:	4252      	negs	r2, r2
 80009e8:	2301      	movs	r3, #1
 80009ea:	1b1b      	subs	r3, r3, r4
 80009ec:	2b38      	cmp	r3, #56	; 0x38
 80009ee:	dc00      	bgt.n	80009f2 <__aeabi_ddiv+0x15a>
 80009f0:	e1ad      	b.n	8000d4e <__aeabi_ddiv+0x4b6>
 80009f2:	2200      	movs	r2, #0
 80009f4:	2300      	movs	r3, #0
 80009f6:	2700      	movs	r7, #0
 80009f8:	e7dc      	b.n	80009b4 <__aeabi_ddiv+0x11c>
 80009fa:	465b      	mov	r3, fp
 80009fc:	4333      	orrs	r3, r6
 80009fe:	4699      	mov	r9, r3
 8000a00:	d05e      	beq.n	8000ac0 <__aeabi_ddiv+0x228>
 8000a02:	2e00      	cmp	r6, #0
 8000a04:	d100      	bne.n	8000a08 <__aeabi_ddiv+0x170>
 8000a06:	e18a      	b.n	8000d1e <__aeabi_ddiv+0x486>
 8000a08:	0030      	movs	r0, r6
 8000a0a:	f000 fb8d 	bl	8001128 <__clzsi2>
 8000a0e:	0003      	movs	r3, r0
 8000a10:	3b0b      	subs	r3, #11
 8000a12:	2b1c      	cmp	r3, #28
 8000a14:	dd00      	ble.n	8000a18 <__aeabi_ddiv+0x180>
 8000a16:	e17b      	b.n	8000d10 <__aeabi_ddiv+0x478>
 8000a18:	221d      	movs	r2, #29
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	465a      	mov	r2, fp
 8000a1e:	0001      	movs	r1, r0
 8000a20:	40da      	lsrs	r2, r3
 8000a22:	3908      	subs	r1, #8
 8000a24:	408e      	lsls	r6, r1
 8000a26:	0013      	movs	r3, r2
 8000a28:	465f      	mov	r7, fp
 8000a2a:	4333      	orrs	r3, r6
 8000a2c:	4699      	mov	r9, r3
 8000a2e:	408f      	lsls	r7, r1
 8000a30:	4b3f      	ldr	r3, [pc, #252]	; (8000b30 <__aeabi_ddiv+0x298>)
 8000a32:	2600      	movs	r6, #0
 8000a34:	1a1b      	subs	r3, r3, r0
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	9302      	str	r3, [sp, #8]
 8000a3c:	e752      	b.n	80008e4 <__aeabi_ddiv+0x4c>
 8000a3e:	4641      	mov	r1, r8
 8000a40:	4653      	mov	r3, sl
 8000a42:	430b      	orrs	r3, r1
 8000a44:	493b      	ldr	r1, [pc, #236]	; (8000b34 <__aeabi_ddiv+0x29c>)
 8000a46:	469b      	mov	fp, r3
 8000a48:	468c      	mov	ip, r1
 8000a4a:	9b00      	ldr	r3, [sp, #0]
 8000a4c:	4463      	add	r3, ip
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	465b      	mov	r3, fp
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d13b      	bne.n	8000ace <__aeabi_ddiv+0x236>
 8000a56:	2302      	movs	r3, #2
 8000a58:	2200      	movs	r2, #0
 8000a5a:	431e      	orrs	r6, r3
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	e761      	b.n	8000924 <__aeabi_ddiv+0x8c>
 8000a60:	4643      	mov	r3, r8
 8000a62:	4313      	orrs	r3, r2
 8000a64:	469b      	mov	fp, r3
 8000a66:	d037      	beq.n	8000ad8 <__aeabi_ddiv+0x240>
 8000a68:	4643      	mov	r3, r8
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_ddiv+0x1d8>
 8000a6e:	e162      	b.n	8000d36 <__aeabi_ddiv+0x49e>
 8000a70:	4640      	mov	r0, r8
 8000a72:	f000 fb59 	bl	8001128 <__clzsi2>
 8000a76:	0003      	movs	r3, r0
 8000a78:	3b0b      	subs	r3, #11
 8000a7a:	2b1c      	cmp	r3, #28
 8000a7c:	dd00      	ble.n	8000a80 <__aeabi_ddiv+0x1e8>
 8000a7e:	e153      	b.n	8000d28 <__aeabi_ddiv+0x490>
 8000a80:	0002      	movs	r2, r0
 8000a82:	4641      	mov	r1, r8
 8000a84:	3a08      	subs	r2, #8
 8000a86:	4091      	lsls	r1, r2
 8000a88:	4688      	mov	r8, r1
 8000a8a:	211d      	movs	r1, #29
 8000a8c:	1acb      	subs	r3, r1, r3
 8000a8e:	4651      	mov	r1, sl
 8000a90:	40d9      	lsrs	r1, r3
 8000a92:	000b      	movs	r3, r1
 8000a94:	4641      	mov	r1, r8
 8000a96:	430b      	orrs	r3, r1
 8000a98:	469b      	mov	fp, r3
 8000a9a:	4653      	mov	r3, sl
 8000a9c:	4093      	lsls	r3, r2
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	9b00      	ldr	r3, [sp, #0]
 8000aa2:	4925      	ldr	r1, [pc, #148]	; (8000b38 <__aeabi_ddiv+0x2a0>)
 8000aa4:	469c      	mov	ip, r3
 8000aa6:	4460      	add	r0, ip
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	468c      	mov	ip, r1
 8000aac:	4463      	add	r3, ip
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	e737      	b.n	8000924 <__aeabi_ddiv+0x8c>
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	46b1      	mov	r9, r6
 8000ab8:	9000      	str	r0, [sp, #0]
 8000aba:	260c      	movs	r6, #12
 8000abc:	9302      	str	r3, [sp, #8]
 8000abe:	e711      	b.n	80008e4 <__aeabi_ddiv+0x4c>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	2604      	movs	r6, #4
 8000ac8:	2700      	movs	r7, #0
 8000aca:	9302      	str	r3, [sp, #8]
 8000acc:	e70a      	b.n	80008e4 <__aeabi_ddiv+0x4c>
 8000ace:	2303      	movs	r3, #3
 8000ad0:	46c3      	mov	fp, r8
 8000ad2:	431e      	orrs	r6, r3
 8000ad4:	2103      	movs	r1, #3
 8000ad6:	e725      	b.n	8000924 <__aeabi_ddiv+0x8c>
 8000ad8:	3301      	adds	r3, #1
 8000ada:	431e      	orrs	r6, r3
 8000adc:	2200      	movs	r2, #0
 8000ade:	2101      	movs	r1, #1
 8000ae0:	e720      	b.n	8000924 <__aeabi_ddiv+0x8c>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	2700      	movs	r7, #0
 8000aea:	031b      	lsls	r3, r3, #12
 8000aec:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <__aeabi_ddiv+0x27c>)
 8000aee:	e761      	b.n	80009b4 <__aeabi_ddiv+0x11c>
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	4649      	mov	r1, r9
 8000af4:	031b      	lsls	r3, r3, #12
 8000af6:	4219      	tst	r1, r3
 8000af8:	d100      	bne.n	8000afc <__aeabi_ddiv+0x264>
 8000afa:	e0e2      	b.n	8000cc2 <__aeabi_ddiv+0x42a>
 8000afc:	4659      	mov	r1, fp
 8000afe:	4219      	tst	r1, r3
 8000b00:	d000      	beq.n	8000b04 <__aeabi_ddiv+0x26c>
 8000b02:	e0de      	b.n	8000cc2 <__aeabi_ddiv+0x42a>
 8000b04:	430b      	orrs	r3, r1
 8000b06:	031b      	lsls	r3, r3, #12
 8000b08:	0017      	movs	r7, r2
 8000b0a:	0b1b      	lsrs	r3, r3, #12
 8000b0c:	46a2      	mov	sl, r4
 8000b0e:	4a01      	ldr	r2, [pc, #4]	; (8000b14 <__aeabi_ddiv+0x27c>)
 8000b10:	e750      	b.n	80009b4 <__aeabi_ddiv+0x11c>
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	000007ff 	.word	0x000007ff
 8000b18:	fffffc01 	.word	0xfffffc01
 8000b1c:	08004fac 	.word	0x08004fac
 8000b20:	000003ff 	.word	0x000003ff
 8000b24:	feffffff 	.word	0xfeffffff
 8000b28:	000007fe 	.word	0x000007fe
 8000b2c:	800fffff 	.word	0x800fffff
 8000b30:	fffffc0d 	.word	0xfffffc0d
 8000b34:	fffff801 	.word	0xfffff801
 8000b38:	000003f3 	.word	0x000003f3
 8000b3c:	45d9      	cmp	r9, fp
 8000b3e:	d900      	bls.n	8000b42 <__aeabi_ddiv+0x2aa>
 8000b40:	e0cb      	b.n	8000cda <__aeabi_ddiv+0x442>
 8000b42:	d100      	bne.n	8000b46 <__aeabi_ddiv+0x2ae>
 8000b44:	e0c6      	b.n	8000cd4 <__aeabi_ddiv+0x43c>
 8000b46:	003c      	movs	r4, r7
 8000b48:	4648      	mov	r0, r9
 8000b4a:	2700      	movs	r7, #0
 8000b4c:	9b00      	ldr	r3, [sp, #0]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	465b      	mov	r3, fp
 8000b54:	0e16      	lsrs	r6, r2, #24
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	431e      	orrs	r6, r3
 8000b5a:	0213      	lsls	r3, r2, #8
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	0433      	lsls	r3, r6, #16
 8000b60:	0c1b      	lsrs	r3, r3, #16
 8000b62:	4699      	mov	r9, r3
 8000b64:	0c31      	lsrs	r1, r6, #16
 8000b66:	9101      	str	r1, [sp, #4]
 8000b68:	f7ff fb54 	bl	8000214 <__aeabi_uidivmod>
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	4342      	muls	r2, r0
 8000b70:	040b      	lsls	r3, r1, #16
 8000b72:	0c21      	lsrs	r1, r4, #16
 8000b74:	0005      	movs	r5, r0
 8000b76:	4319      	orrs	r1, r3
 8000b78:	428a      	cmp	r2, r1
 8000b7a:	d907      	bls.n	8000b8c <__aeabi_ddiv+0x2f4>
 8000b7c:	1989      	adds	r1, r1, r6
 8000b7e:	3d01      	subs	r5, #1
 8000b80:	428e      	cmp	r6, r1
 8000b82:	d803      	bhi.n	8000b8c <__aeabi_ddiv+0x2f4>
 8000b84:	428a      	cmp	r2, r1
 8000b86:	d901      	bls.n	8000b8c <__aeabi_ddiv+0x2f4>
 8000b88:	1e85      	subs	r5, r0, #2
 8000b8a:	1989      	adds	r1, r1, r6
 8000b8c:	1a88      	subs	r0, r1, r2
 8000b8e:	9901      	ldr	r1, [sp, #4]
 8000b90:	f7ff fb40 	bl	8000214 <__aeabi_uidivmod>
 8000b94:	0409      	lsls	r1, r1, #16
 8000b96:	468c      	mov	ip, r1
 8000b98:	464a      	mov	r2, r9
 8000b9a:	0421      	lsls	r1, r4, #16
 8000b9c:	4664      	mov	r4, ip
 8000b9e:	4342      	muls	r2, r0
 8000ba0:	0c09      	lsrs	r1, r1, #16
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	4321      	orrs	r1, r4
 8000ba6:	428a      	cmp	r2, r1
 8000ba8:	d904      	bls.n	8000bb4 <__aeabi_ddiv+0x31c>
 8000baa:	1989      	adds	r1, r1, r6
 8000bac:	3b01      	subs	r3, #1
 8000bae:	428e      	cmp	r6, r1
 8000bb0:	d800      	bhi.n	8000bb4 <__aeabi_ddiv+0x31c>
 8000bb2:	e0f1      	b.n	8000d98 <__aeabi_ddiv+0x500>
 8000bb4:	042d      	lsls	r5, r5, #16
 8000bb6:	431d      	orrs	r5, r3
 8000bb8:	46ab      	mov	fp, r5
 8000bba:	4643      	mov	r3, r8
 8000bbc:	1a89      	subs	r1, r1, r2
 8000bbe:	4642      	mov	r2, r8
 8000bc0:	0c28      	lsrs	r0, r5, #16
 8000bc2:	0412      	lsls	r2, r2, #16
 8000bc4:	0c1d      	lsrs	r5, r3, #16
 8000bc6:	465b      	mov	r3, fp
 8000bc8:	0c14      	lsrs	r4, r2, #16
 8000bca:	0022      	movs	r2, r4
 8000bcc:	041b      	lsls	r3, r3, #16
 8000bce:	0c1b      	lsrs	r3, r3, #16
 8000bd0:	435a      	muls	r2, r3
 8000bd2:	9403      	str	r4, [sp, #12]
 8000bd4:	436b      	muls	r3, r5
 8000bd6:	4344      	muls	r4, r0
 8000bd8:	9502      	str	r5, [sp, #8]
 8000bda:	4368      	muls	r0, r5
 8000bdc:	191b      	adds	r3, r3, r4
 8000bde:	0c15      	lsrs	r5, r2, #16
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	429c      	cmp	r4, r3
 8000be4:	d903      	bls.n	8000bee <__aeabi_ddiv+0x356>
 8000be6:	2480      	movs	r4, #128	; 0x80
 8000be8:	0264      	lsls	r4, r4, #9
 8000bea:	46a4      	mov	ip, r4
 8000bec:	4460      	add	r0, ip
 8000bee:	0c1c      	lsrs	r4, r3, #16
 8000bf0:	0415      	lsls	r5, r2, #16
 8000bf2:	041b      	lsls	r3, r3, #16
 8000bf4:	0c2d      	lsrs	r5, r5, #16
 8000bf6:	1820      	adds	r0, r4, r0
 8000bf8:	195d      	adds	r5, r3, r5
 8000bfa:	4281      	cmp	r1, r0
 8000bfc:	d377      	bcc.n	8000cee <__aeabi_ddiv+0x456>
 8000bfe:	d073      	beq.n	8000ce8 <__aeabi_ddiv+0x450>
 8000c00:	1a0c      	subs	r4, r1, r0
 8000c02:	4aa2      	ldr	r2, [pc, #648]	; (8000e8c <__aeabi_ddiv+0x5f4>)
 8000c04:	1b7d      	subs	r5, r7, r5
 8000c06:	42af      	cmp	r7, r5
 8000c08:	41bf      	sbcs	r7, r7
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	9b00      	ldr	r3, [sp, #0]
 8000c0e:	427f      	negs	r7, r7
 8000c10:	4463      	add	r3, ip
 8000c12:	1be0      	subs	r0, r4, r7
 8000c14:	001c      	movs	r4, r3
 8000c16:	4286      	cmp	r6, r0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_ddiv+0x384>
 8000c1a:	e0db      	b.n	8000dd4 <__aeabi_ddiv+0x53c>
 8000c1c:	9901      	ldr	r1, [sp, #4]
 8000c1e:	f7ff faf9 	bl	8000214 <__aeabi_uidivmod>
 8000c22:	464a      	mov	r2, r9
 8000c24:	4342      	muls	r2, r0
 8000c26:	040b      	lsls	r3, r1, #16
 8000c28:	0c29      	lsrs	r1, r5, #16
 8000c2a:	0007      	movs	r7, r0
 8000c2c:	4319      	orrs	r1, r3
 8000c2e:	428a      	cmp	r2, r1
 8000c30:	d907      	bls.n	8000c42 <__aeabi_ddiv+0x3aa>
 8000c32:	1989      	adds	r1, r1, r6
 8000c34:	3f01      	subs	r7, #1
 8000c36:	428e      	cmp	r6, r1
 8000c38:	d803      	bhi.n	8000c42 <__aeabi_ddiv+0x3aa>
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	d901      	bls.n	8000c42 <__aeabi_ddiv+0x3aa>
 8000c3e:	1e87      	subs	r7, r0, #2
 8000c40:	1989      	adds	r1, r1, r6
 8000c42:	1a88      	subs	r0, r1, r2
 8000c44:	9901      	ldr	r1, [sp, #4]
 8000c46:	f7ff fae5 	bl	8000214 <__aeabi_uidivmod>
 8000c4a:	0409      	lsls	r1, r1, #16
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	4689      	mov	r9, r1
 8000c50:	0429      	lsls	r1, r5, #16
 8000c52:	464d      	mov	r5, r9
 8000c54:	4342      	muls	r2, r0
 8000c56:	0c09      	lsrs	r1, r1, #16
 8000c58:	0003      	movs	r3, r0
 8000c5a:	4329      	orrs	r1, r5
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	d907      	bls.n	8000c70 <__aeabi_ddiv+0x3d8>
 8000c60:	1989      	adds	r1, r1, r6
 8000c62:	3b01      	subs	r3, #1
 8000c64:	428e      	cmp	r6, r1
 8000c66:	d803      	bhi.n	8000c70 <__aeabi_ddiv+0x3d8>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	d901      	bls.n	8000c70 <__aeabi_ddiv+0x3d8>
 8000c6c:	1e83      	subs	r3, r0, #2
 8000c6e:	1989      	adds	r1, r1, r6
 8000c70:	043f      	lsls	r7, r7, #16
 8000c72:	1a89      	subs	r1, r1, r2
 8000c74:	003a      	movs	r2, r7
 8000c76:	9f03      	ldr	r7, [sp, #12]
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	0038      	movs	r0, r7
 8000c7c:	0413      	lsls	r3, r2, #16
 8000c7e:	0c1b      	lsrs	r3, r3, #16
 8000c80:	4358      	muls	r0, r3
 8000c82:	4681      	mov	r9, r0
 8000c84:	9802      	ldr	r0, [sp, #8]
 8000c86:	0c15      	lsrs	r5, r2, #16
 8000c88:	436f      	muls	r7, r5
 8000c8a:	4343      	muls	r3, r0
 8000c8c:	4345      	muls	r5, r0
 8000c8e:	4648      	mov	r0, r9
 8000c90:	0c00      	lsrs	r0, r0, #16
 8000c92:	4684      	mov	ip, r0
 8000c94:	19db      	adds	r3, r3, r7
 8000c96:	4463      	add	r3, ip
 8000c98:	429f      	cmp	r7, r3
 8000c9a:	d903      	bls.n	8000ca4 <__aeabi_ddiv+0x40c>
 8000c9c:	2080      	movs	r0, #128	; 0x80
 8000c9e:	0240      	lsls	r0, r0, #9
 8000ca0:	4684      	mov	ip, r0
 8000ca2:	4465      	add	r5, ip
 8000ca4:	4648      	mov	r0, r9
 8000ca6:	0c1f      	lsrs	r7, r3, #16
 8000ca8:	0400      	lsls	r0, r0, #16
 8000caa:	041b      	lsls	r3, r3, #16
 8000cac:	0c00      	lsrs	r0, r0, #16
 8000cae:	197d      	adds	r5, r7, r5
 8000cb0:	1818      	adds	r0, r3, r0
 8000cb2:	42a9      	cmp	r1, r5
 8000cb4:	d200      	bcs.n	8000cb8 <__aeabi_ddiv+0x420>
 8000cb6:	e084      	b.n	8000dc2 <__aeabi_ddiv+0x52a>
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_ddiv+0x424>
 8000cba:	e07f      	b.n	8000dbc <__aeabi_ddiv+0x524>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	e657      	b.n	8000972 <__aeabi_ddiv+0xda>
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	464a      	mov	r2, r9
 8000cc6:	031b      	lsls	r3, r3, #12
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	031b      	lsls	r3, r3, #12
 8000ccc:	0b1b      	lsrs	r3, r3, #12
 8000cce:	46aa      	mov	sl, r5
 8000cd0:	4a6f      	ldr	r2, [pc, #444]	; (8000e90 <__aeabi_ddiv+0x5f8>)
 8000cd2:	e66f      	b.n	80009b4 <__aeabi_ddiv+0x11c>
 8000cd4:	42ba      	cmp	r2, r7
 8000cd6:	d900      	bls.n	8000cda <__aeabi_ddiv+0x442>
 8000cd8:	e735      	b.n	8000b46 <__aeabi_ddiv+0x2ae>
 8000cda:	464b      	mov	r3, r9
 8000cdc:	07dc      	lsls	r4, r3, #31
 8000cde:	0858      	lsrs	r0, r3, #1
 8000ce0:	087b      	lsrs	r3, r7, #1
 8000ce2:	431c      	orrs	r4, r3
 8000ce4:	07ff      	lsls	r7, r7, #31
 8000ce6:	e734      	b.n	8000b52 <__aeabi_ddiv+0x2ba>
 8000ce8:	2400      	movs	r4, #0
 8000cea:	42af      	cmp	r7, r5
 8000cec:	d289      	bcs.n	8000c02 <__aeabi_ddiv+0x36a>
 8000cee:	4447      	add	r7, r8
 8000cf0:	4547      	cmp	r7, r8
 8000cf2:	41a4      	sbcs	r4, r4
 8000cf4:	465b      	mov	r3, fp
 8000cf6:	4264      	negs	r4, r4
 8000cf8:	19a4      	adds	r4, r4, r6
 8000cfa:	1864      	adds	r4, r4, r1
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	42a6      	cmp	r6, r4
 8000d00:	d21e      	bcs.n	8000d40 <__aeabi_ddiv+0x4a8>
 8000d02:	42a0      	cmp	r0, r4
 8000d04:	d86d      	bhi.n	8000de2 <__aeabi_ddiv+0x54a>
 8000d06:	d100      	bne.n	8000d0a <__aeabi_ddiv+0x472>
 8000d08:	e0b6      	b.n	8000e78 <__aeabi_ddiv+0x5e0>
 8000d0a:	1a24      	subs	r4, r4, r0
 8000d0c:	469b      	mov	fp, r3
 8000d0e:	e778      	b.n	8000c02 <__aeabi_ddiv+0x36a>
 8000d10:	0003      	movs	r3, r0
 8000d12:	465a      	mov	r2, fp
 8000d14:	3b28      	subs	r3, #40	; 0x28
 8000d16:	409a      	lsls	r2, r3
 8000d18:	2700      	movs	r7, #0
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	e688      	b.n	8000a30 <__aeabi_ddiv+0x198>
 8000d1e:	4658      	mov	r0, fp
 8000d20:	f000 fa02 	bl	8001128 <__clzsi2>
 8000d24:	3020      	adds	r0, #32
 8000d26:	e672      	b.n	8000a0e <__aeabi_ddiv+0x176>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	4652      	mov	r2, sl
 8000d2c:	3b28      	subs	r3, #40	; 0x28
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	4693      	mov	fp, r2
 8000d32:	2200      	movs	r2, #0
 8000d34:	e6b4      	b.n	8000aa0 <__aeabi_ddiv+0x208>
 8000d36:	4650      	mov	r0, sl
 8000d38:	f000 f9f6 	bl	8001128 <__clzsi2>
 8000d3c:	3020      	adds	r0, #32
 8000d3e:	e69a      	b.n	8000a76 <__aeabi_ddiv+0x1de>
 8000d40:	42a6      	cmp	r6, r4
 8000d42:	d1e2      	bne.n	8000d0a <__aeabi_ddiv+0x472>
 8000d44:	45b8      	cmp	r8, r7
 8000d46:	d9dc      	bls.n	8000d02 <__aeabi_ddiv+0x46a>
 8000d48:	1a34      	subs	r4, r6, r0
 8000d4a:	469b      	mov	fp, r3
 8000d4c:	e759      	b.n	8000c02 <__aeabi_ddiv+0x36a>
 8000d4e:	2b1f      	cmp	r3, #31
 8000d50:	dc65      	bgt.n	8000e1e <__aeabi_ddiv+0x586>
 8000d52:	4c50      	ldr	r4, [pc, #320]	; (8000e94 <__aeabi_ddiv+0x5fc>)
 8000d54:	9900      	ldr	r1, [sp, #0]
 8000d56:	46a4      	mov	ip, r4
 8000d58:	465c      	mov	r4, fp
 8000d5a:	4461      	add	r1, ip
 8000d5c:	0008      	movs	r0, r1
 8000d5e:	408c      	lsls	r4, r1
 8000d60:	0011      	movs	r1, r2
 8000d62:	4082      	lsls	r2, r0
 8000d64:	40d9      	lsrs	r1, r3
 8000d66:	1e50      	subs	r0, r2, #1
 8000d68:	4182      	sbcs	r2, r0
 8000d6a:	430c      	orrs	r4, r1
 8000d6c:	4314      	orrs	r4, r2
 8000d6e:	465a      	mov	r2, fp
 8000d70:	40da      	lsrs	r2, r3
 8000d72:	0013      	movs	r3, r2
 8000d74:	0762      	lsls	r2, r4, #29
 8000d76:	d009      	beq.n	8000d8c <__aeabi_ddiv+0x4f4>
 8000d78:	220f      	movs	r2, #15
 8000d7a:	4022      	ands	r2, r4
 8000d7c:	2a04      	cmp	r2, #4
 8000d7e:	d005      	beq.n	8000d8c <__aeabi_ddiv+0x4f4>
 8000d80:	0022      	movs	r2, r4
 8000d82:	1d14      	adds	r4, r2, #4
 8000d84:	4294      	cmp	r4, r2
 8000d86:	4189      	sbcs	r1, r1
 8000d88:	4249      	negs	r1, r1
 8000d8a:	185b      	adds	r3, r3, r1
 8000d8c:	021a      	lsls	r2, r3, #8
 8000d8e:	d562      	bpl.n	8000e56 <__aeabi_ddiv+0x5be>
 8000d90:	2201      	movs	r2, #1
 8000d92:	2300      	movs	r3, #0
 8000d94:	2700      	movs	r7, #0
 8000d96:	e60d      	b.n	80009b4 <__aeabi_ddiv+0x11c>
 8000d98:	428a      	cmp	r2, r1
 8000d9a:	d800      	bhi.n	8000d9e <__aeabi_ddiv+0x506>
 8000d9c:	e70a      	b.n	8000bb4 <__aeabi_ddiv+0x31c>
 8000d9e:	1e83      	subs	r3, r0, #2
 8000da0:	1989      	adds	r1, r1, r6
 8000da2:	e707      	b.n	8000bb4 <__aeabi_ddiv+0x31c>
 8000da4:	230f      	movs	r3, #15
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d100      	bne.n	8000dae <__aeabi_ddiv+0x516>
 8000dac:	e5e6      	b.n	800097c <__aeabi_ddiv+0xe4>
 8000dae:	1d17      	adds	r7, r2, #4
 8000db0:	4297      	cmp	r7, r2
 8000db2:	4192      	sbcs	r2, r2
 8000db4:	4253      	negs	r3, r2
 8000db6:	449b      	add	fp, r3
 8000db8:	08fa      	lsrs	r2, r7, #3
 8000dba:	e5e0      	b.n	800097e <__aeabi_ddiv+0xe6>
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_ddiv+0x52a>
 8000dc0:	e5d7      	b.n	8000972 <__aeabi_ddiv+0xda>
 8000dc2:	1871      	adds	r1, r6, r1
 8000dc4:	1e53      	subs	r3, r2, #1
 8000dc6:	42b1      	cmp	r1, r6
 8000dc8:	d327      	bcc.n	8000e1a <__aeabi_ddiv+0x582>
 8000dca:	42a9      	cmp	r1, r5
 8000dcc:	d315      	bcc.n	8000dfa <__aeabi_ddiv+0x562>
 8000dce:	d058      	beq.n	8000e82 <__aeabi_ddiv+0x5ea>
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	e773      	b.n	8000cbc <__aeabi_ddiv+0x424>
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	dc00      	bgt.n	8000dda <__aeabi_ddiv+0x542>
 8000dd8:	e604      	b.n	80009e4 <__aeabi_ddiv+0x14c>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	2200      	movs	r2, #0
 8000dde:	449b      	add	fp, r3
 8000de0:	e5cd      	b.n	800097e <__aeabi_ddiv+0xe6>
 8000de2:	2302      	movs	r3, #2
 8000de4:	4447      	add	r7, r8
 8000de6:	4547      	cmp	r7, r8
 8000de8:	4189      	sbcs	r1, r1
 8000dea:	425b      	negs	r3, r3
 8000dec:	469c      	mov	ip, r3
 8000dee:	4249      	negs	r1, r1
 8000df0:	1989      	adds	r1, r1, r6
 8000df2:	190c      	adds	r4, r1, r4
 8000df4:	44e3      	add	fp, ip
 8000df6:	1a24      	subs	r4, r4, r0
 8000df8:	e703      	b.n	8000c02 <__aeabi_ddiv+0x36a>
 8000dfa:	4643      	mov	r3, r8
 8000dfc:	005f      	lsls	r7, r3, #1
 8000dfe:	4547      	cmp	r7, r8
 8000e00:	419b      	sbcs	r3, r3
 8000e02:	46b8      	mov	r8, r7
 8000e04:	425b      	negs	r3, r3
 8000e06:	199e      	adds	r6, r3, r6
 8000e08:	3a02      	subs	r2, #2
 8000e0a:	1989      	adds	r1, r1, r6
 8000e0c:	42a9      	cmp	r1, r5
 8000e0e:	d000      	beq.n	8000e12 <__aeabi_ddiv+0x57a>
 8000e10:	e754      	b.n	8000cbc <__aeabi_ddiv+0x424>
 8000e12:	4540      	cmp	r0, r8
 8000e14:	d000      	beq.n	8000e18 <__aeabi_ddiv+0x580>
 8000e16:	e751      	b.n	8000cbc <__aeabi_ddiv+0x424>
 8000e18:	e5ab      	b.n	8000972 <__aeabi_ddiv+0xda>
 8000e1a:	001a      	movs	r2, r3
 8000e1c:	e7f6      	b.n	8000e0c <__aeabi_ddiv+0x574>
 8000e1e:	211f      	movs	r1, #31
 8000e20:	465f      	mov	r7, fp
 8000e22:	4249      	negs	r1, r1
 8000e24:	1b0c      	subs	r4, r1, r4
 8000e26:	40e7      	lsrs	r7, r4
 8000e28:	2b20      	cmp	r3, #32
 8000e2a:	d007      	beq.n	8000e3c <__aeabi_ddiv+0x5a4>
 8000e2c:	491a      	ldr	r1, [pc, #104]	; (8000e98 <__aeabi_ddiv+0x600>)
 8000e2e:	9b00      	ldr	r3, [sp, #0]
 8000e30:	468c      	mov	ip, r1
 8000e32:	4463      	add	r3, ip
 8000e34:	0018      	movs	r0, r3
 8000e36:	465b      	mov	r3, fp
 8000e38:	4083      	lsls	r3, r0
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	1e50      	subs	r0, r2, #1
 8000e3e:	4182      	sbcs	r2, r0
 8000e40:	433a      	orrs	r2, r7
 8000e42:	2707      	movs	r7, #7
 8000e44:	2300      	movs	r3, #0
 8000e46:	4017      	ands	r7, r2
 8000e48:	d009      	beq.n	8000e5e <__aeabi_ddiv+0x5c6>
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	4011      	ands	r1, r2
 8000e50:	0014      	movs	r4, r2
 8000e52:	2904      	cmp	r1, #4
 8000e54:	d195      	bne.n	8000d82 <__aeabi_ddiv+0x4ea>
 8000e56:	0022      	movs	r2, r4
 8000e58:	075f      	lsls	r7, r3, #29
 8000e5a:	025b      	lsls	r3, r3, #9
 8000e5c:	0b1b      	lsrs	r3, r3, #12
 8000e5e:	08d2      	lsrs	r2, r2, #3
 8000e60:	4317      	orrs	r7, r2
 8000e62:	2200      	movs	r2, #0
 8000e64:	e5a6      	b.n	80009b4 <__aeabi_ddiv+0x11c>
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	4659      	mov	r1, fp
 8000e6a:	031b      	lsls	r3, r3, #12
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	031b      	lsls	r3, r3, #12
 8000e70:	0017      	movs	r7, r2
 8000e72:	0b1b      	lsrs	r3, r3, #12
 8000e74:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <__aeabi_ddiv+0x5f8>)
 8000e76:	e59d      	b.n	80009b4 <__aeabi_ddiv+0x11c>
 8000e78:	42bd      	cmp	r5, r7
 8000e7a:	d8b2      	bhi.n	8000de2 <__aeabi_ddiv+0x54a>
 8000e7c:	469b      	mov	fp, r3
 8000e7e:	2400      	movs	r4, #0
 8000e80:	e6bf      	b.n	8000c02 <__aeabi_ddiv+0x36a>
 8000e82:	4580      	cmp	r8, r0
 8000e84:	d3b9      	bcc.n	8000dfa <__aeabi_ddiv+0x562>
 8000e86:	001a      	movs	r2, r3
 8000e88:	e7c3      	b.n	8000e12 <__aeabi_ddiv+0x57a>
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	000003ff 	.word	0x000003ff
 8000e90:	000007ff 	.word	0x000007ff
 8000e94:	0000041e 	.word	0x0000041e
 8000e98:	0000043e 	.word	0x0000043e

08000e9c <__aeabi_d2iz>:
 8000e9c:	b530      	push	{r4, r5, lr}
 8000e9e:	4d14      	ldr	r5, [pc, #80]	; (8000ef0 <__aeabi_d2iz+0x54>)
 8000ea0:	030a      	lsls	r2, r1, #12
 8000ea2:	004b      	lsls	r3, r1, #1
 8000ea4:	0b12      	lsrs	r2, r2, #12
 8000ea6:	0d5b      	lsrs	r3, r3, #21
 8000ea8:	0fc9      	lsrs	r1, r1, #31
 8000eaa:	2400      	movs	r4, #0
 8000eac:	42ab      	cmp	r3, r5
 8000eae:	dd11      	ble.n	8000ed4 <__aeabi_d2iz+0x38>
 8000eb0:	4c10      	ldr	r4, [pc, #64]	; (8000ef4 <__aeabi_d2iz+0x58>)
 8000eb2:	42a3      	cmp	r3, r4
 8000eb4:	dc10      	bgt.n	8000ed8 <__aeabi_d2iz+0x3c>
 8000eb6:	2480      	movs	r4, #128	; 0x80
 8000eb8:	0364      	lsls	r4, r4, #13
 8000eba:	4322      	orrs	r2, r4
 8000ebc:	4c0e      	ldr	r4, [pc, #56]	; (8000ef8 <__aeabi_d2iz+0x5c>)
 8000ebe:	1ae4      	subs	r4, r4, r3
 8000ec0:	2c1f      	cmp	r4, #31
 8000ec2:	dd0c      	ble.n	8000ede <__aeabi_d2iz+0x42>
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <__aeabi_d2iz+0x60>)
 8000ec6:	1ac3      	subs	r3, r0, r3
 8000ec8:	40da      	lsrs	r2, r3
 8000eca:	0013      	movs	r3, r2
 8000ecc:	425c      	negs	r4, r3
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_d2iz+0x38>
 8000ed2:	001c      	movs	r4, r3
 8000ed4:	0020      	movs	r0, r4
 8000ed6:	bd30      	pop	{r4, r5, pc}
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <__aeabi_d2iz+0x64>)
 8000eda:	18cc      	adds	r4, r1, r3
 8000edc:	e7fa      	b.n	8000ed4 <__aeabi_d2iz+0x38>
 8000ede:	4d09      	ldr	r5, [pc, #36]	; (8000f04 <__aeabi_d2iz+0x68>)
 8000ee0:	40e0      	lsrs	r0, r4
 8000ee2:	46ac      	mov	ip, r5
 8000ee4:	4463      	add	r3, ip
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	4303      	orrs	r3, r0
 8000eec:	e7ee      	b.n	8000ecc <__aeabi_d2iz+0x30>
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	000003fe 	.word	0x000003fe
 8000ef4:	0000041d 	.word	0x0000041d
 8000ef8:	00000433 	.word	0x00000433
 8000efc:	00000413 	.word	0x00000413
 8000f00:	7fffffff 	.word	0x7fffffff
 8000f04:	fffffbed 	.word	0xfffffbed

08000f08 <__aeabi_i2d>:
 8000f08:	b570      	push	{r4, r5, r6, lr}
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d02d      	beq.n	8000f6a <__aeabi_i2d+0x62>
 8000f0e:	17c3      	asrs	r3, r0, #31
 8000f10:	18c5      	adds	r5, r0, r3
 8000f12:	405d      	eors	r5, r3
 8000f14:	0fc4      	lsrs	r4, r0, #31
 8000f16:	0028      	movs	r0, r5
 8000f18:	f000 f906 	bl	8001128 <__clzsi2>
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <__aeabi_i2d+0x6c>)
 8000f1e:	1a1b      	subs	r3, r3, r0
 8000f20:	055b      	lsls	r3, r3, #21
 8000f22:	0d5b      	lsrs	r3, r3, #21
 8000f24:	280a      	cmp	r0, #10
 8000f26:	dd15      	ble.n	8000f54 <__aeabi_i2d+0x4c>
 8000f28:	380b      	subs	r0, #11
 8000f2a:	4085      	lsls	r5, r0
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	032d      	lsls	r5, r5, #12
 8000f30:	0b2d      	lsrs	r5, r5, #12
 8000f32:	2100      	movs	r1, #0
 8000f34:	0010      	movs	r0, r2
 8000f36:	032d      	lsls	r5, r5, #12
 8000f38:	0d0a      	lsrs	r2, r1, #20
 8000f3a:	0b2d      	lsrs	r5, r5, #12
 8000f3c:	0512      	lsls	r2, r2, #20
 8000f3e:	432a      	orrs	r2, r5
 8000f40:	4d0d      	ldr	r5, [pc, #52]	; (8000f78 <__aeabi_i2d+0x70>)
 8000f42:	051b      	lsls	r3, r3, #20
 8000f44:	402a      	ands	r2, r5
 8000f46:	4313      	orrs	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	07e4      	lsls	r4, r4, #31
 8000f4c:	085b      	lsrs	r3, r3, #1
 8000f4e:	4323      	orrs	r3, r4
 8000f50:	0019      	movs	r1, r3
 8000f52:	bd70      	pop	{r4, r5, r6, pc}
 8000f54:	0002      	movs	r2, r0
 8000f56:	0029      	movs	r1, r5
 8000f58:	3215      	adds	r2, #21
 8000f5a:	4091      	lsls	r1, r2
 8000f5c:	000a      	movs	r2, r1
 8000f5e:	210b      	movs	r1, #11
 8000f60:	1a08      	subs	r0, r1, r0
 8000f62:	40c5      	lsrs	r5, r0
 8000f64:	032d      	lsls	r5, r5, #12
 8000f66:	0b2d      	lsrs	r5, r5, #12
 8000f68:	e7e3      	b.n	8000f32 <__aeabi_i2d+0x2a>
 8000f6a:	2400      	movs	r4, #0
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	2500      	movs	r5, #0
 8000f70:	2200      	movs	r2, #0
 8000f72:	e7de      	b.n	8000f32 <__aeabi_i2d+0x2a>
 8000f74:	0000041e 	.word	0x0000041e
 8000f78:	800fffff 	.word	0x800fffff

08000f7c <__aeabi_f2d>:
 8000f7c:	0041      	lsls	r1, r0, #1
 8000f7e:	0e09      	lsrs	r1, r1, #24
 8000f80:	1c4b      	adds	r3, r1, #1
 8000f82:	b570      	push	{r4, r5, r6, lr}
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	0246      	lsls	r6, r0, #9
 8000f88:	0a75      	lsrs	r5, r6, #9
 8000f8a:	0fc4      	lsrs	r4, r0, #31
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	dd14      	ble.n	8000fba <__aeabi_f2d+0x3e>
 8000f90:	23e0      	movs	r3, #224	; 0xe0
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	076d      	lsls	r5, r5, #29
 8000f96:	0b36      	lsrs	r6, r6, #12
 8000f98:	18cb      	adds	r3, r1, r3
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	0d0a      	lsrs	r2, r1, #20
 8000f9e:	0028      	movs	r0, r5
 8000fa0:	0512      	lsls	r2, r2, #20
 8000fa2:	4d1c      	ldr	r5, [pc, #112]	; (8001014 <__aeabi_f2d+0x98>)
 8000fa4:	4332      	orrs	r2, r6
 8000fa6:	055b      	lsls	r3, r3, #21
 8000fa8:	402a      	ands	r2, r5
 8000faa:	085b      	lsrs	r3, r3, #1
 8000fac:	4313      	orrs	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	07e4      	lsls	r4, r4, #31
 8000fb2:	085b      	lsrs	r3, r3, #1
 8000fb4:	4323      	orrs	r3, r4
 8000fb6:	0019      	movs	r1, r3
 8000fb8:	bd70      	pop	{r4, r5, r6, pc}
 8000fba:	2900      	cmp	r1, #0
 8000fbc:	d114      	bne.n	8000fe8 <__aeabi_f2d+0x6c>
 8000fbe:	2d00      	cmp	r5, #0
 8000fc0:	d01e      	beq.n	8001000 <__aeabi_f2d+0x84>
 8000fc2:	0028      	movs	r0, r5
 8000fc4:	f000 f8b0 	bl	8001128 <__clzsi2>
 8000fc8:	280a      	cmp	r0, #10
 8000fca:	dc1c      	bgt.n	8001006 <__aeabi_f2d+0x8a>
 8000fcc:	230b      	movs	r3, #11
 8000fce:	002a      	movs	r2, r5
 8000fd0:	1a1b      	subs	r3, r3, r0
 8000fd2:	40da      	lsrs	r2, r3
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	3315      	adds	r3, #21
 8000fd8:	409d      	lsls	r5, r3
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <__aeabi_f2d+0x9c>)
 8000fdc:	0312      	lsls	r2, r2, #12
 8000fde:	1a1b      	subs	r3, r3, r0
 8000fe0:	055b      	lsls	r3, r3, #21
 8000fe2:	0b16      	lsrs	r6, r2, #12
 8000fe4:	0d5b      	lsrs	r3, r3, #21
 8000fe6:	e7d8      	b.n	8000f9a <__aeabi_f2d+0x1e>
 8000fe8:	2d00      	cmp	r5, #0
 8000fea:	d006      	beq.n	8000ffa <__aeabi_f2d+0x7e>
 8000fec:	0b32      	lsrs	r2, r6, #12
 8000fee:	2680      	movs	r6, #128	; 0x80
 8000ff0:	0336      	lsls	r6, r6, #12
 8000ff2:	076d      	lsls	r5, r5, #29
 8000ff4:	4316      	orrs	r6, r2
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <__aeabi_f2d+0xa0>)
 8000ff8:	e7cf      	b.n	8000f9a <__aeabi_f2d+0x1e>
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <__aeabi_f2d+0xa0>)
 8000ffc:	2600      	movs	r6, #0
 8000ffe:	e7cc      	b.n	8000f9a <__aeabi_f2d+0x1e>
 8001000:	2300      	movs	r3, #0
 8001002:	2600      	movs	r6, #0
 8001004:	e7c9      	b.n	8000f9a <__aeabi_f2d+0x1e>
 8001006:	0003      	movs	r3, r0
 8001008:	002a      	movs	r2, r5
 800100a:	3b0b      	subs	r3, #11
 800100c:	409a      	lsls	r2, r3
 800100e:	2500      	movs	r5, #0
 8001010:	e7e3      	b.n	8000fda <__aeabi_f2d+0x5e>
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	800fffff 	.word	0x800fffff
 8001018:	00000389 	.word	0x00000389
 800101c:	000007ff 	.word	0x000007ff

08001020 <__aeabi_d2f>:
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	004c      	lsls	r4, r1, #1
 8001024:	0d64      	lsrs	r4, r4, #21
 8001026:	030b      	lsls	r3, r1, #12
 8001028:	1c62      	adds	r2, r4, #1
 800102a:	0a5b      	lsrs	r3, r3, #9
 800102c:	0f46      	lsrs	r6, r0, #29
 800102e:	0552      	lsls	r2, r2, #21
 8001030:	0fc9      	lsrs	r1, r1, #31
 8001032:	431e      	orrs	r6, r3
 8001034:	00c5      	lsls	r5, r0, #3
 8001036:	0d52      	lsrs	r2, r2, #21
 8001038:	2a01      	cmp	r2, #1
 800103a:	dd29      	ble.n	8001090 <__aeabi_d2f+0x70>
 800103c:	4b37      	ldr	r3, [pc, #220]	; (800111c <__aeabi_d2f+0xfc>)
 800103e:	18e7      	adds	r7, r4, r3
 8001040:	2ffe      	cmp	r7, #254	; 0xfe
 8001042:	dc1c      	bgt.n	800107e <__aeabi_d2f+0x5e>
 8001044:	2f00      	cmp	r7, #0
 8001046:	dd3b      	ble.n	80010c0 <__aeabi_d2f+0xa0>
 8001048:	0180      	lsls	r0, r0, #6
 800104a:	1e43      	subs	r3, r0, #1
 800104c:	4198      	sbcs	r0, r3
 800104e:	2207      	movs	r2, #7
 8001050:	00f3      	lsls	r3, r6, #3
 8001052:	0f6d      	lsrs	r5, r5, #29
 8001054:	4303      	orrs	r3, r0
 8001056:	432b      	orrs	r3, r5
 8001058:	401a      	ands	r2, r3
 800105a:	2a00      	cmp	r2, #0
 800105c:	d004      	beq.n	8001068 <__aeabi_d2f+0x48>
 800105e:	220f      	movs	r2, #15
 8001060:	401a      	ands	r2, r3
 8001062:	2a04      	cmp	r2, #4
 8001064:	d000      	beq.n	8001068 <__aeabi_d2f+0x48>
 8001066:	3304      	adds	r3, #4
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	04d2      	lsls	r2, r2, #19
 800106c:	401a      	ands	r2, r3
 800106e:	d024      	beq.n	80010ba <__aeabi_d2f+0x9a>
 8001070:	3701      	adds	r7, #1
 8001072:	b2fa      	uxtb	r2, r7
 8001074:	2fff      	cmp	r7, #255	; 0xff
 8001076:	d002      	beq.n	800107e <__aeabi_d2f+0x5e>
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	0a58      	lsrs	r0, r3, #9
 800107c:	e001      	b.n	8001082 <__aeabi_d2f+0x62>
 800107e:	22ff      	movs	r2, #255	; 0xff
 8001080:	2000      	movs	r0, #0
 8001082:	0240      	lsls	r0, r0, #9
 8001084:	05d2      	lsls	r2, r2, #23
 8001086:	0a40      	lsrs	r0, r0, #9
 8001088:	07c9      	lsls	r1, r1, #31
 800108a:	4310      	orrs	r0, r2
 800108c:	4308      	orrs	r0, r1
 800108e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001090:	4335      	orrs	r5, r6
 8001092:	2c00      	cmp	r4, #0
 8001094:	d104      	bne.n	80010a0 <__aeabi_d2f+0x80>
 8001096:	2d00      	cmp	r5, #0
 8001098:	d10a      	bne.n	80010b0 <__aeabi_d2f+0x90>
 800109a:	2200      	movs	r2, #0
 800109c:	2000      	movs	r0, #0
 800109e:	e7f0      	b.n	8001082 <__aeabi_d2f+0x62>
 80010a0:	2d00      	cmp	r5, #0
 80010a2:	d0ec      	beq.n	800107e <__aeabi_d2f+0x5e>
 80010a4:	2080      	movs	r0, #128	; 0x80
 80010a6:	03c0      	lsls	r0, r0, #15
 80010a8:	4330      	orrs	r0, r6
 80010aa:	22ff      	movs	r2, #255	; 0xff
 80010ac:	e7e9      	b.n	8001082 <__aeabi_d2f+0x62>
 80010ae:	2400      	movs	r4, #0
 80010b0:	2300      	movs	r3, #0
 80010b2:	025b      	lsls	r3, r3, #9
 80010b4:	0a58      	lsrs	r0, r3, #9
 80010b6:	b2e2      	uxtb	r2, r4
 80010b8:	e7e3      	b.n	8001082 <__aeabi_d2f+0x62>
 80010ba:	08db      	lsrs	r3, r3, #3
 80010bc:	003c      	movs	r4, r7
 80010be:	e7f8      	b.n	80010b2 <__aeabi_d2f+0x92>
 80010c0:	003b      	movs	r3, r7
 80010c2:	3317      	adds	r3, #23
 80010c4:	dbf3      	blt.n	80010ae <__aeabi_d2f+0x8e>
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	041b      	lsls	r3, r3, #16
 80010ca:	4333      	orrs	r3, r6
 80010cc:	261e      	movs	r6, #30
 80010ce:	1bf6      	subs	r6, r6, r7
 80010d0:	2e1f      	cmp	r6, #31
 80010d2:	dd14      	ble.n	80010fe <__aeabi_d2f+0xde>
 80010d4:	2202      	movs	r2, #2
 80010d6:	4252      	negs	r2, r2
 80010d8:	1bd7      	subs	r7, r2, r7
 80010da:	001a      	movs	r2, r3
 80010dc:	40fa      	lsrs	r2, r7
 80010de:	0017      	movs	r7, r2
 80010e0:	2e20      	cmp	r6, #32
 80010e2:	d004      	beq.n	80010ee <__aeabi_d2f+0xce>
 80010e4:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <__aeabi_d2f+0x100>)
 80010e6:	4694      	mov	ip, r2
 80010e8:	4464      	add	r4, ip
 80010ea:	40a3      	lsls	r3, r4
 80010ec:	431d      	orrs	r5, r3
 80010ee:	002b      	movs	r3, r5
 80010f0:	1e5d      	subs	r5, r3, #1
 80010f2:	41ab      	sbcs	r3, r5
 80010f4:	2207      	movs	r2, #7
 80010f6:	433b      	orrs	r3, r7
 80010f8:	401a      	ands	r2, r3
 80010fa:	2700      	movs	r7, #0
 80010fc:	e7ad      	b.n	800105a <__aeabi_d2f+0x3a>
 80010fe:	4a09      	ldr	r2, [pc, #36]	; (8001124 <__aeabi_d2f+0x104>)
 8001100:	0028      	movs	r0, r5
 8001102:	18a2      	adds	r2, r4, r2
 8001104:	4095      	lsls	r5, r2
 8001106:	4093      	lsls	r3, r2
 8001108:	1e6c      	subs	r4, r5, #1
 800110a:	41a5      	sbcs	r5, r4
 800110c:	40f0      	lsrs	r0, r6
 800110e:	2207      	movs	r2, #7
 8001110:	432b      	orrs	r3, r5
 8001112:	4303      	orrs	r3, r0
 8001114:	401a      	ands	r2, r3
 8001116:	2700      	movs	r7, #0
 8001118:	e79f      	b.n	800105a <__aeabi_d2f+0x3a>
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	fffffc80 	.word	0xfffffc80
 8001120:	fffffca2 	.word	0xfffffca2
 8001124:	fffffc82 	.word	0xfffffc82

08001128 <__clzsi2>:
 8001128:	211c      	movs	r1, #28
 800112a:	2301      	movs	r3, #1
 800112c:	041b      	lsls	r3, r3, #16
 800112e:	4298      	cmp	r0, r3
 8001130:	d301      	bcc.n	8001136 <__clzsi2+0xe>
 8001132:	0c00      	lsrs	r0, r0, #16
 8001134:	3910      	subs	r1, #16
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	4298      	cmp	r0, r3
 800113a:	d301      	bcc.n	8001140 <__clzsi2+0x18>
 800113c:	0a00      	lsrs	r0, r0, #8
 800113e:	3908      	subs	r1, #8
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	4298      	cmp	r0, r3
 8001144:	d301      	bcc.n	800114a <__clzsi2+0x22>
 8001146:	0900      	lsrs	r0, r0, #4
 8001148:	3904      	subs	r1, #4
 800114a:	a202      	add	r2, pc, #8	; (adr r2, 8001154 <__clzsi2+0x2c>)
 800114c:	5c10      	ldrb	r0, [r2, r0]
 800114e:	1840      	adds	r0, r0, r1
 8001150:	4770      	bx	lr
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	02020304 	.word	0x02020304
 8001158:	01010101 	.word	0x01010101
	...

08001164 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_Init+0x3c>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_Init+0x3c>)
 8001176:	2140      	movs	r1, #64	; 0x40
 8001178:	430a      	orrs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800117c:	2000      	movs	r0, #0
 800117e:	f000 f811 	bl	80011a4 <HAL_InitTick>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d003      	beq.n	800118e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	e001      	b.n	8001192 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800118e:	f003 fd91 	bl	8004cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	781b      	ldrb	r3, [r3, #0]
}
 8001196:	0018      	movs	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	40022000 	.word	0x40022000

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011ac:	230f      	movs	r3, #15
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HAL_InitTick+0x50>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	23fa      	movs	r3, #250	; 0xfa
 80011ba:	0099      	lsls	r1, r3, #2
 80011bc:	0010      	movs	r0, r2
 80011be:	f7fe ffa3 	bl	8000108 <__udivsi3>
 80011c2:	0003      	movs	r3, r0
 80011c4:	0018      	movs	r0, r3
 80011c6:	f000 f8f2 	bl	80013ae <HAL_SYSTICK_Config>
 80011ca:	1e03      	subs	r3, r0, #0
 80011cc:	d004      	beq.n	80011d8 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80011ce:	230f      	movs	r3, #15
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	e006      	b.n	80011e6 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	2301      	movs	r3, #1
 80011dc:	425b      	negs	r3, r3
 80011de:	2200      	movs	r2, #0
 80011e0:	0018      	movs	r0, r3
 80011e2:	f000 f8cf 	bl	8001384 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80011e6:	230f      	movs	r3, #15
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	781b      	ldrb	r3, [r3, #0]
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b004      	add	sp, #16
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000000 	.word	0x20000000

080011f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  uwTick++;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_IncTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	4b02      	ldr	r3, [pc, #8]	; (800120c <HAL_IncTick+0x14>)
 8001204:	601a      	str	r2, [r3, #0]
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000090 	.word	0x20000090

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b02      	ldr	r3, [pc, #8]	; (8001220 <HAL_GetTick+0x10>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	20000090 	.word	0x20000090

08001224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff fff0 	bl	8001210 <HAL_GetTick>
 8001230:	0003      	movs	r3, r0
 8001232:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3301      	adds	r3, #1
 800123c:	d002      	beq.n	8001244 <HAL_Delay+0x20>
  {
    wait++;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3301      	adds	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	f7ff ffe3 	bl	8001210 <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	429a      	cmp	r2, r3
 8001254:	d8f7      	bhi.n	8001246 <HAL_Delay+0x22>
  {
  }
}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b004      	add	sp, #16
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	0002      	movs	r2, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b7f      	cmp	r3, #127	; 0x7f
 8001274:	d932      	bls.n	80012dc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001276:	4a2f      	ldr	r2, [pc, #188]	; (8001334 <NVIC_SetPriority+0xd4>)
 8001278:	1dfb      	adds	r3, r7, #7
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	0019      	movs	r1, r3
 800127e:	230f      	movs	r3, #15
 8001280:	400b      	ands	r3, r1
 8001282:	3b08      	subs	r3, #8
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3306      	adds	r3, #6
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	18d3      	adds	r3, r2, r3
 800128c:	3304      	adds	r3, #4
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	1dfa      	adds	r2, r7, #7
 8001292:	7812      	ldrb	r2, [r2, #0]
 8001294:	0011      	movs	r1, r2
 8001296:	2203      	movs	r2, #3
 8001298:	400a      	ands	r2, r1
 800129a:	00d2      	lsls	r2, r2, #3
 800129c:	21ff      	movs	r1, #255	; 0xff
 800129e:	4091      	lsls	r1, r2
 80012a0:	000a      	movs	r2, r1
 80012a2:	43d2      	mvns	r2, r2
 80012a4:	401a      	ands	r2, r3
 80012a6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	019b      	lsls	r3, r3, #6
 80012ac:	22ff      	movs	r2, #255	; 0xff
 80012ae:	401a      	ands	r2, r3
 80012b0:	1dfb      	adds	r3, r7, #7
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	0018      	movs	r0, r3
 80012b6:	2303      	movs	r3, #3
 80012b8:	4003      	ands	r3, r0
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012be:	481d      	ldr	r0, [pc, #116]	; (8001334 <NVIC_SetPriority+0xd4>)
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	001c      	movs	r4, r3
 80012c6:	230f      	movs	r3, #15
 80012c8:	4023      	ands	r3, r4
 80012ca:	3b08      	subs	r3, #8
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	430a      	orrs	r2, r1
 80012d0:	3306      	adds	r3, #6
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	18c3      	adds	r3, r0, r3
 80012d6:	3304      	adds	r3, #4
 80012d8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012da:	e027      	b.n	800132c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012dc:	4a16      	ldr	r2, [pc, #88]	; (8001338 <NVIC_SetPriority+0xd8>)
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	33c0      	adds	r3, #192	; 0xc0
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	589b      	ldr	r3, [r3, r2]
 80012ec:	1dfa      	adds	r2, r7, #7
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	0011      	movs	r1, r2
 80012f2:	2203      	movs	r2, #3
 80012f4:	400a      	ands	r2, r1
 80012f6:	00d2      	lsls	r2, r2, #3
 80012f8:	21ff      	movs	r1, #255	; 0xff
 80012fa:	4091      	lsls	r1, r2
 80012fc:	000a      	movs	r2, r1
 80012fe:	43d2      	mvns	r2, r2
 8001300:	401a      	ands	r2, r3
 8001302:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	22ff      	movs	r2, #255	; 0xff
 800130a:	401a      	ands	r2, r3
 800130c:	1dfb      	adds	r3, r7, #7
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	0018      	movs	r0, r3
 8001312:	2303      	movs	r3, #3
 8001314:	4003      	ands	r3, r0
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800131a:	4807      	ldr	r0, [pc, #28]	; (8001338 <NVIC_SetPriority+0xd8>)
 800131c:	1dfb      	adds	r3, r7, #7
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b25b      	sxtb	r3, r3
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	430a      	orrs	r2, r1
 8001326:	33c0      	adds	r3, #192	; 0xc0
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	501a      	str	r2, [r3, r0]
}
 800132c:	46c0      	nop			; (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	b003      	add	sp, #12
 8001332:	bd90      	pop	{r4, r7, pc}
 8001334:	e000ed00 	.word	0xe000ed00
 8001338:	e000e100 	.word	0xe000e100

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	4a0c      	ldr	r2, [pc, #48]	; (800137c <SysTick_Config+0x40>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d901      	bls.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e010      	b.n	8001374 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <SysTick_Config+0x44>)
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	3a01      	subs	r2, #1
 8001358:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	2301      	movs	r3, #1
 800135c:	425b      	negs	r3, r3
 800135e:	2103      	movs	r1, #3
 8001360:	0018      	movs	r0, r3
 8001362:	f7ff ff7d 	bl	8001260 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <SysTick_Config+0x44>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SysTick_Config+0x44>)
 800136e:	2207      	movs	r2, #7
 8001370:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001372:	2300      	movs	r3, #0
}
 8001374:	0018      	movs	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	b002      	add	sp, #8
 800137a:	bd80      	pop	{r7, pc}
 800137c:	00ffffff 	.word	0x00ffffff
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	210f      	movs	r1, #15
 8001390:	187b      	adds	r3, r7, r1
 8001392:	1c02      	adds	r2, r0, #0
 8001394:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	187b      	adds	r3, r7, r1
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b25b      	sxtb	r3, r3
 800139e:	0011      	movs	r1, r2
 80013a0:	0018      	movs	r0, r3
 80013a2:	f7ff ff5d 	bl	8001260 <NVIC_SetPriority>
}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b004      	add	sp, #16
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff ffbf 	bl	800133c <SysTick_Config>
 80013be:	0003      	movs	r3, r0
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b002      	add	sp, #8
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d106      	bne.n	80013e4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80013dc:	2104      	movs	r1, #4
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80013e2:	e005      	b.n	80013f0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80013ea:	2104      	movs	r1, #4
 80013ec:	438a      	bics	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b002      	add	sp, #8
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001412:	e14f      	b.n	80016b4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2101      	movs	r1, #1
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4091      	lsls	r1, r2
 800141e:	000a      	movs	r2, r1
 8001420:	4013      	ands	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d100      	bne.n	800142c <HAL_GPIO_Init+0x30>
 800142a:	e140      	b.n	80016ae <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x40>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b12      	cmp	r3, #18
 800143a:	d123      	bne.n	8001484 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	08da      	lsrs	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3208      	adds	r2, #8
 8001444:	0092      	lsls	r2, r2, #2
 8001446:	58d3      	ldr	r3, [r2, r3]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2207      	movs	r2, #7
 800144e:	4013      	ands	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	220f      	movs	r2, #15
 8001454:	409a      	lsls	r2, r3
 8001456:	0013      	movs	r3, r2
 8001458:	43da      	mvns	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2107      	movs	r1, #7
 8001468:	400b      	ands	r3, r1
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	409a      	lsls	r2, r3
 800146e:	0013      	movs	r3, r2
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	08da      	lsrs	r2, r3, #3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3208      	adds	r2, #8
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	6939      	ldr	r1, [r7, #16]
 8001482:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d00b      	beq.n	80014a4 <HAL_GPIO_Init+0xa8>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d007      	beq.n	80014a4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001498:	2b11      	cmp	r3, #17
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b12      	cmp	r3, #18
 80014a2:	d130      	bne.n	8001506 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	409a      	lsls	r2, r3
 80014b2:	0013      	movs	r3, r2
 80014b4:	43da      	mvns	r2, r3
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	409a      	lsls	r2, r3
 80014c6:	0013      	movs	r3, r2
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014da:	2201      	movs	r2, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	43da      	mvns	r2, r3
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	2201      	movs	r2, #1
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	2203      	movs	r2, #3
 8001512:	409a      	lsls	r2, r3
 8001514:	0013      	movs	r3, r2
 8001516:	43da      	mvns	r2, r3
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2203      	movs	r2, #3
 8001524:	401a      	ands	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	409a      	lsls	r2, r3
 800152c:	0013      	movs	r3, r2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	2203      	movs	r2, #3
 8001546:	409a      	lsls	r2, r3
 8001548:	0013      	movs	r3, r2
 800154a:	43da      	mvns	r2, r3
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	409a      	lsls	r2, r3
 800155c:	0013      	movs	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	055b      	lsls	r3, r3, #21
 8001572:	4013      	ands	r3, r2
 8001574:	d100      	bne.n	8001578 <HAL_GPIO_Init+0x17c>
 8001576:	e09a      	b.n	80016ae <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001578:	4b54      	ldr	r3, [pc, #336]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 800157a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157c:	4b53      	ldr	r3, [pc, #332]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 800157e:	2101      	movs	r1, #1
 8001580:	430a      	orrs	r2, r1
 8001582:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001584:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <HAL_GPIO_Init+0x2d4>)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	589b      	ldr	r3, [r3, r2]
 8001590:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2203      	movs	r2, #3
 8001596:	4013      	ands	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	220f      	movs	r2, #15
 800159c:	409a      	lsls	r2, r3
 800159e:	0013      	movs	r3, r2
 80015a0:	43da      	mvns	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	23a0      	movs	r3, #160	; 0xa0
 80015ac:	05db      	lsls	r3, r3, #23
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d019      	beq.n	80015e6 <HAL_GPIO_Init+0x1ea>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a47      	ldr	r2, [pc, #284]	; (80016d4 <HAL_GPIO_Init+0x2d8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d013      	beq.n	80015e2 <HAL_GPIO_Init+0x1e6>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a46      	ldr	r2, [pc, #280]	; (80016d8 <HAL_GPIO_Init+0x2dc>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d00d      	beq.n	80015de <HAL_GPIO_Init+0x1e2>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a45      	ldr	r2, [pc, #276]	; (80016dc <HAL_GPIO_Init+0x2e0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d007      	beq.n	80015da <HAL_GPIO_Init+0x1de>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a44      	ldr	r2, [pc, #272]	; (80016e0 <HAL_GPIO_Init+0x2e4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d101      	bne.n	80015d6 <HAL_GPIO_Init+0x1da>
 80015d2:	2305      	movs	r3, #5
 80015d4:	e008      	b.n	80015e8 <HAL_GPIO_Init+0x1ec>
 80015d6:	2306      	movs	r3, #6
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x1ec>
 80015da:	2303      	movs	r3, #3
 80015dc:	e004      	b.n	80015e8 <HAL_GPIO_Init+0x1ec>
 80015de:	2302      	movs	r3, #2
 80015e0:	e002      	b.n	80015e8 <HAL_GPIO_Init+0x1ec>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x1ec>
 80015e6:	2300      	movs	r3, #0
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	2103      	movs	r1, #3
 80015ec:	400a      	ands	r2, r1
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	4093      	lsls	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f8:	4935      	ldr	r1, [pc, #212]	; (80016d0 <HAL_GPIO_Init+0x2d4>)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001606:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <HAL_GPIO_Init+0x2e8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	43da      	mvns	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	025b      	lsls	r3, r3, #9
 800161e:	4013      	ands	r3, r2
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800162a:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <HAL_GPIO_Init+0x2e8>)
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001630:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <HAL_GPIO_Init+0x2e8>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	43da      	mvns	r2, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	029b      	lsls	r3, r3, #10
 8001648:	4013      	ands	r3, r2
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <HAL_GPIO_Init+0x2e8>)
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <HAL_GPIO_Init+0x2e8>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	43da      	mvns	r2, r3
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	035b      	lsls	r3, r3, #13
 8001672:	4013      	ands	r3, r2
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_GPIO_Init+0x2e8>)
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_GPIO_Init+0x2e8>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	43da      	mvns	r2, r3
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	039b      	lsls	r3, r3, #14
 800169c:	4013      	ands	r3, r2
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_GPIO_Init+0x2e8>)
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	40da      	lsrs	r2, r3
 80016bc:	1e13      	subs	r3, r2, #0
 80016be:	d000      	beq.n	80016c2 <HAL_GPIO_Init+0x2c6>
 80016c0:	e6a8      	b.n	8001414 <HAL_GPIO_Init+0x18>
  }
}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b006      	add	sp, #24
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010000 	.word	0x40010000
 80016d4:	50000400 	.word	0x50000400
 80016d8:	50000800 	.word	0x50000800
 80016dc:	50000c00 	.word	0x50000c00
 80016e0:	50001c00 	.word	0x50001c00
 80016e4:	40010400 	.word	0x40010400

080016e8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	000a      	movs	r2, r1
 80016f2:	1cbb      	adds	r3, r7, #2
 80016f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	1cba      	adds	r2, r7, #2
 80016fc:	8812      	ldrh	r2, [r2, #0]
 80016fe:	4013      	ands	r3, r2
 8001700:	d004      	beq.n	800170c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001702:	230f      	movs	r3, #15
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
 800170a:	e003      	b.n	8001714 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800170c:	230f      	movs	r3, #15
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001714:	230f      	movs	r3, #15
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b004      	add	sp, #16
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	0008      	movs	r0, r1
 800172c:	0011      	movs	r1, r2
 800172e:	1cbb      	adds	r3, r7, #2
 8001730:	1c02      	adds	r2, r0, #0
 8001732:	801a      	strh	r2, [r3, #0]
 8001734:	1c7b      	adds	r3, r7, #1
 8001736:	1c0a      	adds	r2, r1, #0
 8001738:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800173a:	1c7b      	adds	r3, r7, #1
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d004      	beq.n	800174c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001742:	1cbb      	adds	r3, r7, #2
 8001744:	881a      	ldrh	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800174a:	e003      	b.n	8001754 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800174c:	1cbb      	adds	r3, r7, #2
 800174e:	881a      	ldrh	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b002      	add	sp, #8
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e082      	b.n	8001874 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2241      	movs	r2, #65	; 0x41
 8001772:	5c9b      	ldrb	r3, [r3, r2]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d107      	bne.n	800178a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2240      	movs	r2, #64	; 0x40
 800177e:	2100      	movs	r1, #0
 8001780:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	0018      	movs	r0, r3
 8001786:	f002 ffd3 	bl	8004730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2241      	movs	r2, #65	; 0x41
 800178e:	2124      	movs	r1, #36	; 0x24
 8001790:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2101      	movs	r1, #1
 800179e:	438a      	bics	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4934      	ldr	r1, [pc, #208]	; (800187c <HAL_I2C_Init+0x120>)
 80017ac:	400a      	ands	r2, r1
 80017ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4931      	ldr	r1, [pc, #196]	; (8001880 <HAL_I2C_Init+0x124>)
 80017bc:	400a      	ands	r2, r1
 80017be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d108      	bne.n	80017da <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	0209      	lsls	r1, r1, #8
 80017d4:	430a      	orrs	r2, r1
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	e007      	b.n	80017ea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2184      	movs	r1, #132	; 0x84
 80017e4:	0209      	lsls	r1, r1, #8
 80017e6:	430a      	orrs	r2, r1
 80017e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d104      	bne.n	80017fc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	0112      	lsls	r2, r2, #4
 80017fa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	491f      	ldr	r1, [pc, #124]	; (8001884 <HAL_I2C_Init+0x128>)
 8001808:	430a      	orrs	r2, r1
 800180a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	491a      	ldr	r1, [pc, #104]	; (8001880 <HAL_I2C_Init+0x124>)
 8001818:	400a      	ands	r2, r1
 800181a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	431a      	orrs	r2, r3
 8001826:	0011      	movs	r1, r2
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	021a      	lsls	r2, r3, #8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69d9      	ldr	r1, [r3, #28]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1a      	ldr	r2, [r3, #32]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2101      	movs	r1, #1
 8001852:	430a      	orrs	r2, r1
 8001854:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2241      	movs	r2, #65	; 0x41
 8001860:	2120      	movs	r1, #32
 8001862:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2242      	movs	r2, #66	; 0x42
 800186e:	2100      	movs	r1, #0
 8001870:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b002      	add	sp, #8
 800187a:	bd80      	pop	{r7, pc}
 800187c:	f0ffffff 	.word	0xf0ffffff
 8001880:	ffff7fff 	.word	0xffff7fff
 8001884:	02008000 	.word	0x02008000

08001888 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af02      	add	r7, sp, #8
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	0008      	movs	r0, r1
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	0019      	movs	r1, r3
 8001896:	230a      	movs	r3, #10
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	1c02      	adds	r2, r0, #0
 800189c:	801a      	strh	r2, [r3, #0]
 800189e:	2308      	movs	r3, #8
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	1c0a      	adds	r2, r1, #0
 80018a4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2241      	movs	r2, #65	; 0x41
 80018aa:	5c9b      	ldrb	r3, [r3, r2]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b20      	cmp	r3, #32
 80018b0:	d000      	beq.n	80018b4 <HAL_I2C_Master_Transmit+0x2c>
 80018b2:	e0e7      	b.n	8001a84 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2240      	movs	r2, #64	; 0x40
 80018b8:	5c9b      	ldrb	r3, [r3, r2]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_I2C_Master_Transmit+0x3a>
 80018be:	2302      	movs	r3, #2
 80018c0:	e0e1      	b.n	8001a86 <HAL_I2C_Master_Transmit+0x1fe>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2240      	movs	r2, #64	; 0x40
 80018c6:	2101      	movs	r1, #1
 80018c8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018ca:	f7ff fca1 	bl	8001210 <HAL_GetTick>
 80018ce:	0003      	movs	r3, r0
 80018d0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	0219      	lsls	r1, r3, #8
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2319      	movs	r3, #25
 80018de:	2201      	movs	r2, #1
 80018e0:	f000 fa04 	bl	8001cec <I2C_WaitOnFlagUntilTimeout>
 80018e4:	1e03      	subs	r3, r0, #0
 80018e6:	d001      	beq.n	80018ec <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0cc      	b.n	8001a86 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2241      	movs	r2, #65	; 0x41
 80018f0:	2121      	movs	r1, #33	; 0x21
 80018f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2242      	movs	r2, #66	; 0x42
 80018f8:	2110      	movs	r1, #16
 80018fa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2208      	movs	r2, #8
 800190c:	18ba      	adds	r2, r7, r2
 800190e:	8812      	ldrh	r2, [r2, #0]
 8001910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191c:	b29b      	uxth	r3, r3
 800191e:	2bff      	cmp	r3, #255	; 0xff
 8001920:	d911      	bls.n	8001946 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	22ff      	movs	r2, #255	; 0xff
 8001926:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192c:	b2da      	uxtb	r2, r3
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	045c      	lsls	r4, r3, #17
 8001932:	230a      	movs	r3, #10
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	8819      	ldrh	r1, [r3, #0]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	4b55      	ldr	r3, [pc, #340]	; (8001a90 <HAL_I2C_Master_Transmit+0x208>)
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	0023      	movs	r3, r4
 8001940:	f000 fb60 	bl	8002004 <I2C_TransferConfig>
 8001944:	e075      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194a:	b29a      	uxth	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001954:	b2da      	uxtb	r2, r3
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	049c      	lsls	r4, r3, #18
 800195a:	230a      	movs	r3, #10
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	8819      	ldrh	r1, [r3, #0]
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	4b4b      	ldr	r3, [pc, #300]	; (8001a90 <HAL_I2C_Master_Transmit+0x208>)
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	0023      	movs	r3, r4
 8001968:	f000 fb4c 	bl	8002004 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800196c:	e061      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	0018      	movs	r0, r3
 8001976:	f000 f9f8 	bl	8001d6a <I2C_WaitOnTXISFlagUntilTimeout>
 800197a:	1e03      	subs	r3, r0, #0
 800197c:	d001      	beq.n	8001982 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e081      	b.n	8001a86 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199c:	b29b      	uxth	r3, r3
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019aa:	3b01      	subs	r3, #1
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d03a      	beq.n	8001a32 <HAL_I2C_Master_Transmit+0x1aa>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d136      	bne.n	8001a32 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	0013      	movs	r3, r2
 80019ce:	2200      	movs	r2, #0
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	f000 f98b 	bl	8001cec <I2C_WaitOnFlagUntilTimeout>
 80019d6:	1e03      	subs	r3, r0, #0
 80019d8:	d001      	beq.n	80019de <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e053      	b.n	8001a86 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	2bff      	cmp	r3, #255	; 0xff
 80019e6:	d911      	bls.n	8001a0c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	22ff      	movs	r2, #255	; 0xff
 80019ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	045c      	lsls	r4, r3, #17
 80019f8:	230a      	movs	r3, #10
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	8819      	ldrh	r1, [r3, #0]
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	2300      	movs	r3, #0
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	0023      	movs	r3, r4
 8001a06:	f000 fafd 	bl	8002004 <I2C_TransferConfig>
 8001a0a:	e012      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	049c      	lsls	r4, r3, #18
 8001a20:	230a      	movs	r3, #10
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	8819      	ldrh	r1, [r3, #0]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	0023      	movs	r3, r4
 8001a2e:	f000 fae9 	bl	8002004 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d198      	bne.n	800196e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	0018      	movs	r0, r3
 8001a44:	f000 f9d0 	bl	8001de8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a48:	1e03      	subs	r3, r0, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e01a      	b.n	8001a86 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2220      	movs	r2, #32
 8001a56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	490c      	ldr	r1, [pc, #48]	; (8001a94 <HAL_I2C_Master_Transmit+0x20c>)
 8001a64:	400a      	ands	r2, r1
 8001a66:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2241      	movs	r2, #65	; 0x41
 8001a6c:	2120      	movs	r1, #32
 8001a6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2242      	movs	r2, #66	; 0x42
 8001a74:	2100      	movs	r1, #0
 8001a76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2240      	movs	r2, #64	; 0x40
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e000      	b.n	8001a86 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001a84:	2302      	movs	r3, #2
  }
}
 8001a86:	0018      	movs	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b007      	add	sp, #28
 8001a8c:	bd90      	pop	{r4, r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	80002000 	.word	0x80002000
 8001a94:	fe00e800 	.word	0xfe00e800

08001a98 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	0008      	movs	r0, r1
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	230a      	movs	r3, #10
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	1c02      	adds	r2, r0, #0
 8001aac:	801a      	strh	r2, [r3, #0]
 8001aae:	2308      	movs	r3, #8
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	1c0a      	adds	r2, r1, #0
 8001ab4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2241      	movs	r2, #65	; 0x41
 8001aba:	5c9b      	ldrb	r3, [r3, r2]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b20      	cmp	r3, #32
 8001ac0:	d000      	beq.n	8001ac4 <HAL_I2C_Master_Receive+0x2c>
 8001ac2:	e0e8      	b.n	8001c96 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	5c9b      	ldrb	r3, [r3, r2]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_I2C_Master_Receive+0x3a>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e0e2      	b.n	8001c98 <HAL_I2C_Master_Receive+0x200>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2240      	movs	r2, #64	; 0x40
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ada:	f7ff fb99 	bl	8001210 <HAL_GetTick>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	0219      	lsls	r1, r3, #8
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2319      	movs	r3, #25
 8001aee:	2201      	movs	r2, #1
 8001af0:	f000 f8fc 	bl	8001cec <I2C_WaitOnFlagUntilTimeout>
 8001af4:	1e03      	subs	r3, r0, #0
 8001af6:	d001      	beq.n	8001afc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0cd      	b.n	8001c98 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2241      	movs	r2, #65	; 0x41
 8001b00:	2122      	movs	r1, #34	; 0x22
 8001b02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2242      	movs	r2, #66	; 0x42
 8001b08:	2110      	movs	r1, #16
 8001b0a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2208      	movs	r2, #8
 8001b1c:	18ba      	adds	r2, r7, r2
 8001b1e:	8812      	ldrh	r2, [r2, #0]
 8001b20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2bff      	cmp	r3, #255	; 0xff
 8001b30:	d911      	bls.n	8001b56 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	22ff      	movs	r2, #255	; 0xff
 8001b36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	045c      	lsls	r4, r3, #17
 8001b42:	230a      	movs	r3, #10
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	8819      	ldrh	r1, [r3, #0]
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	4b55      	ldr	r3, [pc, #340]	; (8001ca0 <HAL_I2C_Master_Receive+0x208>)
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	0023      	movs	r3, r4
 8001b50:	f000 fa58 	bl	8002004 <I2C_TransferConfig>
 8001b54:	e076      	b.n	8001c44 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	049c      	lsls	r4, r3, #18
 8001b6a:	230a      	movs	r3, #10
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	8819      	ldrh	r1, [r3, #0]
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <HAL_I2C_Master_Receive+0x208>)
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	0023      	movs	r3, r4
 8001b78:	f000 fa44 	bl	8002004 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001b7c:	e062      	b.n	8001c44 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	0018      	movs	r0, r3
 8001b86:	f000 f96b 	bl	8001e60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b8a:	1e03      	subs	r3, r0, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e082      	b.n	8001c98 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d03a      	beq.n	8001c44 <HAL_I2C_Master_Receive+0x1ac>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d136      	bne.n	8001c44 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	0013      	movs	r3, r2
 8001be0:	2200      	movs	r2, #0
 8001be2:	2180      	movs	r1, #128	; 0x80
 8001be4:	f000 f882 	bl	8001cec <I2C_WaitOnFlagUntilTimeout>
 8001be8:	1e03      	subs	r3, r0, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e053      	b.n	8001c98 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2bff      	cmp	r3, #255	; 0xff
 8001bf8:	d911      	bls.n	8001c1e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	22ff      	movs	r2, #255	; 0xff
 8001bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	045c      	lsls	r4, r3, #17
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	8819      	ldrh	r1, [r3, #0]
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	2300      	movs	r3, #0
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	0023      	movs	r3, r4
 8001c18:	f000 f9f4 	bl	8002004 <I2C_TransferConfig>
 8001c1c:	e012      	b.n	8001c44 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	049c      	lsls	r4, r3, #18
 8001c32:	230a      	movs	r3, #10
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	8819      	ldrh	r1, [r3, #0]
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	0023      	movs	r3, r4
 8001c40:	f000 f9e0 	bl	8002004 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d197      	bne.n	8001b7e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f000 f8c7 	bl	8001de8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c5a:	1e03      	subs	r3, r0, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e01a      	b.n	8001c98 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2220      	movs	r2, #32
 8001c68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	490b      	ldr	r1, [pc, #44]	; (8001ca4 <HAL_I2C_Master_Receive+0x20c>)
 8001c76:	400a      	ands	r2, r1
 8001c78:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2241      	movs	r2, #65	; 0x41
 8001c7e:	2120      	movs	r1, #32
 8001c80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2242      	movs	r2, #66	; 0x42
 8001c86:	2100      	movs	r1, #0
 8001c88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2240      	movs	r2, #64	; 0x40
 8001c8e:	2100      	movs	r1, #0
 8001c90:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e000      	b.n	8001c98 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001c96:	2302      	movs	r3, #2
  }
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b007      	add	sp, #28
 8001c9e:	bd90      	pop	{r4, r7, pc}
 8001ca0:	80002400 	.word	0x80002400
 8001ca4:	fe00e800 	.word	0xfe00e800

08001ca8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d103      	bne.n	8001cc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d007      	beq.n	8001ce4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2101      	movs	r1, #1
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	619a      	str	r2, [r3, #24]
  }
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}

08001cec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	1dfb      	adds	r3, r7, #7
 8001cfa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cfc:	e021      	b.n	8001d42 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	d01e      	beq.n	8001d42 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d04:	f7ff fa84 	bl	8001210 <HAL_GetTick>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d302      	bcc.n	8001d1a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d113      	bne.n	8001d42 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	2220      	movs	r2, #32
 8001d20:	431a      	orrs	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2241      	movs	r2, #65	; 0x41
 8001d2a:	2120      	movs	r1, #32
 8001d2c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2242      	movs	r2, #66	; 0x42
 8001d32:	2100      	movs	r1, #0
 8001d34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2240      	movs	r2, #64	; 0x40
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00f      	b.n	8001d62 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	425a      	negs	r2, r3
 8001d52:	4153      	adcs	r3, r2
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	001a      	movs	r2, r3
 8001d58:	1dfb      	adds	r3, r7, #7
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d0ce      	beq.n	8001cfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b004      	add	sp, #16
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d76:	e02b      	b.n	8001dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f000 f8da 	bl	8001f38 <I2C_IsAcknowledgeFailed>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d001      	beq.n	8001d8c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e029      	b.n	8001de0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	d01e      	beq.n	8001dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d92:	f7ff fa3d 	bl	8001210 <HAL_GetTick>
 8001d96:	0002      	movs	r2, r0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d302      	bcc.n	8001da8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d113      	bne.n	8001dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dac:	2220      	movs	r2, #32
 8001dae:	431a      	orrs	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2241      	movs	r2, #65	; 0x41
 8001db8:	2120      	movs	r1, #32
 8001dba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2242      	movs	r2, #66	; 0x42
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2240      	movs	r2, #64	; 0x40
 8001dc8:	2100      	movs	r1, #0
 8001dca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e007      	b.n	8001de0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d1cc      	bne.n	8001d78 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b004      	add	sp, #16
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001df4:	e028      	b.n	8001e48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 f89b 	bl	8001f38 <I2C_IsAcknowledgeFailed>
 8001e02:	1e03      	subs	r3, r0, #0
 8001e04:	d001      	beq.n	8001e0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e026      	b.n	8001e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e0a:	f7ff fa01 	bl	8001210 <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d302      	bcc.n	8001e20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d113      	bne.n	8001e48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	2220      	movs	r2, #32
 8001e26:	431a      	orrs	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2241      	movs	r2, #65	; 0x41
 8001e30:	2120      	movs	r1, #32
 8001e32:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2242      	movs	r2, #66	; 0x42
 8001e38:	2100      	movs	r1, #0
 8001e3a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2240      	movs	r2, #64	; 0x40
 8001e40:	2100      	movs	r1, #0
 8001e42:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e007      	b.n	8001e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d1cf      	bne.n	8001df6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b004      	add	sp, #16
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e6c:	e055      	b.n	8001f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f000 f85f 	bl	8001f38 <I2C_IsAcknowledgeFailed>
 8001e7a:	1e03      	subs	r3, r0, #0
 8001e7c:	d001      	beq.n	8001e82 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e053      	b.n	8001f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	d129      	bne.n	8001ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2204      	movs	r2, #4
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d105      	bne.n	8001eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e03f      	b.n	8001f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	491d      	ldr	r1, [pc, #116]	; (8001f34 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2241      	movs	r2, #65	; 0x41
 8001ecc:	2120      	movs	r1, #32
 8001ece:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2242      	movs	r2, #66	; 0x42
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2240      	movs	r2, #64	; 0x40
 8001edc:	2100      	movs	r1, #0
 8001ede:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e022      	b.n	8001f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ee4:	f7ff f994 	bl	8001210 <HAL_GetTick>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d302      	bcc.n	8001efa <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	2220      	movs	r2, #32
 8001f00:	431a      	orrs	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2241      	movs	r2, #65	; 0x41
 8001f0a:	2120      	movs	r1, #32
 8001f0c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2240      	movs	r2, #64	; 0x40
 8001f12:	2100      	movs	r1, #0
 8001f14:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e007      	b.n	8001f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2204      	movs	r2, #4
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d1a2      	bne.n	8001e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b004      	add	sp, #16
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	fe00e800 	.word	0xfe00e800

08001f38 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2210      	movs	r2, #16
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b10      	cmp	r3, #16
 8001f50:	d151      	bne.n	8001ff6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f52:	e021      	b.n	8001f98 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	3301      	adds	r3, #1
 8001f58:	d01e      	beq.n	8001f98 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5a:	f7ff f959 	bl	8001210 <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d302      	bcc.n	8001f70 <I2C_IsAcknowledgeFailed+0x38>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d113      	bne.n	8001f98 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	2220      	movs	r2, #32
 8001f76:	431a      	orrs	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2241      	movs	r2, #65	; 0x41
 8001f80:	2120      	movs	r1, #32
 8001f82:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2242      	movs	r2, #66	; 0x42
 8001f88:	2100      	movs	r1, #0
 8001f8a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	2100      	movs	r1, #0
 8001f92:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e02f      	b.n	8001ff8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	d1d6      	bne.n	8001f54 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2210      	movs	r2, #16
 8001fac:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7ff fe75 	bl	8001ca8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	490d      	ldr	r1, [pc, #52]	; (8002000 <I2C_IsAcknowledgeFailed+0xc8>)
 8001fca:	400a      	ands	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2241      	movs	r2, #65	; 0x41
 8001fde:	2120      	movs	r1, #32
 8001fe0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2242      	movs	r2, #66	; 0x42
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2240      	movs	r2, #64	; 0x40
 8001fee:	2100      	movs	r1, #0
 8001ff0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b004      	add	sp, #16
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	fe00e800 	.word	0xfe00e800

08002004 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	0008      	movs	r0, r1
 800200e:	0011      	movs	r1, r2
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	240a      	movs	r4, #10
 8002014:	193b      	adds	r3, r7, r4
 8002016:	1c02      	adds	r2, r0, #0
 8002018:	801a      	strh	r2, [r3, #0]
 800201a:	2009      	movs	r0, #9
 800201c:	183b      	adds	r3, r7, r0
 800201e:	1c0a      	adds	r2, r1, #0
 8002020:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	6a3a      	ldr	r2, [r7, #32]
 800202a:	0d51      	lsrs	r1, r2, #21
 800202c:	2280      	movs	r2, #128	; 0x80
 800202e:	00d2      	lsls	r2, r2, #3
 8002030:	400a      	ands	r2, r1
 8002032:	490e      	ldr	r1, [pc, #56]	; (800206c <I2C_TransferConfig+0x68>)
 8002034:	430a      	orrs	r2, r1
 8002036:	43d2      	mvns	r2, r2
 8002038:	401a      	ands	r2, r3
 800203a:	0011      	movs	r1, r2
 800203c:	193b      	adds	r3, r7, r4
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	059b      	lsls	r3, r3, #22
 8002042:	0d9a      	lsrs	r2, r3, #22
 8002044:	183b      	adds	r3, r7, r0
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	0418      	lsls	r0, r3, #16
 800204a:	23ff      	movs	r3, #255	; 0xff
 800204c:	041b      	lsls	r3, r3, #16
 800204e:	4003      	ands	r3, r0
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	431a      	orrs	r2, r3
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	431a      	orrs	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b005      	add	sp, #20
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	03ff63ff 	.word	0x03ff63ff

08002070 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2241      	movs	r2, #65	; 0x41
 800207e:	5c9b      	ldrb	r3, [r3, r2]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b20      	cmp	r3, #32
 8002084:	d138      	bne.n	80020f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2240      	movs	r2, #64	; 0x40
 800208a:	5c9b      	ldrb	r3, [r3, r2]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002090:	2302      	movs	r3, #2
 8002092:	e032      	b.n	80020fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2240      	movs	r2, #64	; 0x40
 8002098:	2101      	movs	r1, #1
 800209a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2241      	movs	r2, #65	; 0x41
 80020a0:	2124      	movs	r1, #36	; 0x24
 80020a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2101      	movs	r1, #1
 80020b0:	438a      	bics	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4911      	ldr	r1, [pc, #68]	; (8002104 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6819      	ldr	r1, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2101      	movs	r1, #1
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2241      	movs	r2, #65	; 0x41
 80020e8:	2120      	movs	r1, #32
 80020ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2240      	movs	r2, #64	; 0x40
 80020f0:	2100      	movs	r1, #0
 80020f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e000      	b.n	80020fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
  }
}
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b002      	add	sp, #8
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	ffffefff 	.word	0xffffefff

08002108 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2241      	movs	r2, #65	; 0x41
 8002116:	5c9b      	ldrb	r3, [r3, r2]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b20      	cmp	r3, #32
 800211c:	d139      	bne.n	8002192 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2240      	movs	r2, #64	; 0x40
 8002122:	5c9b      	ldrb	r3, [r3, r2]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002128:	2302      	movs	r3, #2
 800212a:	e033      	b.n	8002194 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2240      	movs	r2, #64	; 0x40
 8002130:	2101      	movs	r1, #1
 8002132:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2241      	movs	r2, #65	; 0x41
 8002138:	2124      	movs	r1, #36	; 0x24
 800213a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2101      	movs	r1, #1
 8002148:	438a      	bics	r2, r1
 800214a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4a11      	ldr	r2, [pc, #68]	; (800219c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002158:	4013      	ands	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2101      	movs	r1, #1
 800217a:	430a      	orrs	r2, r1
 800217c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2241      	movs	r2, #65	; 0x41
 8002182:	2120      	movs	r1, #32
 8002184:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2240      	movs	r2, #64	; 0x40
 800218a:	2100      	movs	r1, #0
 800218c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002192:	2302      	movs	r3, #2
  }
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	b004      	add	sp, #16
 800219a:	bd80      	pop	{r7, pc}
 800219c:	fffff0ff 	.word	0xfffff0ff

080021a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a0:	b5b0      	push	{r4, r5, r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d102      	bne.n	80021b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	f000 fbab 	bl	800290a <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b4:	4bce      	ldr	r3, [pc, #824]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	220c      	movs	r2, #12
 80021ba:	4013      	ands	r3, r2
 80021bc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021be:	4bcc      	ldr	r3, [pc, #816]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	025b      	lsls	r3, r3, #9
 80021c6:	4013      	ands	r3, r2
 80021c8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2201      	movs	r2, #1
 80021d0:	4013      	ands	r3, r2
 80021d2:	d100      	bne.n	80021d6 <HAL_RCC_OscConfig+0x36>
 80021d4:	e07e      	b.n	80022d4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d007      	beq.n	80021ec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d112      	bne.n	8002208 <HAL_RCC_OscConfig+0x68>
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d10d      	bne.n	8002208 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	4bc0      	ldr	r3, [pc, #768]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	029b      	lsls	r3, r3, #10
 80021f4:	4013      	ands	r3, r2
 80021f6:	d100      	bne.n	80021fa <HAL_RCC_OscConfig+0x5a>
 80021f8:	e06b      	b.n	80022d2 <HAL_RCC_OscConfig+0x132>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d167      	bne.n	80022d2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	f000 fb81 	bl	800290a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	025b      	lsls	r3, r3, #9
 8002210:	429a      	cmp	r2, r3
 8002212:	d107      	bne.n	8002224 <HAL_RCC_OscConfig+0x84>
 8002214:	4bb6      	ldr	r3, [pc, #728]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4bb5      	ldr	r3, [pc, #724]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	0249      	lsls	r1, r1, #9
 800221e:	430a      	orrs	r2, r1
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	e027      	b.n	8002274 <HAL_RCC_OscConfig+0xd4>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	23a0      	movs	r3, #160	; 0xa0
 800222a:	02db      	lsls	r3, r3, #11
 800222c:	429a      	cmp	r2, r3
 800222e:	d10e      	bne.n	800224e <HAL_RCC_OscConfig+0xae>
 8002230:	4baf      	ldr	r3, [pc, #700]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4bae      	ldr	r3, [pc, #696]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002236:	2180      	movs	r1, #128	; 0x80
 8002238:	02c9      	lsls	r1, r1, #11
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	4bac      	ldr	r3, [pc, #688]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4bab      	ldr	r3, [pc, #684]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	0249      	lsls	r1, r1, #9
 8002248:	430a      	orrs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	e012      	b.n	8002274 <HAL_RCC_OscConfig+0xd4>
 800224e:	4ba8      	ldr	r3, [pc, #672]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4ba7      	ldr	r3, [pc, #668]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002254:	49a7      	ldr	r1, [pc, #668]	; (80024f4 <HAL_RCC_OscConfig+0x354>)
 8002256:	400a      	ands	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	4ba5      	ldr	r3, [pc, #660]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	025b      	lsls	r3, r3, #9
 8002262:	4013      	ands	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4ba1      	ldr	r3, [pc, #644]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4ba0      	ldr	r3, [pc, #640]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 800226e:	49a2      	ldr	r1, [pc, #648]	; (80024f8 <HAL_RCC_OscConfig+0x358>)
 8002270:	400a      	ands	r2, r1
 8002272:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d015      	beq.n	80022a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe ffc8 	bl	8001210 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002284:	e009      	b.n	800229a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002286:	f7fe ffc3 	bl	8001210 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b64      	cmp	r3, #100	; 0x64
 8002292:	d902      	bls.n	800229a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	f000 fb38 	bl	800290a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800229a:	4b95      	ldr	r3, [pc, #596]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	029b      	lsls	r3, r3, #10
 80022a2:	4013      	ands	r3, r2
 80022a4:	d0ef      	beq.n	8002286 <HAL_RCC_OscConfig+0xe6>
 80022a6:	e015      	b.n	80022d4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7fe ffb2 	bl	8001210 <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b2:	f7fe ffad 	bl	8001210 <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	; 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e322      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022c4:	4b8a      	ldr	r3, [pc, #552]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	029b      	lsls	r3, r3, #10
 80022cc:	4013      	ands	r3, r2
 80022ce:	d1f0      	bne.n	80022b2 <HAL_RCC_OscConfig+0x112>
 80022d0:	e000      	b.n	80022d4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2202      	movs	r2, #2
 80022da:	4013      	ands	r3, r2
 80022dc:	d100      	bne.n	80022e0 <HAL_RCC_OscConfig+0x140>
 80022de:	e08a      	b.n	80023f6 <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	2b0c      	cmp	r3, #12
 80022f0:	d13d      	bne.n	800236e <HAL_RCC_OscConfig+0x1ce>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d13a      	bne.n	800236e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80022f8:	4b7d      	ldr	r3, [pc, #500]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2204      	movs	r2, #4
 80022fe:	4013      	ands	r3, r2
 8002300:	d004      	beq.n	800230c <HAL_RCC_OscConfig+0x16c>
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e2fe      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b78      	ldr	r3, [pc, #480]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4a7a      	ldr	r2, [pc, #488]	; (80024fc <HAL_RCC_OscConfig+0x35c>)
 8002312:	4013      	ands	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	021a      	lsls	r2, r3, #8
 800231c:	4b74      	ldr	r3, [pc, #464]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002322:	4b73      	ldr	r3, [pc, #460]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2209      	movs	r2, #9
 8002328:	4393      	bics	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	4b70      	ldr	r3, [pc, #448]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002334:	f000 fc1e 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002338:	0001      	movs	r1, r0
 800233a:	4b6d      	ldr	r3, [pc, #436]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	220f      	movs	r2, #15
 8002342:	4013      	ands	r3, r2
 8002344:	4a6e      	ldr	r2, [pc, #440]	; (8002500 <HAL_RCC_OscConfig+0x360>)
 8002346:	5cd3      	ldrb	r3, [r2, r3]
 8002348:	000a      	movs	r2, r1
 800234a:	40da      	lsrs	r2, r3
 800234c:	4b6d      	ldr	r3, [pc, #436]	; (8002504 <HAL_RCC_OscConfig+0x364>)
 800234e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002350:	2513      	movs	r5, #19
 8002352:	197c      	adds	r4, r7, r5
 8002354:	2000      	movs	r0, #0
 8002356:	f7fe ff25 	bl	80011a4 <HAL_InitTick>
 800235a:	0003      	movs	r3, r0
 800235c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800235e:	197b      	adds	r3, r7, r5
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d047      	beq.n	80023f6 <HAL_RCC_OscConfig+0x256>
      {
        return status;
 8002366:	2313      	movs	r3, #19
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	e2cd      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d027      	beq.n	80023c4 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002374:	4b5e      	ldr	r3, [pc, #376]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2209      	movs	r2, #9
 800237a:	4393      	bics	r3, r2
 800237c:	0019      	movs	r1, r3
 800237e:	4b5c      	ldr	r3, [pc, #368]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	430a      	orrs	r2, r1
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7fe ff43 	bl	8001210 <HAL_GetTick>
 800238a:	0003      	movs	r3, r0
 800238c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002390:	f7fe ff3e 	bl	8001210 <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e2b3      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023a2:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2204      	movs	r2, #4
 80023a8:	4013      	ands	r3, r2
 80023aa:	d0f1      	beq.n	8002390 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ac:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a52      	ldr	r2, [pc, #328]	; (80024fc <HAL_RCC_OscConfig+0x35c>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	021a      	lsls	r2, r3, #8
 80023bc:	4b4c      	ldr	r3, [pc, #304]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80023be:	430a      	orrs	r2, r1
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	e018      	b.n	80023f6 <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c4:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b49      	ldr	r3, [pc, #292]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80023ca:	2101      	movs	r1, #1
 80023cc:	438a      	bics	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe ff1e 	bl	8001210 <HAL_GetTick>
 80023d4:	0003      	movs	r3, r0
 80023d6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023da:	f7fe ff19 	bl	8001210 <HAL_GetTick>
 80023de:	0002      	movs	r2, r0
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e28e      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023ec:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2204      	movs	r2, #4
 80023f2:	4013      	ands	r3, r2
 80023f4:	d1f1      	bne.n	80023da <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2210      	movs	r2, #16
 80023fc:	4013      	ands	r3, r2
 80023fe:	d100      	bne.n	8002402 <HAL_RCC_OscConfig+0x262>
 8002400:	e09e      	b.n	8002540 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d13f      	bne.n	8002488 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002408:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4013      	ands	r3, r2
 8002412:	d005      	beq.n	8002420 <HAL_RCC_OscConfig+0x280>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e274      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002420:	4b33      	ldr	r3, [pc, #204]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4a38      	ldr	r2, [pc, #224]	; (8002508 <HAL_RCC_OscConfig+0x368>)
 8002426:	4013      	ands	r3, r2
 8002428:	0019      	movs	r1, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800242e:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002430:	430a      	orrs	r2, r1
 8002432:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002434:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	0a19      	lsrs	r1, r3, #8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	061a      	lsls	r2, r3, #24
 8002442:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002444:	430a      	orrs	r2, r1
 8002446:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	0b5b      	lsrs	r3, r3, #13
 800244e:	3301      	adds	r3, #1
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	0212      	lsls	r2, r2, #8
 8002454:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002456:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	210f      	movs	r1, #15
 800245e:	400b      	ands	r3, r1
 8002460:	4927      	ldr	r1, [pc, #156]	; (8002500 <HAL_RCC_OscConfig+0x360>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002466:	4b27      	ldr	r3, [pc, #156]	; (8002504 <HAL_RCC_OscConfig+0x364>)
 8002468:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800246a:	2513      	movs	r5, #19
 800246c:	197c      	adds	r4, r7, r5
 800246e:	2000      	movs	r0, #0
 8002470:	f7fe fe98 	bl	80011a4 <HAL_InitTick>
 8002474:	0003      	movs	r3, r0
 8002476:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002478:	197b      	adds	r3, r7, r5
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d05f      	beq.n	8002540 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8002480:	2313      	movs	r3, #19
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	e240      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d03d      	beq.n	800250c <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002490:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	0049      	lsls	r1, r1, #1
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7fe feb7 	bl	8001210 <HAL_GetTick>
 80024a2:	0003      	movs	r3, r0
 80024a4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a8:	f7fe feb2 	bl	8001210 <HAL_GetTick>
 80024ac:	0002      	movs	r2, r0
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e227      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4013      	ands	r3, r2
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4a0f      	ldr	r2, [pc, #60]	; (8002508 <HAL_RCC_OscConfig+0x368>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80024d6:	430a      	orrs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	0a19      	lsrs	r1, r3, #8
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	061a      	lsls	r2, r3, #24
 80024e8:	4b01      	ldr	r3, [pc, #4]	; (80024f0 <HAL_RCC_OscConfig+0x350>)
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	e027      	b.n	8002540 <HAL_RCC_OscConfig+0x3a0>
 80024f0:	40021000 	.word	0x40021000
 80024f4:	fffeffff 	.word	0xfffeffff
 80024f8:	fffbffff 	.word	0xfffbffff
 80024fc:	ffffe0ff 	.word	0xffffe0ff
 8002500:	08004fec 	.word	0x08004fec
 8002504:	20000000 	.word	0x20000000
 8002508:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800250c:	4bbd      	ldr	r3, [pc, #756]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4bbc      	ldr	r3, [pc, #752]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 8002512:	49bd      	ldr	r1, [pc, #756]	; (8002808 <HAL_RCC_OscConfig+0x668>)
 8002514:	400a      	ands	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe fe7a 	bl	8001210 <HAL_GetTick>
 800251c:	0003      	movs	r3, r0
 800251e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002522:	f7fe fe75 	bl	8001210 <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e1ea      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002534:	4bb3      	ldr	r3, [pc, #716]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4013      	ands	r3, r2
 800253e:	d1f0      	bne.n	8002522 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2208      	movs	r2, #8
 8002546:	4013      	ands	r3, r2
 8002548:	d036      	beq.n	80025b8 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d019      	beq.n	8002586 <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002552:	4bac      	ldr	r3, [pc, #688]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 8002554:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002556:	4bab      	ldr	r3, [pc, #684]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 8002558:	2101      	movs	r1, #1
 800255a:	430a      	orrs	r2, r1
 800255c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fe57 	bl	8001210 <HAL_GetTick>
 8002562:	0003      	movs	r3, r0
 8002564:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002568:	f7fe fe52 	bl	8001210 <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1c7      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800257a:	4ba2      	ldr	r3, [pc, #648]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 800257c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d0f1      	beq.n	8002568 <HAL_RCC_OscConfig+0x3c8>
 8002584:	e018      	b.n	80025b8 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002586:	4b9f      	ldr	r3, [pc, #636]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 8002588:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800258a:	4b9e      	ldr	r3, [pc, #632]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 800258c:	2101      	movs	r1, #1
 800258e:	438a      	bics	r2, r1
 8002590:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002592:	f7fe fe3d 	bl	8001210 <HAL_GetTick>
 8002596:	0003      	movs	r3, r0
 8002598:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259c:	f7fe fe38 	bl	8001210 <HAL_GetTick>
 80025a0:	0002      	movs	r2, r0
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1ad      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025ae:	4b95      	ldr	r3, [pc, #596]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 80025b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d1f1      	bne.n	800259c <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2204      	movs	r2, #4
 80025be:	4013      	ands	r3, r2
 80025c0:	d100      	bne.n	80025c4 <HAL_RCC_OscConfig+0x424>
 80025c2:	e0af      	b.n	8002724 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c4:	2327      	movs	r3, #39	; 0x27
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025cc:	4b8d      	ldr	r3, [pc, #564]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 80025ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	055b      	lsls	r3, r3, #21
 80025d4:	4013      	ands	r3, r2
 80025d6:	d10a      	bne.n	80025ee <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b8a      	ldr	r3, [pc, #552]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 80025da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025dc:	4b89      	ldr	r3, [pc, #548]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 80025de:	2180      	movs	r1, #128	; 0x80
 80025e0:	0549      	lsls	r1, r1, #21
 80025e2:	430a      	orrs	r2, r1
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80025e6:	2327      	movs	r3, #39	; 0x27
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ee:	4b87      	ldr	r3, [pc, #540]	; (800280c <HAL_RCC_OscConfig+0x66c>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4013      	ands	r3, r2
 80025f8:	d11a      	bne.n	8002630 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fa:	4b84      	ldr	r3, [pc, #528]	; (800280c <HAL_RCC_OscConfig+0x66c>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4b83      	ldr	r3, [pc, #524]	; (800280c <HAL_RCC_OscConfig+0x66c>)
 8002600:	2180      	movs	r1, #128	; 0x80
 8002602:	0049      	lsls	r1, r1, #1
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002608:	f7fe fe02 	bl	8001210 <HAL_GetTick>
 800260c:	0003      	movs	r3, r0
 800260e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002612:	f7fe fdfd 	bl	8001210 <HAL_GetTick>
 8002616:	0002      	movs	r2, r0
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b64      	cmp	r3, #100	; 0x64
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e172      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	4b79      	ldr	r3, [pc, #484]	; (800280c <HAL_RCC_OscConfig+0x66c>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4013      	ands	r3, r2
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	429a      	cmp	r2, r3
 800263a:	d107      	bne.n	800264c <HAL_RCC_OscConfig+0x4ac>
 800263c:	4b71      	ldr	r3, [pc, #452]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 800263e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002640:	4b70      	ldr	r3, [pc, #448]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 8002642:	2180      	movs	r1, #128	; 0x80
 8002644:	0049      	lsls	r1, r1, #1
 8002646:	430a      	orrs	r2, r1
 8002648:	651a      	str	r2, [r3, #80]	; 0x50
 800264a:	e031      	b.n	80026b0 <HAL_RCC_OscConfig+0x510>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10c      	bne.n	800266e <HAL_RCC_OscConfig+0x4ce>
 8002654:	4b6b      	ldr	r3, [pc, #428]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 8002656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002658:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 800265a:	496b      	ldr	r1, [pc, #428]	; (8002808 <HAL_RCC_OscConfig+0x668>)
 800265c:	400a      	ands	r2, r1
 800265e:	651a      	str	r2, [r3, #80]	; 0x50
 8002660:	4b68      	ldr	r3, [pc, #416]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 8002662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002664:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 8002666:	496a      	ldr	r1, [pc, #424]	; (8002810 <HAL_RCC_OscConfig+0x670>)
 8002668:	400a      	ands	r2, r1
 800266a:	651a      	str	r2, [r3, #80]	; 0x50
 800266c:	e020      	b.n	80026b0 <HAL_RCC_OscConfig+0x510>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	23a0      	movs	r3, #160	; 0xa0
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	429a      	cmp	r2, r3
 8002678:	d10e      	bne.n	8002698 <HAL_RCC_OscConfig+0x4f8>
 800267a:	4b62      	ldr	r3, [pc, #392]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 800267c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800267e:	4b61      	ldr	r3, [pc, #388]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	00c9      	lsls	r1, r1, #3
 8002684:	430a      	orrs	r2, r1
 8002686:	651a      	str	r2, [r3, #80]	; 0x50
 8002688:	4b5e      	ldr	r3, [pc, #376]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 800268a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800268c:	4b5d      	ldr	r3, [pc, #372]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 800268e:	2180      	movs	r1, #128	; 0x80
 8002690:	0049      	lsls	r1, r1, #1
 8002692:	430a      	orrs	r2, r1
 8002694:	651a      	str	r2, [r3, #80]	; 0x50
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0x510>
 8002698:	4b5a      	ldr	r3, [pc, #360]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 800269a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800269c:	4b59      	ldr	r3, [pc, #356]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 800269e:	495a      	ldr	r1, [pc, #360]	; (8002808 <HAL_RCC_OscConfig+0x668>)
 80026a0:	400a      	ands	r2, r1
 80026a2:	651a      	str	r2, [r3, #80]	; 0x50
 80026a4:	4b57      	ldr	r3, [pc, #348]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 80026a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026a8:	4b56      	ldr	r3, [pc, #344]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 80026aa:	4959      	ldr	r1, [pc, #356]	; (8002810 <HAL_RCC_OscConfig+0x670>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d015      	beq.n	80026e4 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b8:	f7fe fdaa 	bl	8001210 <HAL_GetTick>
 80026bc:	0003      	movs	r3, r0
 80026be:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026c0:	e009      	b.n	80026d6 <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c2:	f7fe fda5 	bl	8001210 <HAL_GetTick>
 80026c6:	0002      	movs	r2, r0
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	4a51      	ldr	r2, [pc, #324]	; (8002814 <HAL_RCC_OscConfig+0x674>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e119      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026d6:	4b4b      	ldr	r3, [pc, #300]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 80026d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4013      	ands	r3, r2
 80026e0:	d0ef      	beq.n	80026c2 <HAL_RCC_OscConfig+0x522>
 80026e2:	e014      	b.n	800270e <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e4:	f7fe fd94 	bl	8001210 <HAL_GetTick>
 80026e8:	0003      	movs	r3, r0
 80026ea:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026ec:	e009      	b.n	8002702 <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ee:	f7fe fd8f 	bl	8001210 <HAL_GetTick>
 80026f2:	0002      	movs	r2, r0
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	4a46      	ldr	r2, [pc, #280]	; (8002814 <HAL_RCC_OscConfig+0x674>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e103      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002702:	4b40      	ldr	r3, [pc, #256]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 8002704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4013      	ands	r3, r2
 800270c:	d1ef      	bne.n	80026ee <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800270e:	2327      	movs	r3, #39	; 0x27
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d105      	bne.n	8002724 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002718:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 800271a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800271c:	4b39      	ldr	r3, [pc, #228]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 800271e:	493e      	ldr	r1, [pc, #248]	; (8002818 <HAL_RCC_OscConfig+0x678>)
 8002720:	400a      	ands	r2, r1
 8002722:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2220      	movs	r2, #32
 800272a:	4013      	ands	r3, r2
 800272c:	d049      	beq.n	80027c2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d026      	beq.n	8002784 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002736:	4b33      	ldr	r3, [pc, #204]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	4b32      	ldr	r3, [pc, #200]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 800273c:	2101      	movs	r1, #1
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	4b30      	ldr	r3, [pc, #192]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 8002744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002746:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 8002748:	2101      	movs	r1, #1
 800274a:	430a      	orrs	r2, r1
 800274c:	635a      	str	r2, [r3, #52]	; 0x34
 800274e:	4b33      	ldr	r3, [pc, #204]	; (800281c <HAL_RCC_OscConfig+0x67c>)
 8002750:	6a1a      	ldr	r2, [r3, #32]
 8002752:	4b32      	ldr	r3, [pc, #200]	; (800281c <HAL_RCC_OscConfig+0x67c>)
 8002754:	2180      	movs	r1, #128	; 0x80
 8002756:	0189      	lsls	r1, r1, #6
 8002758:	430a      	orrs	r2, r1
 800275a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7fe fd58 	bl	8001210 <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002766:	f7fe fd53 	bl	8001210 <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e0c8      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002778:	4b22      	ldr	r3, [pc, #136]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2202      	movs	r2, #2
 800277e:	4013      	ands	r3, r2
 8002780:	d0f1      	beq.n	8002766 <HAL_RCC_OscConfig+0x5c6>
 8002782:	e01e      	b.n	80027c2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002784:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 800278a:	2101      	movs	r1, #1
 800278c:	438a      	bics	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	4b22      	ldr	r3, [pc, #136]	; (800281c <HAL_RCC_OscConfig+0x67c>)
 8002792:	6a1a      	ldr	r2, [r3, #32]
 8002794:	4b21      	ldr	r3, [pc, #132]	; (800281c <HAL_RCC_OscConfig+0x67c>)
 8002796:	4922      	ldr	r1, [pc, #136]	; (8002820 <HAL_RCC_OscConfig+0x680>)
 8002798:	400a      	ands	r2, r1
 800279a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7fe fd38 	bl	8001210 <HAL_GetTick>
 80027a0:	0003      	movs	r3, r0
 80027a2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027a6:	f7fe fd33 	bl	8001210 <HAL_GetTick>
 80027aa:	0002      	movs	r2, r0
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e0a8      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2202      	movs	r2, #2
 80027be:	4013      	ands	r3, r2
 80027c0:	d1f1      	bne.n	80027a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d100      	bne.n	80027cc <HAL_RCC_OscConfig+0x62c>
 80027ca:	e09d      	b.n	8002908 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	2b0c      	cmp	r3, #12
 80027d0:	d100      	bne.n	80027d4 <HAL_RCC_OscConfig+0x634>
 80027d2:	e076      	b.n	80028c2 <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d157      	bne.n	800288c <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b08      	ldr	r3, [pc, #32]	; (8002804 <HAL_RCC_OscConfig+0x664>)
 80027e2:	4910      	ldr	r1, [pc, #64]	; (8002824 <HAL_RCC_OscConfig+0x684>)
 80027e4:	400a      	ands	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe fd12 	bl	8001210 <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027f0:	e01a      	b.n	8002828 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f2:	f7fe fd0d 	bl	8001210 <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d913      	bls.n	8002828 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e082      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
 8002804:	40021000 	.word	0x40021000
 8002808:	fffffeff 	.word	0xfffffeff
 800280c:	40007000 	.word	0x40007000
 8002810:	fffffbff 	.word	0xfffffbff
 8002814:	00001388 	.word	0x00001388
 8002818:	efffffff 	.word	0xefffffff
 800281c:	40010000 	.word	0x40010000
 8002820:	ffffdfff 	.word	0xffffdfff
 8002824:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002828:	4b3a      	ldr	r3, [pc, #232]	; (8002914 <HAL_RCC_OscConfig+0x774>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	049b      	lsls	r3, r3, #18
 8002830:	4013      	ands	r3, r2
 8002832:	d1de      	bne.n	80027f2 <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002834:	4b37      	ldr	r3, [pc, #220]	; (8002914 <HAL_RCC_OscConfig+0x774>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a37      	ldr	r2, [pc, #220]	; (8002918 <HAL_RCC_OscConfig+0x778>)
 800283a:	4013      	ands	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284c:	431a      	orrs	r2, r3
 800284e:	4b31      	ldr	r3, [pc, #196]	; (8002914 <HAL_RCC_OscConfig+0x774>)
 8002850:	430a      	orrs	r2, r1
 8002852:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002854:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <HAL_RCC_OscConfig+0x774>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b2e      	ldr	r3, [pc, #184]	; (8002914 <HAL_RCC_OscConfig+0x774>)
 800285a:	2180      	movs	r1, #128	; 0x80
 800285c:	0449      	lsls	r1, r1, #17
 800285e:	430a      	orrs	r2, r1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe fcd5 	bl	8001210 <HAL_GetTick>
 8002866:	0003      	movs	r3, r0
 8002868:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fcd0 	bl	8001210 <HAL_GetTick>
 8002870:	0002      	movs	r2, r0
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e045      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800287e:	4b25      	ldr	r3, [pc, #148]	; (8002914 <HAL_RCC_OscConfig+0x774>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	049b      	lsls	r3, r3, #18
 8002886:	4013      	ands	r3, r2
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x6cc>
 800288a:	e03d      	b.n	8002908 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <HAL_RCC_OscConfig+0x774>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b20      	ldr	r3, [pc, #128]	; (8002914 <HAL_RCC_OscConfig+0x774>)
 8002892:	4922      	ldr	r1, [pc, #136]	; (800291c <HAL_RCC_OscConfig+0x77c>)
 8002894:	400a      	ands	r2, r1
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe fcba 	bl	8001210 <HAL_GetTick>
 800289c:	0003      	movs	r3, r0
 800289e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fe fcb5 	bl	8001210 <HAL_GetTick>
 80028a6:	0002      	movs	r2, r0
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e02a      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028b4:	4b17      	ldr	r3, [pc, #92]	; (8002914 <HAL_RCC_OscConfig+0x774>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	049b      	lsls	r3, r3, #18
 80028bc:	4013      	ands	r3, r2
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x702>
 80028c0:	e022      	b.n	8002908 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e01d      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_RCC_OscConfig+0x774>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	025b      	lsls	r3, r3, #9
 80028da:	401a      	ands	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d10f      	bne.n	8002904 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	23f0      	movs	r3, #240	; 0xf0
 80028e8:	039b      	lsls	r3, r3, #14
 80028ea:	401a      	ands	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d107      	bne.n	8002904 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	23c0      	movs	r3, #192	; 0xc0
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	401a      	ands	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	0018      	movs	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	b00a      	add	sp, #40	; 0x28
 8002910:	bdb0      	pop	{r4, r5, r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	40021000 	.word	0x40021000
 8002918:	ff02ffff 	.word	0xff02ffff
 800291c:	feffffff 	.word	0xfeffffff

08002920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e10d      	b.n	8002b50 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002934:	4b88      	ldr	r3, [pc, #544]	; (8002b58 <HAL_RCC_ClockConfig+0x238>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2201      	movs	r2, #1
 800293a:	4013      	ands	r3, r2
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d911      	bls.n	8002966 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b85      	ldr	r3, [pc, #532]	; (8002b58 <HAL_RCC_ClockConfig+0x238>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2201      	movs	r2, #1
 8002948:	4393      	bics	r3, r2
 800294a:	0019      	movs	r1, r3
 800294c:	4b82      	ldr	r3, [pc, #520]	; (8002b58 <HAL_RCC_ClockConfig+0x238>)
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002954:	4b80      	ldr	r3, [pc, #512]	; (8002b58 <HAL_RCC_ClockConfig+0x238>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2201      	movs	r2, #1
 800295a:	4013      	ands	r3, r2
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d001      	beq.n	8002966 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e0f4      	b.n	8002b50 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2202      	movs	r2, #2
 800296c:	4013      	ands	r3, r2
 800296e:	d009      	beq.n	8002984 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002970:	4b7a      	ldr	r3, [pc, #488]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	22f0      	movs	r2, #240	; 0xf0
 8002976:	4393      	bics	r3, r2
 8002978:	0019      	movs	r1, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	4b77      	ldr	r3, [pc, #476]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 8002980:	430a      	orrs	r2, r1
 8002982:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2201      	movs	r2, #1
 800298a:	4013      	ands	r3, r2
 800298c:	d100      	bne.n	8002990 <HAL_RCC_ClockConfig+0x70>
 800298e:	e089      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d107      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002998:	4b70      	ldr	r3, [pc, #448]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	029b      	lsls	r3, r3, #10
 80029a0:	4013      	ands	r3, r2
 80029a2:	d120      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0d3      	b.n	8002b50 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029b0:	4b6a      	ldr	r3, [pc, #424]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	049b      	lsls	r3, r3, #18
 80029b8:	4013      	ands	r3, r2
 80029ba:	d114      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0c7      	b.n	8002b50 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d106      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029c8:	4b64      	ldr	r3, [pc, #400]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2204      	movs	r2, #4
 80029ce:	4013      	ands	r3, r2
 80029d0:	d109      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0bc      	b.n	8002b50 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029d6:	4b61      	ldr	r3, [pc, #388]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4013      	ands	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e0b4      	b.n	8002b50 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e6:	4b5d      	ldr	r3, [pc, #372]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2203      	movs	r2, #3
 80029ec:	4393      	bics	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	4b59      	ldr	r3, [pc, #356]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 80029f6:	430a      	orrs	r2, r1
 80029f8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029fa:	f7fe fc09 	bl	8001210 <HAL_GetTick>
 80029fe:	0003      	movs	r3, r0
 8002a00:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d111      	bne.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a0a:	e009      	b.n	8002a20 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7fe fc00 	bl	8001210 <HAL_GetTick>
 8002a10:	0002      	movs	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	4a52      	ldr	r2, [pc, #328]	; (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e097      	b.n	8002b50 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a20:	4b4e      	ldr	r3, [pc, #312]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	220c      	movs	r2, #12
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d1ef      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xec>
 8002a2c:	e03a      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d111      	bne.n	8002a5a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a36:	e009      	b.n	8002a4c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a38:	f7fe fbea 	bl	8001210 <HAL_GetTick>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	4a47      	ldr	r2, [pc, #284]	; (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e081      	b.n	8002b50 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a4c:	4b43      	ldr	r3, [pc, #268]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	220c      	movs	r2, #12
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b0c      	cmp	r3, #12
 8002a56:	d1ef      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x118>
 8002a58:	e024      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d11b      	bne.n	8002a9a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a62:	e009      	b.n	8002a78 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a64:	f7fe fbd4 	bl	8001210 <HAL_GetTick>
 8002a68:	0002      	movs	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	4a3c      	ldr	r2, [pc, #240]	; (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e06b      	b.n	8002b50 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a78:	4b38      	ldr	r3, [pc, #224]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	220c      	movs	r2, #12
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d1ef      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x144>
 8002a84:	e00e      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a86:	f7fe fbc3 	bl	8001210 <HAL_GetTick>
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	4a33      	ldr	r2, [pc, #204]	; (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e05a      	b.n	8002b50 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a9a:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	220c      	movs	r2, #12
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <HAL_RCC_ClockConfig+0x238>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d211      	bcs.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b29      	ldr	r3, [pc, #164]	; (8002b58 <HAL_RCC_ClockConfig+0x238>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	4393      	bics	r3, r2
 8002aba:	0019      	movs	r1, r3
 8002abc:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <HAL_RCC_ClockConfig+0x238>)
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac4:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_RCC_ClockConfig+0x238>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4013      	ands	r3, r2
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e03c      	b.n	8002b50 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2204      	movs	r2, #4
 8002adc:	4013      	ands	r3, r2
 8002ade:	d009      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae0:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a1f      	ldr	r2, [pc, #124]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	0019      	movs	r1, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 8002af0:	430a      	orrs	r2, r1
 8002af2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2208      	movs	r2, #8
 8002afa:	4013      	ands	r3, r2
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <HAL_RCC_ClockConfig+0x248>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	0019      	movs	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	00da      	lsls	r2, r3, #3
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 8002b10:	430a      	orrs	r2, r1
 8002b12:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b14:	f000 f82e 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002b18:	0001      	movs	r1, r0
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_RCC_ClockConfig+0x23c>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	220f      	movs	r2, #15
 8002b22:	4013      	ands	r3, r2
 8002b24:	4a11      	ldr	r2, [pc, #68]	; (8002b6c <HAL_RCC_ClockConfig+0x24c>)
 8002b26:	5cd3      	ldrb	r3, [r2, r3]
 8002b28:	000a      	movs	r2, r1
 8002b2a:	40da      	lsrs	r2, r3
 8002b2c:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <HAL_RCC_ClockConfig+0x250>)
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002b30:	250b      	movs	r5, #11
 8002b32:	197c      	adds	r4, r7, r5
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7fe fb35 	bl	80011a4 <HAL_InitTick>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002b3e:	197b      	adds	r3, r7, r5
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002b46:	230b      	movs	r3, #11
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	e000      	b.n	8002b50 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b004      	add	sp, #16
 8002b56:	bdb0      	pop	{r4, r5, r7, pc}
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	00001388 	.word	0x00001388
 8002b64:	fffff8ff 	.word	0xfffff8ff
 8002b68:	ffffc7ff 	.word	0xffffc7ff
 8002b6c:	08004fec 	.word	0x08004fec
 8002b70:	20000000 	.word	0x20000000

08002b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002b7a:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	220c      	movs	r2, #12
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d00e      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d00f      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0x3a>
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d157      	bne.n	8002c42 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b92:	4b35      	ldr	r3, [pc, #212]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2210      	movs	r2, #16
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d002      	beq.n	8002ba2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002b9c:	4b33      	ldr	r3, [pc, #204]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b9e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002ba0:	e05d      	b.n	8002c5e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8002ba2:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ba4:	613b      	str	r3, [r7, #16]
      break;
 8002ba6:	e05a      	b.n	8002c5e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba8:	4b32      	ldr	r3, [pc, #200]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x100>)
 8002baa:	613b      	str	r3, [r7, #16]
      break;
 8002bac:	e057      	b.n	8002c5e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	0c9b      	lsrs	r3, r3, #18
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	4a30      	ldr	r2, [pc, #192]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bb8:	5cd3      	ldrb	r3, [r2, r3]
 8002bba:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	0d9b      	lsrs	r3, r3, #22
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	025b      	lsls	r3, r3, #9
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d00f      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	000a      	movs	r2, r1
 8002bd8:	0152      	lsls	r2, r2, #5
 8002bda:	1a52      	subs	r2, r2, r1
 8002bdc:	0193      	lsls	r3, r2, #6
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	185b      	adds	r3, r3, r1
 8002be4:	025b      	lsls	r3, r3, #9
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7fd fa8d 	bl	8000108 <__udivsi3>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	e023      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002bf4:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2210      	movs	r2, #16
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d00f      	beq.n	8002c1e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002bfe:	68b9      	ldr	r1, [r7, #8]
 8002c00:	000a      	movs	r2, r1
 8002c02:	0152      	lsls	r2, r2, #5
 8002c04:	1a52      	subs	r2, r2, r1
 8002c06:	0193      	lsls	r3, r2, #6
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	185b      	adds	r3, r3, r1
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7fd fa78 	bl	8000108 <__udivsi3>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	e00e      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	000a      	movs	r2, r1
 8002c22:	0152      	lsls	r2, r2, #5
 8002c24:	1a52      	subs	r2, r2, r1
 8002c26:	0193      	lsls	r3, r2, #6
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	185b      	adds	r3, r3, r1
 8002c2e:	029b      	lsls	r3, r3, #10
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7fd fa68 	bl	8000108 <__udivsi3>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	613b      	str	r3, [r7, #16]
      break;
 8002c40:	e00d      	b.n	8002c5e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	0b5b      	lsrs	r3, r3, #13
 8002c48:	2207      	movs	r2, #7
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	2280      	movs	r2, #128	; 0x80
 8002c54:	0212      	lsls	r2, r2, #8
 8002c56:	409a      	lsls	r2, r3
 8002c58:	0013      	movs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
      break;
 8002c5c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c5e:	693b      	ldr	r3, [r7, #16]
}
 8002c60:	0018      	movs	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b006      	add	sp, #24
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	003d0900 	.word	0x003d0900
 8002c70:	00f42400 	.word	0x00f42400
 8002c74:	007a1200 	.word	0x007a1200
 8002c78:	08004ffc 	.word	0x08004ffc

08002c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c80:	4b02      	ldr	r3, [pc, #8]	; (8002c8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	0018      	movs	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	20000000 	.word	0x20000000

08002c90 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d100      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8002ca2:	e0c7      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002ca4:	2317      	movs	r3, #23
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cac:	4b91      	ldr	r3, [pc, #580]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	055b      	lsls	r3, r3, #21
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d10a      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb8:	4b8e      	ldr	r3, [pc, #568]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cbc:	4b8d      	ldr	r3, [pc, #564]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cbe:	2180      	movs	r1, #128	; 0x80
 8002cc0:	0549      	lsls	r1, r1, #21
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002cc6:	2317      	movs	r3, #23
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	2201      	movs	r2, #1
 8002ccc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b8a      	ldr	r3, [pc, #552]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d11a      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cda:	4b87      	ldr	r3, [pc, #540]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4b86      	ldr	r3, [pc, #536]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ce0:	2180      	movs	r1, #128	; 0x80
 8002ce2:	0049      	lsls	r1, r1, #1
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce8:	f7fe fa92 	bl	8001210 <HAL_GetTick>
 8002cec:	0003      	movs	r3, r0
 8002cee:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	e008      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf2:	f7fe fa8d 	bl	8001210 <HAL_GetTick>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b64      	cmp	r3, #100	; 0x64
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e0f2      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	4b7c      	ldr	r3, [pc, #496]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002d10:	4b78      	ldr	r3, [pc, #480]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	23c0      	movs	r3, #192	; 0xc0
 8002d16:	039b      	lsls	r3, r3, #14
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	23c0      	movs	r3, #192	; 0xc0
 8002d22:	039b      	lsls	r3, r3, #14
 8002d24:	4013      	ands	r3, r2
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d013      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	23c0      	movs	r3, #192	; 0xc0
 8002d32:	029b      	lsls	r3, r3, #10
 8002d34:	401a      	ands	r2, r3
 8002d36:	23c0      	movs	r3, #192	; 0xc0
 8002d38:	029b      	lsls	r3, r3, #10
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d10a      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002d3e:	4b6d      	ldr	r3, [pc, #436]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	029b      	lsls	r3, r3, #10
 8002d46:	401a      	ands	r2, r3
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	029b      	lsls	r3, r3, #10
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0ca      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002d54:	4b67      	ldr	r3, [pc, #412]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d58:	23c0      	movs	r3, #192	; 0xc0
 8002d5a:	029b      	lsls	r3, r3, #10
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d03b      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	23c0      	movs	r3, #192	; 0xc0
 8002d6c:	029b      	lsls	r3, r3, #10
 8002d6e:	4013      	ands	r3, r2
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d033      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d02e      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002d80:	4b5c      	ldr	r3, [pc, #368]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d84:	4a5d      	ldr	r2, [pc, #372]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d8a:	4b5a      	ldr	r3, [pc, #360]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d8e:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	0309      	lsls	r1, r1, #12
 8002d94:	430a      	orrs	r2, r1
 8002d96:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d98:	4b56      	ldr	r3, [pc, #344]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d9c:	4b55      	ldr	r3, [pc, #340]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d9e:	4958      	ldr	r1, [pc, #352]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002da0:	400a      	ands	r2, r1
 8002da2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002da4:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4013      	ands	r3, r2
 8002db2:	d014      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe fa2c 	bl	8001210 <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dbc:	e009      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fe fa27 	bl	8001210 <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	4a4e      	ldr	r2, [pc, #312]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e08b      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dd2:	4b48      	ldr	r3, [pc, #288]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d0ef      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	23c0      	movs	r3, #192	; 0xc0
 8002de4:	029b      	lsls	r3, r3, #10
 8002de6:	401a      	ands	r2, r3
 8002de8:	23c0      	movs	r3, #192	; 0xc0
 8002dea:	029b      	lsls	r3, r3, #10
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d10c      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002df0:	4b40      	ldr	r3, [pc, #256]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a44      	ldr	r2, [pc, #272]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	0019      	movs	r1, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	23c0      	movs	r3, #192	; 0xc0
 8002e00:	039b      	lsls	r3, r3, #14
 8002e02:	401a      	ands	r2, r3
 8002e04:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	4b3a      	ldr	r3, [pc, #232]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	23c0      	movs	r3, #192	; 0xc0
 8002e14:	029b      	lsls	r3, r3, #10
 8002e16:	401a      	ands	r2, r3
 8002e18:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e1e:	2317      	movs	r3, #23
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e28:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e2c:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e2e:	4937      	ldr	r1, [pc, #220]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002e30:	400a      	ands	r2, r1
 8002e32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e42:	2203      	movs	r2, #3
 8002e44:	4393      	bics	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2202      	movs	r2, #2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d009      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e60:	220c      	movs	r2, #12
 8002e62:	4393      	bics	r3, r2
 8002e64:	0019      	movs	r1, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2204      	movs	r2, #4
 8002e76:	4013      	ands	r3, r2
 8002e78:	d009      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7e:	4a24      	ldr	r2, [pc, #144]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2208      	movs	r2, #8
 8002e94:	4013      	ands	r3, r2
 8002e96:	d009      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e98:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2240      	movs	r2, #64	; 0x40
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d009      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	4a17      	ldr	r2, [pc, #92]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69da      	ldr	r2, [r3, #28]
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2280      	movs	r2, #128	; 0x80
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d009      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002ed4:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed8:	4a10      	ldr	r2, [pc, #64]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	0019      	movs	r1, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	0018      	movs	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b006      	add	sp, #24
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40007000 	.word	0x40007000
 8002efc:	fffcffff 	.word	0xfffcffff
 8002f00:	fff7ffff 	.word	0xfff7ffff
 8002f04:	00001388 	.word	0x00001388
 8002f08:	ffcfffff 	.word	0xffcfffff
 8002f0c:	efffffff 	.word	0xefffffff
 8002f10:	fffff3ff 	.word	0xfffff3ff
 8002f14:	ffffcfff 	.word	0xffffcfff
 8002f18:	fbffffff 	.word	0xfbffffff
 8002f1c:	fff3ffff 	.word	0xfff3ffff

08002f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e059      	b.n	8002fe6 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2251      	movs	r2, #81	; 0x51
 8002f3c:	5c9b      	ldrb	r3, [r3, r2]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d107      	bne.n	8002f54 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2250      	movs	r2, #80	; 0x50
 8002f48:	2100      	movs	r1, #0
 8002f4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f001 fe6c 	bl	8004c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2251      	movs	r2, #81	; 0x51
 8002f58:	2102      	movs	r1, #2
 8002f5a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2140      	movs	r1, #64	; 0x40
 8002f68:	438a      	bics	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6999      	ldr	r1, [r3, #24]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	400b      	ands	r3, r1
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	0011      	movs	r1, r2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	0c1b      	lsrs	r3, r3, #16
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	0019      	movs	r1, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4907      	ldr	r1, [pc, #28]	; (8002ff0 <HAL_SPI_Init+0xd0>)
 8002fd2:	400a      	ands	r2, r1
 8002fd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2251      	movs	r2, #81	; 0x51
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b002      	add	sp, #8
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	fffff7ff 	.word	0xfffff7ff

08002ff4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	1dbb      	adds	r3, r7, #6
 8003002:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003004:	231f      	movs	r3, #31
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2250      	movs	r2, #80	; 0x50
 8003010:	5c9b      	ldrb	r3, [r3, r2]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_SPI_Transmit+0x26>
 8003016:	2302      	movs	r3, #2
 8003018:	e136      	b.n	8003288 <HAL_SPI_Transmit+0x294>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2250      	movs	r2, #80	; 0x50
 800301e:	2101      	movs	r1, #1
 8003020:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003022:	f7fe f8f5 	bl	8001210 <HAL_GetTick>
 8003026:	0003      	movs	r3, r0
 8003028:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800302a:	2316      	movs	r3, #22
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	1dba      	adds	r2, r7, #6
 8003030:	8812      	ldrh	r2, [r2, #0]
 8003032:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2251      	movs	r2, #81	; 0x51
 8003038:	5c9b      	ldrb	r3, [r3, r2]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d004      	beq.n	800304a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003040:	231f      	movs	r3, #31
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	2202      	movs	r2, #2
 8003046:	701a      	strb	r2, [r3, #0]
    goto error;
 8003048:	e113      	b.n	8003272 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_SPI_Transmit+0x64>
 8003050:	1dbb      	adds	r3, r7, #6
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d104      	bne.n	8003062 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003058:	231f      	movs	r3, #31
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003060:	e107      	b.n	8003272 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2251      	movs	r2, #81	; 0x51
 8003066:	2103      	movs	r1, #3
 8003068:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1dba      	adds	r2, r7, #6
 800307a:	8812      	ldrh	r2, [r2, #0]
 800307c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1dba      	adds	r2, r7, #6
 8003082:	8812      	ldrh	r2, [r2, #0]
 8003084:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d108      	bne.n	80030c2 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2180      	movs	r1, #128	; 0x80
 80030bc:	01c9      	lsls	r1, r1, #7
 80030be:	430a      	orrs	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2240      	movs	r2, #64	; 0x40
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d007      	beq.n	80030e0 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2140      	movs	r1, #64	; 0x40
 80030dc:	430a      	orrs	r2, r1
 80030de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d14e      	bne.n	800318a <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d004      	beq.n	80030fe <HAL_SPI_Transmit+0x10a>
 80030f4:	2316      	movs	r3, #22
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d13f      	bne.n	800317e <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	881a      	ldrh	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003122:	e02c      	b.n	800317e <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2202      	movs	r2, #2
 800312c:	4013      	ands	r3, r2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d112      	bne.n	8003158 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	881a      	ldrh	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	1c9a      	adds	r2, r3, #2
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	86da      	strh	r2, [r3, #54]	; 0x36
 8003156:	e012      	b.n	800317e <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003158:	f7fe f85a 	bl	8001210 <HAL_GetTick>
 800315c:	0002      	movs	r2, r0
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d802      	bhi.n	800316e <HAL_SPI_Transmit+0x17a>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	3301      	adds	r3, #1
 800316c:	d102      	bne.n	8003174 <HAL_SPI_Transmit+0x180>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d104      	bne.n	800317e <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8003174:	231f      	movs	r3, #31
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	2203      	movs	r2, #3
 800317a:	701a      	strb	r2, [r3, #0]
          goto error;
 800317c:	e079      	b.n	8003272 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1cd      	bne.n	8003124 <HAL_SPI_Transmit+0x130>
 8003188:	e04f      	b.n	800322a <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d004      	beq.n	800319c <HAL_SPI_Transmit+0x1a8>
 8003192:	2316      	movs	r3, #22
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d141      	bne.n	8003220 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	330c      	adds	r3, #12
 80031a6:	7812      	ldrb	r2, [r2, #0]
 80031a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031c2:	e02d      	b.n	8003220 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2202      	movs	r2, #2
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d113      	bne.n	80031fa <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	330c      	adds	r3, #12
 80031dc:	7812      	ldrb	r2, [r2, #0]
 80031de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80031f8:	e012      	b.n	8003220 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031fa:	f7fe f809 	bl	8001210 <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d802      	bhi.n	8003210 <HAL_SPI_Transmit+0x21c>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	d102      	bne.n	8003216 <HAL_SPI_Transmit+0x222>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8003216:	231f      	movs	r3, #31
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	2203      	movs	r2, #3
 800321c:	701a      	strb	r2, [r3, #0]
          goto error;
 800321e:	e028      	b.n	8003272 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1cc      	bne.n	80031c4 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	6839      	ldr	r1, [r7, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	0018      	movs	r0, r3
 8003232:	f000 f8a9 	bl	8003388 <SPI_EndRxTxTransaction>
 8003236:	1e03      	subs	r3, r0, #0
 8003238:	d002      	beq.n	8003240 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	2b00      	cmp	r3, #0
 8003264:	d004      	beq.n	8003270 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8003266:	231f      	movs	r3, #31
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e000      	b.n	8003272 <HAL_SPI_Transmit+0x27e>
  }

error:
 8003270:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2251      	movs	r2, #81	; 0x51
 8003276:	2101      	movs	r1, #1
 8003278:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2250      	movs	r2, #80	; 0x50
 800327e:	2100      	movs	r1, #0
 8003280:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003282:	231f      	movs	r3, #31
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	781b      	ldrb	r3, [r3, #0]
}
 8003288:	0018      	movs	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	b008      	add	sp, #32
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2251      	movs	r2, #81	; 0x51
 800329c:	5c9b      	ldrb	r3, [r3, r2]
 800329e:	b2db      	uxtb	r3, r3
}
 80032a0:	0018      	movs	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b002      	add	sp, #8
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	1dfb      	adds	r3, r7, #7
 80032b6:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032b8:	e050      	b.n	800335c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	d04d      	beq.n	800335c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80032c0:	f7fd ffa6 	bl	8001210 <HAL_GetTick>
 80032c4:	0002      	movs	r2, r0
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d902      	bls.n	80032d6 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d142      	bne.n	800335c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	21e0      	movs	r1, #224	; 0xe0
 80032e2:	438a      	bics	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	2382      	movs	r3, #130	; 0x82
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d113      	bne.n	800331a <SPI_WaitFlagStateUntilTimeout+0x72>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d005      	beq.n	800330a <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	429a      	cmp	r2, r3
 8003308:	d107      	bne.n	800331a <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2140      	movs	r1, #64	; 0x40
 8003316:	438a      	bics	r2, r1
 8003318:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	019b      	lsls	r3, r3, #6
 8003322:	429a      	cmp	r2, r3
 8003324:	d110      	bne.n	8003348 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4914      	ldr	r1, [pc, #80]	; (8003384 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8003332:	400a      	ands	r2, r1
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	0189      	lsls	r1, r1, #6
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2251      	movs	r2, #81	; 0x51
 800334c:	2101      	movs	r1, #1
 800334e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2250      	movs	r2, #80	; 0x50
 8003354:	2100      	movs	r1, #0
 8003356:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e00f      	b.n	800337c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	4013      	ands	r3, r2
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	425a      	negs	r2, r3
 800336c:	4153      	adcs	r3, r2
 800336e:	b2db      	uxtb	r3, r3
 8003370:	001a      	movs	r2, r3
 8003372:	1dfb      	adds	r3, r7, #7
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d19f      	bne.n	80032ba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	0018      	movs	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	b004      	add	sp, #16
 8003382:	bd80      	pop	{r7, pc}
 8003384:	ffffdfff 	.word	0xffffdfff

08003388 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	2382      	movs	r3, #130	; 0x82
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	429a      	cmp	r2, r3
 800339e:	d112      	bne.n	80033c6 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	0013      	movs	r3, r2
 80033aa:	2200      	movs	r2, #0
 80033ac:	2180      	movs	r1, #128	; 0x80
 80033ae:	f7ff ff7b 	bl	80032a8 <SPI_WaitFlagStateUntilTimeout>
 80033b2:	1e03      	subs	r3, r0, #0
 80033b4:	d020      	beq.n	80033f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ba:	2220      	movs	r2, #32
 80033bc:	431a      	orrs	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e019      	b.n	80033fa <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2251      	movs	r2, #81	; 0x51
 80033ca:	5c9b      	ldrb	r3, [r3, r2]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	d112      	bne.n	80033f8 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	0013      	movs	r3, r2
 80033dc:	2200      	movs	r2, #0
 80033de:	2101      	movs	r1, #1
 80033e0:	f7ff ff62 	bl	80032a8 <SPI_WaitFlagStateUntilTimeout>
 80033e4:	1e03      	subs	r3, r0, #0
 80033e6:	d007      	beq.n	80033f8 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ec:	2220      	movs	r2, #32
 80033ee:	431a      	orrs	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e000      	b.n	80033fa <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	0018      	movs	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b004      	add	sp, #16
 8003400:	bd80      	pop	{r7, pc}

08003402 <_ZN8APDS99606enable3getEv>:
    uint8_t PIEN : 1;

    // gesture enable
    uint8_t GEN : 1;

    uint8_t get() {
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
      return (GEN << 6) | (PIEN << 5) | (AIEN << 4) | (WEN << 3) | (PEN << 2) |
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	065b      	lsls	r3, r3, #25
 8003410:	0fdb      	lsrs	r3, r3, #31
 8003412:	b2db      	uxtb	r3, r3
 8003414:	019b      	lsls	r3, r3, #6
 8003416:	b25a      	sxtb	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	069b      	lsls	r3, r3, #26
 800341e:	0fdb      	lsrs	r3, r3, #31
 8003420:	b2db      	uxtb	r3, r3
 8003422:	015b      	lsls	r3, r3, #5
 8003424:	b25b      	sxtb	r3, r3
 8003426:	4313      	orrs	r3, r2
 8003428:	b25a      	sxtb	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	06db      	lsls	r3, r3, #27
 8003430:	0fdb      	lsrs	r3, r3, #31
 8003432:	b2db      	uxtb	r3, r3
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	b25b      	sxtb	r3, r3
 8003438:	4313      	orrs	r3, r2
 800343a:	b25a      	sxtb	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	071b      	lsls	r3, r3, #28
 8003442:	0fdb      	lsrs	r3, r3, #31
 8003444:	b2db      	uxtb	r3, r3
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	b25b      	sxtb	r3, r3
 800344a:	4313      	orrs	r3, r2
 800344c:	b25a      	sxtb	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	075b      	lsls	r3, r3, #29
 8003454:	0fdb      	lsrs	r3, r3, #31
 8003456:	b2db      	uxtb	r3, r3
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	b25b      	sxtb	r3, r3
 800345c:	4313      	orrs	r3, r2
 800345e:	b25a      	sxtb	r2, r3
             (AEN << 1) | PON;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	079b      	lsls	r3, r3, #30
 8003466:	0fdb      	lsrs	r3, r3, #31
 8003468:	b2db      	uxtb	r3, r3
 800346a:	005b      	lsls	r3, r3, #1
      return (GEN << 6) | (PIEN << 5) | (AIEN << 4) | (WEN << 3) | (PEN << 2) |
 800346c:	b25b      	sxtb	r3, r3
 800346e:	4313      	orrs	r3, r2
 8003470:	b25a      	sxtb	r2, r3
             (AEN << 1) | PON;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	07db      	lsls	r3, r3, #31
 8003478:	0fdb      	lsrs	r3, r3, #31
 800347a:	b2db      	uxtb	r3, r3
 800347c:	b25b      	sxtb	r3, r3
 800347e:	4313      	orrs	r3, r2
 8003480:	b25b      	sxtb	r3, r3
 8003482:	b2db      	uxtb	r3, r3
    };
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <_ZN8APDS99607control3getEv>:
    uint8_t PGAIN : 2;

    // led drive strength
    uint8_t LDRIVE : 2;

    uint8_t get() { return (LDRIVE << 6) | (PGAIN << 2) | AGAIN; }
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	069b      	lsls	r3, r3, #26
 800349a:	0f9b      	lsrs	r3, r3, #30
 800349c:	b2db      	uxtb	r3, r3
 800349e:	019b      	lsls	r3, r3, #6
 80034a0:	b25a      	sxtb	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	071b      	lsls	r3, r3, #28
 80034a8:	0f9b      	lsrs	r3, r3, #30
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	b25b      	sxtb	r3, r3
 80034b0:	4313      	orrs	r3, r2
 80034b2:	b25a      	sxtb	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	079b      	lsls	r3, r3, #30
 80034ba:	0f9b      	lsrs	r3, r3, #30
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	b25b      	sxtb	r3, r3
 80034c0:	4313      	orrs	r3, r2
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	0018      	movs	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b002      	add	sp, #8
 80034cc:	bd80      	pop	{r7, pc}

080034ce <_ZN8APDS99606gconf13getEv>:
    /* Gesture FIFO Threshold. This value is compared with the FIFO Level (i.e.
    the number of UDLR datasets) to generate an interrupt (if enabled).
    */
    uint8_t GFIFOTH : 2;

    uint8_t get() { return (GFIFOTH << 6) | (GEXMSK << 2) | GEXPERS; }
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	061b      	lsls	r3, r3, #24
 80034dc:	0f9b      	lsrs	r3, r3, #30
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	019b      	lsls	r3, r3, #6
 80034e2:	b25a      	sxtb	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	069b      	lsls	r3, r3, #26
 80034ea:	0f1b      	lsrs	r3, r3, #28
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	b25b      	sxtb	r3, r3
 80034f2:	4313      	orrs	r3, r2
 80034f4:	b25a      	sxtb	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	079b      	lsls	r3, r3, #30
 80034fc:	0f9b      	lsrs	r3, r3, #30
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	b25b      	sxtb	r3, r3
 8003502:	4313      	orrs	r3, r2
 8003504:	b25b      	sxtb	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}

08003510 <_ZN8APDS99606gconf23getEv>:

    // Gesture Gain Control. Sets the gain of the proximity receiver in gesture
    // mode.
    uint8_t GGAIN : 2;

    uint8_t get() { return (GGAIN << 5) | (GLDRIVE << 3) | GWTIME; }
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	065b      	lsls	r3, r3, #25
 800351e:	0f9b      	lsrs	r3, r3, #30
 8003520:	b2db      	uxtb	r3, r3
 8003522:	015b      	lsls	r3, r3, #5
 8003524:	b25a      	sxtb	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	06db      	lsls	r3, r3, #27
 800352c:	0f9b      	lsrs	r3, r3, #30
 800352e:	b2db      	uxtb	r3, r3
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	b25b      	sxtb	r3, r3
 8003534:	4313      	orrs	r3, r2
 8003536:	b25a      	sxtb	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	075b      	lsls	r3, r3, #29
 800353e:	0f5b      	lsrs	r3, r3, #29
 8003540:	b2db      	uxtb	r3, r3
 8003542:	b25b      	sxtb	r3, r3
 8003544:	4313      	orrs	r3, r2
 8003546:	b25b      	sxtb	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b002      	add	sp, #8
 8003550:	bd80      	pop	{r7, pc}

08003552 <_ZN8APDS99606gpulse3getEv>:

    // Gesture Pulse Length. Sets the LED_ON pulse width during a Gesture LDR
    // Pulse.
    uint8_t GPLEN : 2;

    uint8_t get() { return (GPLEN << 6) | GPULSE; }
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	061b      	lsls	r3, r3, #24
 8003560:	0f9b      	lsrs	r3, r3, #30
 8003562:	b2db      	uxtb	r3, r3
 8003564:	019b      	lsls	r3, r3, #6
 8003566:	b25a      	sxtb	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	069b      	lsls	r3, r3, #26
 800356e:	0e9b      	lsrs	r3, r3, #26
 8003570:	b2db      	uxtb	r3, r3
 8003572:	b25b      	sxtb	r3, r3
 8003574:	4313      	orrs	r3, r2
 8003576:	b25b      	sxtb	r3, r3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	0018      	movs	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	b002      	add	sp, #8
 8003580:	bd80      	pop	{r7, pc}

08003582 <_ZN8APDS99606gconf33getEv>:
    /* Gesture Dimension Select. Selects which gesture photodiode pairs are
    enabled to gather results during gesture.
    */
    uint8_t GDIMS : 2;

    uint8_t get() { return GDIMS; }
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	079b      	lsls	r3, r3, #30
 8003590:	0f9b      	lsrs	r3, r3, #30
 8003592:	b2db      	uxtb	r3, r3
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b002      	add	sp, #8
 800359a:	bd80      	pop	{r7, pc}

0800359c <_ZN8APDS99606gconf43getEv>:
    /* Gesture interrupt enable. Gesture Interrupt Enable. When asserted, all
    gesture related interrupts are unmasked.
    */
    uint8_t GIEN : 2;

    uint8_t get() { return (GIEN << 1) | GMODE; }
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	075b      	lsls	r3, r3, #29
 80035aa:	0f9b      	lsrs	r3, r3, #30
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	b25a      	sxtb	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	07db      	lsls	r3, r3, #31
 80035b8:	0fdb      	lsrs	r3, r3, #31
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	b25b      	sxtb	r3, r3
 80035be:	4313      	orrs	r3, r2
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	0018      	movs	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}

080035cc <_ZN8APDS99606enableEb>:
 *  @brief  Enables the device
 *          Disables the device (putting it in lower power sleep mode)
 *  @param  en
 *          Enable (True/False)
 */
void APDS9960::enable(bool en) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	000a      	movs	r2, r1
 80035d6:	1cfb      	adds	r3, r7, #3
 80035d8:	701a      	strb	r2, [r3, #0]
  _enable.PON = en;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	1cfa      	adds	r2, r7, #3
 80035de:	7812      	ldrb	r2, [r2, #0]
 80035e0:	2101      	movs	r1, #1
 80035e2:	0010      	movs	r0, r2
 80035e4:	4008      	ands	r0, r1
 80035e6:	7a9a      	ldrb	r2, [r3, #10]
 80035e8:	2101      	movs	r1, #1
 80035ea:	438a      	bics	r2, r1
 80035ec:	1c11      	adds	r1, r2, #0
 80035ee:	1c02      	adds	r2, r0, #0
 80035f0:	430a      	orrs	r2, r1
 80035f2:	729a      	strb	r2, [r3, #10]
  this->write8(APDS9960_ENABLE, _enable.get());
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	330a      	adds	r3, #10
 80035f8:	0018      	movs	r0, r3
 80035fa:	f7ff ff02 	bl	8003402 <_ZN8APDS99606enable3getEv>
 80035fe:	0003      	movs	r3, r0
 8003600:	001a      	movs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2180      	movs	r1, #128	; 0x80
 8003606:	0018      	movs	r0, r3
 8003608:	f000 fa9a 	bl	8003b40 <_ZN8APDS99606write8Ehh>
}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}

08003614 <_ZN8APDS99605beginEt15apds9960AGain_th>:
 *  @param  *theWire
 *          Wire object
 *  @return True if initialization was successful, otherwise false.
 */
bool APDS9960::begin(uint16_t iTimeMS, apds9960AGain_t aGain,
                                 uint8_t addr) {
 8003614:	b5b0      	push	{r4, r5, r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	000c      	movs	r4, r1
 800361e:	0010      	movs	r0, r2
 8003620:	0019      	movs	r1, r3
 8003622:	1cbb      	adds	r3, r7, #2
 8003624:	1c22      	adds	r2, r4, #0
 8003626:	801a      	strh	r2, [r3, #0]
 8003628:	1c7b      	adds	r3, r7, #1
 800362a:	1c02      	adds	r2, r0, #0
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	003b      	movs	r3, r7
 8003630:	1c0a      	adds	r2, r1, #0
 8003632:	701a      	strb	r2, [r3, #0]
  _i2caddr = addr;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	003a      	movs	r2, r7
 8003638:	7812      	ldrb	r2, [r2, #0]
 800363a:	701a      	strb	r2, [r3, #0]

  /* Make sure we're actually connected */
  uint8_t x = read8(APDS9960_ID);
 800363c:	250f      	movs	r5, #15
 800363e:	197c      	adds	r4, r7, r5
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2192      	movs	r1, #146	; 0x92
 8003644:	0018      	movs	r0, r3
 8003646:	f000 fa93 	bl	8003b70 <_ZN8APDS99605read8Eh>
 800364a:	0003      	movs	r3, r0
 800364c:	7023      	strb	r3, [r4, #0]
  if (x != 0xAB) {
 800364e:	197b      	adds	r3, r7, r5
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2bab      	cmp	r3, #171	; 0xab
 8003654:	d001      	beq.n	800365a <_ZN8APDS99605beginEt15apds9960AGain_th+0x46>
    return false;
 8003656:	2300      	movs	r3, #0
 8003658:	e06b      	b.n	8003732 <_ZN8APDS99605beginEt15apds9960AGain_th+0x11e>
  }

  /* Set default integration time and gain */
  setADCIntegrationTime(iTimeMS);
 800365a:	1cbb      	adds	r3, r7, #2
 800365c:	881a      	ldrh	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	0011      	movs	r1, r2
 8003662:	0018      	movs	r0, r3
 8003664:	f000 f86a 	bl	800373c <_ZN8APDS996021setADCIntegrationTimeEt>
  setADCGain(aGain);
 8003668:	1c7b      	adds	r3, r7, #1
 800366a:	781a      	ldrb	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0011      	movs	r1, r2
 8003670:	0018      	movs	r0, r3
 8003672:	f000 f8ab 	bl	80037cc <_ZN8APDS996010setADCGainE15apds9960AGain_t>

  // disable everything to start
  enableGesture(false);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2100      	movs	r1, #0
 800367a:	0018      	movs	r0, r3
 800367c:	f000 f98f 	bl	800399e <_ZN8APDS996013enableGestureEb>
  enableProximity(false);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2100      	movs	r1, #0
 8003684:	0018      	movs	r0, r3
 8003686:	f000 f8c8 	bl	800381a <_ZN8APDS996015enableProximityEb>
  enableColor(false);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2100      	movs	r1, #0
 800368e:	0018      	movs	r0, r3
 8003690:	f000 f9dc 	bl	8003a4c <_ZN8APDS996011enableColorEb>

  disableColorInterrupt();
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	0018      	movs	r0, r3
 8003698:	f000 fa2b 	bl	8003af2 <_ZN8APDS996021disableColorInterruptEv>
  disableProximityInterrupt();
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 f8df 	bl	8003862 <_ZN8APDS996025disableProximityInterruptEv>
  clearInterrupt();
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	0018      	movs	r0, r3
 80036a8:	f000 fa3c 	bl	8003b24 <_ZN8APDS996014clearInterruptEv>

  /* Note: by default, the device is in power down mode on bootup */
  enable(false);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2100      	movs	r1, #0
 80036b0:	0018      	movs	r0, r3
 80036b2:	f7ff ff8b 	bl	80035cc <_ZN8APDS99606enableEb>
  HAL_Delay(10);
 80036b6:	200a      	movs	r0, #10
 80036b8:	f7fd fdb4 	bl	8001224 <HAL_Delay>
  enable(true);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2101      	movs	r1, #1
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7ff ff83 	bl	80035cc <_ZN8APDS99606enableEb>
  HAL_Delay(10);
 80036c6:	200a      	movs	r0, #10
 80036c8:	f7fd fdac 	bl	8001224 <HAL_Delay>

  // default to all gesture dimensions
  setGestureDimensions(APDS9960_DIMENSIONS_ALL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2100      	movs	r1, #0
 80036d0:	0018      	movs	r0, r3
 80036d2:	f000 f8df 	bl	8003894 <_ZN8APDS996020setGestureDimensionsEh>
  setGestureFIFOThreshold(APDS9960_GFIFO_4);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2101      	movs	r1, #1
 80036da:	0018      	movs	r0, r3
 80036dc:	f000 f901 	bl	80038e2 <_ZN8APDS996023setGestureFIFOThresholdEh>
  setGestureGain(APDS9960_GGAIN_4);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2102      	movs	r1, #2
 80036e4:	0018      	movs	r0, r3
 80036e6:	f000 f921 	bl	800392c <_ZN8APDS996014setGestureGainEh>
  setGestureProximityThreshold(50);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2132      	movs	r1, #50	; 0x32
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 f943 	bl	800397a <_ZN8APDS996028setGestureProximityThresholdEh>
  resetCounts();
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	0018      	movs	r0, r3
 80036f8:	f000 f991 	bl	8003a1e <_ZN8APDS996011resetCountsEv>

  _gpulse.GPLEN = APDS9960_GPULSE_32US;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	7d1a      	ldrb	r2, [r3, #20]
 8003700:	2140      	movs	r1, #64	; 0x40
 8003702:	4249      	negs	r1, r1
 8003704:	430a      	orrs	r2, r1
 8003706:	751a      	strb	r2, [r3, #20]
  _gpulse.GPULSE = 9; // 10 pulses
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	7d1a      	ldrb	r2, [r3, #20]
 800370c:	213f      	movs	r1, #63	; 0x3f
 800370e:	438a      	bics	r2, r1
 8003710:	1c11      	adds	r1, r2, #0
 8003712:	2209      	movs	r2, #9
 8003714:	430a      	orrs	r2, r1
 8003716:	751a      	strb	r2, [r3, #20]
  this->write8(APDS9960_GPULSE, _gpulse.get());
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3314      	adds	r3, #20
 800371c:	0018      	movs	r0, r3
 800371e:	f7ff ff18 	bl	8003552 <_ZN8APDS99606gpulse3getEv>
 8003722:	0003      	movs	r3, r0
 8003724:	001a      	movs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	21a6      	movs	r1, #166	; 0xa6
 800372a:	0018      	movs	r0, r3
 800372c:	f000 fa08 	bl	8003b40 <_ZN8APDS99606write8Ehh>

  return true;
 8003730:	2301      	movs	r3, #1
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b004      	add	sp, #16
 8003738:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800373c <_ZN8APDS996021setADCIntegrationTimeEt>:
/*!
 *  @brief  Sets the integration time for the ADC of the APDS9960, in millis
 *  @param  iTimeMS
 *          Integration time
 */
void APDS9960::setADCIntegrationTime(uint16_t iTimeMS) {
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	000a      	movs	r2, r1
 8003746:	1cbb      	adds	r3, r7, #2
 8003748:	801a      	strh	r2, [r3, #0]
  float temp;

  // convert ms into 2.78ms increments
  temp = iTimeMS;
 800374a:	1cbb      	adds	r3, r7, #2
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	0018      	movs	r0, r3
 8003750:	f7fd f862 	bl	8000818 <__aeabi_ui2f>
 8003754:	1c03      	adds	r3, r0, #0
 8003756:	60fb      	str	r3, [r7, #12]
  temp /= 2.78;
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7fd fc0f 	bl	8000f7c <__aeabi_f2d>
 800375e:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <_ZN8APDS996021setADCIntegrationTimeEt+0x84>)
 8003760:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <_ZN8APDS996021setADCIntegrationTimeEt+0x88>)
 8003762:	f7fd f899 	bl	8000898 <__aeabi_ddiv>
 8003766:	0003      	movs	r3, r0
 8003768:	000c      	movs	r4, r1
 800376a:	0018      	movs	r0, r3
 800376c:	0021      	movs	r1, r4
 800376e:	f7fd fc57 	bl	8001020 <__aeabi_d2f>
 8003772:	1c03      	adds	r3, r0, #0
 8003774:	60fb      	str	r3, [r7, #12]
  temp = 256 - temp;
 8003776:	68f9      	ldr	r1, [r7, #12]
 8003778:	2087      	movs	r0, #135	; 0x87
 800377a:	05c0      	lsls	r0, r0, #23
 800377c:	f7fc fe68 	bl	8000450 <__aeabi_fsub>
 8003780:	1c03      	adds	r3, r0, #0
 8003782:	60fb      	str	r3, [r7, #12]
  if (temp > 255)
 8003784:	4910      	ldr	r1, [pc, #64]	; (80037c8 <_ZN8APDS996021setADCIntegrationTimeEt+0x8c>)
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7fc fd70 	bl	800026c <__aeabi_fcmpgt>
 800378c:	1e03      	subs	r3, r0, #0
 800378e:	d001      	beq.n	8003794 <_ZN8APDS996021setADCIntegrationTimeEt+0x58>
    temp = 255;
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <_ZN8APDS996021setADCIntegrationTimeEt+0x8c>)
 8003792:	60fb      	str	r3, [r7, #12]
  if (temp < 0)
 8003794:	2100      	movs	r1, #0
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f7fc fd54 	bl	8000244 <__aeabi_fcmplt>
 800379c:	1e03      	subs	r3, r0, #0
 800379e:	d001      	beq.n	80037a4 <_ZN8APDS996021setADCIntegrationTimeEt+0x68>
    temp = 0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Update the timing register */
  write8(APDS9960_ATIME, (uint8_t)temp);
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7fc fd75 	bl	8000294 <__aeabi_f2uiz>
 80037aa:	0003      	movs	r3, r0
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2181      	movs	r1, #129	; 0x81
 80037b2:	0018      	movs	r0, r3
 80037b4:	f000 f9c4 	bl	8003b40 <_ZN8APDS99606write8Ehh>
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b005      	add	sp, #20
 80037be:	bd90      	pop	{r4, r7, pc}
 80037c0:	a3d70a3d 	.word	0xa3d70a3d
 80037c4:	40063d70 	.word	0x40063d70
 80037c8:	437f0000 	.word	0x437f0000

080037cc <_ZN8APDS996010setADCGainE15apds9960AGain_t>:
 *  @brief  Adjusts the color/ALS gain on the APDS9960 (adjusts the sensitivity
 *          to light)
 *  @param  aGain
 *          Gain
 */
void APDS9960::setADCGain(apds9960AGain_t aGain) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	000a      	movs	r2, r1
 80037d6:	1cfb      	adds	r3, r7, #3
 80037d8:	701a      	strb	r2, [r3, #0]
  _control.AGAIN = aGain;
 80037da:	1cfb      	adds	r3, r7, #3
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2203      	movs	r2, #3
 80037e0:	4013      	ands	r3, r2
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2103      	movs	r1, #3
 80037e8:	400a      	ands	r2, r1
 80037ea:	0010      	movs	r0, r2
 80037ec:	7b9a      	ldrb	r2, [r3, #14]
 80037ee:	2103      	movs	r1, #3
 80037f0:	438a      	bics	r2, r1
 80037f2:	1c11      	adds	r1, r2, #0
 80037f4:	1c02      	adds	r2, r0, #0
 80037f6:	430a      	orrs	r2, r1
 80037f8:	739a      	strb	r2, [r3, #14]

  /* Update the timing register */
  write8(APDS9960_CONTROL, _control.get());
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	330e      	adds	r3, #14
 80037fe:	0018      	movs	r0, r3
 8003800:	f7ff fe44 	bl	800348c <_ZN8APDS99607control3getEv>
 8003804:	0003      	movs	r3, r0
 8003806:	001a      	movs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	218f      	movs	r1, #143	; 0x8f
 800380c:	0018      	movs	r0, r3
 800380e:	f000 f997 	bl	8003b40 <_ZN8APDS99606write8Ehh>
}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	46bd      	mov	sp, r7
 8003816:	b002      	add	sp, #8
 8003818:	bd80      	pop	{r7, pc}

0800381a <_ZN8APDS996015enableProximityEb>:
/*!
 *  @brief  Enable proximity readings on APDS9960
 *  @param  en
 *          Enable (True/False)
 */
void APDS9960::enableProximity(bool en) {
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	000a      	movs	r2, r1
 8003824:	1cfb      	adds	r3, r7, #3
 8003826:	701a      	strb	r2, [r3, #0]
  _enable.PEN = en;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	1cfa      	adds	r2, r7, #3
 800382c:	7812      	ldrb	r2, [r2, #0]
 800382e:	2101      	movs	r1, #1
 8003830:	400a      	ands	r2, r1
 8003832:	0090      	lsls	r0, r2, #2
 8003834:	7a9a      	ldrb	r2, [r3, #10]
 8003836:	2104      	movs	r1, #4
 8003838:	438a      	bics	r2, r1
 800383a:	1c11      	adds	r1, r2, #0
 800383c:	1c02      	adds	r2, r0, #0
 800383e:	430a      	orrs	r2, r1
 8003840:	729a      	strb	r2, [r3, #10]

  write8(APDS9960_ENABLE, _enable.get());
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	330a      	adds	r3, #10
 8003846:	0018      	movs	r0, r3
 8003848:	f7ff fddb 	bl	8003402 <_ZN8APDS99606enable3getEv>
 800384c:	0003      	movs	r3, r0
 800384e:	001a      	movs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2180      	movs	r1, #128	; 0x80
 8003854:	0018      	movs	r0, r3
 8003856:	f000 f973 	bl	8003b40 <_ZN8APDS99606write8Ehh>
}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b002      	add	sp, #8
 8003860:	bd80      	pop	{r7, pc}

08003862 <_ZN8APDS996025disableProximityInterruptEv>:
}

/*!
 *  @brief  Disable proximity interrupts
 */
void APDS9960::disableProximityInterrupt() {
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  _enable.PIEN = 0;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	7a9a      	ldrb	r2, [r3, #10]
 800386e:	2120      	movs	r1, #32
 8003870:	438a      	bics	r2, r1
 8003872:	729a      	strb	r2, [r3, #10]
  write8(APDS9960_ENABLE, _enable.get());
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	330a      	adds	r3, #10
 8003878:	0018      	movs	r0, r3
 800387a:	f7ff fdc2 	bl	8003402 <_ZN8APDS99606enable3getEv>
 800387e:	0003      	movs	r3, r0
 8003880:	001a      	movs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2180      	movs	r1, #128	; 0x80
 8003886:	0018      	movs	r0, r3
 8003888:	f000 f95a 	bl	8003b40 <_ZN8APDS99606write8Ehh>
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	b002      	add	sp, #8
 8003892:	bd80      	pop	{r7, pc}

08003894 <_ZN8APDS996020setGestureDimensionsEh>:
 *  @brief  Sets gesture dimensions
 *  @param  dims
 *          Dimensions (APDS9960_DIMENSIONS_ALL, APDS9960_DIMENSIONS_UP_DOWM,
 *          APDS9960_DIMENSIONS_UP_DOWN, APGS9960_DIMENSIONS_LEFT_RIGHT)
 */
void APDS9960::setGestureDimensions(uint8_t dims) {
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	000a      	movs	r2, r1
 800389e:	1cfb      	adds	r3, r7, #3
 80038a0:	701a      	strb	r2, [r3, #0]
  _gconf3.GDIMS = dims;
 80038a2:	1cfb      	adds	r3, r7, #3
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2203      	movs	r2, #3
 80038a8:	4013      	ands	r3, r2
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2103      	movs	r1, #3
 80038b0:	400a      	ands	r2, r1
 80038b2:	0010      	movs	r0, r2
 80038b4:	7d5a      	ldrb	r2, [r3, #21]
 80038b6:	2103      	movs	r1, #3
 80038b8:	438a      	bics	r2, r1
 80038ba:	1c11      	adds	r1, r2, #0
 80038bc:	1c02      	adds	r2, r0, #0
 80038be:	430a      	orrs	r2, r1
 80038c0:	755a      	strb	r2, [r3, #21]
  this->write8(APDS9960_GCONF3, _gconf3.get());
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3315      	adds	r3, #21
 80038c6:	0018      	movs	r0, r3
 80038c8:	f7ff fe5b 	bl	8003582 <_ZN8APDS99606gconf33getEv>
 80038cc:	0003      	movs	r3, r0
 80038ce:	001a      	movs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	21aa      	movs	r1, #170	; 0xaa
 80038d4:	0018      	movs	r0, r3
 80038d6:	f000 f933 	bl	8003b40 <_ZN8APDS99606write8Ehh>
}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	46bd      	mov	sp, r7
 80038de:	b002      	add	sp, #8
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <_ZN8APDS996023setGestureFIFOThresholdEh>:
 *  @brief  Sets gesture FIFO Threshold
 *  @param  thresh
 *          Threshold (APDS9960_GFIFO_1, APDS9960_GFIFO_4, APDS9960_GFIFO_8,
 *          APDS9960_GFIFO_16)
 */
void APDS9960::setGestureFIFOThreshold(uint8_t thresh) {
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	000a      	movs	r2, r1
 80038ec:	1cfb      	adds	r3, r7, #3
 80038ee:	701a      	strb	r2, [r3, #0]
  _gconf1.GFIFOTH = thresh;
 80038f0:	1cfb      	adds	r3, r7, #3
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2203      	movs	r2, #3
 80038f6:	4013      	ands	r3, r2
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	0190      	lsls	r0, r2, #6
 80038fe:	7c9a      	ldrb	r2, [r3, #18]
 8003900:	213f      	movs	r1, #63	; 0x3f
 8003902:	400a      	ands	r2, r1
 8003904:	1c11      	adds	r1, r2, #0
 8003906:	1c02      	adds	r2, r0, #0
 8003908:	430a      	orrs	r2, r1
 800390a:	749a      	strb	r2, [r3, #18]
  this->write8(APDS9960_GCONF1, _gconf1.get());
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3312      	adds	r3, #18
 8003910:	0018      	movs	r0, r3
 8003912:	f7ff fddc 	bl	80034ce <_ZN8APDS99606gconf13getEv>
 8003916:	0003      	movs	r3, r0
 8003918:	001a      	movs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	21a2      	movs	r1, #162	; 0xa2
 800391e:	0018      	movs	r0, r3
 8003920:	f000 f90e 	bl	8003b40 <_ZN8APDS99606write8Ehh>
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}

0800392c <_ZN8APDS996014setGestureGainEh>:
 *  @brief  Sets gesture sensor gain
 *  @param  gain
 *          Gain (APDS9960_GAIN_1, APDS9960_GAIN_2, APDS9960_GAIN_4,
 *          APDS9960_GAIN_8)
 */
void APDS9960::setGestureGain(uint8_t gain) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	000a      	movs	r2, r1
 8003936:	1cfb      	adds	r3, r7, #3
 8003938:	701a      	strb	r2, [r3, #0]
  _gconf2.GGAIN = gain;
 800393a:	1cfb      	adds	r3, r7, #3
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2203      	movs	r2, #3
 8003940:	4013      	ands	r3, r2
 8003942:	b2da      	uxtb	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2103      	movs	r1, #3
 8003948:	400a      	ands	r2, r1
 800394a:	0150      	lsls	r0, r2, #5
 800394c:	7cda      	ldrb	r2, [r3, #19]
 800394e:	2160      	movs	r1, #96	; 0x60
 8003950:	438a      	bics	r2, r1
 8003952:	1c11      	adds	r1, r2, #0
 8003954:	1c02      	adds	r2, r0, #0
 8003956:	430a      	orrs	r2, r1
 8003958:	74da      	strb	r2, [r3, #19]
  this->write8(APDS9960_GCONF2, _gconf2.get());
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3313      	adds	r3, #19
 800395e:	0018      	movs	r0, r3
 8003960:	f7ff fdd6 	bl	8003510 <_ZN8APDS99606gconf23getEv>
 8003964:	0003      	movs	r3, r0
 8003966:	001a      	movs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	21a3      	movs	r1, #163	; 0xa3
 800396c:	0018      	movs	r0, r3
 800396e:	f000 f8e7 	bl	8003b40 <_ZN8APDS99606write8Ehh>
}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	46bd      	mov	sp, r7
 8003976:	b002      	add	sp, #8
 8003978:	bd80      	pop	{r7, pc}

0800397a <_ZN8APDS996028setGestureProximityThresholdEh>:
/*!
 *  @brief  Sets gesture sensor threshold
 *  @param  thresh
 *          Threshold
 */
void APDS9960::setGestureProximityThreshold(uint8_t thresh) {
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	000a      	movs	r2, r1
 8003984:	1cfb      	adds	r3, r7, #3
 8003986:	701a      	strb	r2, [r3, #0]
  this->write8(APDS9960_GPENTH, thresh);
 8003988:	1cfb      	adds	r3, r7, #3
 800398a:	781a      	ldrb	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	21a0      	movs	r1, #160	; 0xa0
 8003990:	0018      	movs	r0, r3
 8003992:	f000 f8d5 	bl	8003b40 <_ZN8APDS99606write8Ehh>
}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	b002      	add	sp, #8
 800399c:	bd80      	pop	{r7, pc}

0800399e <_ZN8APDS996013enableGestureEb>:
/*!
 *  @brief  Enable gesture readings on APDS9960
 *  @param  en
 *          Enable (True/False)
 */
void APDS9960::enableGesture(bool en) {
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	000a      	movs	r2, r1
 80039a8:	1cfb      	adds	r3, r7, #3
 80039aa:	701a      	strb	r2, [r3, #0]
  if (!en) {
 80039ac:	1cfb      	adds	r3, r7, #3
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2201      	movs	r2, #1
 80039b2:	4053      	eors	r3, r2
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d010      	beq.n	80039dc <_ZN8APDS996013enableGestureEb+0x3e>
    _gconf4.GMODE = 0;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	7d9a      	ldrb	r2, [r3, #22]
 80039be:	2101      	movs	r1, #1
 80039c0:	438a      	bics	r2, r1
 80039c2:	759a      	strb	r2, [r3, #22]
    write8(APDS9960_GCONF4, _gconf4.get());
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3316      	adds	r3, #22
 80039c8:	0018      	movs	r0, r3
 80039ca:	f7ff fde7 	bl	800359c <_ZN8APDS99606gconf43getEv>
 80039ce:	0003      	movs	r3, r0
 80039d0:	001a      	movs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	21ab      	movs	r1, #171	; 0xab
 80039d6:	0018      	movs	r0, r3
 80039d8:	f000 f8b2 	bl	8003b40 <_ZN8APDS99606write8Ehh>
  }
  _enable.GEN = en;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	1cfa      	adds	r2, r7, #3
 80039e0:	7812      	ldrb	r2, [r2, #0]
 80039e2:	2101      	movs	r1, #1
 80039e4:	400a      	ands	r2, r1
 80039e6:	0190      	lsls	r0, r2, #6
 80039e8:	7a9a      	ldrb	r2, [r3, #10]
 80039ea:	2140      	movs	r1, #64	; 0x40
 80039ec:	438a      	bics	r2, r1
 80039ee:	1c11      	adds	r1, r2, #0
 80039f0:	1c02      	adds	r2, r0, #0
 80039f2:	430a      	orrs	r2, r1
 80039f4:	729a      	strb	r2, [r3, #10]
  write8(APDS9960_ENABLE, _enable.get());
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	330a      	adds	r3, #10
 80039fa:	0018      	movs	r0, r3
 80039fc:	f7ff fd01 	bl	8003402 <_ZN8APDS99606enable3getEv>
 8003a00:	0003      	movs	r3, r0
 8003a02:	001a      	movs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2180      	movs	r1, #128	; 0x80
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f000 f899 	bl	8003b40 <_ZN8APDS99606write8Ehh>
  resetCounts();
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f000 f804 	bl	8003a1e <_ZN8APDS996011resetCountsEv>
}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b002      	add	sp, #8
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <_ZN8APDS996011resetCountsEv>:

/*!
 *  @brief  Resets gesture counts
 */
void APDS9960::resetCounts() {
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  gestCnt = 0;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	715a      	strb	r2, [r3, #5]
  UCount = 0;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	719a      	strb	r2, [r3, #6]
  DCount = 0;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	71da      	strb	r2, [r3, #7]
  LCount = 0;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	721a      	strb	r2, [r3, #8]
  RCount = 0;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	725a      	strb	r2, [r3, #9]
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b002      	add	sp, #8
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <_ZN8APDS996011enableColorEb>:
/*!
 *  @brief  Enable proximity readings on APDS9960
 *  @param  en
 *          Enable (True/False)
 */
void APDS9960::enableColor(bool en) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	000a      	movs	r2, r1
 8003a56:	1cfb      	adds	r3, r7, #3
 8003a58:	701a      	strb	r2, [r3, #0]
  _enable.AEN = en;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	1cfa      	adds	r2, r7, #3
 8003a5e:	7812      	ldrb	r2, [r2, #0]
 8003a60:	2101      	movs	r1, #1
 8003a62:	400a      	ands	r2, r1
 8003a64:	1890      	adds	r0, r2, r2
 8003a66:	7a9a      	ldrb	r2, [r3, #10]
 8003a68:	2102      	movs	r1, #2
 8003a6a:	438a      	bics	r2, r1
 8003a6c:	1c11      	adds	r1, r2, #0
 8003a6e:	1c02      	adds	r2, r0, #0
 8003a70:	430a      	orrs	r2, r1
 8003a72:	729a      	strb	r2, [r3, #10]
  write8(APDS9960_ENABLE, _enable.get());
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	330a      	adds	r3, #10
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f7ff fcc2 	bl	8003402 <_ZN8APDS99606enable3getEv>
 8003a7e:	0003      	movs	r3, r0
 8003a80:	001a      	movs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	0018      	movs	r0, r3
 8003a88:	f000 f85a 	bl	8003b40 <_ZN8APDS99606write8Ehh>
}
 8003a8c:	46c0      	nop			; (mov r8, r8)
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b002      	add	sp, #8
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <_ZN8APDS996012getColorDataEPtS0_S0_S0_>:
 *          Blue value
 *  @param  *c
 *          Clear channel value
 */
void APDS9960::getColorData(uint16_t *r, uint16_t *g, uint16_t *b,
                                     uint16_t *c) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]

  *c = read16R(APDS9960_CDATAL);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2194      	movs	r1, #148	; 0x94
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f000 f877 	bl	8003b9a <_ZN8APDS99607read16REh>
 8003aac:	0003      	movs	r3, r0
 8003aae:	001a      	movs	r2, r3
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	801a      	strh	r2, [r3, #0]
  *r = read16R(APDS9960_RDATAL);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2196      	movs	r1, #150	; 0x96
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f000 f86e 	bl	8003b9a <_ZN8APDS99607read16REh>
 8003abe:	0003      	movs	r3, r0
 8003ac0:	001a      	movs	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	801a      	strh	r2, [r3, #0]
  *g = read16R(APDS9960_GDATAL);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2198      	movs	r1, #152	; 0x98
 8003aca:	0018      	movs	r0, r3
 8003acc:	f000 f865 	bl	8003b9a <_ZN8APDS99607read16REh>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	001a      	movs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	801a      	strh	r2, [r3, #0]
  *b = read16R(APDS9960_BDATAL);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	219a      	movs	r1, #154	; 0x9a
 8003adc:	0018      	movs	r0, r3
 8003ade:	f000 f85c 	bl	8003b9a <_ZN8APDS99607read16REh>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	001a      	movs	r2, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	801a      	strh	r2, [r3, #0]
}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b004      	add	sp, #16
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <_ZN8APDS996021disableColorInterruptEv>:
}

/*!
 *  @brief  Disables color interrupt
 */
void APDS9960::disableColorInterrupt() {
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  _enable.AIEN = 0;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7a9a      	ldrb	r2, [r3, #10]
 8003afe:	2110      	movs	r1, #16
 8003b00:	438a      	bics	r2, r1
 8003b02:	729a      	strb	r2, [r3, #10]
  write8(APDS9960_ENABLE, _enable.get());
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	330a      	adds	r3, #10
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f7ff fc7a 	bl	8003402 <_ZN8APDS99606enable3getEv>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	001a      	movs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2180      	movs	r1, #128	; 0x80
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 f812 	bl	8003b40 <_ZN8APDS99606write8Ehh>
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b002      	add	sp, #8
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <_ZN8APDS996014clearInterruptEv>:

/*!
 *  @brief  Clears interrupt
 */
void APDS9960::clearInterrupt() {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  this->write(APDS9960_AICLEAR, 0, 1);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	2301      	movs	r3, #1
 8003b30:	2200      	movs	r2, #0
 8003b32:	21e7      	movs	r1, #231	; 0xe7
 8003b34:	f000 f89e 	bl	8003c74 <_ZN8APDS99605writeEhhh>
}
 8003b38:	46c0      	nop			; (mov r8, r8)
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b002      	add	sp, #8
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <_ZN8APDS99606write8Ehh>:
 *  @param  reg
 *          Register to write to
 *  @param  value
 *          Value to write
 */
void APDS9960::write8(uint8_t reg, uint8_t value) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	0008      	movs	r0, r1
 8003b4a:	0011      	movs	r1, r2
 8003b4c:	1cfb      	adds	r3, r7, #3
 8003b4e:	1c02      	adds	r2, r0, #0
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	1cbb      	adds	r3, r7, #2
 8003b54:	1c0a      	adds	r2, r1, #0
 8003b56:	701a      	strb	r2, [r3, #0]
  this->write(reg, value, 2);
 8003b58:	1cbb      	adds	r3, r7, #2
 8003b5a:	781a      	ldrb	r2, [r3, #0]
 8003b5c:	1cfb      	adds	r3, r7, #3
 8003b5e:	7819      	ldrb	r1, [r3, #0]
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	2302      	movs	r3, #2
 8003b64:	f000 f886 	bl	8003c74 <_ZN8APDS99605writeEhhh>
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b002      	add	sp, #8
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <_ZN8APDS99605read8Eh>:
 *  @brief  Reads 8 bits from specified register
 *  @param  reg
 *          Register to write to
 *  @return Value in register
 */
uint8_t APDS9960::read8(uint8_t reg) {
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	000a      	movs	r2, r1
 8003b7a:	1cfb      	adds	r3, r7, #3
 8003b7c:	701a      	strb	r2, [r3, #0]
  uint8_t ret;
  this->read(reg, &ret, 1);
 8003b7e:	240f      	movs	r4, #15
 8003b80:	193a      	adds	r2, r7, r4
 8003b82:	1cfb      	adds	r3, r7, #3
 8003b84:	7819      	ldrb	r1, [r3, #0]
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f000 f825 	bl	8003bd8 <_ZN8APDS99604readEhPhh>

  return ret;
 8003b8e:	193b      	adds	r3, r7, r4
 8003b90:	781b      	ldrb	r3, [r3, #0]
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b005      	add	sp, #20
 8003b98:	bd90      	pop	{r4, r7, pc}

08003b9a <_ZN8APDS99607read16REh>:
 *  @brief  Reads 16 bites from specified register
 *  @param  reg
 *          Register to write to
 *  @return Value in register
 */
uint16_t APDS9960::read16R(uint8_t reg) {
 8003b9a:	b590      	push	{r4, r7, lr}
 8003b9c:	b085      	sub	sp, #20
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	000a      	movs	r2, r1
 8003ba4:	1cfb      	adds	r3, r7, #3
 8003ba6:	701a      	strb	r2, [r3, #0]
  uint8_t ret[2];
  this->read(reg, ret, 2);
 8003ba8:	210c      	movs	r1, #12
 8003baa:	000c      	movs	r4, r1
 8003bac:	187a      	adds	r2, r7, r1
 8003bae:	1cfb      	adds	r3, r7, #3
 8003bb0:	7819      	ldrb	r1, [r3, #0]
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	f000 f80f 	bl	8003bd8 <_ZN8APDS99604readEhPhh>

  return (ret[1] << 8) | ret[0];
 8003bba:	0021      	movs	r1, r4
 8003bbc:	187b      	adds	r3, r7, r1
 8003bbe:	785b      	ldrb	r3, [r3, #1]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	b21a      	sxth	r2, r3
 8003bc4:	187b      	adds	r3, r7, r1
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	b21b      	sxth	r3, r3
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	b21b      	sxth	r3, r3
 8003bce:	b29b      	uxth	r3, r3
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b005      	add	sp, #20
 8003bd6:	bd90      	pop	{r4, r7, pc}

08003bd8 <_ZN8APDS99604readEhPhh>:
 *          Buffer
 *  @param  num
 *          Number of bytes
 *  @return Position after reading
 */
void APDS9960::read(uint8_t reg, uint8_t *buf, uint8_t num) {
 8003bd8:	b5b0      	push	{r4, r5, r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	0008      	movs	r0, r1
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	0019      	movs	r1, r3
 8003be6:	240b      	movs	r4, #11
 8003be8:	193b      	adds	r3, r7, r4
 8003bea:	1c02      	adds	r2, r0, #0
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	250a      	movs	r5, #10
 8003bf0:	197b      	adds	r3, r7, r5
 8003bf2:	1c0a      	adds	r2, r1, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, APDS9960_ADDRESS, &reg, 1, HAL_MAX_DELAY);
 8003bf6:	193a      	adds	r2, r7, r4
 8003bf8:	481d      	ldr	r0, [pc, #116]	; (8003c70 <_ZN8APDS99604readEhPhh+0x98>)
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	425b      	negs	r3, r3
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2301      	movs	r3, #1
 8003c02:	2172      	movs	r1, #114	; 0x72
 8003c04:	f7fd fe40 	bl	8001888 <HAL_I2C_Master_Transmit>
    HAL_Delay(5);
 8003c08:	2005      	movs	r0, #5
 8003c0a:	f7fd fb0b 	bl	8001224 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, APDS9960_ADDRESS, &tempbuf[0], num, HAL_MAX_DELAY);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	197b      	adds	r3, r7, r5
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	b299      	uxth	r1, r3
 8003c18:	4815      	ldr	r0, [pc, #84]	; (8003c70 <_ZN8APDS99604readEhPhh+0x98>)
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	425b      	negs	r3, r3
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	000b      	movs	r3, r1
 8003c22:	2172      	movs	r1, #114	; 0x72
 8003c24:	f7fd ff38 	bl	8001a98 <HAL_I2C_Master_Receive>
    for (uint8_t i=0; i<num; i++) {
 8003c28:	2317      	movs	r3, #23
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	2317      	movs	r3, #23
 8003c32:	18fa      	adds	r2, r7, r3
 8003c34:	230a      	movs	r3, #10
 8003c36:	18fb      	adds	r3, r7, r3
 8003c38:	7812      	ldrb	r2, [r2, #0]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d210      	bcs.n	8003c62 <_ZN8APDS99604readEhPhh+0x8a>
      buf[i] = tempbuf[i];
 8003c40:	2017      	movs	r0, #23
 8003c42:	183b      	adds	r3, r7, r0
 8003c44:	781a      	ldrb	r2, [r3, #0]
 8003c46:	183b      	adds	r3, r7, r0
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	18cb      	adds	r3, r1, r3
 8003c4e:	68f9      	ldr	r1, [r7, #12]
 8003c50:	188a      	adds	r2, r1, r2
 8003c52:	7852      	ldrb	r2, [r2, #1]
 8003c54:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i<num; i++) {
 8003c56:	183b      	adds	r3, r7, r0
 8003c58:	781a      	ldrb	r2, [r3, #0]
 8003c5a:	183b      	adds	r3, r7, r0
 8003c5c:	3201      	adds	r2, #1
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	e7e6      	b.n	8003c30 <_ZN8APDS99604readEhPhh+0x58>
    }
    HAL_Delay(5);
 8003c62:	2005      	movs	r0, #5
 8003c64:	f7fd fade 	bl	8001224 <HAL_Delay>
}
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b006      	add	sp, #24
 8003c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c70:	20000094 	.word	0x20000094

08003c74 <_ZN8APDS99605writeEhhh>:
 *  @param  *buf
 *          Buffer
 *  @param  num
 *          Number of bytes
 */
void APDS9960::write(uint8_t reg, uint8_t value, uint8_t num) {
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	000c      	movs	r4, r1
 8003c7e:	0010      	movs	r0, r2
 8003c80:	0019      	movs	r1, r3
 8003c82:	1cfb      	adds	r3, r7, #3
 8003c84:	1c22      	adds	r2, r4, #0
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	1cbb      	adds	r3, r7, #2
 8003c8a:	1c02      	adds	r2, r0, #0
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	1c7b      	adds	r3, r7, #1
 8003c90:	1c0a      	adds	r2, r1, #0
 8003c92:	701a      	strb	r2, [r3, #0]
  uint8_t writedata[2] = {reg, value};
 8003c94:	200c      	movs	r0, #12
 8003c96:	183b      	adds	r3, r7, r0
 8003c98:	1cfa      	adds	r2, r7, #3
 8003c9a:	7812      	ldrb	r2, [r2, #0]
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	183b      	adds	r3, r7, r0
 8003ca0:	1cba      	adds	r2, r7, #2
 8003ca2:	7812      	ldrb	r2, [r2, #0]
 8003ca4:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, APDS9960_ADDRESS, &writedata[0], num, HAL_MAX_DELAY);
 8003ca6:	1c7b      	adds	r3, r7, #1
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	b299      	uxth	r1, r3
 8003cac:	183a      	adds	r2, r7, r0
 8003cae:	4806      	ldr	r0, [pc, #24]	; (8003cc8 <_ZN8APDS99605writeEhhh+0x54>)
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	425b      	negs	r3, r3
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	000b      	movs	r3, r1
 8003cb8:	2172      	movs	r1, #114	; 0x72
 8003cba:	f7fd fde5 	bl	8001888 <HAL_I2C_Master_Transmit>
}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b005      	add	sp, #20
 8003cc4:	bd90      	pop	{r4, r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	20000094 	.word	0x20000094

08003ccc <_ZN10LedControlC1Ei>:
#define OP_INTENSITY   10
#define OP_SCANLIMIT   11
#define OP_SHUTDOWN    12
#define OP_DISPLAYTEST 15

LedControl::LedControl(int numDevices) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
    if(numDevices<=0 || numDevices>8 )
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	dd02      	ble.n	8003ce2 <_ZN10LedControlC1Ei+0x16>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	dd01      	ble.n	8003ce6 <_ZN10LedControlC1Ei+0x1a>
        numDevices=8;
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	603b      	str	r3, [r7, #0]
    maxDevices=numDevices;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	645a      	str	r2, [r3, #68]	; 0x44
    for(int i=0;i<64;i++) 
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b3f      	cmp	r3, #63	; 0x3f
 8003cf4:	dc09      	bgt.n	8003d0a <_ZN10LedControlC1Ei+0x3e>
        status[i]=0x00;
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	18d3      	adds	r3, r2, r3
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<64;i++) 
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3301      	adds	r3, #1
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e7f2      	b.n	8003cf0 <_ZN10LedControlC1Ei+0x24>
    for(int i=0;i<maxDevices;i++) {
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	da21      	bge.n	8003d5c <_ZN10LedControlC1Ei+0x90>
        spiTransfer(i,OP_DISPLAYTEST,0);
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	220f      	movs	r2, #15
 8003d20:	f000 f926 	bl	8003f70 <_ZN10LedControl11spiTransferEihh>
        //scanlimit is set to max on startup
        setScanLimit(i,7);
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2207      	movs	r2, #7
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f000 f840 	bl	8003db0 <_ZN10LedControl12setScanLimitEii>
        //decode is done in source
        spiTransfer(i,OP_DECODEMODE,0);
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	2300      	movs	r3, #0
 8003d36:	2209      	movs	r2, #9
 8003d38:	f000 f91a 	bl	8003f70 <_ZN10LedControl11spiTransferEihh>
        clearDisplay(i);
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	0011      	movs	r1, r2
 8003d42:	0018      	movs	r0, r3
 8003d44:	f000 f874 	bl	8003e30 <_ZN10LedControl12clearDisplayEi>
        //we go into shutdown-mode on startup
        shutdown(i,true);
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f000 f809 	bl	8003d66 <_ZN10LedControl8shutdownEib>
    for(int i=0;i<maxDevices;i++) {
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	3301      	adds	r3, #1
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	e7d8      	b.n	8003d0e <_ZN10LedControlC1Ei+0x42>
    }
}
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	0018      	movs	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b004      	add	sp, #16
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <_ZN10LedControl8shutdownEib>:

int LedControl::getDeviceCount() {
    return maxDevices;
}

void LedControl::shutdown(int addr, bool b) {
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	1dfb      	adds	r3, r7, #7
 8003d72:	701a      	strb	r2, [r3, #0]
    if(addr<0 || addr>=maxDevices)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	db16      	blt.n	8003da8 <_ZN10LedControl8shutdownEib+0x42>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	da11      	bge.n	8003da8 <_ZN10LedControl8shutdownEib+0x42>
        return;
    if(b)
 8003d84:	1dfb      	adds	r3, r7, #7
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d006      	beq.n	8003d9a <_ZN10LedControl8shutdownEib+0x34>
        spiTransfer(addr, OP_SHUTDOWN,0);
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	2300      	movs	r3, #0
 8003d92:	220c      	movs	r2, #12
 8003d94:	f000 f8ec 	bl	8003f70 <_ZN10LedControl11spiTransferEihh>
 8003d98:	e007      	b.n	8003daa <_ZN10LedControl8shutdownEib+0x44>
    else
        spiTransfer(addr, OP_SHUTDOWN,1);
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	2301      	movs	r3, #1
 8003da0:	220c      	movs	r2, #12
 8003da2:	f000 f8e5 	bl	8003f70 <_ZN10LedControl11spiTransferEihh>
 8003da6:	e000      	b.n	8003daa <_ZN10LedControl8shutdownEib+0x44>
        return;
 8003da8:	46c0      	nop			; (mov r8, r8)
}
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b004      	add	sp, #16
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <_ZN10LedControl12setScanLimitEii>:

void LedControl::setScanLimit(int addr, int limit) {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
    if(addr<0 || addr>=maxDevices)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	db12      	blt.n	8003de8 <_ZN10LedControl12setScanLimitEii+0x38>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	da0d      	bge.n	8003de8 <_ZN10LedControl12setScanLimitEii+0x38>
        return;
    if(limit>=0 && limit<8)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	db0b      	blt.n	8003dea <_ZN10LedControl12setScanLimitEii+0x3a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b07      	cmp	r3, #7
 8003dd6:	dc08      	bgt.n	8003dea <_ZN10LedControl12setScanLimitEii+0x3a>
        spiTransfer(addr, OP_SCANLIMIT,limit);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	220b      	movs	r2, #11
 8003de2:	f000 f8c5 	bl	8003f70 <_ZN10LedControl11spiTransferEihh>
 8003de6:	e000      	b.n	8003dea <_ZN10LedControl12setScanLimitEii+0x3a>
        return;
 8003de8:	46c0      	nop			; (mov r8, r8)
}
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b004      	add	sp, #16
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <_ZN10LedControl12setIntensityEii>:

void LedControl::setIntensity(int addr, int intensity) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
    if(addr<0 || addr>=maxDevices)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	db12      	blt.n	8003e28 <_ZN10LedControl12setIntensityEii+0x38>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	da0d      	bge.n	8003e28 <_ZN10LedControl12setIntensityEii+0x38>
        return;
    if(intensity>=0 && intensity<16)	
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	db0b      	blt.n	8003e2a <_ZN10LedControl12setIntensityEii+0x3a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b0f      	cmp	r3, #15
 8003e16:	dc08      	bgt.n	8003e2a <_ZN10LedControl12setIntensityEii+0x3a>
        spiTransfer(addr, OP_INTENSITY,intensity);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	220a      	movs	r2, #10
 8003e22:	f000 f8a5 	bl	8003f70 <_ZN10LedControl11spiTransferEihh>
 8003e26:	e000      	b.n	8003e2a <_ZN10LedControl12setIntensityEii+0x3a>
        return;
 8003e28:	46c0      	nop			; (mov r8, r8)
}
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b004      	add	sp, #16
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <_ZN10LedControl12clearDisplayEi>:

void LedControl::clearDisplay(int addr) {
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
    int offset;

    if(addr<0 || addr>=maxDevices)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	db26      	blt.n	8003e8e <_ZN10LedControl12clearDisplayEi+0x5e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	da21      	bge.n	8003e8e <_ZN10LedControl12clearDisplayEi+0x5e>
        return;
    offset=addr*8;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	60bb      	str	r3, [r7, #8]
    for(int i=0;i<8;i++) {
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b07      	cmp	r3, #7
 8003e58:	dc1a      	bgt.n	8003e90 <_ZN10LedControl12clearDisplayEi+0x60>
        status[offset+i]=0;
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	18d3      	adds	r3, r2, r3
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	18d3      	adds	r3, r2, r3
 8003e64:	2200      	movs	r2, #0
 8003e66:	709a      	strb	r2, [r3, #2]
        spiTransfer(addr, i+1,status[offset+i]);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	b2dc      	uxtb	r4, r3
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	18d3      	adds	r3, r2, r3
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	18d3      	adds	r3, r2, r3
 8003e7a:	789b      	ldrb	r3, [r3, #2]
 8003e7c:	6839      	ldr	r1, [r7, #0]
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	0022      	movs	r2, r4
 8003e82:	f000 f875 	bl	8003f70 <_ZN10LedControl11spiTransferEihh>
    for(int i=0;i<8;i++) {
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e7e2      	b.n	8003e54 <_ZN10LedControl12clearDisplayEi+0x24>
        return;
 8003e8e:	46c0      	nop			; (mov r8, r8)
    }
}
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b005      	add	sp, #20
 8003e94:	bd90      	pop	{r4, r7, pc}

08003e96 <_ZN10LedControl6setLedEiiib>:

void LedControl::setLed(int addr, int row, int column, bool state) {
 8003e96:	b590      	push	{r4, r7, lr}
 8003e98:	b087      	sub	sp, #28
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	603b      	str	r3, [r7, #0]
    int offset;
    uint8_t val=0x00;
 8003ea4:	2317      	movs	r3, #23
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]

    if(addr<0 || addr>=maxDevices)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	db58      	blt.n	8003f64 <_ZN10LedControl6setLedEiiib+0xce>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	da53      	bge.n	8003f64 <_ZN10LedControl6setLedEiiib+0xce>
        return;
    if(row<0 || row>7 || column<0 || column>7)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	db52      	blt.n	8003f68 <_ZN10LedControl6setLedEiiib+0xd2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b07      	cmp	r3, #7
 8003ec6:	dc4f      	bgt.n	8003f68 <_ZN10LedControl6setLedEiiib+0xd2>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	db4c      	blt.n	8003f68 <_ZN10LedControl6setLedEiiib+0xd2>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b07      	cmp	r3, #7
 8003ed2:	dc49      	bgt.n	8003f68 <_ZN10LedControl6setLedEiiib+0xd2>
        return;
    offset=addr*8;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	613b      	str	r3, [r7, #16]
    val=0b10000000 >> column;
 8003eda:	2280      	movs	r2, #128	; 0x80
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	411a      	asrs	r2, r3
 8003ee0:	2317      	movs	r3, #23
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	701a      	strb	r2, [r3, #0]
    if(state)
 8003ee6:	2328      	movs	r3, #40	; 0x28
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d012      	beq.n	8003f16 <_ZN10LedControl6setLedEiiib+0x80>
        status[offset+row]=status[offset+row]|val;
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	18d3      	adds	r3, r2, r3
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	18d3      	adds	r3, r2, r3
 8003efa:	7899      	ldrb	r1, [r3, #2]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	18d3      	adds	r3, r2, r3
 8003f02:	2217      	movs	r2, #23
 8003f04:	18ba      	adds	r2, r7, r2
 8003f06:	7812      	ldrb	r2, [r2, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	b2d1      	uxtb	r1, r2
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	18d3      	adds	r3, r2, r3
 8003f10:	1c0a      	adds	r2, r1, #0
 8003f12:	709a      	strb	r2, [r3, #2]
 8003f14:	e016      	b.n	8003f44 <_ZN10LedControl6setLedEiiib+0xae>
    else {
        val=~val;
 8003f16:	2017      	movs	r0, #23
 8003f18:	183b      	adds	r3, r7, r0
 8003f1a:	183a      	adds	r2, r7, r0
 8003f1c:	7812      	ldrb	r2, [r2, #0]
 8003f1e:	43d2      	mvns	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]
        status[offset+row]=status[offset+row]&val;
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	18d3      	adds	r3, r2, r3
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	18d3      	adds	r3, r2, r3
 8003f2c:	789a      	ldrb	r2, [r3, #2]
 8003f2e:	6939      	ldr	r1, [r7, #16]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	18cb      	adds	r3, r1, r3
 8003f34:	1839      	adds	r1, r7, r0
 8003f36:	7809      	ldrb	r1, [r1, #0]
 8003f38:	400a      	ands	r2, r1
 8003f3a:	b2d1      	uxtb	r1, r2
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	18d3      	adds	r3, r2, r3
 8003f40:	1c0a      	adds	r2, r1, #0
 8003f42:	709a      	strb	r2, [r3, #2]
    }
    spiTransfer(addr, row+1,status[offset+row]);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	3301      	adds	r3, #1
 8003f4a:	b2dc      	uxtb	r4, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	18d3      	adds	r3, r2, r3
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	18d3      	adds	r3, r2, r3
 8003f56:	789b      	ldrb	r3, [r3, #2]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	0022      	movs	r2, r4
 8003f5e:	f000 f807 	bl	8003f70 <_ZN10LedControl11spiTransferEihh>
 8003f62:	e002      	b.n	8003f6a <_ZN10LedControl6setLedEiiib+0xd4>
        return;
 8003f64:	46c0      	nop			; (mov r8, r8)
 8003f66:	e000      	b.n	8003f6a <_ZN10LedControl6setLedEiiib+0xd4>
        return;
 8003f68:	46c0      	nop			; (mov r8, r8)
}
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b007      	add	sp, #28
 8003f6e:	bd90      	pop	{r4, r7, pc}

08003f70 <_ZN10LedControl11spiTransferEihh>:
        setLed(addr,row,col,val);
    }
}


void LedControl::spiTransfer(int addr, uint8_t opcode, uint8_t data) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	0019      	movs	r1, r3
 8003f7c:	1dfb      	adds	r3, r7, #7
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	1dbb      	adds	r3, r7, #6
 8003f82:	1c0a      	adds	r2, r1, #0
 8003f84:	701a      	strb	r2, [r3, #0]

    //put our device data into the array
    spidata[1]=opcode;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1dfa      	adds	r2, r7, #7
 8003f8a:	7812      	ldrb	r2, [r2, #0]
 8003f8c:	705a      	strb	r2, [r3, #1]
    spidata[0]=data;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1dba      	adds	r2, r7, #6
 8003f92:	7812      	ldrb	r2, [r2, #0]
 8003f94:	701a      	strb	r2, [r3, #0]

    //Now shift out the data 
    HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8003f96:	23a0      	movs	r3, #160	; 0xa0
 8003f98:	05db      	lsls	r3, r3, #23
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2110      	movs	r1, #16
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f7fd fbbf 	bl	8001722 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &spidata[0], 1, 1);
 8003fa4:	68f9      	ldr	r1, [r7, #12]
 8003fa6:	480e      	ldr	r0, [pc, #56]	; (8003fe0 <_ZN10LedControl11spiTransferEihh+0x70>)
 8003fa8:	2301      	movs	r3, #1
 8003faa:	2201      	movs	r2, #1
 8003fac:	f7ff f822 	bl	8002ff4 <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <_ZN10LedControl11spiTransferEihh+0x70>)
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f7ff f96c 	bl	8003290 <HAL_SPI_GetState>
 8003fb8:	0003      	movs	r3, r0
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	1e5a      	subs	r2, r3, #1
 8003fbe:	4193      	sbcs	r3, r2
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d000      	beq.n	8003fc8 <_ZN10LedControl11spiTransferEihh+0x58>
 8003fc6:	e7f3      	b.n	8003fb0 <_ZN10LedControl11spiTransferEihh+0x40>
    HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8003fc8:	23a0      	movs	r3, #160	; 0xa0
 8003fca:	05db      	lsls	r3, r3, #23
 8003fcc:	2201      	movs	r2, #1
 8003fce:	2110      	movs	r1, #16
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f7fd fba6 	bl	8001722 <HAL_GPIO_WritePin>
}    
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b004      	add	sp, #16
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	200000e0 	.word	0x200000e0

08003fe4 <_ZN8BarGraphC1Ehh>:
#include "stm32l0xx_hal.h"
#include "spi.h"
#include "math.h"

// Constructor
BarGraph::BarGraph(uint8_t num_switch, uint8_t num_led) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	0008      	movs	r0, r1
 8003fee:	0011      	movs	r1, r2
 8003ff0:	1cfb      	adds	r3, r7, #3
 8003ff2:	1c02      	adds	r2, r0, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	1cbb      	adds	r3, r7, #2
 8003ff8:	1c0a      	adds	r2, r1, #0
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	709a      	strb	r2, [r3, #2]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3304      	adds	r3, #4
 8004006:	2101      	movs	r1, #1
 8004008:	0018      	movs	r0, r3
 800400a:	f7ff fe5f 	bl	8003ccc <_ZN10LedControlC1Ei>
  max_switch = num_switch;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	1cfa      	adds	r2, r7, #3
 8004012:	7812      	ldrb	r2, [r2, #0]
 8004014:	701a      	strb	r2, [r3, #0]
  max_led = num_led;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	1cba      	adds	r2, r7, #2
 800401a:	7812      	ldrb	r2, [r2, #0]
 800401c:	705a      	strb	r2, [r3, #1]
  incr = num_led/num_switch;
 800401e:	1cba      	adds	r2, r7, #2
 8004020:	1cfb      	adds	r3, r7, #3
 8004022:	7812      	ldrb	r2, [r2, #0]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	0019      	movs	r1, r3
 8004028:	0010      	movs	r0, r2
 800402a:	f7fc f86d 	bl	8000108 <__udivsi3>
 800402e:	0003      	movs	r3, r0
 8004030:	b2da      	uxtb	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	70da      	strb	r2, [r3, #3]
}
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	0018      	movs	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	b002      	add	sp, #8
 800403e:	bd80      	pop	{r7, pc}

08004040 <_ZN8BarGraph5beginEv>:

void BarGraph::begin() {
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b087      	sub	sp, #28
 8004044:	af02      	add	r7, sp, #8
 8004046:	6078      	str	r0, [r7, #4]
  /*
   The MAX72XX is in power-saving mode on startup,
   we have to do a wakeup call
   */
  lc.shutdown(0,false);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	2200      	movs	r2, #0
 800404e:	2100      	movs	r1, #0
 8004050:	0018      	movs	r0, r3
 8004052:	f7ff fe88 	bl	8003d66 <_ZN10LedControl8shutdownEib>
  /* Set the brightness to a medium values */
  lc.setIntensity(0,8);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3304      	adds	r3, #4
 800405a:	2208      	movs	r2, #8
 800405c:	2100      	movs	r1, #0
 800405e:	0018      	movs	r0, r3
 8004060:	f7ff fec6 	bl	8003df0 <_ZN10LedControl12setIntensityEii>
  /* and clear the display */
  lc.clearDisplay(0);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3304      	adds	r3, #4
 8004068:	2100      	movs	r1, #0
 800406a:	0018      	movs	r0, r3
 800406c:	f7ff fee0 	bl	8003e30 <_ZN10LedControl12clearDisplayEi>

  for (uint8_t i=0; i<incr; i++) {
 8004070:	230f      	movs	r3, #15
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	78db      	ldrb	r3, [r3, #3]
 800407c:	220f      	movs	r2, #15
 800407e:	18ba      	adds	r2, r7, r2
 8004080:	7812      	ldrb	r2, [r2, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d212      	bcs.n	80040ac <_ZN8BarGraph5beginEv+0x6c>
    lc.setLed(0,i,0,true);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	1d18      	adds	r0, r3, #4
 800408a:	210f      	movs	r1, #15
 800408c:	000c      	movs	r4, r1
 800408e:	187b      	adds	r3, r7, r1
 8004090:	781a      	ldrb	r2, [r3, #0]
 8004092:	2301      	movs	r3, #1
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	2300      	movs	r3, #0
 8004098:	2100      	movs	r1, #0
 800409a:	f7ff fefc 	bl	8003e96 <_ZN10LedControl6setLedEiiib>
  for (uint8_t i=0; i<incr; i++) {
 800409e:	0021      	movs	r1, r4
 80040a0:	187b      	adds	r3, r7, r1
 80040a2:	781a      	ldrb	r2, [r3, #0]
 80040a4:	187b      	adds	r3, r7, r1
 80040a6:	3201      	adds	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e7e5      	b.n	8004078 <_ZN8BarGraph5beginEv+0x38>
  }

}
 80040ac:	46c0      	nop			; (mov r8, r8)
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b005      	add	sp, #20
 80040b2:	bd90      	pop	{r4, r7, pc}

080040b4 <_ZN8BarGraph6updateEPh>:

void BarGraph::update(uint8_t *sw_state) {
 80040b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint8_t cur_switch = 0;
 80040be:	230f      	movs	r3, #15
 80040c0:	18fb      	adds	r3, r7, r3
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
  for (uint8_t i=0; i<max_switch; i++) {
 80040c6:	230e      	movs	r3, #14
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	220e      	movs	r2, #14
 80040d4:	18ba      	adds	r2, r7, r2
 80040d6:	7812      	ldrb	r2, [r2, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d215      	bcs.n	8004108 <_ZN8BarGraph6updateEPh+0x54>
    if (sw_state[i] == 1) {
 80040dc:	230e      	movs	r3, #14
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	18d3      	adds	r3, r2, r3
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d106      	bne.n	80040fa <_ZN8BarGraph6updateEPh+0x46>
      cur_switch = i;
 80040ec:	230f      	movs	r3, #15
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	220e      	movs	r2, #14
 80040f2:	18ba      	adds	r2, r7, r2
 80040f4:	7812      	ldrb	r2, [r2, #0]
 80040f6:	701a      	strb	r2, [r3, #0]
      break;
 80040f8:	e006      	b.n	8004108 <_ZN8BarGraph6updateEPh+0x54>
  for (uint8_t i=0; i<max_switch; i++) {
 80040fa:	210e      	movs	r1, #14
 80040fc:	187b      	adds	r3, r7, r1
 80040fe:	781a      	ldrb	r2, [r3, #0]
 8004100:	187b      	adds	r3, r7, r1
 8004102:	3201      	adds	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e7e2      	b.n	80040ce <_ZN8BarGraph6updateEPh+0x1a>
    }
  }
  if (cur_switch != last_switch) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	789b      	ldrb	r3, [r3, #2]
 800410c:	220f      	movs	r2, #15
 800410e:	18ba      	adds	r2, r7, r2
 8004110:	7812      	ldrb	r2, [r2, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d047      	beq.n	80041a6 <_ZN8BarGraph6updateEPh+0xf2>
    last_switch = cur_switch;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	210f      	movs	r1, #15
 800411a:	187a      	adds	r2, r7, r1
 800411c:	7812      	ldrb	r2, [r2, #0]
 800411e:	709a      	strb	r2, [r3, #2]
    uint8_t num_led = incr*(cur_switch+1);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	78da      	ldrb	r2, [r3, #3]
 8004124:	187b      	adds	r3, r7, r1
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	b2d9      	uxtb	r1, r3
 800412c:	230c      	movs	r3, #12
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	434a      	muls	r2, r1
 8004132:	701a      	strb	r2, [r3, #0]
    lc.clearDisplay(0);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3304      	adds	r3, #4
 8004138:	2100      	movs	r1, #0
 800413a:	0018      	movs	r0, r3
 800413c:	f7ff fe78 	bl	8003e30 <_ZN10LedControl12clearDisplayEi>
    for (uint8_t i=0; i<num_led; i++) {
 8004140:	230d      	movs	r3, #13
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	230d      	movs	r3, #13
 800414a:	18fa      	adds	r2, r7, r3
 800414c:	230c      	movs	r3, #12
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	7812      	ldrb	r2, [r2, #0]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d226      	bcs.n	80041a6 <_ZN8BarGraph6updateEPh+0xf2>
      lc.setLed(0,i%8, floor((i/8)%8), true);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	1d1c      	adds	r4, r3, #4
 800415c:	260d      	movs	r6, #13
 800415e:	19bb      	adds	r3, r7, r6
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2207      	movs	r2, #7
 8004164:	4013      	ands	r3, r2
 8004166:	001d      	movs	r5, r3
 8004168:	19bb      	adds	r3, r7, r6
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	08db      	lsrs	r3, r3, #3
 800416e:	b2db      	uxtb	r3, r3
 8004170:	001a      	movs	r2, r3
 8004172:	2307      	movs	r3, #7
 8004174:	4013      	ands	r3, r2
 8004176:	0018      	movs	r0, r3
 8004178:	f000 f819 	bl	80041ae <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800417c:	0002      	movs	r2, r0
 800417e:	000b      	movs	r3, r1
 8004180:	0010      	movs	r0, r2
 8004182:	0019      	movs	r1, r3
 8004184:	f7fc fe8a 	bl	8000e9c <__aeabi_d2iz>
 8004188:	0002      	movs	r2, r0
 800418a:	2301      	movs	r3, #1
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	0013      	movs	r3, r2
 8004190:	002a      	movs	r2, r5
 8004192:	2100      	movs	r1, #0
 8004194:	0020      	movs	r0, r4
 8004196:	f7ff fe7e 	bl	8003e96 <_ZN10LedControl6setLedEiiib>
    for (uint8_t i=0; i<num_led; i++) {
 800419a:	19bb      	adds	r3, r7, r6
 800419c:	781a      	ldrb	r2, [r3, #0]
 800419e:	19bb      	adds	r3, r7, r6
 80041a0:	3201      	adds	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	e7d0      	b.n	8004148 <_ZN8BarGraph6updateEPh+0x94>
    }
  }
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b005      	add	sp, #20
 80041ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041ae <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
 80041ae:	b590      	push	{r4, r7, lr}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fc fea6 	bl	8000f08 <__aeabi_i2d>
 80041bc:	0003      	movs	r3, r0
 80041be:	000c      	movs	r4, r1
 80041c0:	0018      	movs	r0, r3
 80041c2:	0021      	movs	r1, r4
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b003      	add	sp, #12
 80041c8:	bd90      	pop	{r4, r7, pc}

080041ca <_ZN7DotStarC1Ehh>:
#include "dotstar.hpp"
#include "gpio.h"
#include <stdlib.h>

// Constructor for 'soft' (bitbang) SPI -- any two pins can be used
DotStar::DotStar(uint8_t n, uint8_t o) :
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	0008      	movs	r0, r1
 80041d4:	0011      	movs	r1, r2
 80041d6:	1cfb      	adds	r3, r7, #3
 80041d8:	1c02      	adds	r2, r0, #0
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	1cbb      	adds	r3, r7, #2
 80041de:	1c0a      	adds	r2, r1, #0
 80041e0:	701a      	strb	r2, [r3, #0]
 brightness(0), pixels(NULL), rOffset(o & 3), gOffset((o >> 2) & 3),
 bOffset((o >> 4) & 3)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	705a      	strb	r2, [r3, #1]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	605a      	str	r2, [r3, #4]
 brightness(0), pixels(NULL), rOffset(o & 3), gOffset((o >> 2) & 3),
 80041ee:	1cbb      	adds	r3, r7, #2
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2203      	movs	r2, #3
 80041f4:	4013      	ands	r3, r2
 80041f6:	b2da      	uxtb	r2, r3
 bOffset((o >> 4) & 3)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	721a      	strb	r2, [r3, #8]
 brightness(0), pixels(NULL), rOffset(o & 3), gOffset((o >> 2) & 3),
 80041fc:	1cbb      	adds	r3, r7, #2
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	109b      	asrs	r3, r3, #2
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2203      	movs	r2, #3
 8004206:	4013      	ands	r3, r2
 8004208:	b2da      	uxtb	r2, r3
 bOffset((o >> 4) & 3)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	725a      	strb	r2, [r3, #9]
 800420e:	1cbb      	adds	r3, r7, #2
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	111b      	asrs	r3, r3, #4
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2203      	movs	r2, #3
 8004218:	4013      	ands	r3, r2
 800421a:	b2da      	uxtb	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	729a      	strb	r2, [r3, #10]
{
  updateLength(n);
 8004220:	1cfb      	adds	r3, r7, #3
 8004222:	781a      	ldrb	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	0011      	movs	r1, r2
 8004228:	0018      	movs	r0, r3
 800422a:	f000 f811 	bl	8004250 <_ZN7DotStar12updateLengthEh>
}
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}

08004238 <_ZN7DotStar5beginEv>:

DotStar::~DotStar(void) { // Destructor
  sw_spi_end();
}

void DotStar::begin(void) { // Initialize SPI
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  sw_spi_init();
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	0018      	movs	r0, r3
 8004244:	f000 f840 	bl	80042c8 <_ZN7DotStar11sw_spi_initEv>
}
 8004248:	46c0      	nop			; (mov r8, r8)
 800424a:	46bd      	mov	sp, r7
 800424c:	b002      	add	sp, #8
 800424e:	bd80      	pop	{r7, pc}

08004250 <_ZN7DotStar12updateLengthEh>:

// Length can be changed post-constructor for similar reasons (sketch
// config not hardcoded).  But DON'T use this for "recycling" strip RAM...
// all that reallocation is likely to fragment and eventually fail.
// Instead, set length once to longest strip.
void DotStar::updateLength(uint8_t n) {
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	000a      	movs	r2, r1
 800425a:	1cfb      	adds	r3, r7, #3
 800425c:	701a      	strb	r2, [r3, #0]
	uint16_t bytes = (rOffset == gOffset) ?
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	7a1a      	ldrb	r2, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	7a5b      	ldrb	r3, [r3, #9]
 8004266:	429a      	cmp	r2, r3
 8004268:	d10d      	bne.n	8004286 <_ZN7DotStar12updateLengthEh+0x36>
	    n + ((n + 3) / 4) : // MONO: 10 bits/pixel, round up to next byte
 800426a:	1cfb      	adds	r3, r7, #3
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b29a      	uxth	r2, r3
 8004270:	1cfb      	adds	r3, r7, #3
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	3303      	adds	r3, #3
 8004276:	2b00      	cmp	r3, #0
 8004278:	da00      	bge.n	800427c <_ZN7DotStar12updateLengthEh+0x2c>
 800427a:	3303      	adds	r3, #3
 800427c:	109b      	asrs	r3, r3, #2
 800427e:	b29b      	uxth	r3, r3
	uint16_t bytes = (rOffset == gOffset) ?
 8004280:	18d3      	adds	r3, r2, r3
 8004282:	b29b      	uxth	r3, r3
 8004284:	e007      	b.n	8004296 <_ZN7DotStar12updateLengthEh+0x46>
 8004286:	1cfb      	adds	r3, r7, #3
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	b29b      	uxth	r3, r3
 800428c:	1c1a      	adds	r2, r3, #0
 800428e:	1c13      	adds	r3, r2, #0
 8004290:	18db      	adds	r3, r3, r3
 8004292:	189b      	adds	r3, r3, r2
 8004294:	b29b      	uxth	r3, r3
 8004296:	210e      	movs	r1, #14
 8004298:	187a      	adds	r2, r7, r1
 800429a:	8013      	strh	r3, [r2, #0]
	    n * 3;              // COLOR: 3 bytes/pixel
	pixels = (uint8_t *)malloc(bytes);
 800429c:	187b      	adds	r3, r7, r1
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	0018      	movs	r0, r3
 80042a2:	f000 fdf3 	bl	8004e8c <malloc>
 80042a6:	0003      	movs	r3, r0
 80042a8:	001a      	movs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	605a      	str	r2, [r3, #4]
	numLEDs = n;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	1cfa      	adds	r2, r7, #3
 80042b2:	7812      	ldrb	r2, [r2, #0]
 80042b4:	701a      	strb	r2, [r3, #0]
	clear();
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f000 f909 	bl	80044d0 <_ZN7DotStar5clearEv>
}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b004      	add	sp, #16
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <_ZN7DotStar11sw_spi_initEv>:

// SPI STUFF ---------------------------------------------------------------

void DotStar::sw_spi_init(void) { // Init 'soft' (bitbang) SPI
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(Data_Port, Data_Pin, GPIO_PIN_RESET);
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <_ZN7DotStar11sw_spi_initEv+0x28>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	2101      	movs	r1, #1
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7fd fa23 	bl	8001722 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Data_Port, Clock_Pin, GPIO_PIN_RESET);
 80042dc:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <_ZN7DotStar11sw_spi_initEv+0x28>)
 80042de:	2200      	movs	r2, #0
 80042e0:	2102      	movs	r1, #2
 80042e2:	0018      	movs	r0, r3
 80042e4:	f7fd fa1d 	bl	8001722 <HAL_GPIO_WritePin>
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b002      	add	sp, #8
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	50000400 	.word	0x50000400

080042f4 <_ZN7DotStar10sw_spi_outEh>:
void DotStar::sw_spi_end() { // Stop 'soft' SPI
  HAL_GPIO_WritePin(Data_Port, Data_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(Clock_Port, Clock_Pin, GPIO_PIN_RESET);
}

void DotStar::sw_spi_out(uint8_t n) { // Bitbang SPI write
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	000a      	movs	r2, r1
 80042fe:	1cfb      	adds	r3, r7, #3
 8004300:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=8; i--; n <<= 1) {
 8004302:	230f      	movs	r3, #15
 8004304:	18fb      	adds	r3, r7, r3
 8004306:	2208      	movs	r2, #8
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	220f      	movs	r2, #15
 800430c:	18bb      	adds	r3, r7, r2
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	18ba      	adds	r2, r7, r2
 8004312:	1e59      	subs	r1, r3, #1
 8004314:	7011      	strb	r1, [r2, #0]
 8004316:	1e5a      	subs	r2, r3, #1
 8004318:	4193      	sbcs	r3, r2
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d023      	beq.n	8004368 <_ZN7DotStar10sw_spi_outEh+0x74>
    if(n & 0x80) HAL_GPIO_WritePin(Data_Port, Data_Pin, GPIO_PIN_SET);
 8004320:	1cfb      	adds	r3, r7, #3
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	b25b      	sxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	da06      	bge.n	8004338 <_ZN7DotStar10sw_spi_outEh+0x44>
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <_ZN7DotStar10sw_spi_outEh+0x7c>)
 800432c:	2201      	movs	r2, #1
 800432e:	2101      	movs	r1, #1
 8004330:	0018      	movs	r0, r3
 8004332:	f7fd f9f6 	bl	8001722 <HAL_GPIO_WritePin>
 8004336:	e005      	b.n	8004344 <_ZN7DotStar10sw_spi_outEh+0x50>
    else         HAL_GPIO_WritePin(Data_Port, Data_Pin, GPIO_PIN_RESET);
 8004338:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <_ZN7DotStar10sw_spi_outEh+0x7c>)
 800433a:	2200      	movs	r2, #0
 800433c:	2101      	movs	r1, #1
 800433e:	0018      	movs	r0, r3
 8004340:	f7fd f9ef 	bl	8001722 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Clock_Port, Clock_Pin, GPIO_PIN_SET);
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <_ZN7DotStar10sw_spi_outEh+0x7c>)
 8004346:	2201      	movs	r2, #1
 8004348:	2102      	movs	r1, #2
 800434a:	0018      	movs	r0, r3
 800434c:	f7fd f9e9 	bl	8001722 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Clock_Port, Clock_Pin, GPIO_PIN_RESET);
 8004350:	4b07      	ldr	r3, [pc, #28]	; (8004370 <_ZN7DotStar10sw_spi_outEh+0x7c>)
 8004352:	2200      	movs	r2, #0
 8004354:	2102      	movs	r1, #2
 8004356:	0018      	movs	r0, r3
 8004358:	f7fd f9e3 	bl	8001722 <HAL_GPIO_WritePin>
  for(uint8_t i=8; i--; n <<= 1) {
 800435c:	1cfa      	adds	r2, r7, #3
 800435e:	1cfb      	adds	r3, r7, #3
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	18db      	adds	r3, r3, r3
 8004364:	7013      	strb	r3, [r2, #0]
 8004366:	e7d0      	b.n	800430a <_ZN7DotStar10sw_spi_outEh+0x16>
  }
}
 8004368:	46c0      	nop			; (mov r8, r8)
 800436a:	46bd      	mov	sp, r7
 800436c:	b004      	add	sp, #16
 800436e:	bd80      	pop	{r7, pc}
 8004370:	50000400 	.word	0x50000400

08004374 <_ZN7DotStar4showEv>:
  already handled better in one's sketch code.  If you really can't live
  without this abomination, you can fork the library and add it for your
  own use, but any pull requests for this will NOT be merged, nuh uh!
*/

void DotStar::show(void) {
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]

  if(!pixels) return;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d100      	bne.n	8004386 <_ZN7DotStar4showEv+0x12>
 8004384:	e0a0      	b.n	80044c8 <_ZN7DotStar4showEv+0x154>

  uint8_t *ptr = pixels, i;            // -> LED data
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	60fb      	str	r3, [r7, #12]
  uint8_t n   = numLEDs;              // Counter
 800438c:	230a      	movs	r3, #10
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	7812      	ldrb	r2, [r2, #0]
 8004394:	701a      	strb	r2, [r3, #0]
  uint16_t b16 = (uint16_t)brightness; // Type-convert for fixed-point math
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	785a      	ldrb	r2, [r3, #1]
 800439a:	2308      	movs	r3, #8
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	801a      	strh	r2, [r3, #0]

  for(i=0; i<4; i++) sw_spi_out(0);    // Start-frame marker
 80043a0:	230b      	movs	r3, #11
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	230b      	movs	r3, #11
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d80b      	bhi.n	80043ca <_ZN7DotStar4showEv+0x56>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2100      	movs	r1, #0
 80043b6:	0018      	movs	r0, r3
 80043b8:	f7ff ff9c 	bl	80042f4 <_ZN7DotStar10sw_spi_outEh>
 80043bc:	210b      	movs	r1, #11
 80043be:	187b      	adds	r3, r7, r1
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	187b      	adds	r3, r7, r1
 80043c4:	3201      	adds	r2, #1
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	e7ee      	b.n	80043a8 <_ZN7DotStar4showEv+0x34>
  if(brightness) {                     // Scale pixel brightness on output
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d032      	beq.n	8004438 <_ZN7DotStar4showEv+0xc4>
    do {                               // For each pixel...
      sw_spi_out(0xFF);                //  Pixel start
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	21ff      	movs	r1, #255	; 0xff
 80043d6:	0018      	movs	r0, r3
 80043d8:	f7ff ff8c 	bl	80042f4 <_ZN7DotStar10sw_spi_outEh>
      for(i=0; i<3; i++) sw_spi_out((*ptr++ * b16) >> 8); // Scale, write
 80043dc:	230b      	movs	r3, #11
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	2200      	movs	r2, #0
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	230b      	movs	r3, #11
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d816      	bhi.n	800441c <_ZN7DotStar4showEv+0xa8>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	60fa      	str	r2, [r7, #12]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	001a      	movs	r2, r3
 80043f8:	2308      	movs	r3, #8
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	4353      	muls	r3, r2
 8004400:	121b      	asrs	r3, r3, #8
 8004402:	b2da      	uxtb	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	0011      	movs	r1, r2
 8004408:	0018      	movs	r0, r3
 800440a:	f7ff ff73 	bl	80042f4 <_ZN7DotStar10sw_spi_outEh>
 800440e:	210b      	movs	r1, #11
 8004410:	187b      	adds	r3, r7, r1
 8004412:	781a      	ldrb	r2, [r3, #0]
 8004414:	187b      	adds	r3, r7, r1
 8004416:	3201      	adds	r2, #1
 8004418:	701a      	strb	r2, [r3, #0]
 800441a:	e7e3      	b.n	80043e4 <_ZN7DotStar4showEv+0x70>
    } while(--n);
 800441c:	210a      	movs	r1, #10
 800441e:	187b      	adds	r3, r7, r1
 8004420:	187a      	adds	r2, r7, r1
 8004422:	7812      	ldrb	r2, [r2, #0]
 8004424:	3a01      	subs	r2, #1
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	187b      	adds	r3, r7, r1
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	1e5a      	subs	r2, r3, #1
 800442e:	4193      	sbcs	r3, r2
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d02c      	beq.n	8004490 <_ZN7DotStar4showEv+0x11c>
    do {                               // For each pixel...
 8004436:	e7cc      	b.n	80043d2 <_ZN7DotStar4showEv+0x5e>
  } else {                             // Full brightness (no scaling)
    do {                               // For each pixel...
      sw_spi_out(0xFF);                //  Pixel start
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	21ff      	movs	r1, #255	; 0xff
 800443c:	0018      	movs	r0, r3
 800443e:	f7ff ff59 	bl	80042f4 <_ZN7DotStar10sw_spi_outEh>
      for(i=0; i<3; i++) sw_spi_out(*ptr++); // R,G,B
 8004442:	230b      	movs	r3, #11
 8004444:	18fb      	adds	r3, r7, r3
 8004446:	2200      	movs	r2, #0
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	230b      	movs	r3, #11
 800444c:	18fb      	adds	r3, r7, r3
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d80f      	bhi.n	8004474 <_ZN7DotStar4showEv+0x100>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	60fa      	str	r2, [r7, #12]
 800445a:	781a      	ldrb	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	0011      	movs	r1, r2
 8004460:	0018      	movs	r0, r3
 8004462:	f7ff ff47 	bl	80042f4 <_ZN7DotStar10sw_spi_outEh>
 8004466:	210b      	movs	r1, #11
 8004468:	187b      	adds	r3, r7, r1
 800446a:	781a      	ldrb	r2, [r3, #0]
 800446c:	187b      	adds	r3, r7, r1
 800446e:	3201      	adds	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	e7ea      	b.n	800444a <_ZN7DotStar4showEv+0xd6>
    } while(--n);
 8004474:	210a      	movs	r1, #10
 8004476:	187b      	adds	r3, r7, r1
 8004478:	187a      	adds	r2, r7, r1
 800447a:	7812      	ldrb	r2, [r2, #0]
 800447c:	3a01      	subs	r2, #1
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	187b      	adds	r3, r7, r1
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	1e5a      	subs	r2, r3, #1
 8004486:	4193      	sbcs	r3, r2
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d000      	beq.n	8004490 <_ZN7DotStar4showEv+0x11c>
    do {                               // For each pixel...
 800448e:	e7d3      	b.n	8004438 <_ZN7DotStar4showEv+0xc4>
  }
  for(i=0; i<((numLEDs + 15) / 16); i++) sw_spi_out(0xFF); // End-frame marker (see note above)
 8004490:	230b      	movs	r3, #11
 8004492:	18fb      	adds	r3, r7, r3
 8004494:	2200      	movs	r2, #0
 8004496:	701a      	strb	r2, [r3, #0]
 8004498:	230b      	movs	r3, #11
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	330f      	adds	r3, #15
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	da00      	bge.n	80044aa <_ZN7DotStar4showEv+0x136>
 80044a8:	330f      	adds	r3, #15
 80044aa:	111b      	asrs	r3, r3, #4
 80044ac:	429a      	cmp	r2, r3
 80044ae:	da0c      	bge.n	80044ca <_ZN7DotStar4showEv+0x156>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	21ff      	movs	r1, #255	; 0xff
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7ff ff1d 	bl	80042f4 <_ZN7DotStar10sw_spi_outEh>
 80044ba:	210b      	movs	r1, #11
 80044bc:	187b      	adds	r3, r7, r1
 80044be:	781a      	ldrb	r2, [r3, #0]
 80044c0:	187b      	adds	r3, r7, r1
 80044c2:	3201      	adds	r2, #1
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	e7e7      	b.n	8004498 <_ZN7DotStar4showEv+0x124>
  if(!pixels) return;
 80044c8:	46c0      	nop			; (mov r8, r8)
}
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b004      	add	sp, #16
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <_ZN7DotStar5clearEv>:

void DotStar::clear() { // Write 0s (off) to full pixel buffer
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  //memset(pixels, 0, (rOffset == gOffset) ?
    //numLEDs + ((numLEDs + 3) / 4) : // MONO: 10 bits/pixel
    //numLEDs * 3);                   // COLOR: 3 bytes/pixel
}
 80044d8:	46c0      	nop			; (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b002      	add	sp, #8
 80044de:	bd80      	pop	{r7, pc}

080044e0 <_ZN7DotStar13setPixelColorEhhhh>:

// Set pixel color, separate R,G,B values (0-255 ea.)
void DotStar::setPixelColor(
 uint8_t n, uint8_t r, uint8_t g, uint8_t b) {
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	000c      	movs	r4, r1
 80044ea:	0010      	movs	r0, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	1cfb      	adds	r3, r7, #3
 80044f0:	1c22      	adds	r2, r4, #0
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	1cbb      	adds	r3, r7, #2
 80044f6:	1c02      	adds	r2, r0, #0
 80044f8:	701a      	strb	r2, [r3, #0]
 80044fa:	1c7b      	adds	r3, r7, #1
 80044fc:	1c0a      	adds	r2, r1, #0
 80044fe:	701a      	strb	r2, [r3, #0]
  if(n < numLEDs) {
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	1cfa      	adds	r2, r7, #3
 8004506:	7812      	ldrb	r2, [r2, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d221      	bcs.n	8004550 <_ZN7DotStar13setPixelColorEhhhh+0x70>
    uint8_t *p = &pixels[n * 3];
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	1cfb      	adds	r3, r7, #3
 8004512:	781a      	ldrb	r2, [r3, #0]
 8004514:	0013      	movs	r3, r2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	189b      	adds	r3, r3, r2
 800451a:	18cb      	adds	r3, r1, r3
 800451c:	60fb      	str	r3, [r7, #12]
    p[rOffset] = r;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	7a1b      	ldrb	r3, [r3, #8]
 8004522:	001a      	movs	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	189b      	adds	r3, r3, r2
 8004528:	1cba      	adds	r2, r7, #2
 800452a:	7812      	ldrb	r2, [r2, #0]
 800452c:	701a      	strb	r2, [r3, #0]
    p[gOffset] = g;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	7a5b      	ldrb	r3, [r3, #9]
 8004532:	001a      	movs	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	189b      	adds	r3, r3, r2
 8004538:	1c7a      	adds	r2, r7, #1
 800453a:	7812      	ldrb	r2, [r2, #0]
 800453c:	701a      	strb	r2, [r3, #0]
    p[bOffset] = b;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	7a9b      	ldrb	r3, [r3, #10]
 8004542:	001a      	movs	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	189b      	adds	r3, r3, r2
 8004548:	2220      	movs	r2, #32
 800454a:	18ba      	adds	r2, r7, r2
 800454c:	7812      	ldrb	r2, [r2, #0]
 800454e:	701a      	strb	r2, [r3, #0]
  }
}
 8004550:	46c0      	nop			; (mov r8, r8)
 8004552:	46bd      	mov	sp, r7
 8004554:	b005      	add	sp, #20
 8004556:	bd90      	pop	{r4, r7, pc}

08004558 <_ZN7DotStar9numPixelsEv>:
  return ((uint32_t)p[rOffset] << 16) |
         ((uint32_t)p[gOffset] <<  8) |
          (uint32_t)p[bOffset];
}

uint8_t DotStar::numPixels(void) { // Ret. strip length
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  return numLEDs;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	781b      	ldrb	r3, [r3, #0]
}
 8004564:	0018      	movs	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	b002      	add	sp, #8
 800456a:	bd80      	pop	{r7, pc}

0800456c <_ZN7DotStar13setBrightnessEh>:
// reasons I think it's better handled in one's sketch, but it's here for
// parity with the NeoPixel library.  Good news is that brightness setting
// in this library is 'non destructive' -- it's applied as color data is
// being issued to the strip, not during setPixel(), and also means that
// getPixelColor() returns the exact value originally stored.
void DotStar::setBrightness(uint8_t b) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	000a      	movs	r2, r1
 8004576:	1cfb      	adds	r3, r7, #3
 8004578:	701a      	strb	r2, [r3, #0]
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB.  'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  brightness = b + 1;
 800457a:	1cfb      	adds	r3, r7, #3
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	b2da      	uxtb	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	705a      	strb	r2, [r3, #1]
}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	46bd      	mov	sp, r7
 800458a:	b002      	add	sp, #8
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004590:	b590      	push	{r4, r7, lr}
 8004592:	b089      	sub	sp, #36	; 0x24
 8004594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004596:	240c      	movs	r4, #12
 8004598:	193b      	adds	r3, r7, r4
 800459a:	0018      	movs	r0, r3
 800459c:	2314      	movs	r3, #20
 800459e:	001a      	movs	r2, r3
 80045a0:	2100      	movs	r1, #0
 80045a2:	f000 fc7d 	bl	8004ea0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a6:	4b3d      	ldr	r3, [pc, #244]	; (800469c <MX_GPIO_Init+0x10c>)
 80045a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045aa:	4b3c      	ldr	r3, [pc, #240]	; (800469c <MX_GPIO_Init+0x10c>)
 80045ac:	2101      	movs	r1, #1
 80045ae:	430a      	orrs	r2, r1
 80045b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80045b2:	4b3a      	ldr	r3, [pc, #232]	; (800469c <MX_GPIO_Init+0x10c>)
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	2201      	movs	r2, #1
 80045b8:	4013      	ands	r3, r2
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045be:	4b37      	ldr	r3, [pc, #220]	; (800469c <MX_GPIO_Init+0x10c>)
 80045c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c2:	4b36      	ldr	r3, [pc, #216]	; (800469c <MX_GPIO_Init+0x10c>)
 80045c4:	2102      	movs	r1, #2
 80045c6:	430a      	orrs	r2, r1
 80045c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80045ca:	4b34      	ldr	r3, [pc, #208]	; (800469c <MX_GPIO_Init+0x10c>)
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	2202      	movs	r2, #2
 80045d0:	4013      	ands	r3, r2
 80045d2:	607b      	str	r3, [r7, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_0_Pin|LED_1_Pin|LED_2_Pin|TEST_LED_Pin 
 80045d6:	4932      	ldr	r1, [pc, #200]	; (80046a0 <MX_GPIO_Init+0x110>)
 80045d8:	23a0      	movs	r3, #160	; 0xa0
 80045da:	05db      	lsls	r3, r3, #23
 80045dc:	2200      	movs	r2, #0
 80045de:	0018      	movs	r0, r3
 80045e0:	f7fd f89f 	bl	8001722 <HAL_GPIO_WritePin>
                          |LED_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80045e4:	23a0      	movs	r3, #160	; 0xa0
 80045e6:	05db      	lsls	r3, r3, #23
 80045e8:	2201      	movs	r2, #1
 80045ea:	2110      	movs	r1, #16
 80045ec:	0018      	movs	r0, r3
 80045ee:	f7fd f898 	bl	8001722 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DOTSTAR_DATA_Pin|DOTSTAR_CLK_Pin, GPIO_PIN_RESET);
 80045f2:	4b2c      	ldr	r3, [pc, #176]	; (80046a4 <MX_GPIO_Init+0x114>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	2103      	movs	r1, #3
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7fd f892 	bl	8001722 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|SPI_SS_Pin|LED_2_Pin 
 80045fe:	193b      	adds	r3, r7, r4
 8004600:	4a29      	ldr	r2, [pc, #164]	; (80046a8 <MX_GPIO_Init+0x118>)
 8004602:	601a      	str	r2, [r3, #0]
                          |TEST_LED_Pin|LED_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004604:	193b      	adds	r3, r7, r4
 8004606:	2201      	movs	r2, #1
 8004608:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460a:	193b      	adds	r3, r7, r4
 800460c:	2200      	movs	r2, #0
 800460e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004610:	193b      	adds	r3, r7, r4
 8004612:	2200      	movs	r2, #0
 8004614:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004616:	193a      	adds	r2, r7, r4
 8004618:	23a0      	movs	r3, #160	; 0xa0
 800461a:	05db      	lsls	r3, r3, #23
 800461c:	0011      	movs	r1, r2
 800461e:	0018      	movs	r0, r3
 8004620:	f7fc feec 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DOTSTAR_DATA_Pin|DOTSTAR_CLK_Pin;
 8004624:	0021      	movs	r1, r4
 8004626:	187b      	adds	r3, r7, r1
 8004628:	2203      	movs	r2, #3
 800462a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800462c:	187b      	adds	r3, r7, r1
 800462e:	2201      	movs	r2, #1
 8004630:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004632:	187b      	adds	r3, r7, r1
 8004634:	2200      	movs	r2, #0
 8004636:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004638:	187b      	adds	r3, r7, r1
 800463a:	2200      	movs	r2, #0
 800463c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800463e:	000c      	movs	r4, r1
 8004640:	187b      	adds	r3, r7, r1
 8004642:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <MX_GPIO_Init+0x114>)
 8004644:	0019      	movs	r1, r3
 8004646:	0010      	movs	r0, r2
 8004648:	f7fc fed8 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BG_SW_0_Pin|BG_SW_6_Pin|BG_SW_7_Pin|SW_0_Pin 
 800464c:	0021      	movs	r1, r4
 800464e:	187b      	adds	r3, r7, r1
 8004650:	4a16      	ldr	r2, [pc, #88]	; (80046ac <MX_GPIO_Init+0x11c>)
 8004652:	601a      	str	r2, [r3, #0]
                          |SW_1_Pin|SW_2_Pin|SW_3_Pin|BG_SW_1_Pin 
                          |BG_SW_2_Pin|BG_SW_3_Pin|BG_SW_4_Pin|BG_SW_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004654:	187b      	adds	r3, r7, r1
 8004656:	2200      	movs	r2, #0
 8004658:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465a:	187b      	adds	r3, r7, r1
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004660:	000c      	movs	r4, r1
 8004662:	187b      	adds	r3, r7, r1
 8004664:	4a0f      	ldr	r2, [pc, #60]	; (80046a4 <MX_GPIO_Init+0x114>)
 8004666:	0019      	movs	r1, r3
 8004668:	0010      	movs	r0, r2
 800466a:	f7fc fec7 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COLOR_INT_Pin;
 800466e:	0021      	movs	r1, r4
 8004670:	187b      	adds	r3, r7, r1
 8004672:	2280      	movs	r2, #128	; 0x80
 8004674:	0212      	lsls	r2, r2, #8
 8004676:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004678:	187b      	adds	r3, r7, r1
 800467a:	2200      	movs	r2, #0
 800467c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467e:	187b      	adds	r3, r7, r1
 8004680:	2200      	movs	r2, #0
 8004682:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(COLOR_INT_GPIO_Port, &GPIO_InitStruct);
 8004684:	187a      	adds	r2, r7, r1
 8004686:	23a0      	movs	r3, #160	; 0xa0
 8004688:	05db      	lsls	r3, r3, #23
 800468a:	0011      	movs	r1, r2
 800468c:	0018      	movs	r0, r3
 800468e:	f7fc feb5 	bl	80013fc <HAL_GPIO_Init>

}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	46bd      	mov	sp, r7
 8004696:	b009      	add	sp, #36	; 0x24
 8004698:	bd90      	pop	{r4, r7, pc}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	40021000 	.word	0x40021000
 80046a0:	00001906 	.word	0x00001906
 80046a4:	50000400 	.word	0x50000400
 80046a8:	00001916 	.word	0x00001916
 80046ac:	0000ff3c 	.word	0x0000ff3c

080046b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80046b4:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <MX_I2C1_Init+0x74>)
 80046b6:	4a1c      	ldr	r2, [pc, #112]	; (8004728 <MX_I2C1_Init+0x78>)
 80046b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80046ba:	4b1a      	ldr	r3, [pc, #104]	; (8004724 <MX_I2C1_Init+0x74>)
 80046bc:	4a1b      	ldr	r2, [pc, #108]	; (800472c <MX_I2C1_Init+0x7c>)
 80046be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80046c0:	4b18      	ldr	r3, [pc, #96]	; (8004724 <MX_I2C1_Init+0x74>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046c6:	4b17      	ldr	r3, [pc, #92]	; (8004724 <MX_I2C1_Init+0x74>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046cc:	4b15      	ldr	r3, [pc, #84]	; (8004724 <MX_I2C1_Init+0x74>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80046d2:	4b14      	ldr	r3, [pc, #80]	; (8004724 <MX_I2C1_Init+0x74>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80046d8:	4b12      	ldr	r3, [pc, #72]	; (8004724 <MX_I2C1_Init+0x74>)
 80046da:	2200      	movs	r2, #0
 80046dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <MX_I2C1_Init+0x74>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046e4:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <MX_I2C1_Init+0x74>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80046ea:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <MX_I2C1_Init+0x74>)
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7fd f835 	bl	800175c <HAL_I2C_Init>
 80046f2:	1e03      	subs	r3, r0, #0
 80046f4:	d001      	beq.n	80046fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80046f6:	f000 fa23 	bl	8004b40 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80046fa:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <MX_I2C1_Init+0x74>)
 80046fc:	2100      	movs	r1, #0
 80046fe:	0018      	movs	r0, r3
 8004700:	f7fd fcb6 	bl	8002070 <HAL_I2CEx_ConfigAnalogFilter>
 8004704:	1e03      	subs	r3, r0, #0
 8004706:	d001      	beq.n	800470c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004708:	f000 fa1a 	bl	8004b40 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <MX_I2C1_Init+0x74>)
 800470e:	2100      	movs	r1, #0
 8004710:	0018      	movs	r0, r3
 8004712:	f7fd fcf9 	bl	8002108 <HAL_I2CEx_ConfigDigitalFilter>
 8004716:	1e03      	subs	r3, r0, #0
 8004718:	d001      	beq.n	800471e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800471a:	f000 fa11 	bl	8004b40 <Error_Handler>
  }

}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20000094 	.word	0x20000094
 8004728:	40005400 	.word	0x40005400
 800472c:	00707cbb 	.word	0x00707cbb

08004730 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004730:	b590      	push	{r4, r7, lr}
 8004732:	b089      	sub	sp, #36	; 0x24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004738:	230c      	movs	r3, #12
 800473a:	18fb      	adds	r3, r7, r3
 800473c:	0018      	movs	r0, r3
 800473e:	2314      	movs	r3, #20
 8004740:	001a      	movs	r2, r3
 8004742:	2100      	movs	r1, #0
 8004744:	f000 fbac 	bl	8004ea0 <memset>
  if(i2cHandle->Instance==I2C1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a23      	ldr	r2, [pc, #140]	; (80047dc <HAL_I2C_MspInit+0xac>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d13f      	bne.n	80047d2 <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004752:	4b23      	ldr	r3, [pc, #140]	; (80047e0 <HAL_I2C_MspInit+0xb0>)
 8004754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004756:	4b22      	ldr	r3, [pc, #136]	; (80047e0 <HAL_I2C_MspInit+0xb0>)
 8004758:	2102      	movs	r1, #2
 800475a:	430a      	orrs	r2, r1
 800475c:	62da      	str	r2, [r3, #44]	; 0x2c
 800475e:	4b20      	ldr	r3, [pc, #128]	; (80047e0 <HAL_I2C_MspInit+0xb0>)
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	2202      	movs	r2, #2
 8004764:	4013      	ands	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800476a:	210c      	movs	r1, #12
 800476c:	187b      	adds	r3, r7, r1
 800476e:	2240      	movs	r2, #64	; 0x40
 8004770:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004772:	187b      	adds	r3, r7, r1
 8004774:	2212      	movs	r2, #18
 8004776:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	187b      	adds	r3, r7, r1
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800477e:	187b      	adds	r3, r7, r1
 8004780:	2203      	movs	r2, #3
 8004782:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004784:	187b      	adds	r3, r7, r1
 8004786:	2201      	movs	r2, #1
 8004788:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800478a:	000c      	movs	r4, r1
 800478c:	187b      	adds	r3, r7, r1
 800478e:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <HAL_I2C_MspInit+0xb4>)
 8004790:	0019      	movs	r1, r3
 8004792:	0010      	movs	r0, r2
 8004794:	f7fc fe32 	bl	80013fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004798:	0021      	movs	r1, r4
 800479a:	187b      	adds	r3, r7, r1
 800479c:	2280      	movs	r2, #128	; 0x80
 800479e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047a0:	187b      	adds	r3, r7, r1
 80047a2:	2212      	movs	r2, #18
 80047a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047a6:	187b      	adds	r3, r7, r1
 80047a8:	2201      	movs	r2, #1
 80047aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ac:	187b      	adds	r3, r7, r1
 80047ae:	2203      	movs	r2, #3
 80047b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80047b2:	187b      	adds	r3, r7, r1
 80047b4:	2201      	movs	r2, #1
 80047b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b8:	187b      	adds	r3, r7, r1
 80047ba:	4a0a      	ldr	r2, [pc, #40]	; (80047e4 <HAL_I2C_MspInit+0xb4>)
 80047bc:	0019      	movs	r1, r3
 80047be:	0010      	movs	r0, r2
 80047c0:	f7fc fe1c 	bl	80013fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047c4:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <HAL_I2C_MspInit+0xb0>)
 80047c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <HAL_I2C_MspInit+0xb0>)
 80047ca:	2180      	movs	r1, #128	; 0x80
 80047cc:	0389      	lsls	r1, r1, #14
 80047ce:	430a      	orrs	r2, r1
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	46bd      	mov	sp, r7
 80047d6:	b009      	add	sp, #36	; 0x24
 80047d8:	bd90      	pop	{r4, r7, pc}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	40005400 	.word	0x40005400
 80047e0:	40021000 	.word	0x40021000
 80047e4:	50000400 	.word	0x50000400

080047e8 <_ZN8APDS9960C1Ev>:
  APDS9960(){};
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	0018      	movs	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b002      	add	sp, #8
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <main>:
  * @brief  The application entry point
  *
  * @retval None
  */
int main(void)
{
 80047fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fe:	b0a7      	sub	sp, #156	; 0x9c
 8004800:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick */
  HAL_Init();
 8004802:	f7fc fcaf 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004806:	f000 f91d 	bl	8004a44 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800480a:	f7ff fec1 	bl	8004590 <MX_GPIO_Init>
  MX_I2C1_Init();
 800480e:	f7ff ff4f 	bl	80046b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004812:	f000 f9d3 	bl	8004bbc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 8004816:	20c8      	movs	r0, #200	; 0xc8
 8004818:	f7fc fd04 	bl	8001224 <HAL_Delay>

  // Setup and initialize Dotstars
  DotStar ring = DotStar(20, DOTSTAR_RBG);
 800481c:	2484      	movs	r4, #132	; 0x84
 800481e:	193b      	adds	r3, r7, r4
 8004820:	2218      	movs	r2, #24
 8004822:	2114      	movs	r1, #20
 8004824:	0018      	movs	r0, r3
 8004826:	f7ff fcd0 	bl	80041ca <_ZN7DotStarC1Ehh>
  ring.begin(); // Initialize pins for output
 800482a:	193b      	adds	r3, r7, r4
 800482c:	0018      	movs	r0, r3
 800482e:	f7ff fd03 	bl	8004238 <_ZN7DotStar5beginEv>
  RGB_VALS rgb_off;
  rgb_off.r = 0; rgb_off.g = 0; rgb_off.b = 0;
 8004832:	2180      	movs	r1, #128	; 0x80
 8004834:	187b      	adds	r3, r7, r1
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	187b      	adds	r3, r7, r1
 800483c:	2200      	movs	r2, #0
 800483e:	705a      	strb	r2, [r3, #1]
 8004840:	187b      	adds	r3, r7, r1
 8004842:	2200      	movs	r2, #0
 8004844:	709a      	strb	r2, [r3, #2]
  ring_set_all_pixels(ring, rgb_off); // Initialize LEDs to off
 8004846:	187b      	adds	r3, r7, r1
 8004848:	193a      	adds	r2, r7, r4
 800484a:	6819      	ldr	r1, [r3, #0]
 800484c:	0010      	movs	r0, r2
 800484e:	f000 f97c 	bl	8004b4a <_Z19ring_set_all_pixelsR7DotStar8RGB_VALS>
  RGB_VALS rgb_default; 
  RGB_VALS rgb_new;
  rgb_default.r = 20; rgb_default.g = 20; rgb_default.b = 244;
 8004852:	257c      	movs	r5, #124	; 0x7c
 8004854:	197b      	adds	r3, r7, r5
 8004856:	2214      	movs	r2, #20
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	197b      	adds	r3, r7, r5
 800485c:	2214      	movs	r2, #20
 800485e:	705a      	strb	r2, [r3, #1]
 8004860:	197b      	adds	r3, r7, r5
 8004862:	22f4      	movs	r2, #244	; 0xf4
 8004864:	709a      	strb	r2, [r3, #2]
  ring.setBrightness(200);
 8004866:	193b      	adds	r3, r7, r4
 8004868:	21c8      	movs	r1, #200	; 0xc8
 800486a:	0018      	movs	r0, r3
 800486c:	f7ff fe7e 	bl	800456c <_ZN7DotStar13setBrightnessEh>
  ring_set_all_pixels(ring, rgb_default);
 8004870:	197b      	adds	r3, r7, r5
 8004872:	193a      	adds	r2, r7, r4
 8004874:	6819      	ldr	r1, [r3, #0]
 8004876:	0010      	movs	r0, r2
 8004878:	f000 f967 	bl	8004b4a <_Z19ring_set_all_pixelsR7DotStar8RGB_VALS>

  // Initialize LED driver
  BarGraph bg=BarGraph(8,40);
 800487c:	242c      	movs	r4, #44	; 0x2c
 800487e:	193b      	adds	r3, r7, r4
 8004880:	2228      	movs	r2, #40	; 0x28
 8004882:	2108      	movs	r1, #8
 8004884:	0018      	movs	r0, r3
 8004886:	f7ff fbad 	bl	8003fe4 <_ZN8BarGraphC1Ehh>
  bg.begin();
 800488a:	193b      	adds	r3, r7, r4
 800488c:	0018      	movs	r0, r3
 800488e:	f7ff fbd7 	bl	8004040 <_ZN8BarGraph5beginEv>
  uint8_t bg_sw[8];

  // Setup Color Sensor
  APDS9960 apds;
 8004892:	240c      	movs	r4, #12
 8004894:	193b      	adds	r3, r7, r4
 8004896:	0018      	movs	r0, r3
 8004898:	f7ff ffa6 	bl	80047e8 <_ZN8APDS9960C1Ev>
  apds.begin();
 800489c:	1938      	adds	r0, r7, r4
 800489e:	2372      	movs	r3, #114	; 0x72
 80048a0:	2203      	movs	r2, #3
 80048a2:	21c8      	movs	r1, #200	; 0xc8
 80048a4:	f7fe feb6 	bl	8003614 <_ZN8APDS99605beginEt15apds9960AGain_th>
  //enable color sensign mode
  apds.enableColor(true);
 80048a8:	193b      	adds	r3, r7, r4
 80048aa:	2101      	movs	r1, #1
 80048ac:	0018      	movs	r0, r3
 80048ae:	f7ff f8cd 	bl	8003a4c <_ZN8APDS996011enableColorEb>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
    // read bar graph switch inputs and update graph 
    bg_sw[0] = !HAL_GPIO_ReadPin(BG_SW_0_GPIO_Port, BG_SW_0_Pin);
 80048b2:	4b63      	ldr	r3, [pc, #396]	; (8004a40 <main+0x244>)
 80048b4:	2104      	movs	r1, #4
 80048b6:	0018      	movs	r0, r3
 80048b8:	f7fc ff16 	bl	80016e8 <HAL_GPIO_ReadPin>
 80048bc:	0003      	movs	r3, r0
 80048be:	425a      	negs	r2, r3
 80048c0:	4153      	adcs	r3, r2
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	001a      	movs	r2, r3
 80048c6:	2424      	movs	r4, #36	; 0x24
 80048c8:	193b      	adds	r3, r7, r4
 80048ca:	701a      	strb	r2, [r3, #0]
    bg_sw[1] = !HAL_GPIO_ReadPin(BG_SW_1_GPIO_Port, BG_SW_1_Pin);
 80048cc:	4b5c      	ldr	r3, [pc, #368]	; (8004a40 <main+0x244>)
 80048ce:	2108      	movs	r1, #8
 80048d0:	0018      	movs	r0, r3
 80048d2:	f7fc ff09 	bl	80016e8 <HAL_GPIO_ReadPin>
 80048d6:	0003      	movs	r3, r0
 80048d8:	425a      	negs	r2, r3
 80048da:	4153      	adcs	r3, r2
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	001a      	movs	r2, r3
 80048e0:	193b      	adds	r3, r7, r4
 80048e2:	705a      	strb	r2, [r3, #1]
    bg_sw[2] = !HAL_GPIO_ReadPin(BG_SW_2_GPIO_Port, BG_SW_2_Pin);
 80048e4:	4b56      	ldr	r3, [pc, #344]	; (8004a40 <main+0x244>)
 80048e6:	2110      	movs	r1, #16
 80048e8:	0018      	movs	r0, r3
 80048ea:	f7fc fefd 	bl	80016e8 <HAL_GPIO_ReadPin>
 80048ee:	0003      	movs	r3, r0
 80048f0:	425a      	negs	r2, r3
 80048f2:	4153      	adcs	r3, r2
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	001a      	movs	r2, r3
 80048f8:	193b      	adds	r3, r7, r4
 80048fa:	709a      	strb	r2, [r3, #2]
    bg_sw[3] = !HAL_GPIO_ReadPin(BG_SW_3_GPIO_Port, BG_SW_3_Pin);
 80048fc:	4b50      	ldr	r3, [pc, #320]	; (8004a40 <main+0x244>)
 80048fe:	2120      	movs	r1, #32
 8004900:	0018      	movs	r0, r3
 8004902:	f7fc fef1 	bl	80016e8 <HAL_GPIO_ReadPin>
 8004906:	0003      	movs	r3, r0
 8004908:	425a      	negs	r2, r3
 800490a:	4153      	adcs	r3, r2
 800490c:	b2db      	uxtb	r3, r3
 800490e:	001a      	movs	r2, r3
 8004910:	193b      	adds	r3, r7, r4
 8004912:	70da      	strb	r2, [r3, #3]
    bg_sw[4] = !HAL_GPIO_ReadPin(BG_SW_4_GPIO_Port, BG_SW_4_Pin);
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	4a49      	ldr	r2, [pc, #292]	; (8004a40 <main+0x244>)
 800491a:	0019      	movs	r1, r3
 800491c:	0010      	movs	r0, r2
 800491e:	f7fc fee3 	bl	80016e8 <HAL_GPIO_ReadPin>
 8004922:	0003      	movs	r3, r0
 8004924:	425a      	negs	r2, r3
 8004926:	4153      	adcs	r3, r2
 8004928:	b2db      	uxtb	r3, r3
 800492a:	001a      	movs	r2, r3
 800492c:	193b      	adds	r3, r7, r4
 800492e:	711a      	strb	r2, [r3, #4]
    bg_sw[5] = !HAL_GPIO_ReadPin(BG_SW_5_GPIO_Port, BG_SW_5_Pin);
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4a42      	ldr	r2, [pc, #264]	; (8004a40 <main+0x244>)
 8004936:	0019      	movs	r1, r3
 8004938:	0010      	movs	r0, r2
 800493a:	f7fc fed5 	bl	80016e8 <HAL_GPIO_ReadPin>
 800493e:	0003      	movs	r3, r0
 8004940:	425a      	negs	r2, r3
 8004942:	4153      	adcs	r3, r2
 8004944:	b2db      	uxtb	r3, r3
 8004946:	001a      	movs	r2, r3
 8004948:	193b      	adds	r3, r7, r4
 800494a:	715a      	strb	r2, [r3, #5]
    bg_sw[6] = !HAL_GPIO_ReadPin(BG_SW_6_GPIO_Port, BG_SW_6_Pin);
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	4a3b      	ldr	r2, [pc, #236]	; (8004a40 <main+0x244>)
 8004952:	0019      	movs	r1, r3
 8004954:	0010      	movs	r0, r2
 8004956:	f7fc fec7 	bl	80016e8 <HAL_GPIO_ReadPin>
 800495a:	0003      	movs	r3, r0
 800495c:	425a      	negs	r2, r3
 800495e:	4153      	adcs	r3, r2
 8004960:	b2db      	uxtb	r3, r3
 8004962:	001a      	movs	r2, r3
 8004964:	193b      	adds	r3, r7, r4
 8004966:	719a      	strb	r2, [r3, #6]
    bg_sw[7] = !HAL_GPIO_ReadPin(BG_SW_7_GPIO_Port, BG_SW_7_Pin);
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	4a34      	ldr	r2, [pc, #208]	; (8004a40 <main+0x244>)
 800496e:	0019      	movs	r1, r3
 8004970:	0010      	movs	r0, r2
 8004972:	f7fc feb9 	bl	80016e8 <HAL_GPIO_ReadPin>
 8004976:	0003      	movs	r3, r0
 8004978:	425a      	negs	r2, r3
 800497a:	4153      	adcs	r3, r2
 800497c:	b2db      	uxtb	r3, r3
 800497e:	001a      	movs	r2, r3
 8004980:	193b      	adds	r3, r7, r4
 8004982:	71da      	strb	r2, [r3, #7]
    bg.update(&bg_sw[0]);
 8004984:	193a      	adds	r2, r7, r4
 8004986:	232c      	movs	r3, #44	; 0x2c
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	0011      	movs	r1, r2
 800498c:	0018      	movs	r0, r3
 800498e:	f7ff fb91 	bl	80040b4 <_ZN8BarGraph6updateEPh>
    //while(!apds.colorDataReady()){
    //  HAL_Delay(5);
    //}
    //get the data and print the different channels
    
    apds.getColorData(&r, &g, &b, &c);
 8004992:	1dbc      	adds	r4, r7, #6
 8004994:	2508      	movs	r5, #8
 8004996:	197a      	adds	r2, r7, r5
 8004998:	260a      	movs	r6, #10
 800499a:	19b9      	adds	r1, r7, r6
 800499c:	230c      	movs	r3, #12
 800499e:	18f8      	adds	r0, r7, r3
 80049a0:	1d3b      	adds	r3, r7, #4
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	0023      	movs	r3, r4
 80049a6:	f7ff f875 	bl	8003a94 <_ZN8APDS996012getColorDataEPtS0_S0_S0_>

    if ((r > g) && (r > b)) {
 80049aa:	19bb      	adds	r3, r7, r6
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	197b      	adds	r3, r7, r5
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d911      	bls.n	80049da <main+0x1de>
 80049b6:	230a      	movs	r3, #10
 80049b8:	18fb      	adds	r3, r7, r3
 80049ba:	881a      	ldrh	r2, [r3, #0]
 80049bc:	1dbb      	adds	r3, r7, #6
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d90a      	bls.n	80049da <main+0x1de>
      rgb_new.r = 100;
 80049c4:	2178      	movs	r1, #120	; 0x78
 80049c6:	187b      	adds	r3, r7, r1
 80049c8:	2264      	movs	r2, #100	; 0x64
 80049ca:	701a      	strb	r2, [r3, #0]
      rgb_new.g = 0;
 80049cc:	187b      	adds	r3, r7, r1
 80049ce:	2200      	movs	r2, #0
 80049d0:	705a      	strb	r2, [r3, #1]
      rgb_new.b = 0;
 80049d2:	187b      	adds	r3, r7, r1
 80049d4:	2200      	movs	r2, #0
 80049d6:	709a      	strb	r2, [r3, #2]
 80049d8:	e023      	b.n	8004a22 <main+0x226>
    } else if ((g > r) && (g > b)) {
 80049da:	2308      	movs	r3, #8
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	881a      	ldrh	r2, [r3, #0]
 80049e0:	230a      	movs	r3, #10
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d911      	bls.n	8004a0e <main+0x212>
 80049ea:	2308      	movs	r3, #8
 80049ec:	18fb      	adds	r3, r7, r3
 80049ee:	881a      	ldrh	r2, [r3, #0]
 80049f0:	1dbb      	adds	r3, r7, #6
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d90a      	bls.n	8004a0e <main+0x212>
      rgb_new.r = 0;
 80049f8:	2178      	movs	r1, #120	; 0x78
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]
      rgb_new.g = 100;
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	2264      	movs	r2, #100	; 0x64
 8004a04:	705a      	strb	r2, [r3, #1]
      rgb_new.b = 0;
 8004a06:	187b      	adds	r3, r7, r1
 8004a08:	2200      	movs	r2, #0
 8004a0a:	709a      	strb	r2, [r3, #2]
 8004a0c:	e009      	b.n	8004a22 <main+0x226>
    } else {
      rgb_new.r = 0;
 8004a0e:	2178      	movs	r1, #120	; 0x78
 8004a10:	187b      	adds	r3, r7, r1
 8004a12:	2200      	movs	r2, #0
 8004a14:	701a      	strb	r2, [r3, #0]
      rgb_new.g = 0;
 8004a16:	187b      	adds	r3, r7, r1
 8004a18:	2200      	movs	r2, #0
 8004a1a:	705a      	strb	r2, [r3, #1]
      rgb_new.b = 100;
 8004a1c:	187b      	adds	r3, r7, r1
 8004a1e:	2264      	movs	r2, #100	; 0x64
 8004a20:	709a      	strb	r2, [r3, #2]
    }
    
    ring_set_all_pixels(ring, rgb_new);
 8004a22:	2378      	movs	r3, #120	; 0x78
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	2284      	movs	r2, #132	; 0x84
 8004a28:	18ba      	adds	r2, r7, r2
 8004a2a:	6819      	ldr	r1, [r3, #0]
 8004a2c:	0010      	movs	r0, r2
 8004a2e:	f000 f88c 	bl	8004b4a <_Z19ring_set_all_pixelsR7DotStar8RGB_VALS>

    HAL_Delay(500);
 8004a32:	23fa      	movs	r3, #250	; 0xfa
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	0018      	movs	r0, r3
 8004a38:	f7fc fbf4 	bl	8001224 <HAL_Delay>
    bg_sw[0] = !HAL_GPIO_ReadPin(BG_SW_0_GPIO_Port, BG_SW_0_Pin);
 8004a3c:	e739      	b.n	80048b2 <main+0xb6>
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	50000400 	.word	0x50000400

08004a44 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b09c      	sub	sp, #112	; 0x70
 8004a48:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  
    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a4a:	4b3b      	ldr	r3, [pc, #236]	; (8004b38 <_Z18SystemClock_Configv+0xf4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a3b      	ldr	r2, [pc, #236]	; (8004b3c <_Z18SystemClock_Configv+0xf8>)
 8004a50:	401a      	ands	r2, r3
 8004a52:	4b39      	ldr	r3, [pc, #228]	; (8004b38 <_Z18SystemClock_Configv+0xf4>)
 8004a54:	2180      	movs	r1, #128	; 0x80
 8004a56:	0109      	lsls	r1, r1, #4
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a5c:	2138      	movs	r1, #56	; 0x38
 8004a5e:	187b      	adds	r3, r7, r1
 8004a60:	2202      	movs	r2, #2
 8004a62:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a64:	187b      	adds	r3, r7, r1
 8004a66:	2201      	movs	r2, #1
 8004a68:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004a6a:	187b      	adds	r3, r7, r1
 8004a6c:	2210      	movs	r2, #16
 8004a6e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a70:	187b      	adds	r3, r7, r1
 8004a72:	2202      	movs	r2, #2
 8004a74:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a76:	187b      	adds	r3, r7, r1
 8004a78:	2200      	movs	r2, #0
 8004a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8004a7c:	187b      	adds	r3, r7, r1
 8004a7e:	2280      	movs	r2, #128	; 0x80
 8004a80:	02d2      	lsls	r2, r2, #11
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8004a84:	187b      	adds	r3, r7, r1
 8004a86:	2280      	movs	r2, #128	; 0x80
 8004a88:	03d2      	lsls	r2, r2, #15
 8004a8a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a8c:	187b      	adds	r3, r7, r1
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f7fd fb86 	bl	80021a0 <HAL_RCC_OscConfig>
 8004a94:	0003      	movs	r3, r0
 8004a96:	1e5a      	subs	r2, r3, #1
 8004a98:	4193      	sbcs	r3, r2
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <_Z18SystemClock_Configv+0x60>
  {
	  Error_Handler();
 8004aa0:	f000 f84e 	bl	8004b40 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004aa4:	2124      	movs	r1, #36	; 0x24
 8004aa6:	187b      	adds	r3, r7, r1
 8004aa8:	220f      	movs	r2, #15
 8004aaa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004aac:	187b      	adds	r3, r7, r1
 8004aae:	2203      	movs	r2, #3
 8004ab0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ab2:	187b      	adds	r3, r7, r1
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004ab8:	187b      	adds	r3, r7, r1
 8004aba:	2200      	movs	r2, #0
 8004abc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004abe:	187b      	adds	r3, r7, r1
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004ac4:	187b      	adds	r3, r7, r1
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fd ff29 	bl	8002920 <HAL_RCC_ClockConfig>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	1e5a      	subs	r2, r3, #1
 8004ad2:	4193      	sbcs	r3, r2
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <_Z18SystemClock_Configv+0x9a>
  {
	  Error_Handler();
 8004ada:	f000 f831 	bl	8004b40 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004ae4:	1d3b      	adds	r3, r7, #4
 8004ae6:	2280      	movs	r2, #128	; 0x80
 8004ae8:	0192      	lsls	r2, r2, #6
 8004aea:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004aec:	1d3b      	adds	r3, r7, #4
 8004aee:	0018      	movs	r0, r3
 8004af0:	f7fe f8ce 	bl	8002c90 <HAL_RCCEx_PeriphCLKConfig>
 8004af4:	0003      	movs	r3, r0
 8004af6:	1e5a      	subs	r2, r3, #1
 8004af8:	4193      	sbcs	r3, r2
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <_Z18SystemClock_Configv+0xc0>
  {
	  Error_Handler();
 8004b00:	f000 f81e 	bl	8004b40 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004b04:	f7fe f8ba 	bl	8002c7c <HAL_RCC_GetHCLKFreq>
 8004b08:	0002      	movs	r2, r0
 8004b0a:	23fa      	movs	r3, #250	; 0xfa
 8004b0c:	0099      	lsls	r1, r3, #2
 8004b0e:	0010      	movs	r0, r2
 8004b10:	f7fb fafa 	bl	8000108 <__udivsi3>
 8004b14:	0003      	movs	r3, r0
 8004b16:	0018      	movs	r0, r3
 8004b18:	f7fc fc49 	bl	80013ae <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004b1c:	2004      	movs	r0, #4
 8004b1e:	f7fc fc53 	bl	80013c8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004b22:	2301      	movs	r3, #1
 8004b24:	425b      	negs	r3, r3
 8004b26:	2200      	movs	r2, #0
 8004b28:	2100      	movs	r1, #0
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f7fc fc2a 	bl	8001384 <HAL_NVIC_SetPriority>
}
 8004b30:	46c0      	nop			; (mov r8, r8)
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b01c      	add	sp, #112	; 0x70
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40007000 	.word	0x40007000
 8004b3c:	ffffe7ff 	.word	0xffffe7ff

08004b40 <Error_Handler>:

/* USER CODE BEGIN 4 */
void Error_Handler(void){
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
}
 8004b44:	46c0      	nop			; (mov r8, r8)
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <_Z19ring_set_all_pixelsR7DotStar8RGB_VALS>:
        }
    }
    return;
}

void ring_set_all_pixels(DotStar& ring, RGB_VALS rgb) {
 8004b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b4c:	b087      	sub	sp, #28
 8004b4e:	af02      	add	r7, sp, #8
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	003b      	movs	r3, r7
 8004b54:	6019      	str	r1, [r3, #0]
    uint8_t ring_size = ring.numPixels();
 8004b56:	230e      	movs	r3, #14
 8004b58:	18fc      	adds	r4, r7, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7ff fcfb 	bl	8004558 <_ZN7DotStar9numPixelsEv>
 8004b62:	0003      	movs	r3, r0
 8004b64:	7023      	strb	r3, [r4, #0]
    for (uint8_t j = 0; j < ring_size; j++)
 8004b66:	230f      	movs	r3, #15
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	230f      	movs	r3, #15
 8004b70:	18fa      	adds	r2, r7, r3
 8004b72:	230e      	movs	r3, #14
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	7812      	ldrb	r2, [r2, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d216      	bcs.n	8004bac <_Z19ring_set_all_pixelsR7DotStar8RGB_VALS+0x62>
    {
        ring.setPixelColor(j, rgb.r, rgb.g, rgb.b);
 8004b7e:	003b      	movs	r3, r7
 8004b80:	781c      	ldrb	r4, [r3, #0]
 8004b82:	003b      	movs	r3, r7
 8004b84:	785d      	ldrb	r5, [r3, #1]
 8004b86:	003b      	movs	r3, r7
 8004b88:	789b      	ldrb	r3, [r3, #2]
 8004b8a:	210f      	movs	r1, #15
 8004b8c:	000e      	movs	r6, r1
 8004b8e:	187a      	adds	r2, r7, r1
 8004b90:	7811      	ldrb	r1, [r2, #0]
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	002b      	movs	r3, r5
 8004b98:	0022      	movs	r2, r4
 8004b9a:	f7ff fca1 	bl	80044e0 <_ZN7DotStar13setPixelColorEhhhh>
    for (uint8_t j = 0; j < ring_size; j++)
 8004b9e:	0031      	movs	r1, r6
 8004ba0:	187b      	adds	r3, r7, r1
 8004ba2:	781a      	ldrb	r2, [r3, #0]
 8004ba4:	187b      	adds	r3, r7, r1
 8004ba6:	3201      	adds	r2, #1
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e7e0      	b.n	8004b6e <_Z19ring_set_all_pixelsR7DotStar8RGB_VALS+0x24>
    }
    ring.show();
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f7ff fbe0 	bl	8004374 <_ZN7DotStar4showEv>
}
 8004bb4:	46c0      	nop			; (mov r8, r8)
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b005      	add	sp, #20
 8004bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bbc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8004bc0:	4b18      	ldr	r3, [pc, #96]	; (8004c24 <MX_SPI1_Init+0x68>)
 8004bc2:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <MX_SPI1_Init+0x6c>)
 8004bc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004bc6:	4b17      	ldr	r3, [pc, #92]	; (8004c24 <MX_SPI1_Init+0x68>)
 8004bc8:	2282      	movs	r2, #130	; 0x82
 8004bca:	0052      	lsls	r2, r2, #1
 8004bcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004bce:	4b15      	ldr	r3, [pc, #84]	; (8004c24 <MX_SPI1_Init+0x68>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004bd4:	4b13      	ldr	r3, [pc, #76]	; (8004c24 <MX_SPI1_Init+0x68>)
 8004bd6:	2280      	movs	r2, #128	; 0x80
 8004bd8:	0112      	lsls	r2, r2, #4
 8004bda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bdc:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <MX_SPI1_Init+0x68>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004be2:	4b10      	ldr	r3, [pc, #64]	; (8004c24 <MX_SPI1_Init+0x68>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004be8:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <MX_SPI1_Init+0x68>)
 8004bea:	2280      	movs	r2, #128	; 0x80
 8004bec:	0092      	lsls	r2, r2, #2
 8004bee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <MX_SPI1_Init+0x68>)
 8004bf2:	2210      	movs	r2, #16
 8004bf4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <MX_SPI1_Init+0x68>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <MX_SPI1_Init+0x68>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c02:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <MX_SPI1_Init+0x68>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <MX_SPI1_Init+0x68>)
 8004c0a:	2207      	movs	r2, #7
 8004c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c0e:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <MX_SPI1_Init+0x68>)
 8004c10:	0018      	movs	r0, r3
 8004c12:	f7fe f985 	bl	8002f20 <HAL_SPI_Init>
 8004c16:	1e03      	subs	r3, r0, #0
 8004c18:	d001      	beq.n	8004c1e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8004c1a:	f7ff ff91 	bl	8004b40 <Error_Handler>
  }

}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	200000e0 	.word	0x200000e0
 8004c28:	40013000 	.word	0x40013000

08004c2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c34:	230c      	movs	r3, #12
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	0018      	movs	r0, r3
 8004c3a:	2314      	movs	r3, #20
 8004c3c:	001a      	movs	r2, r3
 8004c3e:	2100      	movs	r1, #0
 8004c40:	f000 f92e 	bl	8004ea0 <memset>
  if(spiHandle->Instance==SPI1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a18      	ldr	r2, [pc, #96]	; (8004cac <HAL_SPI_MspInit+0x80>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d129      	bne.n	8004ca2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c4e:	4b18      	ldr	r3, [pc, #96]	; (8004cb0 <HAL_SPI_MspInit+0x84>)
 8004c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c52:	4b17      	ldr	r3, [pc, #92]	; (8004cb0 <HAL_SPI_MspInit+0x84>)
 8004c54:	2180      	movs	r1, #128	; 0x80
 8004c56:	0149      	lsls	r1, r1, #5
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c5c:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <HAL_SPI_MspInit+0x84>)
 8004c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c60:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <HAL_SPI_MspInit+0x84>)
 8004c62:	2101      	movs	r1, #1
 8004c64:	430a      	orrs	r2, r1
 8004c66:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c68:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <HAL_SPI_MspInit+0x84>)
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	4013      	ands	r3, r2
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004c74:	210c      	movs	r1, #12
 8004c76:	187b      	adds	r3, r7, r1
 8004c78:	22e0      	movs	r2, #224	; 0xe0
 8004c7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7c:	187b      	adds	r3, r7, r1
 8004c7e:	2202      	movs	r2, #2
 8004c80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c82:	187b      	adds	r3, r7, r1
 8004c84:	2200      	movs	r2, #0
 8004c86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c88:	187b      	adds	r3, r7, r1
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004c8e:	187b      	adds	r3, r7, r1
 8004c90:	2200      	movs	r2, #0
 8004c92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c94:	187a      	adds	r2, r7, r1
 8004c96:	23a0      	movs	r3, #160	; 0xa0
 8004c98:	05db      	lsls	r3, r3, #23
 8004c9a:	0011      	movs	r1, r2
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f7fc fbad 	bl	80013fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b008      	add	sp, #32
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	40013000 	.word	0x40013000
 8004cb0:	40021000 	.word	0x40021000

08004cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cb8:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <HAL_MspInit+0x24>)
 8004cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_MspInit+0x24>)
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cc4:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <HAL_MspInit+0x24>)
 8004cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc8:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <HAL_MspInit+0x24>)
 8004cca:	2180      	movs	r1, #128	; 0x80
 8004ccc:	0549      	lsls	r1, r1, #21
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40021000 	.word	0x40021000

08004cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ce0:	46c0      	nop			; (mov r8, r8)
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cea:	e7fe      	b.n	8004cea <HardFault_Handler+0x4>

08004cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004cf0:	46c0      	nop			; (mov r8, r8)
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d04:	f7fc fa78 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d08:	46c0      	nop			; (mov r8, r8)
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004d18:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <_sbrk+0x50>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d102      	bne.n	8004d26 <_sbrk+0x16>
		heap_end = &end;
 8004d20:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <_sbrk+0x50>)
 8004d22:	4a10      	ldr	r2, [pc, #64]	; (8004d64 <_sbrk+0x54>)
 8004d24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004d26:	4b0e      	ldr	r3, [pc, #56]	; (8004d60 <_sbrk+0x50>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <_sbrk+0x50>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	18d3      	adds	r3, r2, r3
 8004d34:	466a      	mov	r2, sp
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d907      	bls.n	8004d4a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004d3a:	f000 f87d 	bl	8004e38 <__errno>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	220c      	movs	r2, #12
 8004d42:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004d44:	2301      	movs	r3, #1
 8004d46:	425b      	negs	r3, r3
 8004d48:	e006      	b.n	8004d58 <_sbrk+0x48>
	}

	heap_end += incr;
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <_sbrk+0x50>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	18d2      	adds	r2, r2, r3
 8004d52:	4b03      	ldr	r3, [pc, #12]	; (8004d60 <_sbrk+0x50>)
 8004d54:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004d56:	68fb      	ldr	r3, [r7, #12]
}
 8004d58:	0018      	movs	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	b004      	add	sp, #16
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20000084 	.word	0x20000084
 8004d64:	20000140 	.word	0x20000140

08004d68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004d6c:	4b17      	ldr	r3, [pc, #92]	; (8004dcc <SystemInit+0x64>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4b16      	ldr	r3, [pc, #88]	; (8004dcc <SystemInit+0x64>)
 8004d72:	2180      	movs	r1, #128	; 0x80
 8004d74:	0049      	lsls	r1, r1, #1
 8004d76:	430a      	orrs	r2, r1
 8004d78:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004d7a:	4b14      	ldr	r3, [pc, #80]	; (8004dcc <SystemInit+0x64>)
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <SystemInit+0x64>)
 8004d80:	4913      	ldr	r1, [pc, #76]	; (8004dd0 <SystemInit+0x68>)
 8004d82:	400a      	ands	r2, r1
 8004d84:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004d86:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <SystemInit+0x64>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <SystemInit+0x64>)
 8004d8c:	4911      	ldr	r1, [pc, #68]	; (8004dd4 <SystemInit+0x6c>)
 8004d8e:	400a      	ands	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004d92:	4b0e      	ldr	r3, [pc, #56]	; (8004dcc <SystemInit+0x64>)
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <SystemInit+0x64>)
 8004d98:	2101      	movs	r1, #1
 8004d9a:	438a      	bics	r2, r1
 8004d9c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004d9e:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <SystemInit+0x64>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <SystemInit+0x64>)
 8004da4:	490c      	ldr	r1, [pc, #48]	; (8004dd8 <SystemInit+0x70>)
 8004da6:	400a      	ands	r2, r1
 8004da8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004daa:	4b08      	ldr	r3, [pc, #32]	; (8004dcc <SystemInit+0x64>)
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <SystemInit+0x64>)
 8004db0:	490a      	ldr	r1, [pc, #40]	; (8004ddc <SystemInit+0x74>)
 8004db2:	400a      	ands	r2, r1
 8004db4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004db6:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <SystemInit+0x64>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <SystemInit+0x78>)
 8004dbe:	2280      	movs	r2, #128	; 0x80
 8004dc0:	0512      	lsls	r2, r2, #20
 8004dc2:	609a      	str	r2, [r3, #8]
#endif
}
 8004dc4:	46c0      	nop			; (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	88ff400c 	.word	0x88ff400c
 8004dd4:	fef6fff6 	.word	0xfef6fff6
 8004dd8:	fffbffff 	.word	0xfffbffff
 8004ddc:	ff02ffff 	.word	0xff02ffff
 8004de0:	e000ed00 	.word	0xe000ed00

08004de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004de4:	480d      	ldr	r0, [pc, #52]	; (8004e1c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004de6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004de8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004dea:	e003      	b.n	8004df4 <LoopCopyDataInit>

08004dec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004dec:	4b0c      	ldr	r3, [pc, #48]	; (8004e20 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8004dee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004df0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004df2:	3104      	adds	r1, #4

08004df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004df4:	480b      	ldr	r0, [pc, #44]	; (8004e24 <LoopForever+0xa>)
  ldr  r3, =_edata
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <LoopForever+0xe>)
  adds  r2, r0, r1
 8004df8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004dfa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004dfc:	d3f6      	bcc.n	8004dec <CopyDataInit>
  ldr  r2, =_sbss
 8004dfe:	4a0b      	ldr	r2, [pc, #44]	; (8004e2c <LoopForever+0x12>)
  b  LoopFillZerobss
 8004e00:	e002      	b.n	8004e08 <LoopFillZerobss>

08004e02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004e02:	2300      	movs	r3, #0
  str  r3, [r2]
 8004e04:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e06:	3204      	adds	r2, #4

08004e08 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004e08:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <LoopForever+0x16>)
  cmp  r2, r3
 8004e0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e0c:	d3f9      	bcc.n	8004e02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004e0e:	f7ff ffab 	bl	8004d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e12:	f000 f817 	bl	8004e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e16:	f7ff fcf1 	bl	80047fc <main>

08004e1a <LoopForever>:

LoopForever:
    b LoopForever
 8004e1a:	e7fe      	b.n	8004e1a <LoopForever>
   ldr   r0, =_estack
 8004e1c:	20001fff 	.word	0x20001fff
  ldr  r3, =_sidata
 8004e20:	08005010 	.word	0x08005010
  ldr  r0, =_sdata
 8004e24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004e28:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8004e2c:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8004e30:	2000013c 	.word	0x2000013c

08004e34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e34:	e7fe      	b.n	8004e34 <ADC1_COMP_IRQHandler>
	...

08004e38 <__errno>:
 8004e38:	4b01      	ldr	r3, [pc, #4]	; (8004e40 <__errno+0x8>)
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	4770      	bx	lr
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	20000004 	.word	0x20000004

08004e44 <__libc_init_array>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	2600      	movs	r6, #0
 8004e48:	4d0c      	ldr	r5, [pc, #48]	; (8004e7c <__libc_init_array+0x38>)
 8004e4a:	4c0d      	ldr	r4, [pc, #52]	; (8004e80 <__libc_init_array+0x3c>)
 8004e4c:	1b64      	subs	r4, r4, r5
 8004e4e:	10a4      	asrs	r4, r4, #2
 8004e50:	42a6      	cmp	r6, r4
 8004e52:	d109      	bne.n	8004e68 <__libc_init_array+0x24>
 8004e54:	2600      	movs	r6, #0
 8004e56:	f000 f89d 	bl	8004f94 <_init>
 8004e5a:	4d0a      	ldr	r5, [pc, #40]	; (8004e84 <__libc_init_array+0x40>)
 8004e5c:	4c0a      	ldr	r4, [pc, #40]	; (8004e88 <__libc_init_array+0x44>)
 8004e5e:	1b64      	subs	r4, r4, r5
 8004e60:	10a4      	asrs	r4, r4, #2
 8004e62:	42a6      	cmp	r6, r4
 8004e64:	d105      	bne.n	8004e72 <__libc_init_array+0x2e>
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
 8004e68:	00b3      	lsls	r3, r6, #2
 8004e6a:	58eb      	ldr	r3, [r5, r3]
 8004e6c:	4798      	blx	r3
 8004e6e:	3601      	adds	r6, #1
 8004e70:	e7ee      	b.n	8004e50 <__libc_init_array+0xc>
 8004e72:	00b3      	lsls	r3, r6, #2
 8004e74:	58eb      	ldr	r3, [r5, r3]
 8004e76:	4798      	blx	r3
 8004e78:	3601      	adds	r6, #1
 8004e7a:	e7f2      	b.n	8004e62 <__libc_init_array+0x1e>
 8004e7c:	08005008 	.word	0x08005008
 8004e80:	08005008 	.word	0x08005008
 8004e84:	08005008 	.word	0x08005008
 8004e88:	0800500c 	.word	0x0800500c

08004e8c <malloc>:
 8004e8c:	b510      	push	{r4, lr}
 8004e8e:	4b03      	ldr	r3, [pc, #12]	; (8004e9c <malloc+0x10>)
 8004e90:	0001      	movs	r1, r0
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	f000 f80c 	bl	8004eb0 <_malloc_r>
 8004e98:	bd10      	pop	{r4, pc}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	20000004 	.word	0x20000004

08004ea0 <memset>:
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	1812      	adds	r2, r2, r0
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d100      	bne.n	8004eaa <memset+0xa>
 8004ea8:	4770      	bx	lr
 8004eaa:	7019      	strb	r1, [r3, #0]
 8004eac:	3301      	adds	r3, #1
 8004eae:	e7f9      	b.n	8004ea4 <memset+0x4>

08004eb0 <_malloc_r>:
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	b570      	push	{r4, r5, r6, lr}
 8004eb4:	1ccd      	adds	r5, r1, #3
 8004eb6:	439d      	bics	r5, r3
 8004eb8:	3508      	adds	r5, #8
 8004eba:	0006      	movs	r6, r0
 8004ebc:	2d0c      	cmp	r5, #12
 8004ebe:	d21e      	bcs.n	8004efe <_malloc_r+0x4e>
 8004ec0:	250c      	movs	r5, #12
 8004ec2:	42a9      	cmp	r1, r5
 8004ec4:	d81d      	bhi.n	8004f02 <_malloc_r+0x52>
 8004ec6:	0030      	movs	r0, r6
 8004ec8:	f000 f862 	bl	8004f90 <__malloc_lock>
 8004ecc:	4a25      	ldr	r2, [pc, #148]	; (8004f64 <_malloc_r+0xb4>)
 8004ece:	6814      	ldr	r4, [r2, #0]
 8004ed0:	0021      	movs	r1, r4
 8004ed2:	2900      	cmp	r1, #0
 8004ed4:	d119      	bne.n	8004f0a <_malloc_r+0x5a>
 8004ed6:	4c24      	ldr	r4, [pc, #144]	; (8004f68 <_malloc_r+0xb8>)
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <_malloc_r+0x36>
 8004ede:	0030      	movs	r0, r6
 8004ee0:	f000 f844 	bl	8004f6c <_sbrk_r>
 8004ee4:	6020      	str	r0, [r4, #0]
 8004ee6:	0029      	movs	r1, r5
 8004ee8:	0030      	movs	r0, r6
 8004eea:	f000 f83f 	bl	8004f6c <_sbrk_r>
 8004eee:	1c43      	adds	r3, r0, #1
 8004ef0:	d12b      	bne.n	8004f4a <_malloc_r+0x9a>
 8004ef2:	230c      	movs	r3, #12
 8004ef4:	0030      	movs	r0, r6
 8004ef6:	6033      	str	r3, [r6, #0]
 8004ef8:	f000 f84b 	bl	8004f92 <__malloc_unlock>
 8004efc:	e003      	b.n	8004f06 <_malloc_r+0x56>
 8004efe:	2d00      	cmp	r5, #0
 8004f00:	dadf      	bge.n	8004ec2 <_malloc_r+0x12>
 8004f02:	230c      	movs	r3, #12
 8004f04:	6033      	str	r3, [r6, #0]
 8004f06:	2000      	movs	r0, #0
 8004f08:	bd70      	pop	{r4, r5, r6, pc}
 8004f0a:	680b      	ldr	r3, [r1, #0]
 8004f0c:	1b5b      	subs	r3, r3, r5
 8004f0e:	d419      	bmi.n	8004f44 <_malloc_r+0x94>
 8004f10:	2b0b      	cmp	r3, #11
 8004f12:	d903      	bls.n	8004f1c <_malloc_r+0x6c>
 8004f14:	600b      	str	r3, [r1, #0]
 8004f16:	18cc      	adds	r4, r1, r3
 8004f18:	6025      	str	r5, [r4, #0]
 8004f1a:	e003      	b.n	8004f24 <_malloc_r+0x74>
 8004f1c:	684b      	ldr	r3, [r1, #4]
 8004f1e:	428c      	cmp	r4, r1
 8004f20:	d10d      	bne.n	8004f3e <_malloc_r+0x8e>
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	0030      	movs	r0, r6
 8004f26:	f000 f834 	bl	8004f92 <__malloc_unlock>
 8004f2a:	0020      	movs	r0, r4
 8004f2c:	2207      	movs	r2, #7
 8004f2e:	300b      	adds	r0, #11
 8004f30:	1d23      	adds	r3, r4, #4
 8004f32:	4390      	bics	r0, r2
 8004f34:	1ac3      	subs	r3, r0, r3
 8004f36:	d0e7      	beq.n	8004f08 <_malloc_r+0x58>
 8004f38:	425a      	negs	r2, r3
 8004f3a:	50e2      	str	r2, [r4, r3]
 8004f3c:	e7e4      	b.n	8004f08 <_malloc_r+0x58>
 8004f3e:	6063      	str	r3, [r4, #4]
 8004f40:	000c      	movs	r4, r1
 8004f42:	e7ef      	b.n	8004f24 <_malloc_r+0x74>
 8004f44:	000c      	movs	r4, r1
 8004f46:	6849      	ldr	r1, [r1, #4]
 8004f48:	e7c3      	b.n	8004ed2 <_malloc_r+0x22>
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	1cc4      	adds	r4, r0, #3
 8004f4e:	439c      	bics	r4, r3
 8004f50:	42a0      	cmp	r0, r4
 8004f52:	d0e1      	beq.n	8004f18 <_malloc_r+0x68>
 8004f54:	1a21      	subs	r1, r4, r0
 8004f56:	0030      	movs	r0, r6
 8004f58:	f000 f808 	bl	8004f6c <_sbrk_r>
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d1db      	bne.n	8004f18 <_malloc_r+0x68>
 8004f60:	e7c7      	b.n	8004ef2 <_malloc_r+0x42>
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	20000088 	.word	0x20000088
 8004f68:	2000008c 	.word	0x2000008c

08004f6c <_sbrk_r>:
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	b570      	push	{r4, r5, r6, lr}
 8004f70:	4c06      	ldr	r4, [pc, #24]	; (8004f8c <_sbrk_r+0x20>)
 8004f72:	0005      	movs	r5, r0
 8004f74:	0008      	movs	r0, r1
 8004f76:	6023      	str	r3, [r4, #0]
 8004f78:	f7ff feca 	bl	8004d10 <_sbrk>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d103      	bne.n	8004f88 <_sbrk_r+0x1c>
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d000      	beq.n	8004f88 <_sbrk_r+0x1c>
 8004f86:	602b      	str	r3, [r5, #0]
 8004f88:	bd70      	pop	{r4, r5, r6, pc}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	20000138 	.word	0x20000138

08004f90 <__malloc_lock>:
 8004f90:	4770      	bx	lr

08004f92 <__malloc_unlock>:
 8004f92:	4770      	bx	lr

08004f94 <_init>:
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9a:	bc08      	pop	{r3}
 8004f9c:	469e      	mov	lr, r3
 8004f9e:	4770      	bx	lr

08004fa0 <_fini>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa6:	bc08      	pop	{r3}
 8004fa8:	469e      	mov	lr, r3
 8004faa:	4770      	bx	lr
